// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/yui-config.js
// ----------------------------------------------------------------------------------------

YUI_CONFIG = {
  base: "/universal/yui3/3.10.1/",
  allowRollup: false,
  combine: false,
  fetchCSS: false,
  bootstrap: false
};

SQUARESPACE_ROLLUPS = [ ];


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/yui-base/yui-base.js
// ----------------------------------------------------------------------------------------

/**
The YUI module contains the components required for building the YUI seed file.
This includes the script loading mechanism, a simple queue, and the core
utilities for the library.

@module yui
@main yui
@submodule yui-base
**/

/*jshint eqeqeq: false*/
if (typeof YUI != 'undefined') {
    YUI._YUI = YUI;
}

/**
The YUI global namespace object. This is the constructor for all YUI instances.

This is a self-instantiable factory function, meaning you don't need to precede
it with the `new` operator. You can invoke it directly like this:

    YUI().use('*', function (Y) {
        // Y is a new YUI instance.
    });

But it also works like this:

    var Y = YUI();

The `YUI` constructor accepts an optional config object, like this:

    YUI({
        debug: true,
        combine: false
    }).use('node', function (Y) {
        // Y.Node is ready to use.
    });

See the API docs for the <a href="config.html">Config</a> class for the complete
list of supported configuration properties accepted by the YUI constuctor.

If a global `YUI` object is already defined, the existing YUI object will not be
overwritten, to ensure that defined namespaces are preserved.

Each YUI instance has full custom event support, but only if the event system is
available.

@class YUI
@uses EventTarget
@constructor
@global
@param {Object} [config]* Zero or more optional configuration objects. Config
    values are stored in the `Y.config` property. See the
    <a href="config.html">Config</a> docs for the list of supported properties.
**/

    /*global YUI*/
    /*global YUI_config*/
    var YUI = function() {
        var i = 0,
            Y = this,
            args = arguments,
            l = args.length,
            instanceOf = function(o, type) {
                return (o && o.hasOwnProperty && (o instanceof type));
            },
            gconf = (typeof YUI_config !== 'undefined') && YUI_config;

        if (!(instanceOf(Y, YUI))) {
            Y = new YUI();
        } else {
            // set up the core environment
            Y._init();

            /**
            Master configuration that might span multiple contexts in a non-
            browser environment. It is applied first to all instances in all
            contexts.

            @example

                YUI.GlobalConfig = {
                    filter: 'debug'
                };

                YUI().use('node', function (Y) {
                    // debug files used here
                });

                YUI({
                    filter: 'min'
                }).use('node', function (Y) {
                    // min files used here
                });

            @property {Object} GlobalConfig
            @global
            @static
            **/
            if (YUI.GlobalConfig) {
                Y.applyConfig(YUI.GlobalConfig);
            }

            /**
            Page-level config applied to all YUI instances created on the
            current page. This is applied after `YUI.GlobalConfig` and before
            any instance-level configuration.

            @example

                // Single global var to include before YUI seed file
                YUI_config = {
                    filter: 'debug'
                };

                YUI().use('node', function (Y) {
                    // debug files used here
                });

                YUI({
                    filter: 'min'
                }).use('node', function (Y) {
                    // min files used here
                });

            @property {Object} YUI_config
            @global
            **/
            if (gconf) {
                Y.applyConfig(gconf);
            }

            // bind the specified additional modules for this instance
            if (!l) {
                Y._setup();
            }
        }

        if (l) {
            // Each instance can accept one or more configuration objects.
            // These are applied after YUI.GlobalConfig and YUI_Config,
            // overriding values set in those config files if there is a
            // matching property.
            for (; i < l; i++) {
                Y.applyConfig(args[i]);
            }

            Y._setup();
        }

        Y.instanceOf = instanceOf;

        return Y;
    };

(function() {

    var proto, prop,
        VERSION = '3.10.1',
        PERIOD = '.',
        BASE = 'http://yui.yahooapis.com/',
        /*
            These CSS class names can't be generated by
            getClassName since it is not available at the
            time they are being used.
        */
        DOC_LABEL = 'yui3-js-enabled',
        CSS_STAMP_EL = 'yui3-css-stamp',
        NOOP = function() {},
        SLICE = Array.prototype.slice,
        APPLY_TO_AUTH = { 'io.xdrReady': 1,   // the functions applyTo
                          'io.xdrResponse': 1,   // can call. this should
                          'SWF.eventHandler': 1 }, // be done at build time
        hasWin = (typeof window != 'undefined'),
        win = (hasWin) ? window : null,
        doc = (hasWin) ? win.document : null,
        docEl = doc && doc.documentElement,
        docClass = docEl && docEl.className,
        instances = {},
        time = new Date().getTime(),
        add = function(el, type, fn, capture) {
            if (el && el.addEventListener) {
                el.addEventListener(type, fn, capture);
            } else if (el && el.attachEvent) {
                el.attachEvent('on' + type, fn);
            }
        },
        remove = function(el, type, fn, capture) {
            if (el && el.removeEventListener) {
                // this can throw an uncaught exception in FF
                try {
                    el.removeEventListener(type, fn, capture);
                } catch (ex) {}
            } else if (el && el.detachEvent) {
                el.detachEvent('on' + type, fn);
            }
        },
        handleLoad = function() {
            YUI.Env.windowLoaded = true;
            YUI.Env.DOMReady = true;
            if (hasWin) {
                remove(window, 'load', handleLoad);
            }
        },
        getLoader = function(Y, o) {
            var loader = Y.Env._loader,
                lCore = [ 'loader-base' ],
                G_ENV = YUI.Env,
                mods = G_ENV.mods;

            if (loader) {
                //loader._config(Y.config);
                loader.ignoreRegistered = false;
                loader.onEnd = null;
                loader.data = null;
                loader.required = [];
                loader.loadType = null;
            } else {
                loader = new Y.Loader(Y.config);
                Y.Env._loader = loader;
            }
            if (mods && mods.loader) {
                lCore = [].concat(lCore, YUI.Env.loaderExtras);
            }
            YUI.Env.core = Y.Array.dedupe([].concat(YUI.Env.core, lCore));

            return loader;
        },

        clobber = function(r, s) {
            for (var i in s) {
                if (s.hasOwnProperty(i)) {
                    r[i] = s[i];
                }
            }
        },

        ALREADY_DONE = { success: true };

//  Stamp the documentElement (HTML) with a class of "yui-loaded" to
//  enable styles that need to key off of JS being enabled.
if (docEl && docClass.indexOf(DOC_LABEL) == -1) {
    if (docClass) {
        docClass += ' ';
    }
    docClass += DOC_LABEL;
    docEl.className = docClass;
}

if (VERSION.indexOf('@') > -1) {
    VERSION = '3.5.0'; // dev time hack for cdn test
}

proto = {
    /**
    Applies a new configuration object to the config of this YUI instance. This
    will merge new group/module definitions, and will also update the loader
    cache if necessary. Updating `Y.config` directly will not update the cache.

    @method applyConfig
    @param {Object} o the configuration object.
    @since 3.2.0
    **/
    applyConfig: function(o) {

        o = o || NOOP;

        var attr,
            name,
            // detail,
            config = this.config,
            mods = config.modules,
            groups = config.groups,
            aliases = config.aliases,
            loader = this.Env._loader;

        for (name in o) {
            if (o.hasOwnProperty(name)) {
                attr = o[name];
                if (mods && name == 'modules') {
                    clobber(mods, attr);
                } else if (aliases && name == 'aliases') {
                    clobber(aliases, attr);
                } else if (groups && name == 'groups') {
                    clobber(groups, attr);
                } else if (name == 'win') {
                    config[name] = (attr && attr.contentWindow) || attr;
                    config.doc = config[name] ? config[name].document : null;
                } else if (name == '_yuid') {
                    // preserve the guid
                } else {
                    config[name] = attr;
                }
            }
        }

        if (loader) {
            loader._config(o);
        }

    },

    /**
    Old way to apply a config to this instance (calls `applyConfig` under the
    hood).

    @private
    @method _config
    @param {Object} o The config to apply
    **/
    _config: function(o) {
        this.applyConfig(o);
    },

    /**
    Initializes this YUI instance.

    @private
    @method _init
    **/
    _init: function() {
        var filter, el,
            Y = this,
            G_ENV = YUI.Env,
            Env = Y.Env,
            prop;

        /**
        The version number of this YUI instance.

        This value is typically updated by a script when a YUI release is built,
        so it may not reflect the correct version number when YUI is run from
        the development source tree.

        @property {String} version
        **/
        Y.version = VERSION;

        if (!Env) {
            Y.Env = {
                core: ['get', 'features', 'intl-base', 'yui-log', 'yui-later'],
                loaderExtras: ['loader-rollup', 'loader-yui3'],
                mods: {}, // flat module map
                versions: {}, // version module map
                base: BASE,
                cdn: BASE + VERSION + '/build/',
                // bootstrapped: false,
                _idx: 0,
                _used: {},
                _attached: {},
                _missed: [],
                _yidx: 0,
                _uidx: 0,
                _guidp: 'y',
                _loaded: {},
                // serviced: {},
                // Regex in English:
                // I'll start at the \b(simpleyui).
                // 1. Look in the test string for "simpleyui" or "yui" or
                //    "yui-base" or "yui-davglass" or "yui-foobar" that comes after a word break.  That is, it
                //    can't match "foyui" or "i_heart_simpleyui". This can be anywhere in the string.
                // 2. After #1 must come a forward slash followed by the string matched in #1, so
                //    "yui-base/yui-base" or "simpleyui/simpleyui" or "yui-pants/yui-pants".
                // 3. The second occurence of the #1 token can optionally be followed by "-debug" or "-min",
                //    so "yui/yui-min", "yui/yui-debug", "yui-base/yui-base-debug". NOT "yui/yui-tshirt".
                // 4. This is followed by ".js", so "yui/yui.js", "simpleyui/simpleyui-min.js"
                // 0. Going back to the beginning, now. If all that stuff in 1-4 comes after a "?" in the string,
                //    then capture the junk between the LAST "&" and the string in 1-4.  So
                //    "blah?foo/yui/yui.js" will capture "foo/" and "blah?some/thing.js&3.3.0/build/yui-davglass/yui-davglass.js"
                //    will capture "3.3.0/build/"
                //
                // Regex Exploded:
                // (?:\?             Find a ?
                //   (?:[^&]*&)      followed by 0..n characters followed by an &
                //   *               in fact, find as many sets of characters followed by a & as you can
                //   ([^&]*)         capture the stuff after the last & in \1
                // )?                but it's ok if all this ?junk&more_junk stuff isn't even there
                // \b(simpleyui|     after a word break find either the string "simpleyui" or
                //    yui(?:-\w+)?   the string "yui" optionally followed by a -, then more characters
                // )                 and store the simpleyui or yui-* string in \2
                // \/\2              then comes a / followed by the simpleyui or yui-* string in \2
                // (?:-(min|debug))? optionally followed by "-min" or "-debug"
                // .js               and ending in ".js"
                _BASE_RE: /(?:\?(?:[^&]*&)*([^&]*))?\b(simpleyui|yui(?:-\w+)?)\/\2(?:-(min|debug))?\.js/,
                parseBasePath: function(src, pattern) {
                    var match = src.match(pattern),
                        path, filter;

                    if (match) {
                        path = RegExp.leftContext || src.slice(0, src.indexOf(match[0]));

                        // this is to set up the path to the loader.  The file
                        // filter for loader should match the yui include.
                        filter = match[3];

                        // extract correct path for mixed combo urls
                        // http://yuilibrary.com/projects/yui3/ticket/2528423
                        if (match[1]) {
                            path += '?' + match[1];
                        }
                        path = {
                            filter: filter,
                            path: path
                        };
                    }
                    return path;
                },
                getBase: G_ENV && G_ENV.getBase ||
                        function(pattern) {
                            var nodes = (doc && doc.getElementsByTagName('script')) || [],
                                path = Env.cdn, parsed,
                                i, len, src;

                            for (i = 0, len = nodes.length; i < len; ++i) {
                                src = nodes[i].src;
                                if (src) {
                                    parsed = Y.Env.parseBasePath(src, pattern);
                                    if (parsed) {
                                        filter = parsed.filter;
                                        path = parsed.path;
                                        break;
                                    }
                                }
                            }

                            // use CDN default
                            return path;
                        }

            };

            Env = Y.Env;

            Env._loaded[VERSION] = {};

            if (G_ENV && Y !== YUI) {
                Env._yidx = ++G_ENV._yidx;
                Env._guidp = ('yui_' + VERSION + '_' +
                             Env._yidx + '_' + time).replace(/[^a-z0-9_]+/g, '_');
            } else if (YUI._YUI) {

                G_ENV = YUI._YUI.Env;
                Env._yidx += G_ENV._yidx;
                Env._uidx += G_ENV._uidx;

                for (prop in G_ENV) {
                    if (!(prop in Env)) {
                        Env[prop] = G_ENV[prop];
                    }
                }

                delete YUI._YUI;
            }

            Y.id = Y.stamp(Y);
            instances[Y.id] = Y;

        }

        Y.constructor = YUI;

        // configuration defaults
        Y.config = Y.config || {
            bootstrap: true,
            cacheUse: true,
            debug: true,
            doc: doc,
            fetchCSS: true,
            throwFail: true,
            useBrowserConsole: true,
            useNativeES5: true,
            win: win,
            global: Function('return this')()
        };

        //Register the CSS stamp element
        if (doc && !doc.getElementById(CSS_STAMP_EL)) {
            el = doc.createElement('div');
            el.innerHTML = '<div id="' + CSS_STAMP_EL + '" style="position: absolute !important; visibility: hidden !important"></div>';
            YUI.Env.cssStampEl = el.firstChild;
            if (doc.body) {
                doc.body.appendChild(YUI.Env.cssStampEl);
            } else {
                docEl.insertBefore(YUI.Env.cssStampEl, docEl.firstChild);
            }
        } else if (doc && doc.getElementById(CSS_STAMP_EL) && !YUI.Env.cssStampEl) {
            YUI.Env.cssStampEl = doc.getElementById(CSS_STAMP_EL);
        }

        Y.config.lang = Y.config.lang || 'en-US';

        Y.config.base = YUI.config.base || Y.Env.getBase(Y.Env._BASE_RE);

        if (!filter || (!('mindebug').indexOf(filter))) {
            filter = 'min';
        }
        filter = (filter) ? '-' + filter : filter;
        Y.config.loaderPath = YUI.config.loaderPath || 'loader/loader' + filter + '.js';

    },

    /**
    Finishes the instance setup. Attaches whatever YUI modules were defined
    at the time that this instance was created.

    @method _setup
    @private
    **/
    _setup: function() {
        var i, Y = this,
            core = [],
            mods = YUI.Env.mods,
            extras = Y.config.core || [].concat(YUI.Env.core); //Clone it..

        for (i = 0; i < extras.length; i++) {
            if (mods[extras[i]]) {
                core.push(extras[i]);
            }
        }

        Y._attach(['yui-base']);
        Y._attach(core);

        if (Y.Loader) {
            getLoader(Y);
        }

    },

    /**
    Executes the named method on the specified YUI instance if that method is
    whitelisted.

    @method applyTo
    @param {String} id YUI instance id.
    @param {String} method Name of the method to execute. For example:
        'Object.keys'.
    @param {Array} args Arguments to apply to the method.
    @return {Mixed} Return value from the applied method, or `null` if the
        specified instance was not found or the method was not whitelisted.
    **/
    applyTo: function(id, method, args) {
        if (!(method in APPLY_TO_AUTH)) {
            this.log(method + ': applyTo not allowed', 'warn', 'yui');
            return null;
        }

        var instance = instances[id], nest, m, i;
        if (instance) {
            nest = method.split('.');
            m = instance;
            for (i = 0; i < nest.length; i = i + 1) {
                m = m[nest[i]];
                if (!m) {
                    this.log('applyTo not found: ' + method, 'warn', 'yui');
                }
            }
            return m && m.apply(instance, args);
        }

        return null;
    },

/**
Registers a YUI module and makes it available for use in a `YUI().use()` call or
as a dependency for other modules.

The easiest way to create a first-class YUI module is to use
<a href="http://yui.github.com/shifter/">Shifter</a>, the YUI component build
tool.

Shifter will automatically wrap your module code in a `YUI.add()` call along
with any configuration info required for the module.

@example

    YUI.add('davglass', function (Y) {
        Y.davglass = function () {
        };
    }, '3.4.0', {
        requires: ['harley-davidson', 'mt-dew']
    });

@method add
@param {String} name Module name.
@param {Function} fn Function containing module code. This function will be
    executed whenever the module is attached to a specific YUI instance.

    @param {YUI} fn.Y The YUI instance to which this module is attached.
    @param {String} fn.name Name of the module

@param {String} version Module version number. This is currently used only for
    informational purposes, and is not used internally by YUI.

@param {Object} [config] Module config.
    @param {Array} [config.requires] Array of other module names that must be
        attached before this module can be attached.
    @param {Array} [config.optional] Array of optional module names that should
        be attached before this module is attached if they've already been
        loaded. If the `loadOptional` YUI option is `true`, optional modules
        that have not yet been loaded will be loaded just as if they were hard
        requirements.
    @param {Array} [config.use] Array of module names that are included within
        or otherwise provided by this module, and which should be attached
        automatically when this module is attached. This makes it possible to
        create "virtual rollup" modules that simply attach a collection of other
        modules or submodules.

@return {YUI} This YUI instance.
**/
    add: function(name, fn, version, details) {
        details = details || {};
        var env = YUI.Env,
            mod = {
                name: name,
                fn: fn,
                version: version,
                details: details
            },
            //Instance hash so we don't apply it to the same instance twice
            applied = {},
            loader, inst,
            i, versions = env.versions;

        env.mods[name] = mod;
        versions[version] = versions[version] || {};
        versions[version][name] = mod;

        for (i in instances) {
            if (instances.hasOwnProperty(i)) {
                inst = instances[i];
                if (!applied[inst.id]) {
                    applied[inst.id] = true;
                    loader = inst.Env._loader;
                    if (loader) {
                        if (!loader.moduleInfo[name] || loader.moduleInfo[name].temp) {
                            loader.addModule(details, name);
                        }
                    }
                }
            }
        }

        return this;
    },

    /**
    Executes the callback function associated with each required module,
    attaching the module to this YUI instance.

    @method _attach
    @param {Array} r The array of modules to attach
    @param {Boolean} [moot=false] If `true`, don't throw a warning if the module
        is not attached.
    @private
    **/
    _attach: function(r, moot) {
        var i, name, mod, details, req, use, after,
            mods = YUI.Env.mods,
            aliases = YUI.Env.aliases,
            Y = this, j,
            cache = YUI.Env._renderedMods,
            loader = Y.Env._loader,
            done = Y.Env._attached,
            len = r.length, loader, def, go,
            c = [];

        //Check for conditional modules (in a second+ instance) and add their requirements
        //TODO I hate this entire method, it needs to be fixed ASAP (3.5.0) ^davglass
        for (i = 0; i < len; i++) {
            name = r[i];
            mod = mods[name];
            c.push(name);
            if (loader && loader.conditions[name]) {
                for (j in loader.conditions[name]) {
                    if (loader.conditions[name].hasOwnProperty(j)) {
                        def = loader.conditions[name][j];
                        go = def && ((def.ua && Y.UA[def.ua]) || (def.test && def.test(Y)));
                        if (go) {
                            c.push(def.name);
                        }
                    }
                }
            }
        }
        r = c;
        len = r.length;

        for (i = 0; i < len; i++) {
            if (!done[r[i]]) {
                name = r[i];
                mod = mods[name];

                if (aliases && aliases[name] && !mod) {
                    Y._attach(aliases[name]);
                    continue;
                }
                if (!mod) {
                    if (loader && loader.moduleInfo[name]) {
                        mod = loader.moduleInfo[name];
                        moot = true;
                    }


                    //if (!loader || !loader.moduleInfo[name]) {
                    //if ((!loader || !loader.moduleInfo[name]) && !moot) {
                    if (!moot && name) {
                        if ((name.indexOf('skin-') === -1) && (name.indexOf('css') === -1)) {
                            Y.Env._missed.push(name);
                            Y.Env._missed = Y.Array.dedupe(Y.Env._missed);
                            Y.message('NOT loaded: ' + name, 'warn', 'yui');
                        }
                    }
                } else {
                    done[name] = true;
                    //Don't like this, but in case a mod was asked for once, then we fetch it
                    //We need to remove it from the missed list ^davglass
                    for (j = 0; j < Y.Env._missed.length; j++) {
                        if (Y.Env._missed[j] === name) {
                            Y.message('Found: ' + name + ' (was reported as missing earlier)', 'warn', 'yui');
                            Y.Env._missed.splice(j, 1);
                        }
                    }
                    /*
                        If it's a temp module, we need to redo it's requirements if it's already loaded
                        since it may have been loaded by another instance and it's dependencies might
                        have been redefined inside the fetched file.
                    */
                    if (loader && cache && cache[name] && cache[name].temp) {
                        loader.getRequires(cache[name]);
                        req = [];
                        for (j in loader.moduleInfo[name].expanded_map) {
                            if (loader.moduleInfo[name].expanded_map.hasOwnProperty(j)) {
                                req.push(j);
                            }
                        }
                        Y._attach(req);
                    }

                    details = mod.details;
                    req = details.requires;
                    use = details.use;
                    after = details.after;
                    //Force Intl load if there is a language (Loader logic) @todo fix this shit
                    if (details.lang) {
                        req = req || [];
                        req.unshift('intl');
                    }

                    if (req) {
                        for (j = 0; j < req.length; j++) {
                            if (!done[req[j]]) {
                                if (!Y._attach(req)) {
                                    return false;
                                }
                                break;
                            }
                        }
                    }

                    if (after) {
                        for (j = 0; j < after.length; j++) {
                            if (!done[after[j]]) {
                                if (!Y._attach(after, true)) {
                                    return false;
                                }
                                break;
                            }
                        }
                    }

                    if (mod.fn) {
                            if (Y.config.throwFail) {
                                mod.fn(Y, name);
                            } else {
                                try {
                                    mod.fn(Y, name);
                                } catch (e) {
                                    Y.error('Attach error: ' + name, e, name);
                                return false;
                            }
                        }
                    }

                    if (use) {
                        for (j = 0; j < use.length; j++) {
                            if (!done[use[j]]) {
                                if (!Y._attach(use)) {
                                    return false;
                                }
                                break;
                            }
                        }
                    }



                }
            }
        }

        return true;
    },

    /**
    Delays the `use` callback until another event has taken place such as
    `window.onload`, `domready`, `contentready`, or `available`.

    @private
    @method _delayCallback
    @param {Function} cb The original `use` callback.
    @param {String|Object} until Either an event name ('load', 'domready', etc.)
        or an object containing event/args keys for contentready/available.
    @return {Function}
    **/
    _delayCallback: function(cb, until) {

        var Y = this,
            mod = ['event-base'];

        until = (Y.Lang.isObject(until) ? until : { event: until });

        if (until.event === 'load') {
            mod.push('event-synthetic');
        }

        return function() {
            var args = arguments;
            Y._use(mod, function() {
                Y.on(until.event, function() {
                    args[1].delayUntil = until.event;
                    cb.apply(Y, args);
                }, until.args);
            });
        };
    },

    /**
    Attaches one or more modules to this YUI instance. When this is executed,
    the requirements of the desired modules are analyzed, and one of several
    things can happen:


      * All required modules have already been loaded, and just need to be
        attached to this YUI instance. In this case, the `use()` callback will
        be executed synchronously after the modules are attached.

      * One or more modules have not yet been loaded, or the Get utility is not
        available, or the `bootstrap` config option is `false`. In this case,
        a warning is issued indicating that modules are missing, but all
        available modules will still be attached and the `use()` callback will
        be executed synchronously.

      * One or more modules are missing and the Loader is not available but the
        Get utility is, and `bootstrap` is not `false`. In this case, the Get
        utility will be used to load the Loader, and we will then proceed to
        the following state:

      * One or more modules are missing and the Loader is available. In this
        case, the Loader will be used to resolve the dependency tree for the
        missing modules and load them and their dependencies. When the Loader is
        finished loading modules, the `use()` callback will be executed
        asynchronously.

    @example

        // Loads and attaches dd and its dependencies.
        YUI().use('dd', function (Y) {
            // ...
        });

        // Loads and attaches dd and node as well as all of their dependencies.
        YUI().use(['dd', 'node'], function (Y) {
            // ...
        });

        // Attaches all modules that have already been loaded.
        YUI().use('*', function (Y) {
            // ...
        });

        // Attaches a gallery module.
        YUI().use('gallery-yql', function (Y) {
            // ...
        });

        // Attaches a YUI 2in3 module.
        YUI().use('yui2-datatable', function (Y) {
            // ...
        });

    @method use
    @param {String|Array} modules* One or more module names to attach.
    @param {Function} [callback] Callback function to be executed once all
        specified modules and their dependencies have been attached.
    @param {YUI} callback.Y The YUI instance created for this sandbox.
    @param {Object} callback.status Object containing `success`, `msg` and
        `data` properties.
    @chainable
    **/
    use: function() {
        var args = SLICE.call(arguments, 0),
            callback = args[args.length - 1],
            Y = this,
            i = 0,
            name,
            Env = Y.Env,
            provisioned = true;

        // The last argument supplied to use can be a load complete callback
        if (Y.Lang.isFunction(callback)) {
            args.pop();
            if (Y.config.delayUntil) {
                callback = Y._delayCallback(callback, Y.config.delayUntil);
            }
        } else {
            callback = null;
        }
        if (Y.Lang.isArray(args[0])) {
            args = args[0];
        }

        if (Y.config.cacheUse) {
            while ((name = args[i++])) {
                if (!Env._attached[name]) {
                    provisioned = false;
                    break;
                }
            }

            if (provisioned) {
                if (args.length) {
                }
                Y._notify(callback, ALREADY_DONE, args);
                return Y;
            }
        }

        if (Y._loading) {
            Y._useQueue = Y._useQueue || new Y.Queue();
            Y._useQueue.add([args, callback]);
        } else {
            Y._use(args, function(Y, response) {
                Y._notify(callback, response, args);
            });
        }

        return Y;
    },

    /**
    Handles Loader notifications about attachment/load errors.

    @method _notify
    @param {Function} callback Callback to pass to `Y.config.loadErrorFn`.
    @param {Object} response Response returned from Loader.
    @param {Array} args Arguments passed from Loader.
    @private
    **/
    _notify: function(callback, response, args) {
        if (!response.success && this.config.loadErrorFn) {
            this.config.loadErrorFn.call(this, this, callback, response, args);
        } else if (callback) {
            if (this.Env._missed && this.Env._missed.length) {
                response.msg = 'Missing modules: ' + this.Env._missed.join();
                response.success = false;
            }
            if (this.config.throwFail) {
                callback(this, response);
            } else {
                try {
                    callback(this, response);
                } catch (e) {
                    this.error('use callback error', e, args);
                }
            }
        }
    },

    /**
    Called from the `use` method queue to ensure that only one set of loading
    logic is performed at a time.

    @method _use
    @param {String} args* One or more modules to attach.
    @param {Function} [callback] Function to call once all required modules have
        been attached.
    @private
    **/
    _use: function(args, callback) {

        if (!this.Array) {
            this._attach(['yui-base']);
        }

        var len, loader, handleBoot,
            Y = this,
            G_ENV = YUI.Env,
            mods = G_ENV.mods,
            Env = Y.Env,
            used = Env._used,
            aliases = G_ENV.aliases,
            queue = G_ENV._loaderQueue,
            firstArg = args[0],
            YArray = Y.Array,
            config = Y.config,
            boot = config.bootstrap,
            missing = [],
            i,
            r = [],
            ret = true,
            fetchCSS = config.fetchCSS,
            process = function(names, skip) {

                var i = 0, a = [], name, len, m, req, use;

                if (!names.length) {
                    return;
                }

                if (aliases) {
                    len = names.length;
                    for (i = 0; i < len; i++) {
                        if (aliases[names[i]] && !mods[names[i]]) {
                            a = [].concat(a, aliases[names[i]]);
                        } else {
                            a.push(names[i]);
                        }
                    }
                    names = a;
                }

                len = names.length;

                for (i = 0; i < len; i++) {
                    name = names[i];
                    if (!skip) {
                        r.push(name);
                    }

                    // only attach a module once
                    if (used[name]) {
                        continue;
                    }

                    m = mods[name];
                    req = null;
                    use = null;

                    if (m) {
                        used[name] = true;
                        req = m.details.requires;
                        use = m.details.use;
                    } else {
                        // CSS files don't register themselves, see if it has
                        // been loaded
                        if (!G_ENV._loaded[VERSION][name]) {
                            missing.push(name);
                        } else {
                            used[name] = true; // probably css
                        }
                    }

                    // make sure requirements are attached
                    if (req && req.length) {
                        process(req);
                    }

                    // make sure we grab the submodule dependencies too
                    if (use && use.length) {
                        process(use, 1);
                    }
                }

            },

            handleLoader = function(fromLoader) {
                var response = fromLoader || {
                        success: true,
                        msg: 'not dynamic'
                    },
                    redo, origMissing,
                    ret = true,
                    data = response.data;

                Y._loading = false;

                if (data) {
                    origMissing = missing;
                    missing = [];
                    r = [];
                    process(data);
                    redo = missing.length;
                    if (redo) {
                        if ([].concat(missing).sort().join() ==
                                origMissing.sort().join()) {
                            redo = false;
                        }
                    }
                }

                if (redo && data) {
                    Y._loading = true;
                    Y._use(missing, function() {
                        if (Y._attach(data)) {
                            Y._notify(callback, response, data);
                        }
                    });
                } else {
                    if (data) {
                        ret = Y._attach(data);
                    }
                    if (ret) {
                        Y._notify(callback, response, args);
                    }
                }

                if (Y._useQueue && Y._useQueue.size() && !Y._loading) {
                    Y._use.apply(Y, Y._useQueue.next());
                }

            };


        // YUI().use('*'); // bind everything available
        if (firstArg === '*') {
            args = [];
            for (i in mods) {
                if (mods.hasOwnProperty(i)) {
                    args.push(i);
                }
            }
            ret = Y._attach(args);
            if (ret) {
                handleLoader();
            }
            return Y;
        }

        if ((mods.loader || mods['loader-base']) && !Y.Loader) {
            Y._attach(['loader' + ((!mods.loader) ? '-base' : '')]);
        }


        // use loader to expand dependencies and sort the
        // requirements if it is available.
        if (boot && Y.Loader && args.length) {
            loader = getLoader(Y);
            loader.require(args);
            loader.ignoreRegistered = true;
            loader._boot = true;
            loader.calculate(null, (fetchCSS) ? null : 'js');
            args = loader.sorted;
            loader._boot = false;
        }

        process(args);

        len = missing.length;


        if (len) {
            missing = YArray.dedupe(missing);
            len = missing.length;
        }


        // dynamic load
        if (boot && len && Y.Loader) {
            Y._loading = true;
            loader = getLoader(Y);
            loader.onEnd = handleLoader;
            loader.context = Y;
            loader.data = args;
            loader.ignoreRegistered = false;
            loader.require(missing);
            loader.insert(null, (fetchCSS) ? null : 'js');

        } else if (boot && len && Y.Get && !Env.bootstrapped) {

            Y._loading = true;

            handleBoot = function() {
                Y._loading = false;
                queue.running = false;
                Env.bootstrapped = true;
                G_ENV._bootstrapping = false;
                if (Y._attach(['loader'])) {
                    Y._use(args, callback);
                }
            };

            if (G_ENV._bootstrapping) {
                queue.add(handleBoot);
            } else {
                G_ENV._bootstrapping = true;
                Y.Get.script(config.base + config.loaderPath, {
                    onEnd: handleBoot
                });
            }

        } else {
            ret = Y._attach(args);
            if (ret) {
                handleLoader();
            }
        }

        return Y;
    },


    /**
    Utility method for safely creating namespaces if they don't already exist.
    May be called statically on the YUI global object or as a method on a YUI
    instance.

    When called statically, a namespace will be created on the YUI global
    object:

        // Create `YUI.your.namespace.here` as nested objects, preserving any
        // objects that already exist instead of overwriting them.
        YUI.namespace('your.namespace.here');

    When called as a method on a YUI instance, a namespace will be created on
    that instance:

        // Creates `Y.property.package`.
        Y.namespace('property.package');

    Dots in the input string cause `namespace` to create nested objects for each
    token. If any part of the requested namespace already exists, the current
    object will be left in place and will not be overwritten. This allows
    multiple calls to `namespace` to preserve existing namespaced properties.

    If the first token in the namespace string is "YAHOO", that token is
    discarded. This is legacy behavior for backwards compatibility with YUI 2.

    Be careful with namespace tokens. Reserved words may work in some browsers
    and not others. For instance, the following will fail in some browsers
    because the supported version of JavaScript reserves the word "long":

        Y.namespace('really.long.nested.namespace');

    Note: If you pass multiple arguments to create multiple namespaces, only the
    last one created is returned from this function.

    @method namespace
    @param {String} namespace* One or more namespaces to create.
    @return {Object} Reference to the last namespace object created.
    **/
    namespace: function() {
        var a = arguments, o, i = 0, j, d, arg;

        for (; i < a.length; i++) {
            o = this; //Reset base object per argument or it will get reused from the last
            arg = a[i];
            if (arg.indexOf(PERIOD) > -1) { //Skip this if no "." is present
                d = arg.split(PERIOD);
                for (j = (d[0] == 'YAHOO') ? 1 : 0; j < d.length; j++) {
                    o[d[j]] = o[d[j]] || {};
                    o = o[d[j]];
                }
            } else {
                o[arg] = o[arg] || {};
                o = o[arg]; //Reset base object to the new object so it's returned
            }
        }
        return o;
    },

    // this is replaced if the log module is included
    log: NOOP,
    message: NOOP,
    // this is replaced if the dump module is included
    dump: function (o) { return ''+o; },

    /**
    Reports an error.

    The reporting mechanism is controlled by the `throwFail` configuration
    attribute. If `throwFail` is falsy, the message is logged. If `throwFail` is
    truthy, a JS exception is thrown.

    If an `errorFn` is specified in the config it must return `true` to indicate
    that the exception was handled and keep it from being thrown.

    @method error
    @param {String} msg Error message.
    @param {Error|String} [e] JavaScript error object or an error string.
    @param {String} [src] Source of the error (such as the name of the module in
        which the error occurred).
    @chainable
    **/
    error: function(msg, e, src) {
        //TODO Add check for window.onerror here

        var Y = this, ret;

        if (Y.config.errorFn) {
            ret = Y.config.errorFn.apply(Y, arguments);
        }

        if (!ret) {
            throw (e || new Error(msg));
        } else {
            Y.message(msg, 'error', ''+src); // don't scrub this one
        }

        return Y;
    },

    /**
    Generates an id string that is unique among all YUI instances in this
    execution context.

    @method guid
    @param {String} [pre] Prefix.
    @return {String} Unique id.
    **/
    guid: function(pre) {
        var id = this.Env._guidp + '_' + (++this.Env._uidx);
        return (pre) ? (pre + id) : id;
    },

    /**
    Returns a unique id associated with the given object and (if *readOnly* is
    falsy) stamps the object with that id so it can be identified in the future.

    Stamping an object involves adding a `_yuid` property to it that contains
    the object's id. One exception to this is that in Internet Explorer, DOM
    nodes have a `uniqueID` property that contains a browser-generated unique
    id, which will be used instead of a YUI-generated id when available.

    @method stamp
    @param {Object} o Object to stamp.
    @param {Boolean} readOnly If truthy and the given object has not already
        been stamped, the object will not be modified and `null` will be
        returned.
    @return {String} Object's unique id, or `null` if *readOnly* was truthy and
        the given object was not already stamped.
    **/
    stamp: function(o, readOnly) {
        var uid;
        if (!o) {
            return o;
        }

        // IE generates its own unique ID for dom nodes
        // The uniqueID property of a document node returns a new ID
        if (o.uniqueID && o.nodeType && o.nodeType !== 9) {
            uid = o.uniqueID;
        } else {
            uid = (typeof o === 'string') ? o : o._yuid;
        }

        if (!uid) {
            uid = this.guid();
            if (!readOnly) {
                try {
                    o._yuid = uid;
                } catch (e) {
                    uid = null;
                }
            }
        }
        return uid;
    },

    /**
    Destroys this YUI instance.

    @method destroy
    @since 3.3.0
    **/
    destroy: function() {
        var Y = this;
        if (Y.Event) {
            Y.Event._unload();
        }
        delete instances[Y.id];
        delete Y.Env;
        delete Y.config;
    }

    /**
    Safe `instanceof` wrapper that works around a memory leak in IE when the
    object being tested is `window` or `document`.

    Unless you are testing objects that may be `window` or `document`, you
    should use the native `instanceof` operator instead of this method.

    @method instanceOf
    @param {Object} o Object to check.
    @param {Object} type Class to check against.
    @since 3.3.0
    **/
};

    YUI.prototype = proto;

    // inheritance utilities are not available yet
    for (prop in proto) {
        if (proto.hasOwnProperty(prop)) {
            YUI[prop] = proto[prop];
        }
    }

    /**
    Applies a configuration to all YUI instances in this execution context.

    The main use case for this method is in "mashups" where several third-party
    scripts need to write to a global YUI config, but cannot share a single
    centrally-managed config object. This way they can all call
    `YUI.applyConfig({})` instead of overwriting the single global config.

    @example

        YUI.applyConfig({
            modules: {
                davglass: {
                    fullpath: './davglass.js'
                }
            }
        });

        YUI.applyConfig({
            modules: {
                foo: {
                    fullpath: './foo.js'
                }
            }
        });

        YUI().use('davglass', function (Y) {
            // Module davglass will be available here.
        });

    @method applyConfig
    @param {Object} o Configuration object to apply.
    @static
    @since 3.5.0
    **/
    YUI.applyConfig = function(o) {
        if (!o) {
            return;
        }
        //If there is a GlobalConfig, apply it first to set the defaults
        if (YUI.GlobalConfig) {
            this.prototype.applyConfig.call(this, YUI.GlobalConfig);
        }
        //Apply this config to it
        this.prototype.applyConfig.call(this, o);
        //Reset GlobalConfig to the combined config
        YUI.GlobalConfig = this.config;
    };

    // set up the environment
    YUI._init();

    if (hasWin) {
        // add a window load event at load time so we can capture
        // the case where it fires before dynamic loading is
        // complete.
        add(window, 'load', handleLoad);
    } else {
        handleLoad();
    }

    YUI.Env.add = add;
    YUI.Env.remove = remove;

    /*global exports*/
    // Support the CommonJS method for exporting our single global
    if (typeof exports == 'object') {
        exports.YUI = YUI;
        /**
        * Set a method to be called when `Get.script` is called in Node.js
        * `Get` will open the file, then pass it's content and it's path
        * to this method before attaching it. Commonly used for code coverage
        * instrumentation. <strong>Calling this multiple times will only
        * attach the last hook method</strong>. This method is only
        * available in Node.js.
        * @method setLoadHook
        * @static
        * @param {Function} fn The function to set
        * @param {String} fn.data The content of the file
        * @param {String} fn.path The file path of the file
        */
        YUI.setLoadHook = function(fn) {
            YUI._getLoadHook = fn;
        };
        /**
        * Load hook for `Y.Get.script` in Node.js, see `YUI.setLoadHook`
        * @method _getLoadHook
        * @private
        * @param {String} data The content of the file
        * @param {String} path The file path of the file
        */
        YUI._getLoadHook = null;
    }

}());


/**
Config object that contains all of the configuration options for
this `YUI` instance.

This object is supplied by the implementer when instantiating YUI. Some
properties have default values if they are not supplied by the implementer.

This object should not be updated directly because some values are cached. Use
`applyConfig()` to update the config object on a YUI instance that has already
been configured.

@class config
@static
**/

/**
If `true` (the default), YUI will "bootstrap" the YUI Loader and module metadata
if they're needed to load additional dependencies and aren't already available.

Setting this to `false` will prevent YUI from automatically loading the Loader
and module metadata, so you will need to manually ensure that they're available
or handle dependency resolution yourself.

@property {Boolean} bootstrap
@default true
**/

/**

@property {Object} aliases
**/

/**
A hash of module group definitions.

For each group you can specify a list of modules and the base path and
combo spec to use when dynamically loading the modules.

@example

    groups: {
        yui2: {
            // specify whether or not this group has a combo service
            combine: true,

            // The comboSeperator to use with this group's combo handler
            comboSep: ';',

            // The maxURLLength for this server
            maxURLLength: 500,

            // the base path for non-combo paths
            base: 'http://yui.yahooapis.com/2.8.0r4/build/',

            // the path to the combo service
            comboBase: 'http://yui.yahooapis.com/combo?',

            // a fragment to prepend to the path attribute when
            // when building combo urls
            root: '2.8.0r4/build/',

            // the module definitions
            modules:  {
                yui2_yde: {
                    path: "yahoo-dom-event/yahoo-dom-event.js"
                },
                yui2_anim: {
                    path: "animation/animation.js",
                    requires: ['yui2_yde']
                }
            }
        }
    }

@property {Object} groups
**/

/**
Path to the Loader JS file, relative to the `base` path.

This is used to dynamically bootstrap the Loader when it's needed and isn't yet
available.

@property {String} loaderPath
@default "loader/loader-min.js"
**/

/**
If `true`, YUI will attempt to load CSS dependencies and skins. Set this to
`false` to prevent YUI from loading any CSS, or set it to the string `"force"`
to force CSS dependencies to be loaded even if their associated JS modules are
already loaded.

@property {Boolean|String} fetchCSS
@default true
**/

/**
Default gallery version used to build gallery module urls.

@property {String} gallery
@since 3.1.0
**/

/**
Default YUI 2 version used to build YUI 2 module urls.

This is used for intrinsic YUI 2 support via the 2in3 project. Also see the
`2in3` config for pulling different revisions of the wrapped YUI 2 modules.

@property {String} yui2
@default "2.9.0"
@since 3.1.0
**/

/**
Revision number of YUI 2in3 modules that should be used when loading YUI 2in3.

@property {String} 2in3
@default "4"
@since 3.1.0
**/

/**
Alternate console log function that should be used in environments without a
supported native console. This function is executed with the YUI instance as its
`this` object.

@property {Function} logFn
@since 3.1.0
**/

/**
The minimum log level to log messages for. Log levels are defined
incrementally. Messages greater than or equal to the level specified will
be shown. All others will be discarded. The order of log levels in
increasing priority is:

    debug
    info
    warn
    error

@property {String} logLevel
@default 'debug'
@since 3.10.0
**/

/**
Callback to execute when `Y.error()` is called. It receives the error message
and a JavaScript error object if one was provided.

This function is executed with the YUI instance as its `this` object.

Returning `true` from this function will prevent an exception from being thrown.

@property {Function} errorFn
@param {String} errorFn.msg Error message
@param {Object} [errorFn.err] Error object (if one was provided).
@since 3.2.0
**/

/**
A callback to execute when Loader fails to load one or more resources.

This could be because of a script load failure. It could also be because a
module fails to register itself when the `requireRegistration` config is `true`.

If this function is defined, the `use()` callback will only be called when the
loader succeeds. Otherwise, `use()` will always executes unless there was a
JavaScript error when attaching a module.

@property {Function} loadErrorFn
@since 3.3.0
**/

/**
If `true`, Loader will expect all loaded scripts to be first-class YUI modules
that register themselves with the YUI global, and will trigger a failure if a
loaded script does not register a YUI module.

@property {Boolean} requireRegistration
@default false
@since 3.3.0
**/

/**
Cache serviced use() requests.

@property {Boolean} cacheUse
@default true
@since 3.3.0
@deprecated No longer used.
**/

/**
Whether or not YUI should use native ES5 functionality when available for
features like `Y.Array.each()`, `Y.Object()`, etc.

When `false`, YUI will always use its own fallback implementations instead of
relying on ES5 functionality, even when ES5 functionality is available.

@property {Boolean} useNativeES5
@default true
@since 3.5.0
**/

/**
 * Leverage native JSON stringify if the browser has a native
 * implementation.  In general, this is a good idea.  See the Known Issues
 * section in the JSON user guide for caveats.  The default value is true
 * for browsers with native JSON support.
 *
 * @property useNativeJSONStringify
 * @type Boolean
 * @default true
 * @since 3.8.0
 */

 /**
 * Leverage native JSON parse if the browser has a native implementation.
 * In general, this is a good idea.  See the Known Issues section in the
 * JSON user guide for caveats.  The default value is true for browsers with
 * native JSON support.
 *
 * @property useNativeJSONParse
 * @type Boolean
 * @default true
 * @since 3.8.0
 */

/**
Delay the `use` callback until a specific event has passed (`load`, `domready`, `contentready` or `available`)
@property delayUntil
@type String|Object
@since 3.6.0
@example

You can use `load` or `domready` strings by default:

    YUI({
        delayUntil: 'domready'
    }, function (Y) {
        // This will not execute until 'domeready' occurs.
    });

Or you can delay until a node is available (with `available` or `contentready`):

    YUI({
        delayUntil: {
            event: 'available',
            args : '#foo'
        }
    }, function (Y) {
        // This will not execute until a node matching the selector "#foo" is
        // available in the DOM.
    });

@property {Object|String} delayUntil
@since 3.6.0
**/
YUI.add('yui-base', function (Y, NAME) {

/*
 * YUI stub
 * @module yui
 * @submodule yui-base
 */
/**
 * The YUI module contains the components required for building the YUI
 * seed file.  This includes the script loading mechanism, a simple queue,
 * and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * Provides core language utilites and extensions used throughout YUI.
 *
 * @class Lang
 * @static
 */

var L = Y.Lang || (Y.Lang = {}),

STRING_PROTO = String.prototype,
TOSTRING     = Object.prototype.toString,

TYPES = {
    'undefined'        : 'undefined',
    'number'           : 'number',
    'boolean'          : 'boolean',
    'string'           : 'string',
    '[object Function]': 'function',
    '[object RegExp]'  : 'regexp',
    '[object Array]'   : 'array',
    '[object Date]'    : 'date',
    '[object Error]'   : 'error'
},

SUBREGEX        = /\{\s*([^|}]+?)\s*(?:\|([^}]*))?\s*\}/g,
TRIMREGEX       = /^\s+|\s+$/g,
NATIVE_FN_REGEX = /\{\s*\[(?:native code|function)\]\s*\}/i;

// -- Protected Methods --------------------------------------------------------

/**
Returns `true` if the given function appears to be implemented in native code,
`false` otherwise. Will always return `false` -- even in ES5-capable browsers --
if the `useNativeES5` YUI config option is set to `false`.

This isn't guaranteed to be 100% accurate and won't work for anything other than
functions, but it can be useful for determining whether a function like
`Array.prototype.forEach` is native or a JS shim provided by another library.

There's a great article by @kangax discussing certain flaws with this technique:
<http://perfectionkills.com/detecting-built-in-host-methods/>

While his points are valid, it's still possible to benefit from this function
as long as it's used carefully and sparingly, and in such a way that false
negatives have minimal consequences. It's used internally to avoid using
potentially broken non-native ES5 shims that have been added to the page by
other libraries.

@method _isNative
@param {Function} fn Function to test.
@return {Boolean} `true` if _fn_ appears to be native, `false` otherwise.
@static
@protected
@since 3.5.0
**/
L._isNative = function (fn) {
    return !!(Y.config.useNativeES5 && fn && NATIVE_FN_REGEX.test(fn));
};

// -- Public Methods -----------------------------------------------------------

/**
 * Determines whether or not the provided item is an array.
 *
 * Returns `false` for array-like collections such as the function `arguments`
 * collection or `HTMLElement` collections. Use `Y.Array.test()` if you want to
 * test for an array-like collection.
 *
 * @method isArray
 * @param o The object to test.
 * @return {boolean} true if o is an array.
 * @static
 */
L.isArray = L._isNative(Array.isArray) ? Array.isArray : function (o) {
    return L.type(o) === 'array';
};

/**
 * Determines whether or not the provided item is a boolean.
 * @method isBoolean
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is a boolean.
 */
L.isBoolean = function(o) {
    return typeof o === 'boolean';
};

/**
 * Determines whether or not the supplied item is a date instance.
 * @method isDate
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is a date.
 */
L.isDate = function(o) {
    return L.type(o) === 'date' && o.toString() !== 'Invalid Date' && !isNaN(o);
};

/**
 * <p>
 * Determines whether or not the provided item is a function.
 * Note: Internet Explorer thinks certain functions are objects:
 * </p>
 *
 * <pre>
 * var obj = document.createElement("object");
 * Y.Lang.isFunction(obj.getAttribute) // reports false in IE
 * &nbsp;
 * var input = document.createElement("input"); // append to body
 * Y.Lang.isFunction(input.focus) // reports false in IE
 * </pre>
 *
 * <p>
 * You will have to implement additional tests if these functions
 * matter to you.
 * </p>
 *
 * @method isFunction
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is a function.
 */
L.isFunction = function(o) {
    return L.type(o) === 'function';
};

/**
 * Determines whether or not the provided item is null.
 * @method isNull
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is null.
 */
L.isNull = function(o) {
    return o === null;
};

/**
 * Determines whether or not the provided item is a legal number.
 * @method isNumber
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is a number.
 */
L.isNumber = function(o) {
    return typeof o === 'number' && isFinite(o);
};

/**
 * Determines whether or not the provided item is of type object
 * or function. Note that arrays are also objects, so
 * <code>Y.Lang.isObject([]) === true</code>.
 * @method isObject
 * @static
 * @param o The object to test.
 * @param failfn {boolean} fail if the input is a function.
 * @return {boolean} true if o is an object.
 * @see isPlainObject
 */
L.isObject = function(o, failfn) {
    var t = typeof o;
    return (o && (t === 'object' ||
        (!failfn && (t === 'function' || L.isFunction(o))))) || false;
};

/**
 * Determines whether or not the provided item is a string.
 * @method isString
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is a string.
 */
L.isString = function(o) {
    return typeof o === 'string';
};

/**
 * Determines whether or not the provided item is undefined.
 * @method isUndefined
 * @static
 * @param o The object to test.
 * @return {boolean} true if o is undefined.
 */
L.isUndefined = function(o) {
    return typeof o === 'undefined';
};

/**
 * A convenience method for detecting a legitimate non-null value.
 * Returns false for null/undefined/NaN, true for other values,
 * including 0/false/''
 * @method isValue
 * @static
 * @param o The item to test.
 * @return {boolean} true if it is not null/undefined/NaN || false.
 */
L.isValue = function(o) {
    var t = L.type(o);

    switch (t) {
        case 'number':
            return isFinite(o);

        case 'null': // fallthru
        case 'undefined':
            return false;

        default:
            return !!t;
    }
};

/**
 * Returns the current time in milliseconds.
 *
 * @method now
 * @return {Number} Current time in milliseconds.
 * @static
 * @since 3.3.0
 */
L.now = Date.now || function () {
    return new Date().getTime();
};

/**
 * Lightweight version of <code>Y.substitute</code>. Uses the same template
 * structure as <code>Y.substitute</code>, but doesn't support recursion,
 * auto-object coersion, or formats.
 * @method sub
 * @param {string} s String to be modified.
 * @param {object} o Object containing replacement values.
 * @return {string} the substitute result.
 * @static
 * @since 3.2.0
 */
L.sub = function(s, o) {
    return s.replace ? s.replace(SUBREGEX, function (match, key) {
        return L.isUndefined(o[key]) ? match : o[key];
    }) : s;
};

/**
 * Returns a string without any leading or trailing whitespace.  If
 * the input is not a string, the input will be returned untouched.
 * @method trim
 * @static
 * @param s {string} the string to trim.
 * @return {string} the trimmed string.
 */
L.trim = STRING_PROTO.trim ? function(s) {
    return s && s.trim ? s.trim() : s;
} : function (s) {
    try {
        return s.replace(TRIMREGEX, '');
    } catch (e) {
        return s;
    }
};

/**
 * Returns a string without any leading whitespace.
 * @method trimLeft
 * @static
 * @param s {string} the string to trim.
 * @return {string} the trimmed string.
 */
L.trimLeft = STRING_PROTO.trimLeft ? function (s) {
    return s.trimLeft();
} : function (s) {
    return s.replace(/^\s+/, '');
};

/**
 * Returns a string without any trailing whitespace.
 * @method trimRight
 * @static
 * @param s {string} the string to trim.
 * @return {string} the trimmed string.
 */
L.trimRight = STRING_PROTO.trimRight ? function (s) {
    return s.trimRight();
} : function (s) {
    return s.replace(/\s+$/, '');
};

/**
Returns one of the following strings, representing the type of the item passed
in:

 * "array"
 * "boolean"
 * "date"
 * "error"
 * "function"
 * "null"
 * "number"
 * "object"
 * "regexp"
 * "string"
 * "undefined"

Known issues:

 * `typeof HTMLElementCollection` returns function in Safari, but
    `Y.Lang.type()` reports "object", which could be a good thing --
    but it actually caused the logic in <code>Y.Lang.isObject</code> to fail.

@method type
@param o the item to test.
@return {string} the detected type.
@static
**/
L.type = function(o) {
    return TYPES[typeof o] || TYPES[TOSTRING.call(o)] || (o ? 'object' : 'null');
};
/**
@module yui
@submodule yui-base
*/

var Lang   = Y.Lang,
    Native = Array.prototype,

    hasOwn = Object.prototype.hasOwnProperty;

/**
Provides utility methods for working with arrays. Additional array helpers can
be found in the `collection` and `array-extras` modules.

`Y.Array(thing)` returns a native array created from _thing_. Depending on
_thing_'s type, one of the following will happen:

  * Arrays are returned unmodified unless a non-zero _startIndex_ is
    specified.
  * Array-like collections (see `Array.test()`) are converted to arrays.
  * For everything else, a new array is created with _thing_ as the sole
    item.

Note: elements that are also collections, such as `<form>` and `<select>`
elements, are not automatically converted to arrays. To force a conversion,
pass `true` as the value of the _force_ parameter.

@class Array
@constructor
@param {Any} thing The thing to arrayify.
@param {Number} [startIndex=0] If non-zero and _thing_ is an array or array-like
  collection, a subset of items starting at the specified index will be
  returned.
@param {Boolean} [force=false] If `true`, _thing_ will be treated as an
  array-like collection no matter what.
@return {Array} A native array created from _thing_, according to the rules
  described above.
**/
function YArray(thing, startIndex, force) {
    var len, result;

    /*jshint expr: true*/
    startIndex || (startIndex = 0);

    if (force || YArray.test(thing)) {
        // IE throws when trying to slice HTMLElement collections.
        try {
            return Native.slice.call(thing, startIndex);
        } catch (ex) {
            result = [];

            for (len = thing.length; startIndex < len; ++startIndex) {
                result.push(thing[startIndex]);
            }

            return result;
        }
    }

    return [thing];
}

Y.Array = YArray;

/**
Dedupes an array of strings, returning an array that's guaranteed to contain
only one copy of a given string.

This method differs from `Array.unique()` in that it's optimized for use only
with strings, whereas `unique` may be used with other types (but is slower).
Using `dedupe()` with non-string values may result in unexpected behavior.

@method dedupe
@param {String[]} array Array of strings to dedupe.
@return {Array} Deduped copy of _array_.
@static
@since 3.4.0
**/
YArray.dedupe = function (array) {
    var hash    = {},
        results = [],
        i, item, len;

    for (i = 0, len = array.length; i < len; ++i) {
        item = array[i];

        if (!hasOwn.call(hash, item)) {
            hash[item] = 1;
            results.push(item);
        }
    }

    return results;
};

/**
Executes the supplied function on each item in the array. This method wraps
the native ES5 `Array.forEach()` method if available.

@method each
@param {Array} array Array to iterate.
@param {Function} fn Function to execute on each item in the array. The function
  will receive the following arguments:
    @param {Any} fn.item Current array item.
    @param {Number} fn.index Current array index.
    @param {Array} fn.array Array being iterated.
@param {Object} [thisObj] `this` object to use when calling _fn_.
@return {YUI} The YUI instance.
@static
**/
YArray.each = YArray.forEach = Lang._isNative(Native.forEach) ? function (array, fn, thisObj) {
    Native.forEach.call(array || [], fn, thisObj || Y);
    return Y;
} : function (array, fn, thisObj) {
    for (var i = 0, len = (array && array.length) || 0; i < len; ++i) {
        if (i in array) {
            fn.call(thisObj || Y, array[i], i, array);
        }
    }

    return Y;
};

/**
Alias for `each()`.

@method forEach
@static
**/

/**
Returns an object using the first array as keys and the second as values. If
the second array is not provided, or if it doesn't contain the same number of
values as the first array, then `true` will be used in place of the missing
values.

@example

    Y.Array.hash(['a', 'b', 'c'], ['foo', 'bar']);
    // => {a: 'foo', b: 'bar', c: true}

@method hash
@param {String[]} keys Array of strings to use as keys.
@param {Array} [values] Array to use as values.
@return {Object} Hash using the first array as keys and the second as values.
@static
**/
YArray.hash = function (keys, values) {
    var hash = {},
        vlen = (values && values.length) || 0,
        i, len;

    for (i = 0, len = keys.length; i < len; ++i) {
        if (i in keys) {
            hash[keys[i]] = vlen > i && i in values ? values[i] : true;
        }
    }

    return hash;
};

/**
Returns the index of the first item in the array that's equal (using a strict
equality check) to the specified _value_, or `-1` if the value isn't found.

This method wraps the native ES5 `Array.indexOf()` method if available.

@method indexOf
@param {Array} array Array to search.
@param {Any} value Value to search for.
@param {Number} [from=0] The index at which to begin the search.
@return {Number} Index of the item strictly equal to _value_, or `-1` if not
    found.
@static
**/
YArray.indexOf = Lang._isNative(Native.indexOf) ? function (array, value, from) {
    return Native.indexOf.call(array, value, from);
} : function (array, value, from) {
    // http://es5.github.com/#x15.4.4.14
    var len = array.length;

    from = +from || 0;
    from = (from > 0 || -1) * Math.floor(Math.abs(from));

    if (from < 0) {
        from += len;

        if (from < 0) {
            from = 0;
        }
    }

    for (; from < len; ++from) {
        if (from in array && array[from] === value) {
            return from;
        }
    }

    return -1;
};

/**
Numeric sort convenience function.

The native `Array.prototype.sort()` function converts values to strings and
sorts them in lexicographic order, which is unsuitable for sorting numeric
values. Provide `Array.numericSort` as a custom sort function when you want
to sort values in numeric order.

@example

    [42, 23, 8, 16, 4, 15].sort(Y.Array.numericSort);
    // => [4, 8, 15, 16, 23, 42]

@method numericSort
@param {Number} a First value to compare.
@param {Number} b Second value to compare.
@return {Number} Difference between _a_ and _b_.
@static
**/
YArray.numericSort = function (a, b) {
    return a - b;
};

/**
Executes the supplied function on each item in the array. Returning a truthy
value from the function will stop the processing of remaining items.

@method some
@param {Array} array Array to iterate over.
@param {Function} fn Function to execute on each item. The function will receive
  the following arguments:
    @param {Any} fn.value Current array item.
    @param {Number} fn.index Current array index.
    @param {Array} fn.array Array being iterated over.
@param {Object} [thisObj] `this` object to use when calling _fn_.
@return {Boolean} `true` if the function returns a truthy value on any of the
  items in the array; `false` otherwise.
@static
**/
YArray.some = Lang._isNative(Native.some) ? function (array, fn, thisObj) {
    return Native.some.call(array, fn, thisObj);
} : function (array, fn, thisObj) {
    for (var i = 0, len = array.length; i < len; ++i) {
        if (i in array && fn.call(thisObj, array[i], i, array)) {
            return true;
        }
    }

    return false;
};

/**
Evaluates _obj_ to determine if it's an array, an array-like collection, or
something else. This is useful when working with the function `arguments`
collection and `HTMLElement` collections.

Note: This implementation doesn't consider elements that are also
collections, such as `<form>` and `<select>`, to be array-like.

@method test
@param {Object} obj Object to test.
@return {Number} A number indicating the results of the test:

  * 0: Neither an array nor an array-like collection.
  * 1: Real array.
  * 2: Array-like collection.

@static
**/
YArray.test = function (obj) {
    var result = 0;

    if (Lang.isArray(obj)) {
        result = 1;
    } else if (Lang.isObject(obj)) {
        try {
            // indexed, but no tagName (element) or scrollTo/document (window. From DOM.isWindow test which we can't use here),
            // or functions without apply/call (Safari
            // HTMLElementCollection bug).
            if ('length' in obj && !obj.tagName && !(obj.scrollTo && obj.document) && !obj.apply) {
                result = 2;
            }
        } catch (ex) {}
    }

    return result;
};
/**
 * The YUI module contains the components required for building the YUI
 * seed file.  This includes the script loading mechanism, a simple queue,
 * and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * A simple FIFO queue.  Items are added to the Queue with add(1..n items) and
 * removed using next().
 *
 * @class Queue
 * @constructor
 * @param {MIXED} item* 0..n items to seed the queue.
 */
function Queue() {
    this._init();
    this.add.apply(this, arguments);
}

Queue.prototype = {
    /**
     * Initialize the queue
     *
     * @method _init
     * @protected
     */
    _init: function() {
        /**
         * The collection of enqueued items
         *
         * @property _q
         * @type Array
         * @protected
         */
        this._q = [];
    },

    /**
     * Get the next item in the queue. FIFO support
     *
     * @method next
     * @return {MIXED} the next item in the queue.
     */
    next: function() {
        return this._q.shift();
    },

    /**
     * Get the last in the queue. LIFO support.
     *
     * @method last
     * @return {MIXED} the last item in the queue.
     */
    last: function() {
        return this._q.pop();
    },

    /**
     * Add 0..n items to the end of the queue.
     *
     * @method add
     * @param {MIXED} item* 0..n items.
     * @return {object} this queue.
     */
    add: function() {
        this._q.push.apply(this._q, arguments);

        return this;
    },

    /**
     * Returns the current number of queued items.
     *
     * @method size
     * @return {Number} The size.
     */
    size: function() {
        return this._q.length;
    }
};

Y.Queue = Queue;

YUI.Env._loaderQueue = YUI.Env._loaderQueue || new Queue();

/**
The YUI module contains the components required for building the YUI seed file.
This includes the script loading mechanism, a simple queue, and the core
utilities for the library.

@module yui
@submodule yui-base
**/

var CACHED_DELIMITER = '__',

    hasOwn   = Object.prototype.hasOwnProperty,
    isObject = Y.Lang.isObject;

/**
Returns a wrapper for a function which caches the return value of that function,
keyed off of the combined string representation of the argument values provided
when the wrapper is called.

Calling this function again with the same arguments will return the cached value
rather than executing the wrapped function.

Note that since the cache is keyed off of the string representation of arguments
passed to the wrapper function, arguments that aren't strings and don't provide
a meaningful `toString()` method may result in unexpected caching behavior. For
example, the objects `{}` and `{foo: 'bar'}` would both be converted to the
string `[object Object]` when used as a cache key.

@method cached
@param {Function} source The function to memoize.
@param {Object} [cache={}] Object in which to store cached values. You may seed
  this object with pre-existing cached values if desired.
@param {any} [refetch] If supplied, this value is compared with the cached value
  using a `==` comparison. If the values are equal, the wrapped function is
  executed again even though a cached value exists.
@return {Function} Wrapped function.
@for YUI
**/
Y.cached = function (source, cache, refetch) {
    /*jshint expr: true*/
    cache || (cache = {});

    return function (arg) {
        var key = arguments.length > 1 ?
                Array.prototype.join.call(arguments, CACHED_DELIMITER) :
                String(arg);

        /*jshint eqeqeq: false*/
        if (!(key in cache) || (refetch && cache[key] == refetch)) {
            cache[key] = source.apply(source, arguments);
        }

        return cache[key];
    };
};

/**
Returns the `location` object from the window/frame in which this YUI instance
operates, or `undefined` when executing in a non-browser environment
(e.g. Node.js).

It is _not_ recommended to hold references to the `window.location` object
outside of the scope of a function in which its properties are being accessed or
its methods are being called. This is because of a nasty bug/issue that exists
in both Safari and MobileSafari browsers:
[WebKit Bug 34679](https://bugs.webkit.org/show_bug.cgi?id=34679).

@method getLocation
@return {location} The `location` object from the window/frame in which this YUI
    instance operates.
@since 3.5.0
**/
Y.getLocation = function () {
    // It is safer to look this up every time because yui-base is attached to a
    // YUI instance before a user's config is applied; i.e. `Y.config.win` does
    // not point the correct window object when this file is loaded.
    var win = Y.config.win;

    // It is not safe to hold a reference to the `location` object outside the
    // scope in which it is being used. The WebKit engine used in Safari and
    // MobileSafari will "disconnect" the `location` object from the `window`
    // when a page is restored from back/forward history cache.
    return win && win.location;
};

/**
Returns a new object containing all of the properties of all the supplied
objects. The properties from later objects will overwrite those in earlier
objects.

Passing in a single object will create a shallow copy of it. For a deep copy,
use `clone()`.

@method merge
@param {Object} objects* One or more objects to merge.
@return {Object} A new merged object.
**/
Y.merge = function () {
    var i      = 0,
        len    = arguments.length,
        result = {},
        key,
        obj;

    for (; i < len; ++i) {
        obj = arguments[i];

        for (key in obj) {
            if (hasOwn.call(obj, key)) {
                result[key] = obj[key];
            }
        }
    }

    return result;
};

/**
Mixes _supplier_'s properties into _receiver_.

Properties on _receiver_ or _receiver_'s prototype will not be overwritten or
shadowed unless the _overwrite_ parameter is `true`, and will not be merged
unless the _merge_ parameter is `true`.

In the default mode (0), only properties the supplier owns are copied (prototype
properties are not copied). The following copying modes are available:

  * `0`: _Default_. Object to object.
  * `1`: Prototype to prototype.
  * `2`: Prototype to prototype and object to object.
  * `3`: Prototype to object.
  * `4`: Object to prototype.

@method mix
@param {Function|Object} receiver The object or function to receive the mixed
  properties.
@param {Function|Object} supplier The object or function supplying the
  properties to be mixed.
@param {Boolean} [overwrite=false] If `true`, properties that already exist
  on the receiver will be overwritten with properties from the supplier.
@param {String[]} [whitelist] An array of property names to copy. If
  specified, only the whitelisted properties will be copied, and all others
  will be ignored.
@param {Number} [mode=0] Mix mode to use. See above for available modes.
@param {Boolean} [merge=false] If `true`, objects and arrays that already
  exist on the receiver will have the corresponding object/array from the
  supplier merged into them, rather than being skipped or overwritten. When
  both _overwrite_ and _merge_ are `true`, _merge_ takes precedence.
@return {Function|Object|YUI} The receiver, or the YUI instance if the
  specified receiver is falsy.
**/
Y.mix = function(receiver, supplier, overwrite, whitelist, mode, merge) {
    var alwaysOverwrite, exists, from, i, key, len, to;

    // If no supplier is given, we return the receiver. If no receiver is given,
    // we return Y. Returning Y doesn't make much sense to me, but it's
    // grandfathered in for backcompat reasons.
    if (!receiver || !supplier) {
        return receiver || Y;
    }

    if (mode) {
        // In mode 2 (prototype to prototype and object to object), we recurse
        // once to do the proto to proto mix. The object to object mix will be
        // handled later on.
        if (mode === 2) {
            Y.mix(receiver.prototype, supplier.prototype, overwrite,
                    whitelist, 0, merge);
        }

        // Depending on which mode is specified, we may be copying from or to
        // the prototypes of the supplier and receiver.
        from = mode === 1 || mode === 3 ? supplier.prototype : supplier;
        to   = mode === 1 || mode === 4 ? receiver.prototype : receiver;

        // If either the supplier or receiver doesn't actually have a
        // prototype property, then we could end up with an undefined `from`
        // or `to`. If that happens, we abort and return the receiver.
        if (!from || !to) {
            return receiver;
        }
    } else {
        from = supplier;
        to   = receiver;
    }

    // If `overwrite` is truthy and `merge` is falsy, then we can skip a
    // property existence check on each iteration and save some time.
    alwaysOverwrite = overwrite && !merge;

    if (whitelist) {
        for (i = 0, len = whitelist.length; i < len; ++i) {
            key = whitelist[i];

            // We call `Object.prototype.hasOwnProperty` instead of calling
            // `hasOwnProperty` on the object itself, since the object's
            // `hasOwnProperty` method may have been overridden or removed.
            // Also, some native objects don't implement a `hasOwnProperty`
            // method.
            if (!hasOwn.call(from, key)) {
                continue;
            }

            // The `key in to` check here is (sadly) intentional for backwards
            // compatibility reasons. It prevents undesired shadowing of
            // prototype members on `to`.
            exists = alwaysOverwrite ? false : key in to;

            if (merge && exists && isObject(to[key], true)
                    && isObject(from[key], true)) {
                // If we're in merge mode, and the key is present on both
                // objects, and the value on both objects is either an object or
                // an array (but not a function), then we recurse to merge the
                // `from` value into the `to` value instead of overwriting it.
                //
                // Note: It's intentional that the whitelist isn't passed to the
                // recursive call here. This is legacy behavior that lots of
                // code still depends on.
                Y.mix(to[key], from[key], overwrite, null, 0, merge);
            } else if (overwrite || !exists) {
                // We're not in merge mode, so we'll only copy the `from` value
                // to the `to` value if we're in overwrite mode or if the
                // current key doesn't exist on the `to` object.
                to[key] = from[key];
            }
        }
    } else {
        for (key in from) {
            // The code duplication here is for runtime performance reasons.
            // Combining whitelist and non-whitelist operations into a single
            // loop or breaking the shared logic out into a function both result
            // in worse performance, and Y.mix is critical enough that the byte
            // tradeoff is worth it.
            if (!hasOwn.call(from, key)) {
                continue;
            }

            // The `key in to` check here is (sadly) intentional for backwards
            // compatibility reasons. It prevents undesired shadowing of
            // prototype members on `to`.
            exists = alwaysOverwrite ? false : key in to;

            if (merge && exists && isObject(to[key], true)
                    && isObject(from[key], true)) {
                Y.mix(to[key], from[key], overwrite, null, 0, merge);
            } else if (overwrite || !exists) {
                to[key] = from[key];
            }
        }

        // If this is an IE browser with the JScript enumeration bug, force
        // enumeration of the buggy properties by making a recursive call with
        // the buggy properties as the whitelist.
        if (Y.Object._hasEnumBug) {
            Y.mix(to, from, overwrite, Y.Object._forceEnum, mode, merge);
        }
    }

    return receiver;
};
/**
 * The YUI module contains the components required for building the YUI
 * seed file.  This includes the script loading mechanism, a simple queue,
 * and the core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * Adds utilities to the YUI instance for working with objects.
 *
 * @class Object
 */

var Lang   = Y.Lang,
    hasOwn = Object.prototype.hasOwnProperty,

    UNDEFINED, // <-- Note the comma. We're still declaring vars.

/**
 * Returns a new object that uses _obj_ as its prototype. This method wraps the
 * native ES5 `Object.create()` method if available, but doesn't currently
 * pass through `Object.create()`'s second argument (properties) in order to
 * ensure compatibility with older browsers.
 *
 * @method ()
 * @param {Object} obj Prototype object.
 * @return {Object} New object using _obj_ as its prototype.
 * @static
 */
O = Y.Object = Lang._isNative(Object.create) ? function (obj) {
    // We currently wrap the native Object.create instead of simply aliasing it
    // to ensure consistency with our fallback shim, which currently doesn't
    // support Object.create()'s second argument (properties). Once we have a
    // safe fallback for the properties arg, we can stop wrapping
    // Object.create().
    return Object.create(obj);
} : (function () {
    // Reusable constructor function for the Object.create() shim.
    function F() {}

    // The actual shim.
    return function (obj) {
        F.prototype = obj;
        return new F();
    };
}()),

/**
 * Property names that IE doesn't enumerate in for..in loops, even when they
 * should be enumerable. When `_hasEnumBug` is `true`, it's necessary to
 * manually enumerate these properties.
 *
 * @property _forceEnum
 * @type String[]
 * @protected
 * @static
 */
forceEnum = O._forceEnum = [
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toString',
    'toLocaleString',
    'valueOf'
],

/**
 * `true` if this browser has the JScript enumeration bug that prevents
 * enumeration of the properties named in the `_forceEnum` array, `false`
 * otherwise.
 *
 * See:
 *   - <https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug>
 *   - <http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation>
 *
 * @property _hasEnumBug
 * @type Boolean
 * @protected
 * @static
 */
hasEnumBug = O._hasEnumBug = !{valueOf: 0}.propertyIsEnumerable('valueOf'),

/**
 * `true` if this browser incorrectly considers the `prototype` property of
 * functions to be enumerable. Currently known to affect Opera 11.50.
 *
 * @property _hasProtoEnumBug
 * @type Boolean
 * @protected
 * @static
 */
hasProtoEnumBug = O._hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),

/**
 * Returns `true` if _key_ exists on _obj_, `false` if _key_ doesn't exist or
 * exists only on _obj_'s prototype. This is essentially a safer version of
 * `obj.hasOwnProperty()`.
 *
 * @method owns
 * @param {Object} obj Object to test.
 * @param {String} key Property name to look for.
 * @return {Boolean} `true` if _key_ exists on _obj_, `false` otherwise.
 * @static
 */
owns = O.owns = function (obj, key) {
    return !!obj && hasOwn.call(obj, key);
}; // <-- End of var declarations.

/**
 * Alias for `owns()`.
 *
 * @method hasKey
 * @param {Object} obj Object to test.
 * @param {String} key Property name to look for.
 * @return {Boolean} `true` if _key_ exists on _obj_, `false` otherwise.
 * @static
 */
O.hasKey = owns;

/**
 * Returns an array containing the object's enumerable keys. Does not include
 * prototype keys or non-enumerable keys.
 *
 * Note that keys are returned in enumeration order (that is, in the same order
 * that they would be enumerated by a `for-in` loop), which may not be the same
 * as the order in which they were defined.
 *
 * This method is an alias for the native ES5 `Object.keys()` method if
 * available.
 *
 * @example
 *
 *     Y.Object.keys({a: 'foo', b: 'bar', c: 'baz'});
 *     // => ['a', 'b', 'c']
 *
 * @method keys
 * @param {Object} obj An object.
 * @return {String[]} Array of keys.
 * @static
 */
O.keys = Lang._isNative(Object.keys) ? Object.keys : function (obj) {
    if (!Lang.isObject(obj)) {
        throw new TypeError('Object.keys called on a non-object');
    }

    var keys = [],
        i, key, len;

    if (hasProtoEnumBug && typeof obj === 'function') {
        for (key in obj) {
            if (owns(obj, key) && key !== 'prototype') {
                keys.push(key);
            }
        }
    } else {
        for (key in obj) {
            if (owns(obj, key)) {
                keys.push(key);
            }
        }
    }

    if (hasEnumBug) {
        for (i = 0, len = forceEnum.length; i < len; ++i) {
            key = forceEnum[i];

            if (owns(obj, key)) {
                keys.push(key);
            }
        }
    }

    return keys;
};

/**
 * Returns an array containing the values of the object's enumerable keys.
 *
 * Note that values are returned in enumeration order (that is, in the same
 * order that they would be enumerated by a `for-in` loop), which may not be the
 * same as the order in which they were defined.
 *
 * @example
 *
 *     Y.Object.values({a: 'foo', b: 'bar', c: 'baz'});
 *     // => ['foo', 'bar', 'baz']
 *
 * @method values
 * @param {Object} obj An object.
 * @return {Array} Array of values.
 * @static
 */
O.values = function (obj) {
    var keys   = O.keys(obj),
        i      = 0,
        len    = keys.length,
        values = [];

    for (; i < len; ++i) {
        values.push(obj[keys[i]]);
    }

    return values;
};

/**
 * Returns the number of enumerable keys owned by an object.
 *
 * @method size
 * @param {Object} obj An object.
 * @return {Number} The object's size.
 * @static
 */
O.size = function (obj) {
    try {
        return O.keys(obj).length;
    } catch (ex) {
        return 0; // Legacy behavior for non-objects.
    }
};

/**
 * Returns `true` if the object owns an enumerable property with the specified
 * value.
 *
 * @method hasValue
 * @param {Object} obj An object.
 * @param {any} value The value to search for.
 * @return {Boolean} `true` if _obj_ contains _value_, `false` otherwise.
 * @static
 */
O.hasValue = function (obj, value) {
    return Y.Array.indexOf(O.values(obj), value) > -1;
};

/**
 * Executes a function on each enumerable property in _obj_. The function
 * receives the value, the key, and the object itself as parameters (in that
 * order).
 *
 * By default, only properties owned by _obj_ are enumerated. To include
 * prototype properties, set the _proto_ parameter to `true`.
 *
 * @method each
 * @param {Object} obj Object to enumerate.
 * @param {Function} fn Function to execute on each enumerable property.
 *   @param {mixed} fn.value Value of the current property.
 *   @param {String} fn.key Key of the current property.
 *   @param {Object} fn.obj Object being enumerated.
 * @param {Object} [thisObj] `this` object to use when calling _fn_.
 * @param {Boolean} [proto=false] Include prototype properties.
 * @return {YUI} the YUI instance.
 * @chainable
 * @static
 */
O.each = function (obj, fn, thisObj, proto) {
    var key;

    for (key in obj) {
        if (proto || owns(obj, key)) {
            fn.call(thisObj || Y, obj[key], key, obj);
        }
    }

    return Y;
};

/**
 * Executes a function on each enumerable property in _obj_, but halts if the
 * function returns a truthy value. The function receives the value, the key,
 * and the object itself as paramters (in that order).
 *
 * By default, only properties owned by _obj_ are enumerated. To include
 * prototype properties, set the _proto_ parameter to `true`.
 *
 * @method some
 * @param {Object} obj Object to enumerate.
 * @param {Function} fn Function to execute on each enumerable property.
 *   @param {mixed} fn.value Value of the current property.
 *   @param {String} fn.key Key of the current property.
 *   @param {Object} fn.obj Object being enumerated.
 * @param {Object} [thisObj] `this` object to use when calling _fn_.
 * @param {Boolean} [proto=false] Include prototype properties.
 * @return {Boolean} `true` if any execution of _fn_ returns a truthy value,
 *   `false` otherwise.
 * @static
 */
O.some = function (obj, fn, thisObj, proto) {
    var key;

    for (key in obj) {
        if (proto || owns(obj, key)) {
            if (fn.call(thisObj || Y, obj[key], key, obj)) {
                return true;
            }
        }
    }

    return false;
};

/**
 * Retrieves the sub value at the provided path,
 * from the value object provided.
 *
 * @method getValue
 * @static
 * @param o The object from which to extract the property value.
 * @param path {Array} A path array, specifying the object traversal path
 * from which to obtain the sub value.
 * @return {Any} The value stored in the path, undefined if not found,
 * undefined if the source is not an object.  Returns the source object
 * if an empty path is provided.
 */
O.getValue = function(o, path) {
    if (!Lang.isObject(o)) {
        return UNDEFINED;
    }

    var i,
        p = Y.Array(path),
        l = p.length;

    for (i = 0; o !== UNDEFINED && i < l; i++) {
        o = o[p[i]];
    }

    return o;
};

/**
 * Sets the sub-attribute value at the provided path on the
 * value object.  Returns the modified value object, or
 * undefined if the path is invalid.
 *
 * @method setValue
 * @static
 * @param o             The object on which to set the sub value.
 * @param path {Array}  A path array, specifying the object traversal path
 *                      at which to set the sub value.
 * @param val {Any}     The new value for the sub-attribute.
 * @return {Object}     The modified object, with the new sub value set, or
 *                      undefined, if the path was invalid.
 */
O.setValue = function(o, path, val) {
    var i,
        p = Y.Array(path),
        leafIdx = p.length - 1,
        ref = o;

    if (leafIdx >= 0) {
        for (i = 0; ref !== UNDEFINED && i < leafIdx; i++) {
            ref = ref[p[i]];
        }

        if (ref !== UNDEFINED) {
            ref[p[i]] = val;
        } else {
            return UNDEFINED;
        }
    }

    return o;
};

/**
 * Returns `true` if the object has no enumerable properties of its own.
 *
 * @method isEmpty
 * @param {Object} obj An object.
 * @return {Boolean} `true` if the object is empty.
 * @static
 * @since 3.2.0
 */
O.isEmpty = function (obj) {
    return !O.keys(Object(obj)).length;
};
/**
 * The YUI module contains the components required for building the YUI seed
 * file.  This includes the script loading mechanism, a simple queue, and the
 * core utilities for the library.
 * @module yui
 * @submodule yui-base
 */

/**
 * YUI user agent detection.
 * Do not fork for a browser if it can be avoided.  Use feature detection when
 * you can.  Use the user agent as a last resort.  For all fields listed
 * as @type float, UA stores a version number for the browser engine,
 * 0 otherwise.  This value may or may not map to the version number of
 * the browser using the engine.  The value is presented as a float so
 * that it can easily be used for boolean evaluation as well as for
 * looking for a particular range of versions.  Because of this,
 * some of the granularity of the version info may be lost.  The fields that
 * are @type string default to null.  The API docs list the values that
 * these fields can have.
 * @class UA
 * @static
 */

/**
* Static method on `YUI.Env` for parsing a UA string.  Called at instantiation
* to populate `Y.UA`.
*
* @static
* @method parseUA
* @param {String} [subUA=navigator.userAgent] UA string to parse
* @return {Object} The Y.UA object
*/
YUI.Env.parseUA = function(subUA) {

    var numberify = function(s) {
            var c = 0;
            return parseFloat(s.replace(/\./g, function() {
                return (c++ === 1) ? '' : '.';
            }));
        },

        win = Y.config.win,

        nav = win && win.navigator,

        o = {

        /**
         * Internet Explorer version number or 0.  Example: 6
         * @property ie
         * @type float
         * @static
         */
        ie: 0,

        /**
         * Opera version number or 0.  Example: 9.2
         * @property opera
         * @type float
         * @static
         */
        opera: 0,

        /**
         * Gecko engine revision number.  Will evaluate to 1 if Gecko
         * is detected but the revision could not be found. Other browsers
         * will be 0.  Example: 1.8
         * <pre>
         * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7
         * Firefox 1.5.0.9: 1.8.0.9 <-- 1.8
         * Firefox 2.0.0.3: 1.8.1.3 <-- 1.81
         * Firefox 3.0   <-- 1.9
         * Firefox 3.5   <-- 1.91
         * </pre>
         * @property gecko
         * @type float
         * @static
         */
        gecko: 0,

        /**
         * AppleWebKit version.  KHTML browsers that are not WebKit browsers
         * will evaluate to 1, other browsers 0.  Example: 418.9
         * <pre>
         * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the
         *                                   latest available for Mac OSX 10.3.
         * Safari 2.0.2:         416     <-- hasOwnProperty introduced
         * Safari 2.0.4:         418     <-- preventDefault fixed
         * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run
         *                                   different versions of webkit
         * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been
         *                                   updated, but not updated
         *                                   to the latest patch.
         * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native
         * SVG and many major issues fixed).
         * Safari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic
         * update from 2.x via the 10.4.11 OS patch.
         * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.
         *                                   yahoo.com user agent hack removed.
         * </pre>
         * http://en.wikipedia.org/wiki/Safari_version_history
         * @property webkit
         * @type float
         * @static
         */
        webkit: 0,

        /**
         * Safari will be detected as webkit, but this property will also
         * be populated with the Safari version number
         * @property safari
         * @type float
         * @static
         */
        safari: 0,

        /**
         * Chrome will be detected as webkit, but this property will also
         * be populated with the Chrome version number
         * @property chrome
         * @type float
         * @static
         */
        chrome: 0,

        /**
         * The mobile property will be set to a string containing any relevant
         * user agent information when a modern mobile browser is detected.
         * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
         * devices with the WebKit-based browser, and Opera Mini.
         * @property mobile
         * @type string
         * @default null
         * @static
         */
        mobile: null,

        /**
         * Adobe AIR version number or 0.  Only populated if webkit is detected.
         * Example: 1.0
         * @property air
         * @type float
         */
        air: 0,
        /**
         * PhantomJS version number or 0.  Only populated if webkit is detected.
         * Example: 1.0
         * @property phantomjs
         * @type float
         */
        phantomjs: 0,
        /**
         * Detects Apple iPad's OS version
         * @property ipad
         * @type float
         * @static
         */
        ipad: 0,
        /**
         * Detects Apple iPhone's OS version
         * @property iphone
         * @type float
         * @static
         */
        iphone: 0,
        /**
         * Detects Apples iPod's OS version
         * @property ipod
         * @type float
         * @static
         */
        ipod: 0,
        /**
         * General truthy check for iPad, iPhone or iPod
         * @property ios
         * @type Boolean
         * @default null
         * @static
         */
        ios: null,
        /**
         * Detects Googles Android OS version
         * @property android
         * @type float
         * @static
         */
        android: 0,
        /**
         * Detects Kindle Silk
         * @property silk
         * @type float
         * @static
         */
        silk: 0,
        /**
         * Detects Kindle Silk Acceleration
         * @property accel
         * @type Boolean
         * @static
         */
        accel: false,
        /**
         * Detects Palms WebOS version
         * @property webos
         * @type float
         * @static
         */
        webos: 0,

        /**
         * Google Caja version number or 0.
         * @property caja
         * @type float
         */
        caja: nav && nav.cajaVersion,

        /**
         * Set to true if the page appears to be in SSL
         * @property secure
         * @type boolean
         * @static
         */
        secure: false,

        /**
         * The operating system.  Currently only detecting windows or macintosh
         * @property os
         * @type string
         * @default null
         * @static
         */
        os: null,

        /**
         * The Nodejs Version
         * @property nodejs
         * @type float
         * @default 0
         * @static
         */
        nodejs: 0,
        /**
        * Window8/IE10 Application host environment
        * @property winjs
        * @type Boolean
        * @static
        */
        winjs: !!((typeof Windows !== "undefined") && Windows.System),
        /**
        * Are touch/msPointer events available on this device
        * @property touchEnabled
        * @type Boolean
        * @static
        */
        touchEnabled: false
    },

    ua = subUA || nav && nav.userAgent,

    loc = win && win.location,

    href = loc && loc.href,

    m;

    /**
    * The User Agent string that was parsed
    * @property userAgent
    * @type String
    * @static
    */
    o.userAgent = ua;


    o.secure = href && (href.toLowerCase().indexOf('https') === 0);

    if (ua) {

        if ((/windows|win32/i).test(ua)) {
            o.os = 'windows';
        } else if ((/macintosh|mac_powerpc/i).test(ua)) {
            o.os = 'macintosh';
        } else if ((/android/i).test(ua)) {
            o.os = 'android';
        } else if ((/symbos/i).test(ua)) {
            o.os = 'symbos';
        } else if ((/linux/i).test(ua)) {
            o.os = 'linux';
        } else if ((/rhino/i).test(ua)) {
            o.os = 'rhino';
        }

        // Modern KHTML browsers should qualify as Safari X-Grade
        if ((/KHTML/).test(ua)) {
            o.webkit = 1;
        }
        if ((/IEMobile|XBLWP7/).test(ua)) {
            o.mobile = 'windows';
        }
        if ((/Fennec/).test(ua)) {
            o.mobile = 'gecko';
        }
        // Modern WebKit browsers are at least X-Grade
        m = ua.match(/AppleWebKit\/([^\s]*)/);
        if (m && m[1]) {
            o.webkit = numberify(m[1]);
            o.safari = o.webkit;

            if (/PhantomJS/.test(ua)) {
                m = ua.match(/PhantomJS\/([^\s]*)/);
                if (m && m[1]) {
                    o.phantomjs = numberify(m[1]);
                }
            }

            // Mobile browser check
            if (/ Mobile\//.test(ua) || (/iPad|iPod|iPhone/).test(ua)) {
                o.mobile = 'Apple'; // iPhone or iPod Touch

                m = ua.match(/OS ([^\s]*)/);
                if (m && m[1]) {
                    m = numberify(m[1].replace('_', '.'));
                }
                o.ios = m;
                o.os = 'ios';
                o.ipad = o.ipod = o.iphone = 0;

                m = ua.match(/iPad|iPod|iPhone/);
                if (m && m[0]) {
                    o[m[0].toLowerCase()] = o.ios;
                }
            } else {
                m = ua.match(/NokiaN[^\/]*|webOS\/\d\.\d/);
                if (m) {
                    // Nokia N-series, webOS, ex: NokiaN95
                    o.mobile = m[0];
                }
                if (/webOS/.test(ua)) {
                    o.mobile = 'WebOS';
                    m = ua.match(/webOS\/([^\s]*);/);
                    if (m && m[1]) {
                        o.webos = numberify(m[1]);
                    }
                }
                if (/ Android/.test(ua)) {
                    if (/Mobile/.test(ua)) {
                        o.mobile = 'Android';
                    }
                    m = ua.match(/Android ([^\s]*);/);
                    if (m && m[1]) {
                        o.android = numberify(m[1]);
                    }

                }
                if (/Silk/.test(ua)) {
                    m = ua.match(/Silk\/([^\s]*)\)/);
                    if (m && m[1]) {
                        o.silk = numberify(m[1]);
                    }
                    if (!o.android) {
                        o.android = 2.34; //Hack for desktop mode in Kindle
                        o.os = 'Android';
                    }
                    if (/Accelerated=true/.test(ua)) {
                        o.accel = true;
                    }
                }
            }

            m = ua.match(/(Chrome|CrMo|CriOS)\/([^\s]*)/);
            if (m && m[1] && m[2]) {
                o.chrome = numberify(m[2]); // Chrome
                o.safari = 0; //Reset safari back to 0
                if (m[1] === 'CrMo') {
                    o.mobile = 'chrome';
                }
            } else {
                m = ua.match(/AdobeAIR\/([^\s]*)/);
                if (m) {
                    o.air = m[0]; // Adobe AIR 1.0 or better
                }
            }
        }

        if (!o.webkit) { // not webkit
// @todo check Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4509/1316; fi; U; ssr)
            if (/Opera/.test(ua)) {
                m = ua.match(/Opera[\s\/]([^\s]*)/);
                if (m && m[1]) {
                    o.opera = numberify(m[1]);
                }
                m = ua.match(/Version\/([^\s]*)/);
                if (m && m[1]) {
                    o.opera = numberify(m[1]); // opera 10+
                }

                if (/Opera Mobi/.test(ua)) {
                    o.mobile = 'opera';
                    m = ua.replace('Opera Mobi', '').match(/Opera ([^\s]*)/);
                    if (m && m[1]) {
                        o.opera = numberify(m[1]);
                    }
                }
                m = ua.match(/Opera Mini[^;]*/);

                if (m) {
                    o.mobile = m[0]; // ex: Opera Mini/2.0.4509/1316
                }
            } else { // not opera or webkit
                m = ua.match(/MSIE\s([^;]*)/);
                if (m && m[1]) {
                    o.ie = numberify(m[1]);
                } else { // not opera, webkit, or ie
                    m = ua.match(/Gecko\/([^\s]*)/);
                    if (m) {
                        o.gecko = 1; // Gecko detected, look for revision
                        m = ua.match(/rv:([^\s\)]*)/);
                        if (m && m[1]) {
                            o.gecko = numberify(m[1]);
                            if (/Mobile|Tablet/.test(ua)) {
                                o.mobile = "ffos";
                            }
                        }
                    }
                }
            }
        }
    }

    //Check for known properties to tell if touch events are enabled on this device or if
    //the number of MSPointer touchpoints on this device is greater than 0.
    if (win && nav && !(o.chrome && o.chrome < 6)) {
        o.touchEnabled = (("ontouchstart" in win) || (("msMaxTouchPoints" in nav) && (nav.msMaxTouchPoints > 0)));
    }

    //It was a parsed UA, do not assign the global value.
    if (!subUA) {

        if (typeof process === 'object') {

            if (process.versions && process.versions.node) {
                //NodeJS
                o.os = process.platform;
                o.nodejs = numberify(process.versions.node);
            }
        }

        YUI.Env.UA = o;

    }

    return o;
};


Y.UA = YUI.Env.UA || YUI.Env.parseUA();

/**
Performs a simple comparison between two version numbers, accounting for
standard versioning logic such as the fact that "535.8" is a lower version than
"535.24", even though a simple numerical comparison would indicate that it's
greater. Also accounts for cases such as "1.1" vs. "1.1.0", which are
considered equivalent.

Returns -1 if version _a_ is lower than version _b_, 0 if they're equivalent,
1 if _a_ is higher than _b_.

Versions may be numbers or strings containing numbers and dots. For example,
both `535` and `"535.8.10"` are acceptable. A version string containing
non-numeric characters, like `"535.8.beta"`, may produce unexpected results.

@method compareVersions
@param {Number|String} a First version number to compare.
@param {Number|String} b Second version number to compare.
@return -1 if _a_ is lower than _b_, 0 if they're equivalent, 1 if _a_ is
    higher than _b_.
**/
Y.UA.compareVersions = function (a, b) {
    var aPart, aParts, bPart, bParts, i, len;

    if (a === b) {
        return 0;
    }

    aParts = (a + '').split('.');
    bParts = (b + '').split('.');

    for (i = 0, len = Math.max(aParts.length, bParts.length); i < len; ++i) {
        aPart = parseInt(aParts[i], 10);
        bPart = parseInt(bParts[i], 10);

        /*jshint expr: true*/
        isNaN(aPart) && (aPart = 0);
        isNaN(bPart) && (bPart = 0);

        if (aPart < bPart) {
            return -1;
        }

        if (aPart > bPart) {
            return 1;
        }
    }

    return 0;
};
YUI.Env.aliases = {
    "anim": ["anim-base","anim-color","anim-curve","anim-easing","anim-node-plugin","anim-scroll","anim-xy"],
    "anim-shape-transform": ["anim-shape"],
    "app": ["app-base","app-content","app-transitions","lazy-model-list","model","model-list","model-sync-rest","router","view","view-node-map"],
    "attribute": ["attribute-base","attribute-complex"],
    "attribute-events": ["attribute-observable"],
    "autocomplete": ["autocomplete-base","autocomplete-sources","autocomplete-list","autocomplete-plugin"],
    "axes": ["axis-numeric","axis-category","axis-time","axis-stacked"],
    "axes-base": ["axis-numeric-base","axis-category-base","axis-time-base","axis-stacked-base"],
    "base": ["base-base","base-pluginhost","base-build"],
    "cache": ["cache-base","cache-offline","cache-plugin"],
    "charts": ["charts-base"],
    "collection": ["array-extras","arraylist","arraylist-add","arraylist-filter","array-invoke"],
    "color": ["color-base","color-hsl","color-harmony"],
    "controller": ["router"],
    "dataschema": ["dataschema-base","dataschema-json","dataschema-xml","dataschema-array","dataschema-text"],
    "datasource": ["datasource-local","datasource-io","datasource-get","datasource-function","datasource-cache","datasource-jsonschema","datasource-xmlschema","datasource-arrayschema","datasource-textschema","datasource-polling"],
    "datatable": ["datatable-core","datatable-table","datatable-head","datatable-body","datatable-base","datatable-column-widths","datatable-message","datatable-mutable","datatable-sort","datatable-datasource"],
    "datatype": ["datatype-date","datatype-number","datatype-xml"],
    "datatype-date": ["datatype-date-parse","datatype-date-format","datatype-date-math"],
    "datatype-number": ["datatype-number-parse","datatype-number-format"],
    "datatype-xml": ["datatype-xml-parse","datatype-xml-format"],
    "dd": ["dd-ddm-base","dd-ddm","dd-ddm-drop","dd-drag","dd-proxy","dd-constrain","dd-drop","dd-scroll","dd-delegate"],
    "dom": ["dom-base","dom-screen","dom-style","selector-native","selector"],
    "editor": ["frame","editor-selection","exec-command","editor-base","editor-para","editor-br","editor-bidi","editor-tab","createlink-base"],
    "event": ["event-base","event-delegate","event-synthetic","event-mousewheel","event-mouseenter","event-key","event-focus","event-resize","event-hover","event-outside","event-touch","event-move","event-flick","event-valuechange","event-tap"],
    "event-custom": ["event-custom-base","event-custom-complex"],
    "event-gestures": ["event-flick","event-move"],
    "handlebars": ["handlebars-compiler"],
    "highlight": ["highlight-base","highlight-accentfold"],
    "history": ["history-base","history-hash","history-hash-ie","history-html5"],
    "io": ["io-base","io-xdr","io-form","io-upload-iframe","io-queue"],
    "json": ["json-parse","json-stringify"],
    "loader": ["loader-base","loader-rollup","loader-yui3"],
    "node": ["node-base","node-event-delegate","node-pluginhost","node-screen","node-style"],
    "pluginhost": ["pluginhost-base","pluginhost-config"],
    "querystring": ["querystring-parse","querystring-stringify"],
    "recordset": ["recordset-base","recordset-sort","recordset-filter","recordset-indexer"],
    "resize": ["resize-base","resize-proxy","resize-constrain"],
    "slider": ["slider-base","slider-value-range","clickable-rail","range-slider"],
    "template": ["template-base","template-micro"],
    "text": ["text-accentfold","text-wordbreak"],
    "widget": ["widget-base","widget-htmlparser","widget-skin","widget-uievents"]
};


}, '3.10.1', {"use": ["get", "features", "intl-base", "yui-log", "yui-later"]});
YUI.add('get', function (Y, NAME) {

/*jslint boss:true, expr:true, laxbreak: true */

/**
Provides dynamic loading of remote JavaScript and CSS resources.

@module get
@class Get
@static
**/

var Lang = Y.Lang,

    CUSTOM_ATTRS, // defined lazily in Y.Get.Transaction._createNode()

    Get, Transaction;

Y.Get = Get = {
    // -- Public Properties ----------------------------------------------------

    /**
    Default options for CSS requests. Options specified here will override
    global defaults for CSS requests.

    See the `options` property for all available options.

    @property cssOptions
    @type Object
    @static
    @since 3.5.0
    **/
    cssOptions: {
        attributes: {
            rel: 'stylesheet'
        },

        doc         : Y.config.linkDoc || Y.config.doc,
        pollInterval: 50
    },

    /**
    Default options for JS requests. Options specified here will override global
    defaults for JS requests.

    See the `options` property for all available options.

    @property jsOptions
    @type Object
    @static
    @since 3.5.0
    **/
    jsOptions: {
        autopurge: true,
        doc      : Y.config.scriptDoc || Y.config.doc
    },

    /**
    Default options to use for all requests.

    Note that while all available options are documented here for ease of
    discovery, some options (like callback functions) only make sense at the
    transaction level.

    Callback functions specified via the options object or the `options`
    parameter of the `css()`, `js()`, or `load()` methods will receive the
    transaction object as a parameter. See `Y.Get.Transaction` for details on
    the properties and methods available on transactions.

    @static
    @since 3.5.0
    @property {Object} options

    @property {Boolean} [options.async=false] Whether or not to load scripts
        asynchronously, meaning they're requested in parallel and execution
        order is not guaranteed. Has no effect on CSS, since CSS is always
        loaded asynchronously.

    @property {Object} [options.attributes] HTML attribute name/value pairs that
        should be added to inserted nodes. By default, the `charset` attribute
        will be set to "utf-8" and nodes will be given an auto-generated `id`
        attribute, but you can override these with your own values if desired.

    @property {Boolean} [options.autopurge] Whether or not to automatically
        purge inserted nodes after the purge threshold is reached. This is
        `true` by default for JavaScript, but `false` for CSS since purging a
        CSS node will also remove any styling applied by the referenced file.

    @property {Object} [options.context] `this` object to use when calling
        callback functions. Defaults to the transaction object.

    @property {Mixed} [options.data] Arbitrary data object to pass to "on*"
        callbacks.

    @property {Document} [options.doc] Document into which nodes should be
        inserted. By default, the current document is used.

    @property {HTMLElement|String} [options.insertBefore] HTML element or id
        string of an element before which all generated nodes should be
        inserted. If not specified, Get will automatically determine the best
        place to insert nodes for maximum compatibility.

    @property {Function} [options.onEnd] Callback to execute after a transaction
        is complete, regardless of whether it succeeded or failed.

    @property {Function} [options.onFailure] Callback to execute after a
        transaction fails, times out, or is aborted.

    @property {Function} [options.onProgress] Callback to execute after each
        individual request in a transaction either succeeds or fails.

    @property {Function} [options.onSuccess] Callback to execute after a
        transaction completes successfully with no errors. Note that in browsers
        that don't support the `error` event on CSS `<link>` nodes, a failed CSS
        request may still be reported as a success because in these browsers
        it can be difficult or impossible to distinguish between success and
        failure for CSS resources.

    @property {Function} [options.onTimeout] Callback to execute after a
        transaction times out.

    @property {Number} [options.pollInterval=50] Polling interval (in
        milliseconds) for detecting CSS load completion in browsers that don't
        support the `load` event on `<link>` nodes. This isn't used for
        JavaScript.

    @property {Number} [options.purgethreshold=20] Number of nodes to insert
        before triggering an automatic purge when `autopurge` is `true`.

    @property {Number} [options.timeout] Number of milliseconds to wait before
        aborting a transaction. When a timeout occurs, the `onTimeout` callback
        is called, followed by `onFailure` and finally `onEnd`. By default,
        there is no timeout.

    @property {String} [options.type] Resource type ("css" or "js"). This option
        is set automatically by the `css()` and `js()` functions and will be
        ignored there, but may be useful when using the `load()` function. If
        not specified, the type will be inferred from the URL, defaulting to
        "js" if the URL doesn't contain a recognizable file extension.
    **/
    options: {
        attributes: {
            charset: 'utf-8'
        },

        purgethreshold: 20
    },

    // -- Protected Properties -------------------------------------------------

    /**
    Regex that matches a CSS URL. Used to guess the file type when it's not
    specified.

    @property REGEX_CSS
    @type RegExp
    @final
    @protected
    @static
    @since 3.5.0
    **/
    REGEX_CSS: /\.css(?:[?;].*)?$/i,

    /**
    Regex that matches a JS URL. Used to guess the file type when it's not
    specified.

    @property REGEX_JS
    @type RegExp
    @final
    @protected
    @static
    @since 3.5.0
    **/
    REGEX_JS : /\.js(?:[?;].*)?$/i,

    /**
    Contains information about the current environment, such as what script and
    link injection features it supports.

    This object is created and populated the first time the `_getEnv()` method
    is called.

    @property _env
    @type Object
    @protected
    @static
    @since 3.5.0
    **/

    /**
    Mapping of document _yuid strings to <head> or <base> node references so we
    don't have to look the node up each time we want to insert a request node.

    @property _insertCache
    @type Object
    @protected
    @static
    @since 3.5.0
    **/
    _insertCache: {},

    /**
    Information about the currently pending transaction, if any.

    This is actually an object with two properties: `callback`, containing the
    optional callback passed to `css()`, `load()`, or `js()`; and `transaction`,
    containing the actual transaction instance.

    @property _pending
    @type Object
    @protected
    @static
    @since 3.5.0
    **/
    _pending: null,

    /**
    HTML nodes eligible to be purged next time autopurge is triggered.

    @property _purgeNodes
    @type HTMLElement[]
    @protected
    @static
    @since 3.5.0
    **/
    _purgeNodes: [],

    /**
    Queued transactions and associated callbacks.

    @property _queue
    @type Object[]
    @protected
    @static
    @since 3.5.0
    **/
    _queue: [],

    // -- Public Methods -------------------------------------------------------

    /**
    Aborts the specified transaction.

    This will cause the transaction's `onFailure` callback to be called and
    will prevent any new script and link nodes from being added to the document,
    but any resources that have already been requested will continue loading
    (there's no safe way to prevent this, unfortunately).

    *Note:* This method is deprecated as of 3.5.0, and will be removed in a
    future version of YUI. Use the transaction-level `abort()` method instead.

    @method abort
    @param {Get.Transaction} transaction Transaction to abort.
    @deprecated Use the `abort()` method on the transaction instead.
    @static
    **/
    abort: function (transaction) {
        var i, id, item, len, pending;


        if (!transaction.abort) {
            id          = transaction;
            pending     = this._pending;
            transaction = null;

            if (pending && pending.transaction.id === id) {
                transaction   = pending.transaction;
                this._pending = null;
            } else {
                for (i = 0, len = this._queue.length; i < len; ++i) {
                    item = this._queue[i].transaction;

                    if (item.id === id) {
                        transaction = item;
                        this._queue.splice(i, 1);
                        break;
                    }
                }
            }
        }

        transaction && transaction.abort();
    },

    /**
    Loads one or more CSS files.

    The _urls_ parameter may be provided as a URL string, a request object,
    or an array of URL strings and/or request objects.

    A request object is just an object that contains a `url` property and zero
    or more options that should apply specifically to that request.
    Request-specific options take priority over transaction-level options and
    default options.

    URLs may be relative or absolute, and do not have to have the same origin
    as the current page.

    The `options` parameter may be omitted completely and a callback passed in
    its place, if desired.

    @example

        // Load a single CSS file and log a message on completion.
        Y.Get.css('foo.css', function (err) {
            if (err) {
            } else {
            }
        });

        // Load multiple CSS files and log a message when all have finished
        // loading.
        var urls = ['foo.css', 'http://example.com/bar.css', 'baz/quux.css'];

        Y.Get.css(urls, function (err) {
            if (err) {
            } else {
            }
        });

        // Specify transaction-level options, which will apply to all requests
        // within the transaction.
        Y.Get.css(urls, {
            attributes: {'class': 'my-css'},
            timeout   : 5000
        });

        // Specify per-request options, which override transaction-level and
        // default options.
        Y.Get.css([
            {url: 'foo.css', attributes: {id: 'foo'}},
            {url: 'bar.css', attributes: {id: 'bar', charset: 'iso-8859-1'}}
        ]);

    @method css
    @param {String|Object|Array} urls URL string, request object, or array
        of URLs and/or request objects to load.
    @param {Object} [options] Options for this transaction. See the
        `Y.Get.options` property for a complete list of available options.
    @param {Function} [callback] Callback function to be called on completion.
        This is a general callback and will be called before any more granular
        callbacks (`onSuccess`, `onFailure`, etc.) specified in the `options`
        object.

        @param {Array|null} callback.err Array of errors that occurred during
            the transaction, or `null` on success.
        @param {Get.Transaction} callback.transaction Transaction object.

    @return {Get.Transaction} Transaction object.
    @static
    **/
    css: function (urls, options, callback) {
        return this._load('css', urls, options, callback);
    },

    /**
    Loads one or more JavaScript resources.

    The _urls_ parameter may be provided as a URL string, a request object,
    or an array of URL strings and/or request objects.

    A request object is just an object that contains a `url` property and zero
    or more options that should apply specifically to that request.
    Request-specific options take priority over transaction-level options and
    default options.

    URLs may be relative or absolute, and do not have to have the same origin
    as the current page.

    The `options` parameter may be omitted completely and a callback passed in
    its place, if desired.

    Scripts will be executed in the order they're specified unless the `async`
    option is `true`, in which case they'll be loaded in parallel and executed
    in whatever order they finish loading.

    @example

        // Load a single JS file and log a message on completion.
        Y.Get.js('foo.js', function (err) {
            if (err) {
            } else {
            }
        });

        // Load multiple JS files, execute them in order, and log a message when
        // all have finished loading.
        var urls = ['foo.js', 'http://example.com/bar.js', 'baz/quux.js'];

        Y.Get.js(urls, function (err) {
            if (err) {
            } else {
            }
        });

        // Specify transaction-level options, which will apply to all requests
        // within the transaction.
        Y.Get.js(urls, {
            attributes: {'class': 'my-js'},
            timeout   : 5000
        });

        // Specify per-request options, which override transaction-level and
        // default options.
        Y.Get.js([
            {url: 'foo.js', attributes: {id: 'foo'}},
            {url: 'bar.js', attributes: {id: 'bar', charset: 'iso-8859-1'}}
        ]);

    @method js
    @param {String|Object|Array} urls URL string, request object, or array
        of URLs and/or request objects to load.
    @param {Object} [options] Options for this transaction. See the
        `Y.Get.options` property for a complete list of available options.
    @param {Function} [callback] Callback function to be called on completion.
        This is a general callback and will be called before any more granular
        callbacks (`onSuccess`, `onFailure`, etc.) specified in the `options`
        object.

        @param {Array|null} callback.err Array of errors that occurred during
            the transaction, or `null` on success.
        @param {Get.Transaction} callback.transaction Transaction object.

    @return {Get.Transaction} Transaction object.
    @since 3.5.0
    @static
    **/
    js: function (urls, options, callback) {
        return this._load('js', urls, options, callback);
    },

    /**
    Loads one or more CSS and/or JavaScript resources in the same transaction.

    Use this method when you want to load both CSS and JavaScript in a single
    transaction and be notified when all requested URLs have finished loading,
    regardless of type.

    Behavior and options are the same as for the `css()` and `js()` methods. If
    a resource type isn't specified in per-request options or transaction-level
    options, Get will guess the file type based on the URL's extension (`.css`
    or `.js`, with or without a following query string). If the file type can't
    be guessed from the URL, a warning will be logged and Get will assume the
    URL is a JavaScript resource.

    @example

        // Load both CSS and JS files in a single transaction, and log a message
        // when all files have finished loading.
        Y.Get.load(['foo.css', 'bar.js', 'baz.css'], function (err) {
            if (err) {
            } else {
            }
        });

    @method load
    @param {String|Object|Array} urls URL string, request object, or array
        of URLs and/or request objects to load.
    @param {Object} [options] Options for this transaction. See the
        `Y.Get.options` property for a complete list of available options.
    @param {Function} [callback] Callback function to be called on completion.
        This is a general callback and will be called before any more granular
        callbacks (`onSuccess`, `onFailure`, etc.) specified in the `options`
        object.

        @param {Array|null} err Array of errors that occurred during the
            transaction, or `null` on success.
        @param {Get.Transaction} Transaction object.

    @return {Get.Transaction} Transaction object.
    @since 3.5.0
    @static
    **/
    load: function (urls, options, callback) {
        return this._load(null, urls, options, callback);
    },

    // -- Protected Methods ----------------------------------------------------

    /**
    Triggers an automatic purge if the purge threshold has been reached.

    @method _autoPurge
    @param {Number} threshold Purge threshold to use, in milliseconds.
    @protected
    @since 3.5.0
    @static
    **/
    _autoPurge: function (threshold) {
        if (threshold && this._purgeNodes.length >= threshold) {
            this._purge(this._purgeNodes);
        }
    },

    /**
    Populates the `_env` property with information about the current
    environment.

    @method _getEnv
    @return {Object} Environment information.
    @protected
    @since 3.5.0
    @static
    **/
    _getEnv: function () {
        var doc = Y.config.doc,
            ua  = Y.UA;

        // Note: some of these checks require browser sniffs since it's not
        // feasible to load test files on every pageview just to perform a
        // feature test. I'm sorry if this makes you sad.
        return (this._env = {

            // True if this is a browser that supports disabling async mode on
            // dynamically created script nodes. See
            // https://developer.mozilla.org/En/HTML/Element/Script#Attributes

            // IE10 doesn't return true for the MDN feature test, so setting it explicitly,
            // because it is async by default, and allows you to disable async by setting it to false
            async: (doc && doc.createElement('script').async === true) || (ua.ie >= 10),

            // True if this browser fires an event when a dynamically injected
            // link node fails to load. This is currently true for Firefox 9+
            // and WebKit 535.24+
            cssFail: ua.gecko >= 9 || ua.compareVersions(ua.webkit, 535.24) >= 0,

            // True if this browser fires an event when a dynamically injected
            // link node finishes loading. This is currently true for IE, Opera,
            // Firefox 9+, and WebKit 535.24+. Note that IE versions <9 fire the
            // DOM 0 "onload" event, but not "load". All versions of IE fire
            // "onload".
            // davglass: Seems that Chrome on Android needs this to be false.
            cssLoad: (
                    (!ua.gecko && !ua.webkit) || ua.gecko >= 9 ||
                    ua.compareVersions(ua.webkit, 535.24) >= 0
                ) && !(ua.chrome && ua.chrome <= 18),

            // True if this browser preserves script execution order while
            // loading scripts in parallel as long as the script node's `async`
            // attribute is set to false to explicitly disable async execution.
            preservesScriptOrder: !!(ua.gecko || ua.opera || (ua.ie && ua.ie >= 10))
        });
    },

    _getTransaction: function (urls, options) {
        var requests = [],
            i, len, req, url;

        if (!Lang.isArray(urls)) {
            urls = [urls];
        }

        options = Y.merge(this.options, options);

        // Clone the attributes object so we don't end up modifying it by ref.
        options.attributes = Y.merge(this.options.attributes,
                options.attributes);

        for (i = 0, len = urls.length; i < len; ++i) {
            url = urls[i];
            req = {attributes: {}};

            // If `url` is a string, we create a URL object for it, then mix in
            // global options and request-specific options. If it's an object
            // with a "url" property, we assume it's a request object containing
            // URL-specific options.
            if (typeof url === 'string') {
                req.url = url;
            } else if (url.url) {
                // URL-specific options override both global defaults and
                // request-specific options.
                Y.mix(req, url, false, null, 0, true);
                url = url.url; // Make url a string so we can use it later.
            } else {
                continue;
            }

            Y.mix(req, options, false, null, 0, true);

            // If we didn't get an explicit type for this URL either in the
            // request options or the URL-specific options, try to determine
            // one from the file extension.
            if (!req.type) {
                if (this.REGEX_CSS.test(url)) {
                    req.type = 'css';
                } else {
                    if (!this.REGEX_JS.test(url)) {
                    }

                    req.type = 'js';
                }
            }

            // Mix in type-specific default options, but don't overwrite any
            // options that have already been set.
            Y.mix(req, req.type === 'js' ? this.jsOptions : this.cssOptions,
                false, null, 0, true);

            // Give the node an id attribute if it doesn't already have one.
            req.attributes.id || (req.attributes.id = Y.guid());

            // Backcompat for <3.5.0 behavior.
            if (req.win) {
                req.doc = req.win.document;
            } else {
                req.win = req.doc.defaultView || req.doc.parentWindow;
            }

            if (req.charset) {
                req.attributes.charset = req.charset;
            }

            requests.push(req);
        }

        return new Transaction(requests, options);
    },

    _load: function (type, urls, options, callback) {
        var transaction;

        // Allow callback as third param.
        if (typeof options === 'function') {
            callback = options;
            options  = {};
        }

        options || (options = {});
        options.type = type;

        options._onFinish = Get._onTransactionFinish;

        if (!this._env) {
            this._getEnv();
        }

        transaction = this._getTransaction(urls, options);

        this._queue.push({
            callback   : callback,
            transaction: transaction
        });

        this._next();

        return transaction;
    },

    _onTransactionFinish : function() {
        Get._pending = null;
        Get._next();
    },

    _next: function () {
        var item;

        if (this._pending) {
            return;
        }

        item = this._queue.shift();

        if (item) {
            this._pending = item;
            item.transaction.execute(item.callback);
        }
    },

    _purge: function (nodes) {
        var purgeNodes    = this._purgeNodes,
            isTransaction = nodes !== purgeNodes,
            index, node;

        while (node = nodes.pop()) { // assignment
            // Don't purge nodes that haven't finished loading (or errored out),
            // since this can hang the transaction.
            if (!node._yuiget_finished) {
                continue;
            }

            node.parentNode && node.parentNode.removeChild(node);

            // If this is a transaction-level purge and this node also exists in
            // the Get-level _purgeNodes array, we need to remove it from
            // _purgeNodes to avoid creating a memory leak. The indexOf lookup
            // sucks, but until we get WeakMaps, this is the least troublesome
            // way to do this (we can't just hold onto node ids because they may
            // not be in the same document).
            if (isTransaction) {
                index = Y.Array.indexOf(purgeNodes, node);

                if (index > -1) {
                    purgeNodes.splice(index, 1);
                }
            }
        }
    }
};

/**
Alias for `js()`.

@method script
@static
**/
Get.script = Get.js;

/**
Represents a Get transaction, which may contain requests for one or more JS or
CSS files.

This class should not be instantiated manually. Instances will be created and
returned as needed by Y.Get's `css()`, `js()`, and `load()` methods.

@class Get.Transaction
@constructor
@since 3.5.0
**/
Get.Transaction = Transaction = function (requests, options) {
    var self = this;

    self.id       = Transaction._lastId += 1;
    self.data     = options.data;
    self.errors   = [];
    self.nodes    = [];
    self.options  = options;
    self.requests = requests;

    self._callbacks = []; // callbacks to call after execution finishes
    self._queue     = [];
    self._reqsWaiting   = 0;

    // Deprecated pre-3.5.0 properties.
    self.tId = self.id; // Use `id` instead.
    self.win = options.win || Y.config.win;
};

/**
Arbitrary data object associated with this transaction.

This object comes from the options passed to `Get.css()`, `Get.js()`, or
`Get.load()`, and will be `undefined` if no data object was specified.

@property {Object} data
**/

/**
Array of errors that have occurred during this transaction, if any.

@since 3.5.0
@property {Object[]} errors
@property {String} errors.error Error message.
@property {Object} errors.request Request object related to the error.
**/

/**
Numeric id for this transaction, unique among all transactions within the same
YUI sandbox in the current pageview.

@property {Number} id
@since 3.5.0
**/

/**
HTMLElement nodes (native ones, not YUI Node instances) that have been inserted
during the current transaction.

@property {HTMLElement[]} nodes
**/

/**
Options associated with this transaction.

See `Get.options` for the full list of available options.

@property {Object} options
@since 3.5.0
**/

/**
Request objects contained in this transaction. Each request object represents
one CSS or JS URL that will be (or has been) requested and loaded into the page.

@property {Object} requests
@since 3.5.0
**/

/**
Id of the most recent transaction.

@property _lastId
@type Number
@protected
@static
**/
Transaction._lastId = 0;

Transaction.prototype = {
    // -- Public Properties ----------------------------------------------------

    /**
    Current state of this transaction. One of "new", "executing", or "done".

    @property _state
    @type String
    @protected
    **/
    _state: 'new', // "new", "executing", or "done"

    // -- Public Methods -------------------------------------------------------

    /**
    Aborts this transaction.

    This will cause the transaction's `onFailure` callback to be called and
    will prevent any new script and link nodes from being added to the document,
    but any resources that have already been requested will continue loading
    (there's no safe way to prevent this, unfortunately).

    @method abort
    @param {String} [msg="Aborted."] Optional message to use in the `errors`
        array describing why the transaction was aborted.
    **/
    abort: function (msg) {
        this._pending    = null;
        this._pendingCSS = null;
        this._pollTimer  = clearTimeout(this._pollTimer);
        this._queue      = [];
        this._reqsWaiting    = 0;

        this.errors.push({error: msg || 'Aborted'});
        this._finish();
    },

    /**
    Begins execting the transaction.

    There's usually no reason to call this manually, since Get will call it
    automatically when other pending transactions have finished. If you really
    want to execute your transaction before Get does, you can, but be aware that
    this transaction's scripts may end up executing before the scripts in other
    pending transactions.

    If the transaction is already executing, the specified callback (if any)
    will be queued and called after execution finishes. If the transaction has
    already finished, the callback will be called immediately (the transaction
    will not be executed again).

    @method execute
    @param {Function} callback Callback function to execute after all requests
        in the transaction are complete, or after the transaction is aborted.
    **/
    execute: function (callback) {
        var self     = this,
            requests = self.requests,
            state    = self._state,
            i, len, queue, req;

        if (state === 'done') {
            callback && callback(self.errors.length ? self.errors : null, self);
            return;
        } else {
            callback && self._callbacks.push(callback);

            if (state === 'executing') {
                return;
            }
        }

        self._state = 'executing';
        self._queue = queue = [];

        if (self.options.timeout) {
            self._timeout = setTimeout(function () {
                self.abort('Timeout');
            }, self.options.timeout);
        }

        self._reqsWaiting = requests.length;

        for (i = 0, len = requests.length; i < len; ++i) {
            req = requests[i];

            if (req.async || req.type === 'css') {
                // No need to queue CSS or fully async JS.
                self._insert(req);
            } else {
                queue.push(req);
            }
        }

        self._next();
    },

    /**
    Manually purges any `<script>` or `<link>` nodes this transaction has
    created.

    Be careful when purging a transaction that contains CSS requests, since
    removing `<link>` nodes will also remove any styles they applied.

    @method purge
    **/
    purge: function () {
        Get._purge(this.nodes);
    },

    // -- Protected Methods ----------------------------------------------------
    _createNode: function (name, attrs, doc) {
        var node = doc.createElement(name),
            attr, testEl;

        if (!CUSTOM_ATTRS) {
            // IE6 and IE7 expect property names rather than attribute names for
            // certain attributes. Rather than sniffing, we do a quick feature
            // test the first time _createNode() runs to determine whether we
            // need to provide a workaround.
            testEl = doc.createElement('div');
            testEl.setAttribute('class', 'a');

            CUSTOM_ATTRS = testEl.className === 'a' ? {} : {
                'for'  : 'htmlFor',
                'class': 'className'
            };
        }

        for (attr in attrs) {
            if (attrs.hasOwnProperty(attr)) {
                node.setAttribute(CUSTOM_ATTRS[attr] || attr, attrs[attr]);
            }
        }

        return node;
    },

    _finish: function () {
        var errors  = this.errors.length ? this.errors : null,
            options = this.options,
            thisObj = options.context || this,
            data, i, len;

        if (this._state === 'done') {
            return;
        }

        this._state = 'done';

        for (i = 0, len = this._callbacks.length; i < len; ++i) {
            this._callbacks[i].call(thisObj, errors, this);
        }

        data = this._getEventData();

        if (errors) {
            if (options.onTimeout && errors[errors.length - 1].error === 'Timeout') {
                options.onTimeout.call(thisObj, data);
            }

            if (options.onFailure) {
                options.onFailure.call(thisObj, data);
            }
        } else if (options.onSuccess) {
            options.onSuccess.call(thisObj, data);
        }

        if (options.onEnd) {
            options.onEnd.call(thisObj, data);
        }

        if (options._onFinish) {
            options._onFinish();
        }
    },

    _getEventData: function (req) {
        if (req) {
            // This merge is necessary for backcompat. I hate it.
            return Y.merge(this, {
                abort  : this.abort, // have to copy these because the prototype isn't preserved
                purge  : this.purge,
                request: req,
                url    : req.url,
                win    : req.win
            });
        } else {
            return this;
        }
    },

    _getInsertBefore: function (req) {
        var doc = req.doc,
            el  = req.insertBefore,
            cache, docStamp;

        if (el) {
            return typeof el === 'string' ? doc.getElementById(el) : el;
        }

        cache    = Get._insertCache;
        docStamp = Y.stamp(doc);

        if ((el = cache[docStamp])) { // assignment
            return el;
        }

        // Inserting before a <base> tag apparently works around an IE bug
        // (according to a comment from pre-3.5.0 Y.Get), but I'm not sure what
        // bug that is, exactly. Better safe than sorry?
        if ((el = doc.getElementsByTagName('base')[0])) { // assignment
            return (cache[docStamp] = el);
        }

        // Look for a <head> element.
        el = doc.head || doc.getElementsByTagName('head')[0];

        if (el) {
            // Create a marker node at the end of <head> to use as an insertion
            // point. Inserting before this node will ensure that all our CSS
            // gets inserted in the correct order, to maintain style precedence.
            el.appendChild(doc.createTextNode(''));
            return (cache[docStamp] = el.lastChild);
        }

        // If all else fails, just insert before the first script node on the
        // page, which is virtually guaranteed to exist.
        return (cache[docStamp] = doc.getElementsByTagName('script')[0]);
    },

    _insert: function (req) {
        var env          = Get._env,
            insertBefore = this._getInsertBefore(req),
            isScript     = req.type === 'js',
            node         = req.node,
            self         = this,
            ua           = Y.UA,
            cssTimeout, nodeType;

        if (!node) {
            if (isScript) {
                nodeType = 'script';
            } else if (!env.cssLoad && ua.gecko) {
                nodeType = 'style';
            } else {
                nodeType = 'link';
            }

            node = req.node = this._createNode(nodeType, req.attributes,
                req.doc);
        }

        function onError() {
            self._progress('Failed to load ' + req.url, req);
        }

        function onLoad() {
            if (cssTimeout) {
                clearTimeout(cssTimeout);
            }

            self._progress(null, req);
        }

        // Deal with script asynchronicity.
        if (isScript) {
            node.setAttribute('src', req.url);

            if (req.async) {
                // Explicitly indicate that we want the browser to execute this
                // script asynchronously. This is necessary for older browsers
                // like Firefox <4.
                node.async = true;
            } else {
                if (env.async) {
                    // This browser treats injected scripts as async by default
                    // (standard HTML5 behavior) but asynchronous loading isn't
                    // desired, so tell the browser not to mark this script as
                    // async.
                    node.async = false;
                }

                // If this browser doesn't preserve script execution order based
                // on insertion order, we'll need to avoid inserting other
                // scripts until this one finishes loading.
                if (!env.preservesScriptOrder) {
                    this._pending = req;
                }
            }
        } else {
            if (!env.cssLoad && ua.gecko) {
                // In Firefox <9, we can import the requested URL into a <style>
                // node and poll for the existence of node.sheet.cssRules. This
                // gives us a reliable way to determine CSS load completion that
                // also works for cross-domain stylesheets.
                //
                // Props to Zach Leatherman for calling my attention to this
                // technique.
                node.innerHTML = (req.attributes.charset ?
                    '@charset "' + req.attributes.charset + '";' : '') +
                    '@import "' + req.url + '";';
            } else {
                node.setAttribute('href', req.url);
            }
        }

        // Inject the node.
        if (isScript && ua.ie && (ua.ie < 9 || (document.documentMode && document.documentMode < 9))) {
            // Script on IE < 9, and IE 9+ when in IE 8 or older modes, including quirks mode.
            node.onreadystatechange = function () {
                if (/loaded|complete/.test(node.readyState)) {
                    node.onreadystatechange = null;
                    onLoad();
                }
            };
        } else if (!isScript && !env.cssLoad) {
            // CSS on Firefox <9 or WebKit.
            this._poll(req);
        } else {
            // Script or CSS on everything else. Using DOM 0 events because that
            // evens the playing field with older IEs.

            if (ua.ie >= 10) {

                // We currently need to introduce a timeout for IE10, since it
                // calls onerror/onload synchronously for 304s - messing up existing
                // program flow.

                // Remove this block if the following bug gets fixed by GA
                /*jshint maxlen: 1500 */
                // https://connect.microsoft.com/IE/feedback/details/763871/dynamically-loaded-scripts-with-304s-responses-interrupt-the-currently-executing-js-thread-onload
                node.onerror = function() { setTimeout(onError, 0); };
                node.onload  = function() { setTimeout(onLoad, 0); };
            } else {
                node.onerror = onError;
                node.onload  = onLoad;
            }

            // If this browser doesn't fire an event when CSS fails to load,
            // fail after a timeout to avoid blocking the transaction queue.
            if (!env.cssFail && !isScript) {
                cssTimeout = setTimeout(onError, req.timeout || 3000);
            }
        }

        this.nodes.push(node);
        insertBefore.parentNode.insertBefore(node, insertBefore);
    },

    _next: function () {
        if (this._pending) {
            return;
        }

        // If there are requests in the queue, insert the next queued request.
        // Otherwise, if we're waiting on already-inserted requests to finish,
        // wait longer. If there are no queued requests and we're not waiting
        // for anything to load, then we're done!
        if (this._queue.length) {
            this._insert(this._queue.shift());
        } else if (!this._reqsWaiting) {
            this._finish();
        }
    },

    _poll: function (newReq) {
        var self       = this,
            pendingCSS = self._pendingCSS,
            isWebKit   = Y.UA.webkit,
            i, hasRules, j, nodeHref, req, sheets;

        if (newReq) {
            pendingCSS || (pendingCSS = self._pendingCSS = []);
            pendingCSS.push(newReq);

            if (self._pollTimer) {
                // A poll timeout is already pending, so no need to create a
                // new one.
                return;
            }
        }

        self._pollTimer = null;

        // Note: in both the WebKit and Gecko hacks below, a CSS URL that 404s
        // will still be treated as a success. There's no good workaround for
        // this.

        for (i = 0; i < pendingCSS.length; ++i) {
            req = pendingCSS[i];

            if (isWebKit) {
                // Look for a stylesheet matching the pending URL.
                sheets   = req.doc.styleSheets;
                j        = sheets.length;
                nodeHref = req.node.href;

                while (--j >= 0) {
                    if (sheets[j].href === nodeHref) {
                        pendingCSS.splice(i, 1);
                        i -= 1;
                        self._progress(null, req);
                        break;
                    }
                }
            } else {
                // Many thanks to Zach Leatherman for calling my attention to
                // the @import-based cross-domain technique used here, and to
                // Oleg Slobodskoi for an earlier same-domain implementation.
                //
                // See Zach's blog for more details:
                // http://www.zachleat.com/web/2010/07/29/load-css-dynamically/
                try {
                    // We don't really need to store this value since we never
                    // use it again, but if we don't store it, Closure Compiler
                    // assumes the code is useless and removes it.
                    hasRules = !!req.node.sheet.cssRules;

                    // If we get here, the stylesheet has loaded.
                    pendingCSS.splice(i, 1);
                    i -= 1;
                    self._progress(null, req);
                } catch (ex) {
                    // An exception means the stylesheet is still loading.
                }
            }
        }

        if (pendingCSS.length) {
            self._pollTimer = setTimeout(function () {
                self._poll.call(self);
            }, self.options.pollInterval);
        }
    },

    _progress: function (err, req) {
        var options = this.options;

        if (err) {
            req.error = err;

            this.errors.push({
                error  : err,
                request: req
            });

        }

        req.node._yuiget_finished = req.finished = true;

        if (options.onProgress) {
            options.onProgress.call(options.context || this,
                this._getEventData(req));
        }

        if (req.autopurge) {
            // Pre-3.5.0 Get always excludes the most recent node from an
            // autopurge. I find this odd, but I'm keeping that behavior for
            // the sake of backcompat.
            Get._autoPurge(this.options.purgethreshold);
            Get._purgeNodes.push(req.node);
        }

        if (this._pending === req) {
            this._pending = null;
        }

        this._reqsWaiting -= 1;

        this._next();
    }
};


}, '3.10.1', {"requires": ["yui-base"]});
YUI.add('features', function (Y, NAME) {

var feature_tests = {};

/**
Contains the core of YUI's feature test architecture.
@module features
*/

/**
* Feature detection
* @class Features
* @static
*/

Y.mix(Y.namespace('Features'), {

    /**
    * Object hash of all registered feature tests
    * @property tests
    * @type Object
    */
    tests: feature_tests,

    /**
    * Add a test to the system
    *
    *   ```
    *   Y.Features.add("load", "1", {});
    *   ```
    *
    * @method add
    * @param {String} cat The category, right now only 'load' is supported
    * @param {String} name The number sequence of the test, how it's reported in the URL or config: 1, 2, 3
    * @param {Object} o Object containing test properties
    * @param {String} o.name The name of the test
    * @param {Function} o.test The test function to execute, the only argument to the function is the `Y` instance
    * @param {String} o.trigger The module that triggers this test.
    */
    add: function(cat, name, o) {
        feature_tests[cat] = feature_tests[cat] || {};
        feature_tests[cat][name] = o;
    },
    /**
    * Execute all tests of a given category and return the serialized results
    *
    *   ```
    *   caps=1:1;2:1;3:0
    *   ```
    * @method all
    * @param {String} cat The category to execute
    * @param {Array} args The arguments to pass to the test function
    * @return {String} A semi-colon separated string of tests and their success/failure: 1:1;2:1;3:0
    */
    all: function(cat, args) {
        var cat_o = feature_tests[cat],
            // results = {};
            result = [];
        if (cat_o) {
            Y.Object.each(cat_o, function(v, k) {
                result.push(k + ':' + (Y.Features.test(cat, k, args) ? 1 : 0));
            });
        }

        return (result.length) ? result.join(';') : '';
    },
    /**
    * Run a sepecific test and return a Boolean response.
    *
    *   ```
    *   Y.Features.test("load", "1");
    *   ```
    *
    * @method test
    * @param {String} cat The category of the test to run
    * @param {String} name The name of the test to run
    * @param {Array} args The arguments to pass to the test function
    * @return {Boolean} True or false if the test passed/failed.
    */
    test: function(cat, name, args) {
        args = args || [];
        var result, ua, test,
            cat_o = feature_tests[cat],
            feature = cat_o && cat_o[name];

        if (!feature) {
        } else {

            result = feature.result;

            if (Y.Lang.isUndefined(result)) {

                ua = feature.ua;
                if (ua) {
                    result = (Y.UA[ua]);
                }

                test = feature.test;
                if (test && ((!ua) || result)) {
                    result = test.apply(Y, args);
                }

                feature.result = result;
            }
        }

        return result;
    }
});

// Y.Features.add("load", "1", {});
// Y.Features.test("load", "1");
// caps=1:1;2:0;3:1;

/* This file is auto-generated by (yogi loader --yes --mix --start ../) */
/*jshint maxlen:900, eqeqeq: false */
var add = Y.Features.add;
// app-transitions-native
add('load', '0', {
    "name": "app-transitions-native",
    "test": function (Y) {
    var doc  = Y.config.doc,
        node = doc ? doc.documentElement : null;

    if (node && node.style) {
        return ('MozTransition' in node.style || 'WebkitTransition' in node.style || 'transition' in node.style);
    }

    return false;
},
    "trigger": "app-transitions"
});
// autocomplete-list-keys
add('load', '1', {
    "name": "autocomplete-list-keys",
    "test": function (Y) {
    // Only add keyboard support to autocomplete-list if this doesn't appear to
    // be an iOS or Android-based mobile device.
    //
    // There's currently no feasible way to actually detect whether a device has
    // a hardware keyboard, so this sniff will have to do. It can easily be
    // overridden by manually loading the autocomplete-list-keys module.
    //
    // Worth noting: even though iOS supports bluetooth keyboards, Mobile Safari
    // doesn't fire the keyboard events used by AutoCompleteList, so there's
    // no point loading the -keys module even when a bluetooth keyboard may be
    // available.
    return !(Y.UA.ios || Y.UA.android);
},
    "trigger": "autocomplete-list"
});
// dd-gestures
add('load', '2', {
    "name": "dd-gestures",
    "trigger": "dd-drag",
    "ua": "touchEnabled"
});
// dom-style-ie
add('load', '3', {
    "name": "dom-style-ie",
    "test": function (Y) {

    var testFeature = Y.Features.test,
        addFeature = Y.Features.add,
        WINDOW = Y.config.win,
        DOCUMENT = Y.config.doc,
        DOCUMENT_ELEMENT = 'documentElement',
        ret = false;

    addFeature('style', 'computedStyle', {
        test: function() {
            return WINDOW && 'getComputedStyle' in WINDOW;
        }
    });

    addFeature('style', 'opacity', {
        test: function() {
            return DOCUMENT && 'opacity' in DOCUMENT[DOCUMENT_ELEMENT].style;
        }
    });

    ret =  (!testFeature('style', 'opacity') &&
            !testFeature('style', 'computedStyle'));

    return ret;
},
    "trigger": "dom-style"
});
// editor-para-ie
add('load', '4', {
    "name": "editor-para-ie",
    "trigger": "editor-para",
    "ua": "ie",
    "when": "instead"
});
// event-base-ie
add('load', '5', {
    "name": "event-base-ie",
    "test": function(Y) {
    var imp = Y.config.doc && Y.config.doc.implementation;
    return (imp && (!imp.hasFeature('Events', '2.0')));
},
    "trigger": "node-base"
});
// graphics-canvas
add('load', '6', {
    "name": "graphics-canvas",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useCanvas = Y.config.defaultGraphicEngine && Y.config.defaultGraphicEngine == "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
    return (!svg || useCanvas) && (canvas && canvas.getContext && canvas.getContext("2d"));
},
    "trigger": "graphics"
});
// graphics-canvas-default
add('load', '7', {
    "name": "graphics-canvas-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useCanvas = Y.config.defaultGraphicEngine && Y.config.defaultGraphicEngine == "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
    return (!svg || useCanvas) && (canvas && canvas.getContext && canvas.getContext("2d"));
},
    "trigger": "graphics"
});
// graphics-svg
add('load', '8', {
    "name": "graphics-svg",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useSVG = !Y.config.defaultGraphicEngine || Y.config.defaultGraphicEngine != "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));

    return svg && (useSVG || !canvas);
},
    "trigger": "graphics"
});
// graphics-svg-default
add('load', '9', {
    "name": "graphics-svg-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useSVG = !Y.config.defaultGraphicEngine || Y.config.defaultGraphicEngine != "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));

    return svg && (useSVG || !canvas);
},
    "trigger": "graphics"
});
// graphics-vml
add('load', '10', {
    "name": "graphics-vml",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        canvas = DOCUMENT && DOCUMENT.createElement("canvas");
    return (DOCUMENT && !DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") && (!canvas || !canvas.getContext || !canvas.getContext("2d")));
},
    "trigger": "graphics"
});
// graphics-vml-default
add('load', '11', {
    "name": "graphics-vml-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        canvas = DOCUMENT && DOCUMENT.createElement("canvas");
    return (DOCUMENT && !DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") && (!canvas || !canvas.getContext || !canvas.getContext("2d")));
},
    "trigger": "graphics"
});
// history-hash-ie
add('load', '12', {
    "name": "history-hash-ie",
    "test": function (Y) {
    var docMode = Y.config.doc && Y.config.doc.documentMode;

    return Y.UA.ie && (!('onhashchange' in Y.config.win) ||
            !docMode || docMode < 8);
},
    "trigger": "history-hash"
});
// io-nodejs
add('load', '13', {
    "name": "io-nodejs",
    "trigger": "io-base",
    "ua": "nodejs"
});
// json-parse-shim
add('load', '14', {
    "name": "json-parse-shim",
    "test": function (Y) {
    var _JSON = Y.config.global.JSON,
        Native = Object.prototype.toString.call(_JSON) === '[object JSON]' && _JSON,
        nativeSupport = Y.config.useNativeJSONParse !== false && !!Native;

    function workingNative( k, v ) {
        return k === "ok" ? true : v;
    }

    // Double check basic functionality.  This is mainly to catch early broken
    // implementations of the JSON API in Firefox 3.1 beta1 and beta2
    if ( nativeSupport ) {
        try {
            nativeSupport = ( Native.parse( '{"ok":false}', workingNative ) ).ok;
        }
        catch ( e ) {
            nativeSupport = false;
        }
    }

    return !nativeSupport;
},
    "trigger": "json-parse"
});
// json-stringify-shim
add('load', '15', {
    "name": "json-stringify-shim",
    "test": function (Y) {
    var _JSON = Y.config.global.JSON,
        Native = Object.prototype.toString.call(_JSON) === '[object JSON]' && _JSON,
        nativeSupport = Y.config.useNativeJSONStringify !== false && !!Native;

    // Double check basic native functionality.  This is primarily to catch broken
    // early JSON API implementations in Firefox 3.1 beta1 and beta2.
    if ( nativeSupport ) {
        try {
            nativeSupport = ( '0' === Native.stringify(0) );
        } catch ( e ) {
            nativeSupport = false;
        }
    }


    return !nativeSupport;
},
    "trigger": "json-stringify"
});
// scrollview-base-ie
add('load', '16', {
    "name": "scrollview-base-ie",
    "trigger": "scrollview-base",
    "ua": "ie"
});
// selector-css2
add('load', '17', {
    "name": "selector-css2",
    "test": function (Y) {
    var DOCUMENT = Y.config.doc,
        ret = DOCUMENT && !('querySelectorAll' in DOCUMENT);

    return ret;
},
    "trigger": "selector"
});
// transition-timer
add('load', '18', {
    "name": "transition-timer",
    "test": function (Y) {
    var DOCUMENT = Y.config.doc,
        node = (DOCUMENT) ? DOCUMENT.documentElement: null,
        ret = true;

    if (node && node.style) {
        ret = !('MozTransition' in node.style || 'WebkitTransition' in node.style || 'transition' in node.style);
    }

    return ret;
},
    "trigger": "transition"
});
// widget-base-ie
add('load', '19', {
    "name": "widget-base-ie",
    "trigger": "widget-base",
    "ua": "ie"
});
// yql-jsonp
add('load', '20', {
    "name": "yql-jsonp",
    "test": function (Y) {
    /* Only load the JSONP module when not in nodejs or winjs
    TODO Make the winjs module a CORS module
    */
    return (!Y.UA.nodejs && !Y.UA.winjs);
},
    "trigger": "yql",
    "when": "after"
});
// yql-nodejs
add('load', '21', {
    "name": "yql-nodejs",
    "trigger": "yql",
    "ua": "nodejs",
    "when": "after"
});
// yql-winjs
add('load', '22', {
    "name": "yql-winjs",
    "trigger": "yql",
    "ua": "winjs",
    "when": "after"
});

}, '3.10.1', {"requires": ["yui-base"]});
YUI.add('intl-base', function (Y, NAME) {

/**
 * The Intl utility provides a central location for managing sets of
 * localized resources (strings and formatting patterns).
 *
 * @class Intl
 * @uses EventTarget
 * @static
 */

var SPLIT_REGEX = /[, ]/;

Y.mix(Y.namespace('Intl'), {

 /**
    * Returns the language among those available that
    * best matches the preferred language list, using the Lookup
    * algorithm of BCP 47.
    * If none of the available languages meets the user's preferences,
    * then "" is returned.
    * Extended language ranges are not supported.
    *
    * @method lookupBestLang
    * @param {String[] | String} preferredLanguages The list of preferred
    * languages in descending preference order, represented as BCP 47
    * language tags. A string array or a comma-separated list.
    * @param {String[]} availableLanguages The list of languages
    * that the application supports, represented as BCP 47 language
    * tags.
    *
    * @return {String} The available language that best matches the
    * preferred language list, or "".
    * @since 3.1.0
    */
    lookupBestLang: function(preferredLanguages, availableLanguages) {

        var i, language, result, index;

        // check whether the list of available languages contains language;
        // if so return it
        function scan(language) {
            var i;
            for (i = 0; i < availableLanguages.length; i += 1) {
                if (language.toLowerCase() ===
                            availableLanguages[i].toLowerCase()) {
                    return availableLanguages[i];
                }
            }
        }

        if (Y.Lang.isString(preferredLanguages)) {
            preferredLanguages = preferredLanguages.split(SPLIT_REGEX);
        }

        for (i = 0; i < preferredLanguages.length; i += 1) {
            language = preferredLanguages[i];
            if (!language || language === '*') {
                continue;
            }
            // check the fallback sequence for one language
            while (language.length > 0) {
                result = scan(language);
                if (result) {
                    return result;
                } else {
                    index = language.lastIndexOf('-');
                    if (index >= 0) {
                        language = language.substring(0, index);
                        // one-character subtags get cut along with the
                        // following subtag
                        if (index >= 2 && language.charAt(index - 2) === '-') {
                            language = language.substring(0, index - 2);
                        }
                    } else {
                        // nothing available for this language
                        break;
                    }
                }
            }
        }

        return '';
    }
});


}, '3.10.1', {"requires": ["yui-base"]});
YUI.add('yui-log', function (Y, NAME) {

/**
 * Provides console log capability and exposes a custom event for
 * console implementations. This module is a `core` YUI module,
 * <a href="../classes/YUI.html#method_log">it's documentation is located under the YUI class</a>.
 *
 * @module yui
 * @submodule yui-log
 */

var INSTANCE = Y,
    LOGEVENT = 'yui:log',
    UNDEFINED = 'undefined',
    LEVELS = { debug: 1,
               info: 2,
               warn: 4,
               error: 8 };

/**
 * If the 'debug' config is true, a 'yui:log' event will be
 * dispatched, which the Console widget and anything else
 * can consume.  If the 'useBrowserConsole' config is true, it will
 * write to the browser console if available.  YUI-specific log
 * messages will only be present in the -debug versions of the
 * JS files.  The build system is supposed to remove log statements
 * from the raw and minified versions of the files.
 *
 * @method log
 * @for YUI
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt).
 * @param  {String}  src  The source of the the message (opt).
 * @param  {boolean} silent If true, the log event won't fire.
 * @return {YUI}      YUI instance.
 */
INSTANCE.log = function(msg, cat, src, silent) {
    var bail, excl, incl, m, f, minlevel,
        Y = INSTANCE,
        c = Y.config,
        publisher = (Y.fire) ? Y : YUI.Env.globalEvents;
    // suppress log message if the config is off or the event stack
    // or the event call stack contains a consumer of the yui:log event
    if (c.debug) {
        // apply source filters
        src = src || "";
        if (typeof src !== "undefined") {
            excl = c.logExclude;
            incl = c.logInclude;
            if (incl && !(src in incl)) {
                bail = 1;
            } else if (incl && (src in incl)) {
                bail = !incl[src];
            } else if (excl && (src in excl)) {
                bail = excl[src];
            }

            // Determine the current minlevel as defined in configuration
            Y.config.logLevel = Y.config.logLevel || 'debug';
            minlevel = LEVELS[Y.config.logLevel.toLowerCase()];

            if (cat in LEVELS && LEVELS[cat] < minlevel) {
                // Skip this message if the we don't meet the defined minlevel
                bail = 1;
            }
        }
        if (!bail) {
            if (c.useBrowserConsole) {
                m = (src) ? src + ': ' + msg : msg;
                if (Y.Lang.isFunction(c.logFn)) {
                    c.logFn.call(Y, msg, cat, src);
                } else if (typeof console !== UNDEFINED && console.log) {
                    f = (cat && console[cat] && (cat in LEVELS)) ? cat : 'log';
                    console[f](m);
                } else if (typeof opera !== UNDEFINED) {
                    opera.postError(m);
                }
            }

            if (publisher && !silent) {

                if (publisher === Y && (!publisher.getEvent(LOGEVENT))) {
                    publisher.publish(LOGEVENT, {
                        broadcast: 2
                    });
                }

                publisher.fire(LOGEVENT, {
                    msg: msg,
                    cat: cat,
                    src: src
                });
            }
        }
    }

    return Y;
};

/**
 * Write a system message.  This message will be preserved in the
 * minified and raw versions of the YUI files, unlike log statements.
 * @method message
 * @for YUI
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt).
 * @param  {String}  src  The source of the the message (opt).
 * @param  {boolean} silent If true, the log event won't fire.
 * @return {YUI}      YUI instance.
 */
INSTANCE.message = function() {
    return INSTANCE.log.apply(INSTANCE, arguments);
};


}, '3.10.1', {"requires": ["yui-base"]});
YUI.add('yui-later', function (Y, NAME) {

/**
 * Provides a setTimeout/setInterval wrapper. This module is a `core` YUI module,
 * <a href="../classes/YUI.html#method_later">it's documentation is located under the YUI class</a>.
 *
 * @module yui
 * @submodule yui-later
 */

var NO_ARGS = [];

/**
 * Executes the supplied function in the context of the supplied
 * object 'when' milliseconds later.  Executes the function a
 * single time unless periodic is set to true.
 * @for YUI
 * @method later
 * @param when {int} the number of milliseconds to wait until the fn
 * is executed.
 * @param o the context object.
 * @param fn {Function|String} the function to execute or the name of
 * the method in the 'o' object to execute.
 * @param data [Array] data that is provided to the function.  This
 * accepts either a single item or an array.  If an array is provided,
 * the function is executed with one parameter for each array item.
 * If you need to pass a single array parameter, it needs to be wrapped
 * in an array [myarray].
 *
 * Note: native methods in IE may not have the call and apply methods.
 * In this case, it will work, but you are limited to four arguments.
 *
 * @param periodic {boolean} if true, executes continuously at supplied
 * interval until canceled.
 * @return {object} a timer object. Call the cancel() method on this
 * object to stop the timer.
 */
Y.later = function(when, o, fn, data, periodic) {
    when = when || 0;
    data = (!Y.Lang.isUndefined(data)) ? Y.Array(data) : NO_ARGS;
    o = o || Y.config.win || Y;

    var cancelled = false,
        method = (o && Y.Lang.isString(fn)) ? o[fn] : fn,
        wrapper = function() {
            // IE 8- may execute a setInterval callback one last time
            // after clearInterval was called, so in order to preserve
            // the cancel() === no more runny-run, we have to jump through
            // an extra hoop.
            if (!cancelled) {
                if (!method.apply) {
                    method(data[0], data[1], data[2], data[3]);
                } else {
                    method.apply(o, data || NO_ARGS);
                }
            }
        },
        id = (periodic) ? setInterval(wrapper, when) : setTimeout(wrapper, when);

    return {
        id: id,
        interval: periodic,
        cancel: function() {
            cancelled = true;
            if (this.interval) {
                clearInterval(id);
            } else {
                clearTimeout(id);
            }
        }
    };
};

Y.Lang.later = Y.later;



}, '3.10.1', {"requires": ["yui-base"]});
YUI.add('yui', function (Y, NAME) {}, '3.10.1', {"use": ["get", "features", "intl-base", "yui-log", "yui-later"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/array-extras/array-extras.js
// ----------------------------------------------------------------------------------------

YUI.add('array-extras', function (Y, NAME) {

/**
Adds additional utility methods to the `Y.Array` class.

@module collection
@submodule array-extras
**/

var A          = Y.Array,
    L          = Y.Lang,
    ArrayProto = Array.prototype;

/**
Returns the index of the last item in the array that contains the specified
value, or `-1` if the value isn't found.

@method lastIndexOf
@param {Array} a Array to search in.
@param {Any} val Value to search for.
@param {Number} [fromIndex] Index at which to start searching backwards.
  Defaults to the array's length - 1. If negative, it will be taken as an offset
  from the end of the array. If the calculated index is less than 0, the array
  will not be searched and `-1` will be returned.
@return {Number} Index of the item that contains the value, or `-1` if not
  found.
@static
@for Array
**/
A.lastIndexOf = L._isNative(ArrayProto.lastIndexOf) ?
    function(a, val, fromIndex) {
        // An undefined fromIndex is still considered a value by some (all?)
        // native implementations, so we can't pass it unless it's actually
        // specified.
        return fromIndex || fromIndex === 0 ? a.lastIndexOf(val, fromIndex) :
                a.lastIndexOf(val);
    } :
    function(a, val, fromIndex) {
        var len = a.length,
            i   = len - 1;

        if (fromIndex || fromIndex === 0) {
            i = Math.min(fromIndex < 0 ? len + fromIndex : fromIndex, len);
        }

        if (i > -1 && len > 0) {
            for (; i > -1; --i) {
                if (i in a && a[i] === val) {
                    return i;
                }
            }
        }

        return -1;
    };

/**
Returns a copy of the input array with duplicate items removed.

Note: If the input array only contains strings, the `Y.Array.dedupe()` method is
a much faster alternative.

@method unique
@param {Array} array Array to dedupe.
@param {Function} [testFn] Custom function to use to test the equality of two
    values. A truthy return value indicates that the values are equal. A falsy
    return value indicates that the values are not equal.

    @param {Any} testFn.a First value to compare.
    @param {Any} testFn.b Second value to compare.
    @param {Number} testFn.index Index of the current item in the original
        array.
    @param {Array} testFn.array The original array.
    @return {Boolean} _true_ if the items are equal, _false_ otherwise.

@return {Array} Copy of the input array with duplicate items removed.
@static
**/
A.unique = function (array, testFn) {
    var i       = 0,
        len     = array.length,
        results = [],
        j, result, resultLen, value;

    // Note the label here. It's used to jump out of the inner loop when a value
    // is not unique.
    outerLoop: for (; i < len; i++) {
        value = array[i];

        // For each value in the input array, iterate through the result array
        // and check for uniqueness against each result value.
        for (j = 0, resultLen = results.length; j < resultLen; j++) {
            result = results[j];

            // If the test function returns true or there's no test function and
            // the value equals the current result item, stop iterating over the
            // results and continue to the next value in the input array.
            if (testFn) {
                if (testFn.call(array, value, result, i, array)) {
                    continue outerLoop;
                }
            } else if (value === result) {
                continue outerLoop;
            }
        }

        // If we get this far, that means the current value is not already in
        // the result array, so add it.
        results.push(value);
    }

    return results;
};

/**
Executes the supplied function on each item in the array. Returns a new array
containing the items for which the supplied function returned a truthy value.

@method filter
@param {Array} a Array to filter.
@param {Function} f Function to execute on each item.
@param {Object} [o] Optional context object.
@return {Array} Array of items for which the supplied function returned a
  truthy value (empty if it never returned a truthy value).
@static
*/
A.filter = L._isNative(ArrayProto.filter) ?
    function(a, f, o) {
        return ArrayProto.filter.call(a, f, o);
    } :
    function(a, f, o) {
        var i       = 0,
            len     = a.length,
            results = [],
            item;

        for (; i < len; ++i) {
            if (i in a) {
                item = a[i];

                if (f.call(o, item, i, a)) {
                    results.push(item);
                }
            }
        }

        return results;
    };

/**
The inverse of `Array.filter()`. Executes the supplied function on each item.
Returns a new array containing the items for which the supplied function
returned `false`.

@method reject
@param {Array} a the array to iterate.
@param {Function} f the function to execute on each item.
@param {object} [o] Optional context object.
@return {Array} The items for which the supplied function returned `false`.
@static
*/
A.reject = function(a, f, o) {
    return A.filter(a, function(item, i, a) {
        return !f.call(o, item, i, a);
    });
};

/**
Executes the supplied function on each item in the array. Iteration stops if the
supplied function does not return a truthy value.

@method every
@param {Array} a the array to iterate.
@param {Function} f the function to execute on each item.
@param {Object} [o] Optional context object.
@return {Boolean} `true` if every item in the array returns `true` from the
  supplied function, `false` otherwise.
@static
*/
A.every = L._isNative(ArrayProto.every) ?
    function(a, f, o) {
        return ArrayProto.every.call(a, f, o);
    } :
    function(a, f, o) {
        for (var i = 0, l = a.length; i < l; ++i) {
            if (i in a && !f.call(o, a[i], i, a)) {
                return false;
            }
        }

        return true;
    };

/**
Executes the supplied function on each item in the array and returns a new array
containing all the values returned by the supplied function.

@example

    // Convert an array of numbers into an array of strings.
    Y.Array.map([1, 2, 3, 4], function (item) {
      return '' + item;
    });
    // => ['1', '2', '3', '4']

@method map
@param {Array} a the array to iterate.
@param {Function} f the function to execute on each item.
@param {object} [o] Optional context object.
@return {Array} A new array containing the return value of the supplied function
  for each item in the original array.
@static
*/
A.map = L._isNative(ArrayProto.map) ?
    function(a, f, o) {
        return ArrayProto.map.call(a, f, o);
    } :
    function(a, f, o) {
        var i       = 0,
            len     = a.length,
            results = ArrayProto.concat.call(a);

        for (; i < len; ++i) {
            if (i in a) {
                results[i] = f.call(o, a[i], i, a);
            }
        }

        return results;
    };


/**
Executes the supplied function on each item in the array, "folding" the array
into a single value.

@method reduce
@param {Array} a Array to iterate.
@param {Any} init Initial value to start with.
@param {Function} f Function to execute on each item. This function should
  update and return the value of the computation. It will receive the following
  arguments:
    @param {Any} f.previousValue Value returned from the previous iteration,
      or the initial value if this is the first iteration.
    @param {Any} f.currentValue Value of the current item being iterated.
    @param {Number} f.index Index of the current item.
    @param {Array} f.array Array being iterated.
@param {Object} [o] Optional context object.
@return {Any} Final result from iteratively applying the given function to each
  element in the array.
@static
*/
A.reduce = L._isNative(ArrayProto.reduce) ?
    function(a, init, f, o) {
        // ES5 Array.reduce doesn't support a thisObject, so we need to
        // implement it manually.
        return ArrayProto.reduce.call(a, function(init, item, i, a) {
            return f.call(o, init, item, i, a);
        }, init);
    } :
    function(a, init, f, o) {
        var i      = 0,
            len    = a.length,
            result = init;

        for (; i < len; ++i) {
            if (i in a) {
                result = f.call(o, result, a[i], i, a);
            }
        }

        return result;
    };

/**
Executes the supplied function on each item in the array, searching for the
first item that matches the supplied function.

@method find
@param {Array} a the array to search.
@param {Function} f the function to execute on each item. Iteration is stopped
  as soon as this function returns `true`.
@param {Object} [o] Optional context object.
@return {Object} the first item that the supplied function returns `true` for,
  or `null` if it never returns `true`.
@static
*/
A.find = function(a, f, o) {
    for (var i = 0, l = a.length; i < l; i++) {
        if (i in a && f.call(o, a[i], i, a)) {
            return a[i];
        }
    }
    return null;
};

/**
Iterates over an array, returning a new array of all the elements that match the
supplied regular expression.

@method grep
@param {Array} a Array to iterate over.
@param {RegExp} pattern Regular expression to test against each item.
@return {Array} All the items in the array that produce a match against the
  supplied regular expression. If no items match, an empty array is returned.
@static
*/
A.grep = function(a, pattern) {
    return A.filter(a, function(item, index) {
        return pattern.test(item);
    });
};

/**
Partitions an array into two new arrays, one with the items for which the
supplied function returns `true`, and one with the items for which the function
returns `false`.

@method partition
@param {Array} a Array to iterate over.
@param {Function} f Function to execute for each item in the array. It will
  receive the following arguments:
    @param {Any} f.item Current item.
    @param {Number} f.index Index of the current item.
    @param {Array} f.array The array being iterated.
@param {Object} [o] Optional execution context.
@return {Object} An object with two properties: `matches` and `rejects`. Each is
  an array containing the items that were selected or rejected by the test
  function (or an empty array if none).
@static
*/
A.partition = function(a, f, o) {
    var results = {
        matches: [],
        rejects: []
    };

    A.each(a, function(item, index) {
        var set = f.call(o, item, index, a) ? results.matches : results.rejects;
        set.push(item);
    });

    return results;
};

/**
Creates an array of arrays by pairing the corresponding elements of two arrays
together into a new array.

@method zip
@param {Array} a Array to iterate over.
@param {Array} a2 Another array whose values will be paired with values of the
  first array.
@return {Array} An array of arrays formed by pairing each element of the first
  array with an item in the second array having the corresponding index.
@static
*/
A.zip = function(a, a2) {
    var results = [];
    A.each(a, function(item, index) {
        results.push([item, a2[index]]);
    });
    return results;
};

/**
Flattens an array of nested arrays at any abitrary depth into a single, flat
array.

@method flatten
@param {Array} a Array with nested arrays to flatten.
@return {Array} An array whose nested arrays have been flattened.
@static
@since 3.7.0
**/
A.flatten = function(a) {
    var result = [],
        i, len, val;

    // Always return an array.
    if (!a) {
        return result;
    }

    for (i = 0, len = a.length; i < len; ++i) {
        val = a[i];

        if (L.isArray(val)) {
            // Recusively flattens any nested arrays.
            result.push.apply(result, A.flatten(val));
        } else {
            result.push(val);
        }
    }

    return result;
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/attribute-observable/attribute-observable.js
// ----------------------------------------------------------------------------------------

YUI.add('attribute-observable', function (Y, NAME) {

    /*For log lines*/
    /*jshint maxlen:200*/


    /**
     * The attribute module provides an augmentable Attribute implementation, which
     * adds configurable attributes and attribute change events to the class being
     * augmented. It also provides a State class, which is used internally by Attribute,
     * but can also be used independently to provide a name/property/value data structure to
     * store state.
     *
     * @module attribute
     */

    /**
     * The `attribute-observable` submodule provides augmentable attribute change event support
     * for AttributeCore based implementations.
     *
     * @module attribute
     * @submodule attribute-observable
     */
    var EventTarget = Y.EventTarget,

        CHANGE = "Change",
        BROADCAST = "broadcast";

    /**
     * Provides an augmentable implementation of attribute change events for
     * AttributeCore.
     *
     * @class AttributeObservable
     * @extensionfor AttributeCore
     * @uses EventTarget
     */
    function AttributeObservable() {
        // Perf tweak - avoid creating event literals if not required.
        this._ATTR_E_FACADE = {};

        EventTarget.call(this, {emitFacade:true});
    }

    AttributeObservable._ATTR_CFG = [BROADCAST];

    AttributeObservable.prototype = {

        /**
         * Sets the value of an attribute.
         *
         * @method set
         * @chainable
         *
         * @param {String} name The name of the attribute. If the
         * current value of the attribute is an Object, dot notation can be used
         * to set the value of a property within the object (e.g. <code>set("x.y.z", 5)</code>).
         *
         * @param {Any} value The value to set the attribute to.
         *
         * @param {Object} opts (Optional) Optional event data to be mixed into
         * the event facade passed to subscribers of the attribute's change event. This
         * can be used as a flexible way to identify the source of a call to set, allowing
         * the developer to distinguish between set called internally by the host, vs.
         * set called externally by the application developer.
         *
         * @return {Object} A reference to the host object.
         */
        set : function(name, val, opts) {
            return this._setAttr(name, val, opts);
        },

        /**
         * Allows setting of readOnly/writeOnce attributes. See <a href="#method_set">set</a> for argument details.
         *
         * @method _set
         * @protected
         * @chainable
         *
         * @param {String} name The name of the attribute.
         * @param {Any} val The value to set the attribute to.
         * @param {Object} opts (Optional) Optional event data to be mixed into
         * the event facade passed to subscribers of the attribute's change event.
         * @return {Object} A reference to the host object.
         */
        _set : function(name, val, opts) {
            return this._setAttr(name, val, opts, true);
        },

        /**
         * Sets multiple attribute values.
         *
         * @method setAttrs
         * @param {Object} attrs  An object with attributes name/value pairs.
         * @param {Object} opts  Properties to mix into the event payload. These are shared and mixed into each set
         * @return {Object} A reference to the host object.
         * @chainable
         */
        setAttrs : function(attrs, opts) {
            return this._setAttrs(attrs, opts);
        },

        /**
         * Implementation behind the public setAttrs method, to set multiple attribute values.
         *
         * @method _setAttrs
         * @protected
         * @param {Object} attrs  An object with attributes name/value pairs.
         * @param {Object} opts  Properties to mix into the event payload. These are shared and mixed into each set
         * @return {Object} A reference to the host object.
         * @chainable
         */
        _setAttrs : function(attrs, opts) {
            var attr;
            for (attr in attrs) {
                if ( attrs.hasOwnProperty(attr) ) {
                    this.set(attr, attrs[attr], opts);
                }
            }
            return this;
        },

        /**
         * Utility method to help setup the event payload and fire the attribute change event.
         *
         * @method _fireAttrChange
         * @private
         * @param {String} attrName The name of the attribute
         * @param {String} subAttrName The full path of the property being changed,
         * if this is a sub-attribute value being change. Otherwise null.
         * @param {Any} currVal The current value of the attribute
         * @param {Any} newVal The new value of the attribute
         * @param {Object} opts Any additional event data to mix into the attribute change event's event facade.
         * @param {Object} [cfg] The attribute config stored in State, if already available.
         */
        _fireAttrChange : function(attrName, subAttrName, currVal, newVal, opts, cfg) {
            var host = this,
                eventName = this._getFullType(attrName + CHANGE),
                state = host._state,
                facade,
                broadcast,
                e;

            if (!cfg) {
                cfg = state.data[attrName] || {};
            }

            if (!cfg.published) {

                // PERF: Using lower level _publish() for
                // critical path performance
                e = host._publish(eventName);

                e.emitFacade = true;
                e.defaultTargetOnly = true;
                e.defaultFn = host._defAttrChangeFn;

                broadcast = cfg.broadcast;
                if (broadcast !== undefined) {
                    e.broadcast = broadcast;
                }

                cfg.published = true;
            }

            facade = (opts) ? Y.merge(opts) : host._ATTR_E_FACADE;

            // Not using the single object signature for fire({type:..., newVal:...}), since
            // we don't want to override type. Changed to the fire(type, {newVal:...}) signature.

            // facade.type = eventName;
            facade.attrName = attrName;
            facade.subAttrName = subAttrName;
            facade.prevVal = currVal;
            facade.newVal = newVal;

            // host.fire(facade);
            host.fire(eventName, facade);
        },

        /**
         * Default function for attribute change events.
         *
         * @private
         * @method _defAttrChangeFn
         * @param {EventFacade} e The event object for attribute change events.
         */
        _defAttrChangeFn : function(e) {
            if (!this._setAttrVal(e.attrName, e.subAttrName, e.prevVal, e.newVal, e.opts)) {

                // Prevent "after" listeners from being invoked since nothing changed.
                e.stopImmediatePropagation();
            } else {
                e.newVal = this.get(e.attrName);
            }
        }
    };

    // Basic prototype augment - no lazy constructor invocation.
    Y.mix(AttributeObservable, EventTarget, false, null, 1);

    Y.AttributeObservable = AttributeObservable;

    /**
    The `AttributeEvents` class extension was deprecated in YUI 3.8.0 and is now
    an alias for the `AttributeObservable` class extension. Use that class
    extnesion instead. This alias will be removed in a future version of YUI.

    @class AttributeEvents
    @uses EventTarget
    @deprecated Use `AttributeObservable` instead.
    @see AttributeObservable
    **/
    Y.AttributeEvents = AttributeObservable;


}, '3.10.1', {"requires": ["event-custom"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-delegate/event-delegate.js
// ----------------------------------------------------------------------------------------

YUI.add('event-delegate', function (Y, NAME) {

/**
 * Adds event delegation support to the library.
 *
 * @module event
 * @submodule event-delegate
 */

var toArray          = Y.Array,
    YLang            = Y.Lang,
    isString         = YLang.isString,
    isObject         = YLang.isObject,
    isArray          = YLang.isArray,
    selectorTest     = Y.Selector.test,
    detachCategories = Y.Env.evt.handles;

/**
 * <p>Sets up event delegation on a container element.  The delegated event
 * will use a supplied selector or filtering function to test if the event
 * references at least one node that should trigger the subscription
 * callback.</p>
 *
 * <p>Selector string filters will trigger the callback if the event originated
 * from a node that matches it or is contained in a node that matches it.
 * Function filters are called for each Node up the parent axis to the
 * subscribing container node, and receive at each level the Node and the event
 * object.  The function should return true (or a truthy value) if that Node
 * should trigger the subscription callback.  Note, it is possible for filters
 * to match multiple Nodes for a single event.  In this case, the delegate
 * callback will be executed for each matching Node.</p>
 *
 * <p>For each matching Node, the callback will be executed with its 'this'
 * object set to the Node matched by the filter (unless a specific context was
 * provided during subscription), and the provided event's
 * <code>currentTarget</code> will also be set to the matching Node.  The
 * containing Node from which the subscription was originally made can be
 * referenced as <code>e.container</code>.
 *
 * @method delegate
 * @param type {String} the event type to delegate
 * @param fn {Function} the callback function to execute.  This function
 *              will be provided the event object for the delegated event.
 * @param el {String|node} the element that is the delegation container
 * @param filter {string|Function} a selector that must match the target of the
 *              event or a function to test target and its parents for a match
 * @param context optional argument that specifies what 'this' refers to.
 * @param args* 0..n additional arguments to pass on to the callback function.
 *              These arguments will be added after the event object.
 * @return {EventHandle} the detach handle
 * @static
 * @for Event
 */
function delegate(type, fn, el, filter) {
    var args     = toArray(arguments, 0, true),
        query    = isString(el) ? el : null,
        typeBits, synth, container, categories, cat, i, len, handles, handle;

    // Support Y.delegate({ click: fnA, key: fnB }, el, filter, ...);
    // and Y.delegate(['click', 'key'], fn, el, filter, ...);
    if (isObject(type)) {
        handles = [];

        if (isArray(type)) {
            for (i = 0, len = type.length; i < len; ++i) {
                args[0] = type[i];
                handles.push(Y.delegate.apply(Y, args));
            }
        } else {
            // Y.delegate({'click', fn}, el, filter) =>
            // Y.delegate('click', fn, el, filter)
            args.unshift(null); // one arg becomes two; need to make space

            for (i in type) {
                if (type.hasOwnProperty(i)) {
                    args[0] = i;
                    args[1] = type[i];
                    handles.push(Y.delegate.apply(Y, args));
                }
            }
        }

        return new Y.EventHandle(handles);
    }

    typeBits = type.split(/\|/);

    if (typeBits.length > 1) {
        cat  = typeBits.shift();
        args[0] = type = typeBits.shift();
    }

    synth = Y.Node.DOM_EVENTS[type];

    if (isObject(synth) && synth.delegate) {
        handle = synth.delegate.apply(synth, arguments);
    }

    if (!handle) {
        if (!type || !fn || !el || !filter) {
            return;
        }

        container = (query) ? Y.Selector.query(query, null, true) : el;

        if (!container && isString(el)) {
            handle = Y.on('available', function () {
                Y.mix(handle, Y.delegate.apply(Y, args), true);
            }, el);
        }

        if (!handle && container) {
            args.splice(2, 2, container); // remove the filter

            handle = Y.Event._attach(args, { facade: false });
            handle.sub.filter  = filter;
            handle.sub._notify = delegate.notifySub;
        }
    }

    if (handle && cat) {
        categories = detachCategories[cat]  || (detachCategories[cat] = {});
        categories = categories[type] || (categories[type] = []);
        categories.push(handle);
    }

    return handle;
}

/**
Overrides the <code>_notify</code> method on the normal DOM subscription to
inject the filtering logic and only proceed in the case of a match.

This method is hosted as a private property of the `delegate` method
(e.g. `Y.delegate.notifySub`)

@method notifySub
@param thisObj {Object} default 'this' object for the callback
@param args {Array} arguments passed to the event's <code>fire()</code>
@param ce {CustomEvent} the custom event managing the DOM subscriptions for
             the subscribed event on the subscribing node.
@return {Boolean} false if the event was stopped
@private
@static
@since 3.2.0
**/
delegate.notifySub = function (thisObj, args, ce) {
    // Preserve args for other subscribers
    args = args.slice();
    if (this.args) {
        args.push.apply(args, this.args);
    }

    // Only notify subs if the event occurred on a targeted element
    var currentTarget = delegate._applyFilter(this.filter, args, ce),
        //container     = e.currentTarget,
        e, i, len, ret;

    if (currentTarget) {
        // Support multiple matches up the the container subtree
        currentTarget = toArray(currentTarget);

        // The second arg is the currentTarget, but we'll be reusing this
        // facade, replacing the currentTarget for each use, so it doesn't
        // matter what element we seed it with.
        e = args[0] = new Y.DOMEventFacade(args[0], ce.el, ce);

        e.container = Y.one(ce.el);

        for (i = 0, len = currentTarget.length; i < len && !e.stopped; ++i) {
            e.currentTarget = Y.one(currentTarget[i]);

            ret = this.fn.apply(this.context || e.currentTarget, args);

            if (ret === false) { // stop further notifications
                break;
            }
        }

        return ret;
    }
};

/**
Compiles a selector string into a filter function to identify whether
Nodes along the parent axis of an event's target should trigger event
notification.

This function is memoized, so previously compiled filter functions are
returned if the same selector string is provided.

This function may be useful when defining synthetic events for delegate
handling.

Hosted as a property of the `delegate` method (e.g. `Y.delegate.compileFilter`).

@method compileFilter
@param selector {String} the selector string to base the filtration on
@return {Function}
@since 3.2.0
@static
**/
delegate.compileFilter = Y.cached(function (selector) {
    return function (target, e) {
        return selectorTest(target._node, selector,
            (e.currentTarget === e.target) ? null : e.currentTarget._node);
    };
});

/**
Regex to test for disabled elements during filtering. This is only relevant to
IE to normalize behavior with other browsers, which swallow events that occur
to disabled elements. IE fires the event from the parent element instead of the
original target, though it does preserve `event.srcElement` as the disabled
element. IE also supports disabled on `<a>`, but the event still bubbles, so it
acts more like `e.preventDefault()` plus styling. That issue is not handled here
because other browsers fire the event on the `<a>`, so delegate is supported in
both cases.

@property _disabledRE
@type {RegExp}
@protected
@since 3.8.1
**/
delegate._disabledRE = /^(?:button|input|select|textarea)$/i;

/**
Walks up the parent axis of an event's target, and tests each element
against a supplied filter function.  If any Nodes, including the container,
satisfy the filter, the delegated callback will be triggered for each.

Hosted as a protected property of the `delegate` method (e.g.
`Y.delegate._applyFilter`).

@method _applyFilter
@param filter {Function} boolean function to test for inclusion in event
                 notification
@param args {Array} the arguments that would be passed to subscribers
@param ce   {CustomEvent} the DOM event wrapper
@return {Node|Node[]|undefined} The Node or Nodes that satisfy the filter
@protected
**/
delegate._applyFilter = function (filter, args, ce) {
    var e         = args[0],
        container = ce.el, // facadeless events in IE, have no e.currentTarget
        target    = e.target || e.srcElement,
        match     = [],
        isContainer = false;

    // Resolve text nodes to their containing element
    if (target.nodeType === 3) {
        target = target.parentNode;
    }

    // For IE. IE propagates events from the parent element of disabled
    // elements, where other browsers swallow the event entirely. To normalize
    // this in IE, filtering for matching elements should abort if the target
    // is a disabled form control.
    if (target.disabled && delegate._disabledRE.test(target.nodeName)) {
        return match;
    }

    // passing target as the first arg rather than leaving well enough alone
    // making 'this' in the filter function refer to the target.  This is to
    // support bound filter functions.
    args.unshift(target);

    if (isString(filter)) {
        while (target) {
            isContainer = (target === container);
            if (selectorTest(target, filter, (isContainer ? null: container))) {
                match.push(target);
            }

            if (isContainer) {
                break;
            }

            target = target.parentNode;
        }
    } else {
        // filter functions are implementer code and should receive wrappers
        args[0] = Y.one(target);
        args[1] = new Y.DOMEventFacade(e, container, ce);

        while (target) {
            // filter(target, e, extra args...) - this === target
            if (filter.apply(args[0], args)) {
                match.push(target);
            }

            if (target === container) {
                break;
            }

            target = target.parentNode;
            args[0] = Y.one(target);
        }
        args[1] = e; // restore the raw DOM event
    }

    if (match.length <= 1) {
        match = match[0]; // single match or undefined
    }

    // remove the target
    args.shift();

    return match;
};

/**
 * Sets up event delegation on a container element.  The delegated event
 * will use a supplied filter to test if the callback should be executed.
 * This filter can be either a selector string or a function that returns
 * a Node to use as the currentTarget for the event.
 *
 * The event object for the delegated event is supplied to the callback
 * function.  It is modified slightly in order to support all properties
 * that may be needed for event delegation.  'currentTarget' is set to
 * the element that matched the selector string filter or the Node returned
 * from the filter function.  'container' is set to the element that the
 * listener is delegated from (this normally would be the 'currentTarget').
 *
 * Filter functions will be called with the arguments that would be passed to
 * the callback function, including the event object as the first parameter.
 * The function should return false (or a falsey value) if the success criteria
 * aren't met, and the Node to use as the event's currentTarget and 'this'
 * object if they are.
 *
 * @method delegate
 * @param type {string} the event type to delegate
 * @param fn {function} the callback function to execute.  This function
 * will be provided the event object for the delegated event.
 * @param el {string|node} the element that is the delegation container
 * @param filter {string|function} a selector that must match the target of the
 * event or a function that returns a Node or false.
 * @param context optional argument that specifies what 'this' refers to.
 * @param args* 0..n additional arguments to pass on to the callback function.
 * These arguments will be added after the event object.
 * @return {EventHandle} the detach handle
 * @for YUI
 */
Y.delegate = Y.Event.delegate = delegate;


}, '3.10.1', {"requires": ["node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/form-submit.js
// ----------------------------------------------------------------------------------------

/**
* Form submission
* @module squarespace-form-submit
*/
YUI.add("squarespace-form-submit", function(Y) {

  Y.namespace("Squarespace");

  Y.Squarespace.FormSubmit = Class.create({
    initialize: function(formEl, useAlert) {
      this.formEl = Y.Node(formEl);

      this.typeGetterMap = {
        date: this.getMultiFieldVal,
        name: this.getMultiFieldVal,
        time: this.getMultiFieldVal,
        address: this.getMultiFieldVal,
        phone: this.getPhoneFieldVal,
        radio: this.getRadioFieldVal,
        checkbox: this.getCheckFieldVal,
        select: this.getSelectVal,
        likert: this.getLikertVal
      };

      this.defaultGetter = this.getSingleFieldVal;

      this.useAlert = useAlert;
      this.formSubmitText = this.formEl.one(".button[type=submit]").get("value");
    },

    submit: function(formId, collectionId) {
      try {

        if (this.formEl.hasClass("submitting")) {
          return;
        }

        this.lock();
        this.clearErrors();

        var data = {};
        data.form = Y.JSON.stringify(this.getData());
        data.formId = formId;
        data.collectionId = collectionId;

        Y.Data.post({
          url: '/api/form/SaveFormSubmission',
          data: data,

          success: function(data) {
            console.log("Form Submit Success!");
            console.log(data);
            this.unlock();
            this.renderSubmitSuccess();

            /*
             Disabling this so we have the same submission behavior everywhere

            if (this.useAlert) {
              new Y.Squarespace.Information({ position: "top-right" }).show("Submission Successful", "Your form data was successfuly sent.");
            }
            */
          },

          failure: function(data) {

            this.unlock();

            if (data.notFound) {
              var formNotFoundError = this.renderError("This form hasn't been configured yet.");
              this.formEl.prepend(formNotFoundError);
              return;
            }

            if (data.demoContent) {
              var demoContentForm = this.renderError(data.error);
              this.formEl.prepend(demoContentForm);
              return;
            }

            if (Y.Object.hasKey(data, "error") && Y.Object.hasKey(data, "errors")) {
              var fieldErrors = false;
              for (var id in data.errors) {

                var error = data.errors[id];

                if (id === "form" || id === "backend") {

                  // global error

                  var errorEl = this.renderError(error);
                  this.formEl.prepend(errorEl);
                  this.formEl.append(errorEl);

                } else if (Y.Object.hasKey(data.errors, id)) {

                  // field specific error

                  var fieldEl = this.formEl.one("#" + id);

                  var titleEl = fieldEl.one(".title");
                  titleEl.insert(this.renderError(error), "before");
                  fieldEl.addClass("error");
                  fieldErrors = true;
                }
              }

              if (fieldErrors) {
                var beforeErrorEl = this.renderError("Your form has encountered a problem. Please scroll down to review.");
                var afterErrorEl = this.renderError("Your form has encountered a problem. Please scroll up to review.");
                this.formEl.prepend(beforeErrorEl);
                this.formEl.append(afterErrorEl);
              }
            }
          }
        }, this);
      }
      catch (e) {
        // add a global error
        this.formEl.prepend(this.renderError("Error processing form submission. Please reload and try again."));
      }
      finally {
        // return false so the html form doesn't actually use its submit function
        return false;
      }
    },

    lock: function() {

      this.formEl.addClass("submitting");
      this.formEl.one(".button[type=submit]").set("value", "Submitting...");

    },

    unlock: function() {

      this.formEl.removeClass("submitting");
      this.formEl.one(".button[type=submit]").set("value", this.formSubmitText);

    },

    getData: function() {
      var data = {};
      this.formEl.all(".form-item").each(function(fg) {

        var id = fg.get("id");
        data[id] = this.getDataForField(fg);

      }, this);
      return data;
    },

    renderError: function(message) {
      return Y.Node.create('<div class="field-error">' + message + '</div>');
    },

    clearErrors: function() {
      this.formEl.all(".field-error").each(function(n) {
        n.remove();
      });
      this.formEl.all(".field-item.error").each(function(n) {
        n.removeClass("error");
      });
    },

    renderSubmitSuccess: function() {
      var formEl = this.formEl;

      var submissionMessageNode = formEl.one('.form-submission-text').cloneNode(true);
      var submissionHTMLNode = formEl.one('.form-submission-html').cloneNode(true);

      submissionMessageNode.removeClass('hidden');
      submissionHTMLNode.removeClass('hidden');
      submissionHTMLNode.setHTML(submissionHTMLNode.getData('submission-html'));

      formEl.empty();
      formEl.append(submissionMessageNode).append(submissionHTMLNode);

      submissionHTMLNode.all('script').each(function(script) {
        try {
          eval(script.getHTML());
        } catch (error) {
          console.warn('The following form submission HTML has caused a script error: ' + submissionHTMLNode.getHTML());
        }
      }, this);
    }
  });

  // ----------------------------------------------------------------------------------
  // FORM utils
  // requires that you implement a typeGetterMap
  // ----------------------------------------------------------------------------------
  Y.Squarespace.FormGetter = Class.create({
    getDataForField: function(fg) {
      var classes = fg.get("className").split(new RegExp("\\s"));
      var type = null;
      var getter;
      for (var i = 0; i < classes.length; ++i) {
        if (Y.Object.hasKey(this.typeGetterMap, classes[i])) {
          type = classes[i];
          getter = this.typeGetterMap[type];
        }
        else if (classes[i] === "section") {
          // don't process section dividers
          return;
        }
      }

      if (type === null) {
        getter = this.defaultGetter;
      }

      var title = fg.one(".title").get("innerHTML");
      return getter.call(this, fg);
    },

    getSingleFieldVal: function(fg) {
      var control = fg.one(".field-element");
      if (control) {
        return control.get("value");
      }
      return null;
    },

    getMultiFieldVal: function(fg) {
      var values = [];
      fg.all(".field-element").each(function(fc) {
        values.push(fc.get("value"));
      });
      return values;
    },

    getPhoneFieldVal: function(fg) {
      var values = this.getMultiFieldVal(fg);
      if (values && values.length === 3) {
        // prepend an empty value for the country code, which
        // is optional and may not be present
        values.unshift("");
      }
      return values;
    },

    getRadioFieldVal: function(fg) {
      return this.getCheckFieldVal(fg)[0];
    },

    getCheckFieldVal: function(fg) {
      var vals = [];
      fg.all("input").each(function(c) {
        if (c.get("checked")) {
          vals.push(c.get("value"));
        }
      }, this);
      return vals;
    },

    getSelectVal: function(fg) {
      return fg.one("select").get("value");
    },

    getLikertVal: function(fg) {
      var vals = [];
      fg.all("input").each(function(i) {
        if (i.get("checked")) {
          vals.push(i.get("value"));
        }
      }, this);

      return vals;
    }

  });

  // Form "getter" functionality
  Y.augment(Y.Squarespace.FormSubmit, Y.Squarespace.FormGetter);

}, "1.0", { requires: ["node", "json", "squarespace-util", "squarespace-ui-base"] });




// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/classnamemanager/classnamemanager.js
// ----------------------------------------------------------------------------------------

YUI.add('classnamemanager', function (Y, NAME) {

/**
* Contains a singleton (ClassNameManager) that enables easy creation and caching of
* prefixed class names.
* @module classnamemanager
*/

/**
 * A singleton class providing:
 *
 * <ul>
 *    <li>Easy creation of prefixed class names</li>
 *    <li>Caching of previously created class names for improved performance.</li>
 * </ul>
 *
 * @class ClassNameManager
 * @static
 */

// String constants
var CLASS_NAME_PREFIX = 'classNamePrefix',
    CLASS_NAME_DELIMITER = 'classNameDelimiter',
    CONFIG = Y.config;

// Global config

/**
 * Configuration property indicating the prefix for all CSS class names in this YUI instance.
 *
 * @property classNamePrefix
 * @type {String}
 * @default "yui"
 * @static
 */
CONFIG[CLASS_NAME_PREFIX] = CONFIG[CLASS_NAME_PREFIX] || 'yui3';

/**
 * Configuration property indicating the delimiter used to compose all CSS class names in
 * this YUI instance.
 *
 * @property classNameDelimiter
 * @type {String}
 * @default "-"
 * @static
 */
CONFIG[CLASS_NAME_DELIMITER] = CONFIG[CLASS_NAME_DELIMITER] || '-';

Y.ClassNameManager = function () {

    var sPrefix    = CONFIG[CLASS_NAME_PREFIX],
        sDelimiter = CONFIG[CLASS_NAME_DELIMITER];

    return {

        /**
         * Returns a class name prefixed with the the value of the
         * <code>Y.config.classNamePrefix</code> attribute + the provided strings.
         * Uses the <code>Y.config.classNameDelimiter</code> attribute to delimit the
         * provided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar
         *
         * @method getClassName
         * @param {String}+ classnameSection one or more classname sections to be joined
         * @param {Boolean} skipPrefix If set to true, the classname will not be prefixed with the default Y.config.classNameDelimiter value.
         */
        getClassName: Y.cached(function () {

            var args = Y.Array(arguments);

            if (args[args.length-1] !== true) {
                args.unshift(sPrefix);
            } else {
                args.pop();
            }

            return args.join(sDelimiter);
        })

    };

}();


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-style/node-style.js
// ----------------------------------------------------------------------------------------

YUI.add('node-style', function (Y, NAME) {

(function(Y) {
/**
 * Extended Node interface for managing node styles.
 * @module node
 * @submodule node-style
 */

Y.mix(Y.Node.prototype, {
    /**
     * Sets a style property of the node.
     * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
     * @method setStyle
     * @param {String} attr The style attribute to set.
     * @param {String|Number} val The value.
     * @chainable
     */
    setStyle: function(attr, val) {
        Y.DOM.setStyle(this._node, attr, val);
        return this;
    },

    /**
     * Sets multiple style properties on the node.
     * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
     * @method setStyles
     * @param {Object} hash An object literal of property:value pairs.
     * @chainable
     */
    setStyles: function(hash) {
        Y.DOM.setStyles(this._node, hash);
        return this;
    },

    /**
     * Returns the style's current value.
     * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
     * @method getStyle
     * @for Node
     * @param {String} attr The style attribute to retrieve.
     * @return {String} The current value of the style property for the element.
     */

     getStyle: function(attr) {
        return Y.DOM.getStyle(this._node, attr);
     },

    /**
     * Returns the computed value for the given style property.
     * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
     * @method getComputedStyle
     * @param {String} attr The style attribute to retrieve.
     * @return {String} The computed value of the style property for the element.
     */
     getComputedStyle: function(attr) {
        return Y.DOM.getComputedStyle(this._node, attr);
     }
});

/**
 * Returns an array of values for each node.
 * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
 * @method getStyle
 * @for NodeList
 * @see Node.getStyle
 * @param {String} attr The style attribute to retrieve.
 * @return {Array} The current values of the style property for the element.
 */

/**
 * Returns an array of the computed value for each node.
 * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
 * @method getComputedStyle
 * @see Node.getComputedStyle
 * @param {String} attr The style attribute to retrieve.
 * @return {Array} The computed values for each node.
 */

/**
 * Sets a style property on each node.
 * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
 * @method setStyle
 * @see Node.setStyle
 * @param {String} attr The style attribute to set.
 * @param {String|Number} val The value.
 * @chainable
 */

/**
 * Sets multiple style properties on each node.
 * Use camelCase (e.g. 'backgroundColor') for multi-word properties.
 * @method setStyles
 * @see Node.setStyles
 * @param {Object} hash An object literal of property:value pairs.
 * @chainable
 */

// These are broken out to handle undefined return (avoid false positive for
// chainable)

Y.NodeList.importMethod(Y.Node.prototype, ['getStyle', 'getComputedStyle', 'setStyle', 'setStyles']);
})(Y);


}, '3.10.1', {"requires": ["dom-style", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/base-pluginhost/base-pluginhost.js
// ----------------------------------------------------------------------------------------

YUI.add('base-pluginhost', function (Y, NAME) {

    /**
     * The base-pluginhost submodule adds Plugin support to Base, by augmenting Base with
     * Plugin.Host and setting up static (class level) Base.plug and Base.unplug methods.
     *
     * @module base
     * @submodule base-pluginhost
     * @for Base
     */

    var Base = Y.Base,
        PluginHost = Y.Plugin.Host;

    Y.mix(Base, PluginHost, false, null, 1);

    /**
     * Alias for <a href="Plugin.Host.html#method_Plugin.Host.plug">Plugin.Host.plug</a>. See aliased
     * method for argument and return value details.
     *
     * @method plug
     * @static
     */
    Base.plug = PluginHost.plug;

    /**
     * Alias for <a href="Plugin.Host.html#method_Plugin.Host.unplug">Plugin.Host.unplug</a>. See the
     * aliased method for argument and return value details.
     *
     * @method unplug
     * @static
     */
    Base.unplug = PluginHost.unplug;


}, '3.10.1', {"requires": ["base-base", "pluginhost"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/plugin/plugin.js
// ----------------------------------------------------------------------------------------

YUI.add('plugin', function (Y, NAME) {

    /**
     * Provides the base Plugin class, which plugin developers should extend, when creating custom plugins
     *
     * @module plugin
     */

    /**
     * The base class for all Plugin instances.
     *
     * @class Plugin.Base
     * @extends Base
     * @param {Object} config Configuration object with property name/value pairs.
     */
    function Plugin(config) {
        if (! (this.hasImpl && this.hasImpl(Y.Plugin.Base)) ) {
            Plugin.superclass.constructor.apply(this, arguments);
        } else {
            Plugin.prototype.initializer.apply(this, arguments);
        }
    }

    /**
     * Object defining the set of attributes supported by the Plugin.Base class
     *
     * @property ATTRS
     * @type Object
     * @static
     */
    Plugin.ATTRS = {

        /**
         * The plugin's host object.
         *
         * @attribute host
         * @writeonce
         * @type Plugin.Host
         */
        host : {
            writeOnce: true
        }
    };

    /**
     * The string identifying the Plugin.Base class. Plugins extending
     * Plugin.Base should set their own NAME value.
     *
     * @property NAME
     * @type String
     * @static
     */
    Plugin.NAME = 'plugin';

    /**
     * The name of the property the the plugin will be attached to
     * when plugged into a Plugin Host. Plugins extending Plugin.Base,
     * should set their own NS value.
     *
     * @property NS
     * @type String
     * @static
     */
    Plugin.NS = 'plugin';

    Y.extend(Plugin, Y.Base, {

        /**
         * The list of event handles for event listeners or AOP injected methods
         * applied by the plugin to the host object.
         *
         * @property _handles
         * @private
         * @type Array
         * @value null
         */
        _handles: null,

        /**
         * Initializer lifecycle implementation.
         *
         * @method initializer
         * @param {Object} config Configuration object with property name/value pairs.
         */
        initializer : function(config) {
            this._handles = [];
        },

        /**
         * Destructor lifecycle implementation.
         *
         * Removes any event listeners or injected methods applied by the Plugin
         *
         * @method destructor
         */
        destructor: function() {
            // remove all handles
            if (this._handles) {
                for (var i = 0, l = this._handles.length; i < l; i++) {
                   this._handles[i].detach();
                }
            }
        },

        /**
         * Listens for the "on" moment of events fired by the host,
         * or injects code "before" a given method on the host.
         *
         * @method doBefore
         *
         * @param strMethod {String} The event to listen for, or method to inject logic before.
         * @param fn {Function} The handler function. For events, the "on" moment listener. For methods, the function to execute before the given method is executed.
         * @param context {Object} An optional context to call the handler with. The default context is the plugin instance.
         * @return handle {EventHandle} The detach handle for the handler.
         */
        doBefore: function(strMethod, fn, context) {
            var host = this.get("host"), handle;

            if (strMethod in host) { // method
                handle = this.beforeHostMethod(strMethod, fn, context);
            } else if (host.on) { // event
                handle = this.onHostEvent(strMethod, fn, context);
            }

            return handle;
        },

        /**
         * Listens for the "after" moment of events fired by the host,
         * or injects code "after" a given method on the host.
         *
         * @method doAfter
         *
         * @param strMethod {String} The event to listen for, or method to inject logic after.
         * @param fn {Function} The handler function. For events, the "after" moment listener. For methods, the function to execute after the given method is executed.
         * @param context {Object} An optional context to call the handler with. The default context is the plugin instance.
         * @return handle {EventHandle} The detach handle for the listener.
         */
        doAfter: function(strMethod, fn, context) {
            var host = this.get("host"), handle;

            if (strMethod in host) { // method
                handle = this.afterHostMethod(strMethod, fn, context);
            } else if (host.after) { // event
                handle = this.afterHostEvent(strMethod, fn, context);
            }

            return handle;
        },

        /**
         * Listens for the "on" moment of events fired by the host object.
         *
         * Listeners attached through this method will be detached when the plugin is unplugged.
         *
         * @method onHostEvent
         * @param {String | Object} type The event type.
         * @param {Function} fn The listener.
         * @param {Object} context The execution context. Defaults to the plugin instance.
         * @return handle {EventHandle} The detach handle for the listener.
         */
        onHostEvent : function(type, fn, context) {
            var handle = this.get("host").on(type, fn, context || this);
            this._handles.push(handle);
            return handle;
        },

        /**
         * Listens for the "after" moment of events fired by the host object.
         *
         * Listeners attached through this method will be detached when the plugin is unplugged.
         *
         * @method afterHostEvent
         * @param {String | Object} type The event type.
         * @param {Function} fn The listener.
         * @param {Object} context The execution context. Defaults to the plugin instance.
         * @return handle {EventHandle} The detach handle for the listener.
         */
        afterHostEvent : function(type, fn, context) {
            var handle = this.get("host").after(type, fn, context || this);
            this._handles.push(handle);
            return handle;
        },

        /**
         * Injects a function to be executed before a given method on host object.
         *
         * The function will be detached when the plugin is unplugged.
         *
         * @method beforeHostMethod
         * @param {String} method The name of the method to inject the function before.
         * @param {Function} fn The function to inject.
         * @param {Object} context The execution context. Defaults to the plugin instance.
         * @return handle {EventHandle} The detach handle for the injected function.
         */
        beforeHostMethod : function(strMethod, fn, context) {
            var handle = Y.Do.before(fn, this.get("host"), strMethod, context || this);
            this._handles.push(handle);
            return handle;
        },

        /**
         * Injects a function to be executed after a given method on host object.
         *
         * The function will be detached when the plugin is unplugged.
         *
         * @method afterHostMethod
         * @param {String} method The name of the method to inject the function after.
         * @param {Function} fn The function to inject.
         * @param {Object} context The execution context. Defaults to the plugin instance.
         * @return handle {EventHandle} The detach handle for the injected function.
         */
        afterHostMethod : function(strMethod, fn, context) {
            var handle = Y.Do.after(fn, this.get("host"), strMethod, context || this);
            this._handles.push(handle);
            return handle;
        },

        toString: function() {
            return this.constructor.NAME + '[' + this.constructor.NS + ']';
        }
    });

    Y.namespace("Plugin").Base = Plugin;


}, '3.10.1', {"requires": ["base-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/census.js
// ----------------------------------------------------------------------------------------

/*global Static:true*/
YUI.add('squarespace-census', function (Y) {

  var noop = function () {};

  var pageType = {
    COLLECTION: 'collection',
    ITEM:       'item'
  };

  var Census =
  Y.namespace('Squarespace').Census = {

    hit: function () {
      // only record hit is user is NOT logged-in
      if (!Static.SQUARESPACE_CONTEXT.authenticatedAccount) {
        // page type must be 'item' or 'collection'
        if (Static.SQUARESPACE_CONTEXT.itemId) {
          Census.view( pageType.ITEM, Static.SQUARESPACE_CONTEXT.itemId );
        } else if (Static.SQUARESPACE_CONTEXT.collectionId) {
          Census.view( pageType.COLLECTION, Static.SQUARESPACE_CONTEXT.collectionId );
        } else {
          console.warn( 'Census: Hit not recorded, somehow not an item or collection.' );
        }
      }
    },

    view: function (type, id) {
      var data = {
        url:                 window.location.pathname,
        viewportInnerHeight: Y.DOM.winHeight(),
        viewportInnerWidth:  Y.DOM.winWidth(),
        screenHeight:        window.screen.height,
        screenWidth:         window.screen.width,
        userAgent:           Y.UA.userAgent,
        referrer:            window.document.referrer,
        pixelRatio:          window.devicePixelRatio
      };

      this._addPageTypeData(data, type, id);

      Census.track(Y.Squarespace.Events.VIEW, data);
    },

    track: function (event, data) {
      if (!Y.Lang.isObject(data)) {
        data = {};
      }

      // augment core context data if present
      if (Static.SQUARESPACE_CONTEXT.website) {
        data.websiteId = Static.SQUARESPACE_CONTEXT.website.id;
      }
      if (Static.SQUARESPACE_CONTEXT.templateId) {
        data.templateId = Static.SQUARESPACE_CONTEXT.templateId;
      }

      // record

      Y.Data.post({
        url: '/api/census/RecordHit',
        data: {
          event: event,
          data: data
        },
        success: noop, // times are good
        failure: noop // keep calm, carry on
      });

    },

    _addPageTypeData: function(data, type, id) {
      if (type === pageType.ITEM) {
        data.title = Static.SQUARESPACE_CONTEXT.item.title;
        data.itemId = id;
      } else if (type === pageType.COLLECTION) {
        data.title = Static.SQUARESPACE_CONTEXT.collection.title;
        data.collectionId = id;
      }

      return data;
    }
  };
}, '1.0', { requires: [
  'base',
  'dom-base',
  'io',
  'json-stringify'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-uievents/widget-uievents.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-uievents', function (Y, NAME) {

/**
 * Support for Widget UI Events (Custom Events fired by the widget, which wrap the underlying DOM events - e.g. widget:click, widget:mousedown)
 *
 * @module widget
 * @submodule widget-uievents
 */

var BOUNDING_BOX = "boundingBox",
    Widget = Y.Widget,
    RENDER = "render",
    L = Y.Lang,
    EVENT_PREFIX_DELIMITER = ":",

    //  Map of Node instances serving as a delegation containers for a specific
    //  event type to Widget instances using that delegation container.
    _uievts = Y.Widget._uievts = Y.Widget._uievts || {};

Y.mix(Widget.prototype, {

    /**
     * Destructor logic for UI event infrastructure,
     * invoked during Widget destruction.
     *
     * @method _destroyUIEvents
     * @for Widget
     * @private
     */
    _destroyUIEvents: function() {

        var widgetGuid = Y.stamp(this, true);

        Y.each(_uievts, function (info, key) {
            if (info.instances[widgetGuid]) {
                //  Unregister this Widget instance as needing this delegated
                //  event listener.
                delete info.instances[widgetGuid];

                //  There are no more Widget instances using this delegated
                //  event listener, so detach it.

                if (Y.Object.isEmpty(info.instances)) {
                    info.handle.detach();

                    if (_uievts[key]) {
                        delete _uievts[key];
                    }
                }
            }
        });
    },

    /**
     * Map of DOM events that should be fired as Custom Events by the
     * Widget instance.
     *
     * @property UI_EVENTS
     * @for Widget
     * @type Object
     */
    UI_EVENTS: Y.Node.DOM_EVENTS,

    /**
     * Returns the node on which to bind delegate listeners.
     *
     * @method _getUIEventNode
     * @for Widget
     * @protected
     */
    _getUIEventNode: function () {
        return this.get(BOUNDING_BOX);
    },

    /**
     * Binds a delegated DOM event listener of the specified type to the
     * Widget's outtermost DOM element to facilitate the firing of a Custom
     * Event of the same type for the Widget instance.
     *
     * @method _createUIEvent
     * @for Widget
     * @param type {String} String representing the name of the event
     * @private
     */
    _createUIEvent: function (type) {

        var uiEvtNode = this._getUIEventNode(),
            key = (Y.stamp(uiEvtNode) + type),
            info = _uievts[key],
            handle;

        //  For each Node instance: Ensure that there is only one delegated
        //  event listener used to fire Widget UI events.

        if (!info) {

            handle = uiEvtNode.delegate(type, function (evt) {

                var widget = Widget.getByNode(this);

                // Widget could be null if node instance belongs to
                // another Y instance.

                if (widget) {
                    if (widget._filterUIEvent(evt)) {
                        widget.fire(evt.type, { domEvent: evt });
                    }
                }

            }, "." + Y.Widget.getClassName());

            _uievts[key] = info = { instances: {}, handle: handle };
        }

        //  Register this Widget as using this Node as a delegation container.
        info.instances[Y.stamp(this)] = 1;
    },

    /**
     * This method is used to determine if we should fire
     * the UI Event or not. The default implementation makes sure
     * that for nested delegates (nested unrelated widgets), we don't
     * fire the UI event listener more than once at each level.
     *
     * <p>For example, without the additional filter, if you have nested
     * widgets, each widget will have a delegate listener. If you
     * click on the inner widget, the inner delegate listener's
     * filter will match once, but the outer will match twice
     * (based on delegate's design) - once for the inner widget,
     * and once for the outer.</p>
     *
     * @method _filterUIEvent
     * @for Widget
     * @param {DOMEventFacade} evt
     * @return {boolean} true if it's OK to fire the custom UI event, false if not.
     * @private
     *
     */
    _filterUIEvent: function(evt) {
        // Either it's hitting this widget's delegate container (and not some other widget's),
        // or the container it's hitting is handling this widget's ui events.
        return (evt.currentTarget.compareTo(evt.container) || evt.container.compareTo(this._getUIEventNode()));
    },

    /**
     * Determines if the specified event is a UI event.
     *
     * @private
     * @method _isUIEvent
     * @for Widget
     * @param type {String} String representing the name of the event
     * @return {String} Event Returns the name of the UI Event, otherwise
     * undefined.
     */
    _getUIEvent: function (type) {

        if (L.isString(type)) {
            var sType = this.parseType(type)[1],
                iDelim,
                returnVal;

            if (sType) {
                // TODO: Get delimiter from ET, or have ET support this.
                iDelim = sType.indexOf(EVENT_PREFIX_DELIMITER);
                if (iDelim > -1) {
                    sType = sType.substring(iDelim + EVENT_PREFIX_DELIMITER.length);
                }

                if (this.UI_EVENTS[sType]) {
                    returnVal = sType;
                }
            }

            return returnVal;
        }
    },

    /**
     * Sets up infrastructure required to fire a UI event.
     *
     * @private
     * @method _initUIEvent
     * @for Widget
     * @param type {String} String representing the name of the event
     * @return {String}
     */
    _initUIEvent: function (type) {
        var sType = this._getUIEvent(type),
            queue = this._uiEvtsInitQueue || {};

        if (sType && !queue[sType]) {

            this._uiEvtsInitQueue = queue[sType] = 1;

            this.after(RENDER, function() {
                this._createUIEvent(sType);
                delete this._uiEvtsInitQueue[sType];
            });
        }
    },

    //  Override of "on" from Base to facilitate the firing of Widget events
    //  based on DOM events of the same name/type (e.g. "click", "mouseover").
    //  Temporary solution until we have the ability to listen to when
    //  someone adds an event listener (bug 2528230)
    on: function (type) {
        this._initUIEvent(type);
        return Widget.superclass.on.apply(this, arguments);
    },

    //  Override of "publish" from Base to facilitate the firing of Widget events
    //  based on DOM events of the same name/type (e.g. "click", "mouseover").
    //  Temporary solution until we have the ability to listen to when
    //  someone publishes an event (bug 2528230)
    publish: function (type, config) {
        var sType = this._getUIEvent(type);
        if (sType && config && config.defaultFn) {
            this._initUIEvent(sType);
        }
        return Widget.superclass.publish.apply(this, arguments);
    }

}, true); // overwrite existing EventTarget methods


}, '3.10.1', {"requires": ["node-event-delegate", "widget-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-curve/anim-curve.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-curve', function (Y, NAME) {

/**
 * Adds support for the <code>curve</code> property for the <code>to</code>
 * attribute.  A curve is zero or more control points and an end point.
 * @module anim
 * @submodule anim-curve
 */

Y.Anim.behaviors.curve = {
    set: function(anim, att, from, to, elapsed, duration, fn) {
        from = from.slice.call(from);
        to = to.slice.call(to);
        var t = fn(elapsed, 0, 100, duration) / 100;
        to.unshift(from);
        anim._node.setXY(Y.Anim.getBezier(to, t));
    },

    get: function(anim) {
        return anim._node.getXY();
    }
};

/**
 * Get the current position of the animated element based on t.
 * Each point is an array of "x" and "y" values (0 = x, 1 = y)
 * At least 2 points are required (start and end).
 * First point is start. Last point is end.
 * Additional control points are optional.
 * @for Anim
 * @method getBezier
 * @static
 * @param {Array} points An array containing Bezier points
 * @param {Number} t A number between 0 and 1 which is the basis for determining current position
 * @return {Array} An array containing int x and y member data
 */
Y.Anim.getBezier = function(points, t) {
    var n = points.length,
        tmp = [],
        i,
        j;

    for (i = 0; i < n; ++i){
        tmp[i] = [points[i][0], points[i][1]]; // save input
    }

    for (j = 1; j < n; ++j) {
        for (i = 0; i < n - j; ++i) {
            tmp[i][0] = (1 - t) * tmp[i][0] + t * tmp[parseInt(i + 1, 10)][0];
            tmp[i][1] = (1 - t) * tmp[i][1] + t * tmp[parseInt(i + 1, 10)][1];
        }
    }

    return [ tmp[0][0], tmp[0][1] ];

};


}, '3.10.1', {"requires": ["anim-xy"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/common.js
// ----------------------------------------------------------------------------------------

/*jshint bitwise:false, loopfunc:true  */
/*global YUI_CONFIG, Y, WebFont */

var Static = Static || { };

// ------------------------------------------------------------------------------------------------
// Common Functions
// ------------------------------------------------------------------------------------------------

if (typeof(window) === "undefined") {
    window = {};
}

if (typeof(console) === "undefined") {
  console = { log: function() { }, dir: function() { }, warn: function() {}, error: function(args) {
    var error = Array.prototype.slice.call(arguments);
    throw new Error(error); // make sure this stays. in Rhino, we want console.error to throw an exception.
  } };
}

function noop() { }

function clone(o) {
  var newObj = (o instanceof Array) ? [] : {};
  for (var i in o) {
    if (i == 'clone') continue;
    if (o[i] && typeof o[i] == "object") {
      newObj[i] = clone(o[i]);
    } else newObj[i] = o[i];
  } return newObj;
}

function isEmpty(o) {
  return Object.keys(o).length === 0;
}


// ------------------------------------------------------------------------------------------------
// Base Class Extensions
// ------------------------------------------------------------------------------------------------

if(!String.prototype.trim) {
  String.prototype.trim = function() {
    return( this.replace(/^\s+|\s+$/g, '') );
  };
}

String.prototype.capitalize = function() {
  return this.charAt(0).toUpperCase() + this.slice(1);
};

String.prototype.endsWith = function(sEnd) {
  return( this.substr(this.length-sEnd.length) === sEnd );
};

String.prototype.startsWith = function(sStart) {
  return( this.substr(0,sStart.length) === sStart );
};

Array.prototype.removeRange = function(from, to) {
  this.splice(from,
    !to ||
    1 + to - from + (!(to < 0 ^ from >= 0) && (to < 0 || -1) * this.length));
  return this.length;
};

Array.prototype.removeAt = function(at) {
  this.removeRange(at, at);
};

Array.prototype.find = function(item) {
  for (var i = 0; i < this.length; ++i) {
    if (this[i] === item) { return i; }
  }
  return -1;
};

Array.prototype.remove = function(item) {
  var idx = this.find(item);
  if (idx != -1) {
    this.removeAt(idx);
  }
};

if (!Array.prototype.indexOf) {
  // from: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
  Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
    "use strict";
    if (this == null) {
        throw new TypeError();
    }
    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) {
        return -1;
    }
    var n = 0;
    if (arguments.length > 0) {
        n = Number(arguments[1]);
        if (n != n) { // shortcut for verifying if it's NaN
            n = 0;
        } else if (n != 0 && n != Infinity && n != -Infinity) {
            n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
    }
    if (n >= len) {
        return -1;
    }
    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
    for (; k < len; k++) {
        if (k in t && t[k] === searchElement) {
            return k;
        }
    }
    return -1;
  };
}

if (!Array.prototype.shuffle) {
  // this modifies the original array.
  Array.prototype.shuffle = function() {
    var s = [];
    while (this.length) s.push(this.splice(Math.random() * this.length, 1));
    while (s.length) this.push(s.pop()[0]);
    return this;
  };
}

if (!Array.prototype.forEach) {
  Array.prototype.forEach = function(fn, scope) {
    for(var i = 0, len = this.length; i < len; ++i) {
      fn.call(scope || this, this[i], i, this);
    }
  };
}

if (!Array.prototype.filter)  {
  Array.prototype.filter = function(fun /*, thisp */) {

    if (this == null) { throw new TypeError(); }

    var t = Object(this);
    var len = t.length >>> 0;
    if (typeof fun != "function")
      throw new TypeError();

    var res = [];
    var thisp = arguments[1];
    for (var i = 0; i < len; i++) {
      if (i in t) {
        var val = t[i]; // in case fun mutates this
        if (fun.call(thisp, val, i, t)) {
          res.push(val);
        }
      }
    }

    return res;
  };
}

Number.prototype.formatMoney = function(decimalPlaces, decimalSymbol, thousandSymbol) {
  var n = this;
  decimalPlaces = isNaN(decimalPlaces = Math.abs(decimalPlaces)) ? 2 : decimalPlaces;
  if (!decimalSymbol) decimalSymbol = ".";
  if (!thousandSymbol) thousandSymbol = ",";
  var s = n < 0 ? "-" : "";
  var i = parseInt(n = Math.abs(+n || 0).toFixed(decimalPlaces), 10) + "", j = (j = i.length) > 3 ? j % 3 : 0;
  return s + (j ? i.substr(0, j) + thousandSymbol : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousandSymbol) + (decimalPlaces ? decimalSymbol + Math.abs(n - i).toFixed(decimalPlaces).slice(2) : "");
};

Date.prototype.toRelativeTime = function(since) {
  since = since || new Date();
  var delta = (since.getTime() - this.getTime()) / 1000;

  return delta < 60 ? "less than a minute ago" :
         delta < 120 ? "about a minute ago" :
         delta < 3600 ? Math.floor(delta/60) + " minutes ago" :
         delta < 7200 ? "about an hour ago" :
         delta < 86400 ? "about " +Math.floor(delta/3600)+ " hours ago" :
         delta < 172800 ? "1 day ago" :
         Math.floor(delta/86400)+ " days ago";
};

Date.prototype.stdTimezoneOffset = function() {
    var jan = new Date(this.getFullYear(), 0, 1);
    var jul = new Date(this.getFullYear(), 6, 1);
    return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
};

Date.prototype.isDST = function() {
    return this.getTimezoneOffset() < this.stdTimezoneOffset();
};

// ------------------------------------------------------------------------------------------------
// Taken from DateJS
// ------------------------------------------------------------------------------------------------

Date.isLeapYear = function (y) {
    return (((y % 4 === 0) && (y % 100 !== 0)) || (y % 400 === 0));
};

Date.getDaysInMonth = function (year, month) {
    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
};

Date.prototype.isLeapYear = function () {
    return (Date.isLeapYear(this.getFullYear()));
};

Date.prototype.getDaysInMonth = function () {
    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
};

Date.prototype.moveToFirstDayOfMonth = function () {
    return this.set({ day: 1 });
};

Date.prototype.moveToLastDayOfMonth = function () {
    return this.set({ day: this.getDaysInMonth()});
};

Date.prototype.addDays = function (value) {
    return this.addMilliseconds(value * 86400000); /* 60*60*24*1000 */
};

Date.prototype.addMilliseconds = function (value) {
    this.setMilliseconds(this.getMilliseconds() + value);
    return this;
};

Date.prototype.addSeconds = function (value) {
    return this.addMilliseconds(value * 1000);
};

Date.prototype.addMinutes = function (value) {
    return this.addMilliseconds(value * 60000); /* 60*1000 */
};

Date.prototype.addHours = function (value) {
    return this.addMilliseconds(value * 3600000); /* 60*60*1000 */
};

Date.prototype.addDays = function (value) {
    return this.addMilliseconds(value * 86400000); /* 60*60*24*1000 */
};

Date.prototype.addWeeks = function (value) {
    return this.addMilliseconds(value * 604800000); /* 60*60*24*7*1000 */
};

Date.prototype.addMonths = function (value) {
    var n = this.getDate();
    this.setDate(1);
    this.setMonth(this.getMonth() + value);
    this.setDate(Math.min(n, this.getDaysInMonth()));
    return this;
};

Date.prototype.addYears = function (value) {
    return this.addMonths(value * 12);
};

Date._validate = function (value, min, max, name) {
    //if (typeof(value) !== "number") {
    //  throw new TypeError(value + " is not a Number.");
    //} else if (value < min || value > max) {
    //  throw new RangeError(value + " is not a valid value for " + name + ".");
    //}
    return true;
};

Date.validateMillisecond = function (n) {
    return Date._validate(n, 0, 999, "milliseconds");
};

Date.validateSecond = function (n) {
    return Date._validate(n, 0, 59, "seconds");
};

Date.validateMinute = function (n) {
    return Date._validate(n, 0, 59, "minutes");
};

Date.validateHour = function (n) {
    return Date._validate(n, 0, 23, "hours");
};

Date.validateDay = function (n, year, month) {
    return Date._validate(n, 1, Date.getDaysInMonth(year, month), "days");
};

Date.validateMonth = function (n) {
    return Date._validate(n, 0, 11, "months");
};

Date.validateYear = function (n) {
    return Date._validate(n, 1, 9999, "seconds");
};

Date.prototype.set = function (config) {
    var x = config;

    if (!x.millisecond && x.millisecond !== 0) {
        x.millisecond = -1;
    }
    if (!x.second && x.second !== 0) {
        x.second = -1;
    }
    if (!x.minute && x.minute !== 0) {
        x.minute = -1;
    }
    if (!x.hour && x.hour !== 0) {
        x.hour = -1;
    }
    if (!x.day && x.day !== 0) {
        x.day = -1;
    }
    if (!x.month && x.month !== 0) {
        x.month = -1;
    }
    if (!x.year && x.year !== 0) {
        x.year = -1;
    }

    if (x.millisecond !== -1 && Date.validateMillisecond(x.millisecond)) {
        this.addMilliseconds(x.millisecond - this.getMilliseconds());
    }
    if (x.second !== -1 && Date.validateSecond(x.second)) {
        this.addSeconds(x.second - this.getSeconds());
    }
    if (x.minute !== -1 && Date.validateMinute(x.minute)) {
        this.addMinutes(x.minute - this.getMinutes());
    }
    if (x.hour !== -1 && Date.validateHour(x.hour)) {
        this.addHours(x.hour - this.getHours());
    }
    if (x.month !== -1 && Date.validateMonth(x.month)) {
        this.addMonths(x.month - this.getMonth());
    }
    if (x.year !== -1 && Date.validateYear(x.year)) {
        this.addYears(x.year - this.getFullYear());
    }

    /* day has to go last because you can't validate the day without first knowing the month */
    if (x.day !== -1 && Date.validateDay(x.day, this.getFullYear(), this.getMonth())) {
      this.addDays(x.day - this.getDate());
    }
    if (x.timezone) {
      this.setTimezone(x.timezone);
    }
    if (x.timezoneOffset) {
      this.setTimezoneOffset(x.timezoneOffset);
    }

    return this;
};

// ------------------------------------------------------------------------------------------------
// OOP
// ------------------------------------------------------------------------------------------------

var Singleton = {

  create: function(protoDef) {

    var C = function() { };

    C.prototype = protoDef;

    // ready

    var r = new C();

    if (r.ready) { r.ready(); }

    return (r);

  }

};

var Class = {

  create: function(protoDef) {

    var c;

    // create object based on constructor method

    if (protoDef.initialize) {
      c = function() {
        this.initialize.apply(this, arguments);
      };
    } else {
      c = function() { };
    }

    // assign prototype

    c.prototype = protoDef;

    // allow extension / specialization

    c.extend = function(protoDef) { // create a new class based on this one
      return Class.extend(this, protoDef);
    };

    c.specialize = function(protoDef, _parent) { // create a new class based on this one
      var sp = Class.specialize(this, protoDef);
      sp._parent = _parent;
      return sp;
    };

    return c;

  },

  extend: function(base, protoDef) {

    if (!protoDef.initialize) { // non standard -- constructor inheritance
      protoDef.initialize = base.prototype.initialize;
    }

    var c = Class.create(protoDef); // start with our derived methods
    /*jshint jshint:false */ // http://stackoverflow.com/questions/3911690
    var fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;
    /*jshint jshint:true */

    for (var property in base.prototype) {

      if (!c.prototype[property]) { // if it's missing?

        // just make it a reference to the base property
        c.prototype[property] = base.prototype[property];

      } else if( typeof(c.prototype[property]) === 'function' && fnTest.test(c.prototype[property]) ) { // if this property exists in our new class, it's a function, and it has usage of _super in it's definition.

       // put a layer on top of it, and modify the prototype of the property.
        c.prototype[property] = (function(name, fn) {
          return function() {
            var tmp = this._super;

            // Add a new ._super() method that is the same method
            // but on the super-class
            this._super = base.prototype[name];

            // The method only need to be bound temporarily, so we
            // remove it when we're done executing
            var ret = fn.apply(this, arguments);

            this._super = tmp;

            return ret;
          };
        })(property, c.prototype[property]);

        /*
         * Check out http://ejohn.org/blog/simple-javascript-inheritance/
         *
         *
         * It's pronunced Rez-ig.
         */

      }

    }

    c.prototype.superclass = base.prototype;

    return c;

  },

  specialize: function(base, protoDef) {

    var Cx = Class.extend(base, protoDef);
    return new Cx();

  }


};


// ------------------------------------------------------------------------------------------------
// Fonts
// ------------------------------------------------------------------------------------------------

var SquarespaceFonts = {

  alreadyLoaded: [],

  loadViaContext: function() {

    // initialize fonts

    var fontData = {
      googleFamilies: Static.SQUARESPACE_CONTEXT.googleFonts
    };

    if (Static.SQUARESPACE_CONTEXT.website.typekitId) {
      fontData.typeKit = { id: Static.SQUARESPACE_CONTEXT.website.typekitId };
    }

    this.load(fontData);

  },

  loadTypekit: function(font, callback) {

    if (!this.setup) {
      if (!window.TypekitPreview) {
        return;
      }

      // Setup auth ID and token
      TypekitPreview.setup({
        'auth_id': 'ss',
        'auth_token': '3bb2a6e53c9684ffdc9a9aff125b2a62e548d148a40d2569e8744d09ab700376b808849901373960a86ab7eb18e3389e9055ca0781db97636f81e1056100e066aab43577db7757f91919edf717e7bbcff1314c86cbb1e8d2a8ba5a31ef8fa01e5f2d'
      });
    }

    var list = [];

    if (typeof(font) == 'array') {
      for (var i = 0; i < font.length; i++) {
        if (this.alreadyLoaded.indexOf(font[i]) !== -1) {
          continue;
        }
        this.alreadyLoaded.push(font[i]);
        list.push({
          'id': Static.SQUARESPACE_CONTEXT.typekitFonts[font[i]].id,
          'css_name': font[i],
          'variations': Static.SQUARESPACE_CONTEXT.typekitFonts[font[i]].variations
        });
      }
    } else {
      if (this.alreadyLoaded.indexOf(font) !== -1) {
        if (callback) {
          callback();
        }
        return;
      }
      this.alreadyLoaded.push(font);
      list.push({
        'id': Static.SQUARESPACE_CONTEXT.typekitFonts[font].id,
        'css_name': font,
        'variations': Static.SQUARESPACE_CONTEXT.typekitFonts[font].variations
      });
    }

    TypekitPreview.load(list, {
      // Font event callbacks
      // loading: function() {
      //   // Called when these fonts are requested
      //   console.log('The requested fonts are loading');
      // },
      active: function() {
        // Called after these fonts are done loading and at least one is active
        // console.log('The requested fonts are done loading and at least one is active');
        if (callback) {
          callback();
        }
      },
      inactive: function() {
        // Called after these fonts are done loading and none are active
        // Also called immediately if fonts are not supported
        // console.log('The requested fonts are done loading and none are active or the fonts are unsupported');
        if (callback) {
          callback();
        }
      }
      // fontloading: function(fontFamily, fontDescription) {
      //   // Called as each font is requested
      //   console.log(font + ' is requested');
      // },
      // fontactive: function(fontFamily, fontDescription) {
      //   // Called after a font finishes loading and is active
      //   console.log(font + ' is finished');
      // },
      // fontinactive: function(fontFamily, fontDescription) {
      //   // Called after a font fails to load
      //   console.log(font + ' is inactive');
      // }
    });

  },

  load: function(params) {

    if (!params) { params = { }; }

    if (params.googleFamilies === 'all') {

      if (this.everythingLoaded) { return; }

      params.googleFamilies = [ ];

      for (var k in Static.SQUARESPACE_CONTEXT.googleFonts) {
        var fontDef = Static.SQUARESPACE_CONTEXT.googleFonts[k];
        params.googleFamilies.push(fontDef.includeName);
      }

      this.everythingLoaded = true;

    } else if (!params.googleFamilies) {

      params.googleFamilies = [ ];

    } else {

      for (var j = 0; j < params.googleFamilies.length; j++) {
        if (this.alreadyLoaded.indexOf(params.googleFamilies[j]) == -1) {
          this.alreadyLoaded.push(params.googleFamilies[j]);
        } else {
          params.googleFamilies.splice(j, 1);
          j--;
        }
      }

    }

    if (params.googleFamilies.length === 0) { return; }

    if (Y.UA.ie) {
      window.setTimeout(function() {
        var wf = document.createElement('link');
        wf.rel = "stylesheet";
        var href = "//fonts.googleapis.com/css?family=";
        href += params.googleFamilies.join('|');
        wf.href = href;
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(wf, s);
      }, 20);
    } else {
      window.setTimeout(function() {
        var wf = document.createElement('style');
        var inner = "@import url('//fonts.googleapis.com/css?family=";
        inner += params.googleFamilies.join('|');
        inner += "');";
        wf.innerHTML = inner;
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(wf, s);
      }, 20);
    }

  }

};


// ------------------------------------------------------------------------------------------------
// Squarespace Loading
// ------------------------------------------------------------------------------------------------

var Squarespace = {

  INITIALIZED: false,

  load: function() {

    // create YUI
    Y = window.Y = YUI(YUI_CONFIG);

    // normalize some simple things
    if (Static.SQUARESPACE_CONTEXT.collection) {
      Static.SQUARESPACE_CONTEXT.collectionId = Static.SQUARESPACE_CONTEXT.collection.id;
    }
    if (Static.SQUARESPACE_CONTEXT.item) {
      Static.SQUARESPACE_CONTEXT.itemId = Static.SQUARESPACE_CONTEXT.item.id;
    }

    // COMPONENTS AVAILABLE BEFORE DOMREADY
    // Removing this will break a number of dev sites
    Y.use('squarespace-image-loader');

    // Bind DOMReady, in the event that the {squarespace-footers}
    // isn't included.
    // this should only happen on developer sites.
    Y.on('domready', Squarespace.afterBodyLoad, Squarespace);

  },

  onInitialize: function(Y, f) {

    if (Squarespace.INITIALIZED) {
      f(); // we're ready
    } else {
      Y.Global.on("squarespace:initialized", f); // wait until we're ready
    }

  },

  afterBodyLoad: function() {

    // this is to prevent afterBodyLoad() from being
    // called twice.
    if (this.AFTER_BODY_LOADED) {
      return;
    }

    // basic rollup
    Y.use(SQUARESPACE_ROLLUPS, Squarespace.globalInit);

    this.AFTER_BODY_LOADED = true;

  },

  addLoadTrigger: function(selector, modules) {

    if (!Y.one(selector)) { return; }

    // figure out where the resources are
    var loadSet = [ ];
    for (var i = 0; i < modules.length; ++i) {

      var module = modules[i];

      var rollup = Static.SQUARESPACE_CONTEXT.rollups[module];
      if (!rollup) {
        console.warn("Unable to load module \'" + module + "\' for trigger \'" + selector + "\'");
        return;
      }
      loadSet.push(rollup.js);
      loadSet.push(rollup.css);

    }

    // load and initialize the modules
    Y.Get.load(loadSet, function() {
      Y.use(modules);
    });
  },


  globalInit: function (Y) {

    // esc manager
    Y.Squarespace.EscManager.attach();

    // register the hit
    Y.Squarespace.Analytics.hit();
    Y.Squarespace.Census.hit();

    // humanize dates
    Y.Squarespace.Utils.humanizeAllDates(".timesince");

    // initialize layout blocks
    Squarespace.initializeLayoutBlocks(Y);

    // initialize global lightbox
    Squarespace.initializeGlobalLightbox(Y);

    // initialize video
    Squarespace.initializeVideo(Y);

    var disqusShortname = Static.SQUARESPACE_CONTEXT.websiteSettings.disqusShortname;
    if (Y.Lang.isValue(disqusShortname) && disqusShortname !== '') {
      Squarespace.initializeDisqusCommentLinks(Y);
    }

    // notify of logout?
    if (document.location.href.indexOf("logout=true") !== -1) {
      Y.on('domready', function() {
        new Y.Squarespace.Information({ position: "top-right" }).show("Logout Successful", "You have been successfully logged out.");
      });
    }

    // let scripts react
    Y.Global.fire("squarespace:initialized");

    // conditionally load comments if we see any applicable elements
    if (Static.SQUARESPACE_CONTEXT.websiteSettings.commentsEnabled) {
      Squarespace.addLoadTrigger(".squarespace-comments", ["squarespace-dialog", "squarespace-comments"]);
    }


    // initialize audio
    Squarespace.addLoadTrigger(".sqs-audio-embed, .sqs-audio-playlist", ["squarespace-audio-player"]);

    // initialize calendars
    Squarespace.addLoadTrigger(".sqs-block.calendar-block", ["squarespace-calendar"]);

    // mark ready
    Squarespace.INITIALIZED = true;

  },

  initializeDisqusCommentLinks: function(Y) {
    var disqusHash = '#disqus_thread';
    var sqsHashTemplate = '#comment-{id}';
    var commentLinks = Y.all('.sqs-comment-link');
    var href = 'href';
    var id = "data-id";
    var createUrl;
    var shortname = Static.SQUARESPACE_CONTEXT.websiteSettings.disqusShortname;
    var disqusEnabled = Y.Lang.isString(shortname) && shortname !== "";

    if(disqusEnabled) {
      createUrl = function(node) {
        return Static.SQUARESPACE_CONTEXT.website.baseUrl + node.getAttribute(href) + disqusHash;
      };
    } else {
      createUrl = function(node) {
        return Static.SQUARESPACE_CONTEXT.website.baseUrl + node.getAttribute(href) + Y.substitute(sqsHashTemplate, { id: node.getAttribute(id) });
      };
    }

    commentLinks.each(function(n) {
      n.setAttribute(href, createUrl(n));
    }, this);

    if(disqusEnabled) {
      window.disqus_shortname = shortname;
      Y.Get.script('//' + shortname + '.disqus.com/count.js');
    }

  },

  initializeLayoutBlocks: function(Y, root) {

    if (!root) {
      root = Y;
    }

    // initialize galleries
    var galleryBasedBlocksSelector = '.sqs-block.gallery-block, .sqs-block.flickr-block, .sqs-block.instagram-block, .sqs-block.fivehundredpix-block, .sqs-block.video-block';
    root.all(galleryBasedBlocksSelector).each(function(el) {
      Y.Squarespace.GalleryManager.initializeBlock(el);
    });

    // initialize embeds and videos
    root.all('.sqs-block.video-block .sqs-block-content,.sqs-block.embed-block .sqs-block-content').each(function(blockEl) {
      if (window.location.protocol.startsWith('https')) {
        var flashEmbed = (blockEl.one('object')) ? blockEl.one('object').one('embed') : null;
        if (flashEmbed) {
          flashEmbed.setAttribute('src', flashEmbed.getAttribute('src').replace('http://', 'https://'));
        }
      }

      if (blockEl.test('.sqs-block.video-block .sqs-block-content')) {
        var videoWrapperEl = blockEl.one('.sqs-video-wrapper');

        if (videoWrapperEl) {
          Squarespace.initializeVideoBlock(videoWrapperEl);
        }
      } else {
        if (!blockEl.one('.intrinsic')) {

          // Looks weird, but Y.JSON.parse("") throws an unexpected EOE exception.
          var blockJsonString = blockEl.getAttribute('data-block-json');
          if (blockJsonString) {

            // Twitter embeds are loaded dynamically. Do not try to measure / resize them.
            var blockJson = Y.JSON.parse(blockJsonString);
            if (blockJson && blockJson.providerName !== "Twitter") {
              blockel.get('children').each(function(el) {
                el.resizetoparent({sizeonly: true});
              });
            }
          }

          blockEl.setStyles({
            visibility: 'visible',
            opacity: 1,
            height: 'auto'
          });
        }
      }
    });

    // initialize images
    root.all('.sqs-layout[data-type] img[data-image]').each(function(el) {
      if (el.ancestor(galleryBasedBlocksSelector)) { return; } // skip, gallery handles instantiation
      Squarespace.initializeImageBlock(el);
    });

    // initialize maps
    root.all(".sqs-block.map-block[data-block-json]").each(function (n) {
      Y.Squarespace.Rendering.renderMap(n.one(".sqs-block-content"), Y.JSON.parse(n.getAttribute("data-block-json")));
    });

    // initialize forms
    root.all('.sqs-block.form-block').each(Squarespace.initializeFormBlock, this);

    // initialize donate buttons
    root.all('.sqs-block.donation-block').each(Squarespace.initializeDonationButton, this);
  },

  initializeVideoBlock: function(videoWrapper) {
    // don't initialize if already initialized
    if (!videoWrapper.videoloader) {
        videoWrapper.plug(Y.Squarespace.VideoLoader);
    }
  },

  initializeImageBlock: function(el) {
    el.setStyles({
      position: null,
      top: null,
      left: null,
      width: null,
      height: null
    });

    var fill = !!el.ancestor('.sized,.content-fill');

    if (fill) {
      var imageBlockWrapperEl = el.ancestor('.image-block-wrapper');
      var layout = el.ancestor('.sqs-layout');

      if (imageBlockWrapperEl && layout && !layout.hasClass('editing')) {

        var ratio = imageBlockWrapperEl.get('offsetHeight') / imageBlockWrapperEl.get('offsetWidth');
        imageBlockWrapperEl.setAttribute('style', 'padding-bottom: ' + (ratio * 100) + '% !important; height: auto !important;');

        el.setStyles({
          maxWidth: 'none'
        });
      }

      Y.on('resize', function() {
        if (el.getDOMNode() && el.inDoc()) {
          el.fire('refresh');
        }
      }, Y.config.win);
    }

    el.plug(Y.Squarespace.Loader2, {
      fill: fill,
      mode: (fill ? 'fill' : 'none')
    });


    /*jslint boss:true*/
    // handle the lightbox
    var blockEl;
    var lightboxEl;

    if ((blockEl = el.ancestor('.sqs-block')) && (lightboxEl = blockEl.one('.image-block-wrapper.lightbox'))) {
      var imgEl = lightboxEl.one('img[data-image]');
      if (!imgEl) { return; }

      var loader = imgEl.loader;
      if (!loader) { return; }

      var parentEl = lightboxEl.get('parentNode');

      // opts
      var options = {
        content: loader.getBareElement()
      };

      var description = lightboxEl.getAttribute('data-description');
      if (description) {
        options.meta = description;
      }

      // plug
      lightboxEl.plug(Y.Squarespace.Lightbox2Plug, {
        lightboxOptions: options
      });
    }
  },

  initializeFormBlock: function(formBlock) {
    var lightboxHandle = formBlock.one('.lightbox-handle');

    if (lightboxHandle) {
      var lightbox = lightboxHandle.getData('lightbox');

      if (!lightbox) {
        var formWrapper = formBlock.one('.form-wrapper');

        lightbox = new Y.Squarespace.Widgets.FormLightbox({
          content: formWrapper.cloneNode(true).removeClass('hidden'),
          render: Y.one('body')
        });

        lightbox.on('close', function() {
          lightbox.set('content', formWrapper.cloneNode(true).removeClass('hidden'));
        }, this);

        lightboxHandle.setData('lightbox', lightbox);
      }

      lightboxHandle.detach('click');

      lightboxHandle.on('click', function(e) {
        e.halt();
        lightbox.open();
      }, this);
    }
  },

  initializeDonationButton: function(buttonWrapper) {
    var button = buttonWrapper.one('.sqs-donate-button');
    button.on('click', function() {
      // go to donation checkout page with this donation button id
      Y.Squarespace.Commerce.goToDonatePage(button.getAttribute('data-donate-page-id'));
    });
  },

  initializeGlobalLightbox: function(Y) {

    // anytag with rel="lightbox" and data-lightbox defined will work.
    Y.all('[rel="lightbox"][data-lightbox]').plug(Y.Squarespace.Lightbox2Plug);

  },

  initializeCommerce: function(Y) {
    // if on cart, checkout, or order confirmed page, don't initialize anything
    if (Static.SQUARESPACE_CONTEXT.hideShoppingCart) {
      return;
    }

    Y.Squarespace.ProductUtils.initializeVariantDropdowns();
    Y.Squarespace.CartUtils.initializeAddToCartButtons();

    // shopping cart model is a singleton
    if (Y.Squarespace.SHOPPING_CART) {
      Y.all('.sqs-add-to-cart-button-wrapper').setStyle('visibility', 'visible');
    } else {
      Y.Squarespace.SHOPPING_CART = new Y.Squarespace.Models.ShoppingCart();

      // only create and render pill if not express checkout
      if (!Y.Squarespace.Commerce.isExpressCheckout()) {
        // shopping cart pill dropzone
        var dropZone = Y.one('.sqs-cart-dropzone');

        if (Y.Lang.isNull(dropZone)) {
          dropZone = Y.Node.create('<div class="absolute-cart-box"></div>');
          Y.one('body').append(dropZone);
        }

        new Y.Squarespace.Widgets.PillShoppingCart({
          model: Y.Squarespace.SHOPPING_CART,
          useLightCart: Static.SQUARESPACE_CONTEXT.websiteSettings.storeSettings.useLightCart,
          render: dropZone
        });
      }

      if (Y.Lang.isNull(Y.Cookie.get('CART'))) {
        Y.all('.sqs-add-to-cart-button-wrapper').setStyle('visibility', 'visible');
      } else {
        Y.Squarespace.SHOPPING_CART.load(function() {
          Y.all('.sqs-add-to-cart-button-wrapper').setStyle('visibility', 'visible');
        }, this);
      }
    }
  },

  initializeAudioBlock: function(Y) {

    if (Y.Squarespace.Widgets.AudioPlayer) {
      Y.all(".sqs-audio-embed").each(function(node) {
        // this should use Widget.getByNode to check for an existing AudioPlayer
        // instance/bounding box inside this thing
        if (!Y.Widget.getByNode(node.one('.' + Y.Squarespace.Widgets.AudioPlayer.CSS_PREFIX))) {
          new Y.Squarespace.Widgets.AudioPlayer({ render: node });
        }
      });
    } else {
      Squarespace.addLoadTrigger(".sqs-audio-embed", ["squarespace-audio-player"]);
    }

  },

  initializeVideo: function(Y) {
    Y.all('.sqs-video-wrapper').each(function(videoWrapper) {
      // only initialize if not already initialized and not a video block or gallery slide
      if (!videoWrapper.videoloader && !videoWrapper.ancestor('.sqs-block.video-block') && !videoWrapper.ancestor('.slide')) {
        videoWrapper.plug(Y.Squarespace.VideoLoader, { load: videoWrapper.getAttribute('data-load') !== 'false' });
      }
    });
  }


};


// ------------------------------------------------------------------------------------------------
// Error Tracking
// ------------------------------------------------------------------------------------------------

if (typeof(SERVER_ENV) == "undefined") {

  window.onerror = function(message, file, line) {

    if (file.indexOf("/universal/scripts") == -1) {
      return; // don't log exceptions that aren't in our scripts
    }

    var err = {
      url: document.location.href,
      message: message,
      file: file,
      line: line
    };

    // should handle this case a little better
    window.trackClientError(err);

  };

  var CLIENT_ERROR_COUNT = 0;

  window.trackClientError = function(dataObj) {

    ++CLIENT_ERROR_COUNT;

    if (CLIENT_ERROR_COUNT > 10) {
      return; // don't attack the server on infinite loops
    }

    if (typeof(Y) != "undefined" && typeof(Y.Data) != "undefined") {

      Y.Data.post({
        url: "/api/events/RecordClientError",
        data: dataObj
      });

    }

  };

}


// ------------------------------------------------------------------------------------------------
// Dependency
// for legacy reasons we load this due to that some dev-sites depend on them
// - node-load
// - node-event-simulate
// ------------------------------------------------------------------------------------------------
YUI.add('squarespace-common', function (Y) {  }, "1.0", { requires: [

  'get',
  'intl',
  'lang/datatype-date-format_en',

  'squarespace-util',
  'squarespace-ui-base',
  'squarespace-escmanager',
  'squarespace-image-loader',
  'squarespace-video-loader',
  'squarespace-simple-liking',
  'squarespace-social-buttons',
  'squarespace-gallery-ng',
  'squarespace-form-submit',
  'squarespace-search',
  'squarespace-census',
  'squarespace-events-calendar',
  'thirdparty-modernizr',
  'node-load',
  'node-event-simulate',
  'squarespace-follow-buttons',
  'squarespace-form-lightbox'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/history-base/history-base.js
// ----------------------------------------------------------------------------------------

YUI.add('history-base', function (Y, NAME) {

/**
 * Provides browser history management functionality using a simple
 * add/replace/get paradigm. This can be used to ensure that the browser's back
 * and forward buttons work as the user expects and to provide bookmarkable URLs
 * that return the user to the current application state, even in an Ajax
 * application that doesn't perform full-page refreshes.
 *
 * @module history
 * @main history
 * @since 3.2.0
 */

/**
 * Provides global state management backed by an object, but with no browser
 * history integration. For actual browser history integration and back/forward
 * support, use the history-html5 or history-hash modules.
 *
 * @module history
 * @submodule history-base
 * @class HistoryBase
 * @uses EventTarget
 * @constructor
 * @param {Object} config (optional) configuration object, which may contain
 *   zero or more of the following properties:
 *
 * <dl>
 *   <dt>force (Boolean)</dt>
 *   <dd>
 *     If `true`, a `history:change` event will be fired whenever the URL
 *     changes, even if there is no associated state change. Default is `false`.
 *   </dd>
 *
 *   <dt>initialState (Object)</dt>
 *   <dd>
 *     Initial state to set, as an object hash of key/value pairs. This will be
 *     merged into the current global state.
 *   </dd>
 * </dl>
 */

var Lang      = Y.Lang,
    Obj       = Y.Object,
    GlobalEnv = YUI.namespace('Env.History'),
    YArray    = Y.Array,

    doc       = Y.config.doc,
    docMode   = doc.documentMode,
    win       = Y.config.win,

    DEFAULT_OPTIONS = {merge: true},
    EVT_CHANGE      = 'change',
    SRC_ADD         = 'add',
    SRC_REPLACE     = 'replace';

function HistoryBase() {
    this._init.apply(this, arguments);
}

Y.augment(HistoryBase, Y.EventTarget, null, null, {
    emitFacade : true,
    prefix     : 'history',
    preventable: false,
    queueable  : true
});

if (!GlobalEnv._state) {
    GlobalEnv._state = {};
}

// -- Private Methods ----------------------------------------------------------

/**
 * Returns <code>true</code> if <i>value</i> is a simple object and not a
 * function or an array.
 *
 * @method _isSimpleObject
 * @param {mixed} value
 * @return {Boolean}
 * @private
 */
function _isSimpleObject(value) {
    return Lang.type(value) === 'object';
}

// -- Public Static Properties -------------------------------------------------

/**
 * Name of this component.
 *
 * @property NAME
 * @type String
 * @static
 */
HistoryBase.NAME = 'historyBase';

/**
 * Constant used to identify state changes originating from the
 * <code>add()</code> method.
 *
 * @property SRC_ADD
 * @type String
 * @static
 * @final
 */
HistoryBase.SRC_ADD = SRC_ADD;

/**
 * Constant used to identify state changes originating from the
 * <code>replace()</code> method.
 *
 * @property SRC_REPLACE
 * @type String
 * @static
 * @final
 */
HistoryBase.SRC_REPLACE = SRC_REPLACE;

/**
 * Whether or not this browser supports the HTML5 History API.
 *
 * @property html5
 * @type Boolean
 * @static
 */

// All HTML5-capable browsers except Gecko 2+ (Firefox 4+) correctly return
// true for 'onpopstate' in win. In order to support Gecko 2, we fall back to a
// UA sniff for now. (current as of Firefox 4.0b2)
HistoryBase.html5 = !!(win.history && win.history.pushState &&
        win.history.replaceState && ('onpopstate' in win || Y.UA.gecko >= 2) &&
        (!Y.UA.android || Y.UA.android >= 2.4));

/**
 * Whether or not this browser supports the <code>window.onhashchange</code>
 * event natively. Note that even if this is <code>true</code>, you may
 * still want to use HistoryHash's synthetic <code>hashchange</code> event
 * since it normalizes implementation differences and fixes spec violations
 * across various browsers.
 *
 * @property nativeHashChange
 * @type Boolean
 * @static
 */

// Most browsers that support hashchange expose it on the window. Opera 10.6+
// exposes it on the document (but you can still attach to it on the window).
//
// IE8 supports the hashchange event, but only in IE8 Standards
// Mode. However, IE8 in IE7 compatibility mode still defines the
// event but never fires it, so we can't just detect the event. We also can't
// just UA sniff for IE8, since other browsers support this event as well.
HistoryBase.nativeHashChange = ('onhashchange' in win || 'onhashchange' in doc) &&
        (!docMode || docMode > 7);

Y.mix(HistoryBase.prototype, {
    // -- Initialization -------------------------------------------------------

    /**
     * Initializes this HistoryBase instance. This method is called by the
     * constructor.
     *
     * @method _init
     * @param {Object} config configuration object
     * @protected
     */
    _init: function (config) {
        var initialState;

        /**
         * Configuration object provided by the user on instantiation, or an
         * empty object if one wasn't provided.
         *
         * @property _config
         * @type Object
         * @default {}
         * @protected
         */
        config = this._config = config || {};

        /**
         * If `true`, a `history:change` event will be fired whenever the URL
         * changes, even if there is no associated state change.
         *
         * @property force
         * @type Boolean
         * @default false
         */
         this.force = !!config.force;

        /**
         * Resolved initial state: a merge of the user-supplied initial state
         * (if any) and any initial state provided by a subclass. This may
         * differ from <code>_config.initialState</code>. If neither the config
         * nor a subclass supplies an initial state, this property will be
         * <code>null</code>.
         *
         * @property _initialState
         * @type Object|null
         * @default {}
         * @protected
         */
        initialState = this._initialState = this._initialState ||
                config.initialState || null;

        /**
         * Fired when the state changes. To be notified of all state changes
         * regardless of the History or YUI instance that generated them,
         * subscribe to this event on <code>Y.Global</code>. If you would rather
         * be notified only about changes generated by this specific History
         * instance, subscribe to this event on the instance.
         *
         * @event history:change
         * @param {EventFacade} e Event facade with the following additional
         *   properties:
         *
         * <dl>
         *   <dt>changed (Object)</dt>
         *   <dd>
         *     Object hash of state items that have been added or changed. The
         *     key is the item key, and the value is an object containing
         *     <code>newVal</code> and <code>prevVal</code> properties
         *     representing the values of the item both before and after the
         *     change. If the item was newly added, <code>prevVal</code> will be
         *     <code>undefined</code>.
         *   </dd>
         *
         *   <dt>newVal (Object)</dt>
         *   <dd>
         *     Object hash of key/value pairs of all state items after the
         *     change.
         *   </dd>
         *
         *   <dt>prevVal (Object)</dt>
         *   <dd>
         *     Object hash of key/value pairs of all state items before the
         *     change.
         *   </dd>
         *
         *   <dt>removed (Object)</dt>
         *   <dd>
         *     Object hash of key/value pairs of state items that have been
         *     removed. Values are the old values prior to removal.
         *   </dd>
         *
         *   <dt>src (String)</dt>
         *   <dd>
         *     The source of the event. This can be used to selectively ignore
         *     events generated by certain sources.
         *   </dd>
         * </dl>
         */
        this.publish(EVT_CHANGE, {
            broadcast: 2,
            defaultFn: this._defChangeFn
        });

        // If initialState was provided, merge it into the current state.
        if (initialState) {
            this.replace(initialState);
        }
    },

    // -- Public Methods -------------------------------------------------------

    /**
     * Adds a state entry with new values for the specified keys. By default,
     * the new state will be merged into the existing state, and new values will
     * override existing values. Specifying a <code>null</code> or
     * <code>undefined</code> value will cause that key to be removed from the
     * new state entry.
     *
     * @method add
     * @param {Object} state Object hash of key/value pairs.
     * @param {Object} options (optional) Zero or more of the following options:
     *   <dl>
     *     <dt>merge (Boolean)</dt>
     *     <dd>
     *       <p>
     *       If <code>true</code> (the default), the new state will be merged
     *       into the existing state. New values will override existing values,
     *       and <code>null</code> or <code>undefined</code> values will be
     *       removed from the state.
     *       </p>
     *
     *       <p>
     *       If <code>false</code>, the existing state will be discarded as a
     *       whole and the new state will take its place.
     *       </p>
     *     </dd>
     *   </dl>
     * @chainable
     */
    add: function () {
        var args = YArray(arguments, 0, true);
        args.unshift(SRC_ADD);
        return this._change.apply(this, args);
    },

    /**
     * Adds a state entry with a new value for a single key. By default, the new
     * value will be merged into the existing state values, and will override an
     * existing value with the same key if there is one. Specifying a
     * <code>null</code> or <code>undefined</code> value will cause the key to
     * be removed from the new state entry.
     *
     * @method addValue
     * @param {String} key State parameter key.
     * @param {String} value New value.
     * @param {Object} options (optional) Zero or more options. See
     *   <code>add()</code> for a list of supported options.
     * @chainable
     */
    addValue: function (key, value, options) {
        var state = {};
        state[key] = value;
        return this._change(SRC_ADD, state, options);
    },

    /**
     * Returns the current value of the state parameter specified by <i>key</i>,
     * or an object hash of key/value pairs for all current state parameters if
     * no key is specified.
     *
     * @method get
     * @param {String} key (optional) State parameter key.
     * @return {Object|String} Value of the specified state parameter, or an
     *   object hash of key/value pairs for all current state parameters.
     */
    get: function (key) {
        var state    = GlobalEnv._state,
            isObject = _isSimpleObject(state);

        if (key) {
            return isObject && Obj.owns(state, key) ? state[key] : undefined;
        } else {
            return isObject ? Y.mix({}, state, true) : state; // mix provides a fast shallow clone.
        }
    },

    /**
     * Same as <code>add()</code> except that a new browser history entry will
     * not be created. Instead, the current history entry will be replaced with
     * the new state.
     *
     * @method replace
     * @param {Object} state Object hash of key/value pairs.
     * @param {Object} options (optional) Zero or more options. See
     *   <code>add()</code> for a list of supported options.
     * @chainable
     */
    replace: function () {
        var args = YArray(arguments, 0, true);
        args.unshift(SRC_REPLACE);
        return this._change.apply(this, args);
    },

    /**
     * Same as <code>addValue()</code> except that a new browser history entry
     * will not be created. Instead, the current history entry will be replaced
     * with the new state.
     *
     * @method replaceValue
     * @param {String} key State parameter key.
     * @param {String} value New value.
     * @param {Object} options (optional) Zero or more options. See
     *   <code>add()</code> for a list of supported options.
     * @chainable
     */
    replaceValue: function (key, value, options) {
        var state = {};
        state[key] = value;
        return this._change(SRC_REPLACE, state, options);
    },

    // -- Protected Methods ----------------------------------------------------

    /**
     * Changes the state. This method provides a common implementation shared by
     * the public methods for changing state.
     *
     * @method _change
     * @param {String} src Source of the change, for inclusion in event facades
     *   to facilitate filtering.
     * @param {Object} state Object hash of key/value pairs.
     * @param {Object} options (optional) Zero or more options. See
     *   <code>add()</code> for a list of supported options.
     * @protected
     * @chainable
     */
    _change: function (src, state, options) {
        options = options ? Y.merge(DEFAULT_OPTIONS, options) : DEFAULT_OPTIONS;

        if (options.merge && _isSimpleObject(state) &&
                _isSimpleObject(GlobalEnv._state)) {
            state = Y.merge(GlobalEnv._state, state);
        }

        this._resolveChanges(src, state, options);
        return this;
    },

    /**
     * Called by _resolveChanges() when the state has changed. This method takes
     * care of actually firing the necessary events.
     *
     * @method _fireEvents
     * @param {String} src Source of the changes, for inclusion in event facades
     *   to facilitate filtering.
     * @param {Object} changes Resolved changes.
     * @param {Object} options Zero or more options. See <code>add()</code> for
     *   a list of supported options.
     * @protected
     */
    _fireEvents: function (src, changes, options) {
        // Fire the global change event.
        this.fire(EVT_CHANGE, {
            _options: options,
            changed : changes.changed,
            newVal  : changes.newState,
            prevVal : changes.prevState,
            removed : changes.removed,
            src     : src
        });

        // Fire change/remove events for individual items.
        Obj.each(changes.changed, function (value, key) {
            this._fireChangeEvent(src, key, value);
        }, this);

        Obj.each(changes.removed, function (value, key) {
            this._fireRemoveEvent(src, key, value);
        }, this);
    },

    /**
     * Fires a dynamic "[key]Change" event.
     *
     * @method _fireChangeEvent
     * @param {String} src source of the change, for inclusion in event facades
     *   to facilitate filtering
     * @param {String} key key of the item that was changed
     * @param {Object} value object hash containing <i>newVal</i> and
     *   <i>prevVal</i> properties for the changed item
     * @protected
     */
    _fireChangeEvent: function (src, key, value) {
        /**
         * <p>
         * Dynamic event fired when an individual history item is added or
         * changed. The name of this event depends on the name of the key that
         * changed. To listen to change events for a key named "foo", subscribe
         * to the <code>fooChange</code> event; for a key named "bar", subscribe
         * to <code>barChange</code>, etc.
         * </p>
         *
         * <p>
         * Key-specific events are only fired for instance-level changes; that
         * is, changes that were made via the same History instance on which the
         * event is subscribed. To be notified of changes made by other History
         * instances, subscribe to the global <code>history:change</code> event.
         * </p>
         *
         * @event [key]Change
         * @param {EventFacade} e Event facade with the following additional
         *   properties:
         *
         * <dl>
         *   <dt>newVal (mixed)</dt>
         *   <dd>
         *     The new value of the item after the change.
         *   </dd>
         *
         *   <dt>prevVal (mixed)</dt>
         *   <dd>
         *     The previous value of the item before the change, or
         *     <code>undefined</code> if the item was just added and has no
         *     previous value.
         *   </dd>
         *
         *   <dt>src (String)</dt>
         *   <dd>
         *     The source of the event. This can be used to selectively ignore
         *     events generated by certain sources.
         *   </dd>
         * </dl>
         */
        this.fire(key + 'Change', {
            newVal : value.newVal,
            prevVal: value.prevVal,
            src    : src
        });
    },

    /**
     * Fires a dynamic "[key]Remove" event.
     *
     * @method _fireRemoveEvent
     * @param {String} src source of the change, for inclusion in event facades
     *   to facilitate filtering
     * @param {String} key key of the item that was removed
     * @param {mixed} value value of the item prior to its removal
     * @protected
     */
    _fireRemoveEvent: function (src, key, value) {
        /**
         * <p>
         * Dynamic event fired when an individual history item is removed. The
         * name of this event depends on the name of the key that was removed.
         * To listen to remove events for a key named "foo", subscribe to the
         * <code>fooRemove</code> event; for a key named "bar", subscribe to
         * <code>barRemove</code>, etc.
         * </p>
         *
         * <p>
         * Key-specific events are only fired for instance-level changes; that
         * is, changes that were made via the same History instance on which the
         * event is subscribed. To be notified of changes made by other History
         * instances, subscribe to the global <code>history:change</code> event.
         * </p>
         *
         * @event [key]Remove
         * @param {EventFacade} e Event facade with the following additional
         *   properties:
         *
         * <dl>
         *   <dt>prevVal (mixed)</dt>
         *   <dd>
         *     The value of the item before it was removed.
         *   </dd>
         *
         *   <dt>src (String)</dt>
         *   <dd>
         *     The source of the event. This can be used to selectively ignore
         *     events generated by certain sources.
         *   </dd>
         * </dl>
         */
        this.fire(key + 'Remove', {
            prevVal: value,
            src    : src
        });
    },

    /**
     * Resolves the changes (if any) between <i>newState</i> and the current
     * state and fires appropriate events if things have changed.
     *
     * @method _resolveChanges
     * @param {String} src source of the changes, for inclusion in event facades
     *   to facilitate filtering
     * @param {Object} newState object hash of key/value pairs representing the
     *   new state
     * @param {Object} options Zero or more options. See <code>add()</code> for
     *   a list of supported options.
     * @protected
     */
    _resolveChanges: function (src, newState, options) {
        var changed   = {},
            isChanged,
            prevState = GlobalEnv._state,
            removed   = {};

        newState || (newState = {});
        options  || (options  = {});

        if (_isSimpleObject(newState) && _isSimpleObject(prevState)) {
            // Figure out what was added or changed.
            Obj.each(newState, function (newVal, key) {
                var prevVal = prevState[key];

                if (newVal !== prevVal) {
                    changed[key] = {
                        newVal : newVal,
                        prevVal: prevVal
                    };

                    isChanged = true;
                }
            }, this);

            // Figure out what was removed.
            Obj.each(prevState, function (prevVal, key) {
                if (!Obj.owns(newState, key) || newState[key] === null) {
                    delete newState[key];
                    removed[key] = prevVal;
                    isChanged = true;
                }
            }, this);
        } else {
            isChanged = newState !== prevState;
        }

        if (isChanged || this.force) {
            this._fireEvents(src, {
                changed  : changed,
                newState : newState,
                prevState: prevState,
                removed  : removed
            }, options);
        }
    },

    /**
     * Stores the specified state. Don't call this method directly; go through
     * _resolveChanges() to ensure that changes are resolved and all events are
     * fired properly.
     *
     * @method _storeState
     * @param {String} src source of the changes
     * @param {Object} newState new state to store
     * @param {Object} options Zero or more options. See <code>add()</code> for
     *   a list of supported options.
     * @protected
     */
    _storeState: function (src, newState) {
        // Note: the src and options params aren't used here, but they are used
        // by subclasses.
        GlobalEnv._state = newState || {};
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
     * Default <code>history:change</code> event handler.
     *
     * @method _defChangeFn
     * @param {EventFacade} e state change event facade
     * @protected
     */
    _defChangeFn: function (e) {
        this._storeState(e.src, e.newVal, e._options);
    }
}, true);

Y.HistoryBase = HistoryBase;


}, '3.10.1', {"requires": ["event-custom-complex"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/datatype-xml-parse/datatype-xml-parse.js
// ----------------------------------------------------------------------------------------

YUI.add('datatype-xml-parse', function (Y, NAME) {

/**
 * Parse XML submodule.
 *
 * @module datatype-xml
 * @submodule datatype-xml-parse
 * @for XML
 */

var LANG = Y.Lang;

Y.mix(Y.namespace("XML"), {
    /**
     * Converts data to type XMLDocument.
     *
     * @method parse
     * @param data {String} Data to convert.
     * @return {XMLDoc} XML Document.
     */
    parse: function(data) {
        var xmlDoc = null;
        if(LANG.isString(data)) {
            try {
                if(!LANG.isUndefined(ActiveXObject)) {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = false;
                        xmlDoc.loadXML(data);
                }
            }
            catch(ee) {
                try {
                    if (!LANG.isUndefined(DOMParser)) {
                        xmlDoc = new DOMParser().parseFromString(data, "text/xml");
                    }
                    if (!LANG.isUndefined(Windows.Data.Xml.Dom)) {
                        xmlDoc = new Windows.Data.Xml.Dom.XmlDocument();
                        xmlDoc.loadXml(data);
                    }
                }
                catch(e) {
                }
            }
        }

        if( (LANG.isNull(xmlDoc)) || (LANG.isNull(xmlDoc.documentElement)) || (xmlDoc.documentElement.nodeName === "parsererror") ) {
        }

        return xmlDoc;
    }
});

// Add Parsers shortcut
Y.namespace("Parsers").xml = Y.XML.parse;

Y.namespace("DataType");
Y.DataType.XML = Y.XML;


}, '3.10.1');



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/io-form/io-form.js
// ----------------------------------------------------------------------------------------

YUI.add('io-form', function (Y, NAME) {

/**
* Extends IO to enable HTML form data serialization, when specified
* in the transaction's configuration object.
* @module io
* @submodule io-form
* @for IO
*/

var eUC = encodeURIComponent;

/**
 * Enumerate through an HTML form's elements collection
 * and return a string comprised of key-value pairs.
 *
 * @method stringify
 * @static
 * @param {Node|String} form YUI form node or HTML form id
 * @param {Object} [options] Configuration options.
 * @param {Boolean} [options.useDisabled=false] Whether to include disabled fields.
 * @param {Object|String} [options.extra] Extra values to include. May be a query string or an object with key/value pairs.
 * @return {String}
 */
Y.IO.stringify = function(form, options) {
    options = options || {};

    var s = Y.IO.prototype._serialize({
        id: form,
        useDisabled: options.useDisabled
    },
    options.extra && typeof options.extra === 'object' ? Y.QueryString.stringify(options.extra) : options.extra);

    return s;
};

Y.mix(Y.IO.prototype, {
   /**
    * Enumerate through an HTML form's elements collection
    * and return a string comprised of key-value pairs.
    *
    * @method _serialize
    * @private
    * @param {Object} c
    * @param {String|Element} c.id YUI form node or HTML form id
    * @param {Boolean} c.useDisabled `true` to include disabled fields
    * @param {String} s Key-value data defined in the configuration object.
    * @return {String}
    */
    _serialize: function(c, s) {
        var data = [],
            df = c.useDisabled || false,
            item = 0,
            id = (typeof c.id === 'string') ? c.id : c.id.getAttribute('id'),
            e, f, n, v, d, i, il, j, jl, o;

        if (!id) {
            id = Y.guid('io:');
            c.id.setAttribute('id', id);
        }

        f = Y.config.doc.getElementById(id);

        if (!f || !f.elements) {
            return s || '';
        }

        // Iterate over the form elements collection to construct the
        // label-value pairs.
        for (i = 0, il = f.elements.length; i < il; ++i) {
            e = f.elements[i];
            d = e.disabled;
            n = e.name;

            if (df ? n : n && !d) {
                n = eUC(n) + '=';
                v = eUC(e.value);

                switch (e.type) {
                    // Safari, Opera, FF all default options.value from .text if
                    // value attribute not specified in markup
                    case 'select-one':
                        if (e.selectedIndex > -1) {
                            o = e.options[e.selectedIndex];
                            data[item++] = n + eUC(o.attributes.value && o.attributes.value.specified ? o.value : o.text);
                        }
                        break;
                    case 'select-multiple':
                        if (e.selectedIndex > -1) {
                            for (j = e.selectedIndex, jl = e.options.length; j < jl; ++j) {
                                o = e.options[j];
                                if (o.selected) {
                                  data[item++] = n + eUC(o.attributes.value && o.attributes.value.specified ? o.value : o.text);
                                }
                            }
                        }
                        break;
                    case 'radio':
                    case 'checkbox':
                        if (e.checked) {
                            data[item++] = n + v;
                        }
                        break;
                    case 'file':
                        // stub case as XMLHttpRequest will only send the file path as a string.
                    case undefined:
                        // stub case for fieldset element which returns undefined.
                    case 'reset':
                        // stub case for input type reset button.
                    case 'button':
                        // stub case for input type button elements.
                        break;
                    case 'submit':
                    default:
                        data[item++] = n + v;
                }
            }
        }

        if (s) {
            data[item++] = s;
        }

        return data.join('&');
    }
}, true);


}, '3.10.1', {"requires": ["io-base", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/autocomplete-plugin/autocomplete-plugin.js
// ----------------------------------------------------------------------------------------

YUI.add('autocomplete-plugin', function (Y, NAME) {

/**
Binds an AutoCompleteList instance to a Node instance.

@module autocomplete
@submodule autocomplete-plugin
**/

/**
Binds an AutoCompleteList instance to a Node instance.

@example

    Y.one('#my-input').plug(Y.Plugin.AutoComplete, {
        source: 'select * from search.suggest where query="{query}"'
    });

    // You can now access the AutoCompleteList instance at Y.one('#my-input').ac

@class Plugin.AutoComplete
@extends AutoCompleteList
**/

var Plugin = Y.Plugin;

function ACListPlugin(config) {
    config.inputNode = config.host;

    // Render by default.
    if (!config.render && config.render !== false) {
      config.render = true;
    }

    ACListPlugin.superclass.constructor.apply(this, arguments);
}

Y.extend(ACListPlugin, Y.AutoCompleteList, {}, {
    NAME      : 'autocompleteListPlugin',
    NS        : 'ac',
    CSS_PREFIX: Y.ClassNameManager.getClassName('aclist')
});

Plugin.AutoComplete     = ACListPlugin;
Plugin.AutoCompleteList = ACListPlugin;


}, '3.10.1', {"requires": ["autocomplete-list", "node-pluginhost"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-outside/event-outside.js
// ----------------------------------------------------------------------------------------

YUI.add('event-outside', function (Y, NAME) {

/**
 * Outside events are synthetic DOM events that fire when a corresponding native
 * or synthetic DOM event occurs outside a bound element.
 *
 * The following outside events are pre-defined by this module:
 * <ul>
 *   <li>blur</li>
 *   <li>change</li>
 *   <li>click</li>
 *   <li>dblclick</li>
 *   <li>focus</li>
 *   <li>keydown</li>
 *   <li>keypress</li>
 *   <li>keyup</li>
 *   <li>mousedown</li>
 *   <li>mousemove</li>
 *   <li>mouseout</li>
 *   <li>mouseover</li>
 *   <li>mouseup</li>
 *   <li>select</li>
 *   <li>submit</li>
 * </ul>
 *
 * Define new outside events with
 * <code>Y.Event.defineOutside(eventType);</code>.
 * By default, the created synthetic event name will be the name of the event
 * with "outside" appended (e.g. "click" becomes "clickoutside"). If you want
 * a different name for the created Event, pass it as a second argument like so:
 * <code>Y.Event.defineOutside(eventType, "yonderclick")</code>.
 *
 * This module was contributed by Brett Stimmerman, promoted from his
 * gallery-outside-events module at
 * http://yuilibrary.com/gallery/show/outside-events
 *
 * @module event
 * @submodule event-outside
 * @author brettstimmerman
 * @since 3.4.0
 */

// Outside events are pre-defined for each of these native DOM events
var nativeEvents = [
        'blur', 'change', 'click', 'dblclick', 'focus', 'keydown', 'keypress',
        'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup',
        'select', 'submit'
    ];

/**
 * Defines a new outside event to correspond with the given DOM event.
 *
 * By default, the created synthetic event name will be the name of the event
 * with "outside" appended (e.g. "click" becomes "clickoutside"). If you want
 * a different name for the created Event, pass it as a second argument like so:
 * <code>Y.Event.defineOutside(eventType, "yonderclick")</code>.
 *
 * @method defineOutside
 * @param {String} event DOM event
 * @param {String} name (optional) custom outside event name
 * @static
 * @for Event
 */
Y.Event.defineOutside = function (event, name) {
    name = name || (event + 'outside');

    var config = {

        on: function (node, sub, notifier) {
            sub.handle = Y.one('doc').on(event, function(e) {
                if (this.isOutside(node, e.target)) {
                    e.currentTarget = node;
                    notifier.fire(e);
                }
            }, this);
        },

        detach: function (node, sub, notifier) {
            sub.handle.detach();
        },

        delegate: function (node, sub, notifier, filter) {
            sub.handle = Y.one('doc').delegate(event, function (e) {
                if (this.isOutside(node, e.target)) {
                    notifier.fire(e);
                }
            }, filter, this);
        },

        isOutside: function (node, target) {
            return target !== node && !target.ancestor(function (p) {
                    return p === node;
                });
        }
    };
    config.detachDelegate = config.detach;

    Y.Event.define(name, config);
};

// Define outside events for some common native DOM events
Y.Array.each(nativeEvents, function (event) {
    Y.Event.defineOutside(event);
});


}, '3.10.1', {"requires": ["event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/debugger.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-debugger', function(Y) {

  Y.namespace('Squarespace');

  Y.Squarespace.Debugger = Class.create({

    defaultOpts: {
      output: true,
      ignore: [],
      name: 'GenericComponent'
    },

    initialize: function(params) {
      this.params = Y.merge( this.defaultOpts, params );

      // check the debug flag
      if(Y.Cookie.get('SQUARESPACE_DEBUG_' + this.params.name.toUpperCase())) {
        this.params.output = true;
      }

      if (this.params.uid) {
        this.params.name += ' #' + this.getUID();
      }

      if (this.params.logEvents) {
        var ctx = this;
        this.params.logEvents.fire = function(event) {
          ctx.log('Firing', event);
          Y.EventTarget.prototype.fire.apply(ctx.params.logEvents, arguments);
        };
      }

      this.logEnabled = this.params.output;

    },

    log: function() {

      if( !this.params.output ) { return; }

      if( this.params.ignore.indexOf(arguments[0]) >= 0 ) { return; }

      var args = Array.prototype.slice.call(arguments);

      args.unshift('[' + this.params.name + ']');

      if (console.log) {
        if (Y.UA.ios) {
          console.log(args.join(' '));
        } else if (console.log.apply) {
          console.log.apply(console, args);
        } else {
          console.log(args);
        }
      }

    },

    error: function() {

      var args = Array.prototype.slice.call(arguments);
      args.unshift( this.params.name );

      if (Y.UA.ios) {
        args = [args.join(' ')];
      }

      if (console.error) {
        if (Y.UA.ios) {
          console.error(args.join(' '));
        } else if (console.error.apply) {
          console.error.apply(console, args);
        } else {
          console.error(args);
        }
      }

      if (console.trace) {
        console.trace();
      }

    },

    warn: function() {

      var args = Array.prototype.slice.call(arguments);

      args.unshift('[' + this.params.name + ']');

      if (console.warn) {
        if (Y.UA.ios) {
          console.warn( args.join(' ') );
        } else if (console.warn.apply) {
          console.warn.apply(console, args);
        } else {
          console.warn(args);
        }
      }

    },

    getUID: function() {
      if (Y.Squarespace.Debugger.lastUID[this.params.name] === undefined) {
        Y.Squarespace.Debugger.lastUID[this.params.name] = 0;
      }

      return Y.Squarespace.Debugger.lastUID[this.params.name]++;
    },

    time: function(name) {
      if( !this.params.output ) { return; }
      if (console.time) {
        console.time('[' + this.params.name + '] ' + name);
      }
    },

    timeEnd: function(name) {
      if( !this.params.output ) { return; }
      if (console.timeEnd) {
        console.timeEnd('[' + this.params.name + '] ' + name);
      }
    }

  });

  Y.Squarespace.Debugger.lastUID = {};

}, '1.0', {requires:["squarespace-common"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/gallery-ng.js
// ----------------------------------------------------------------------------------------

/**
 * >>>>>>>>>> Squarespace Gallery Next Generation <<<<<<<<<<
 *
 * Gallery2: Base gallery class
 * GalleryDesigns: Design plugins for the Gallery2 class
 * GalleryStackedTransitions: Transition plugins for the stacked GalleryDesign
 * Lightbox2: Gallery lightbox
 * Lightbox2Plug: Plugin for modular use of Lightbox2
 * GalleryManager: Manage multiple galleries at once
 *
 * @module squarespace-gallery-ng
 */
YUI.add('squarespace-gallery-ng', function(Y) {

  Y.namespace("Squarespace.Widgets").Gismo = Y.Base.create("Gismo", Y.Widget, [Y.Squarespace.GismoBase]);

  /*
   * Basic test
   */
  // Y.on('domready', function() {
  //   var gismoTest = new Y.Squarespace.Widgets.Gismo();
  //   gismoTest.render();
  //   var anim = gismoTest._anim(gismoTest.get('contentBox'), {
  //     opacity: 0
  //   });
  //   gismoTest.destroy();
  // });


  /**
   * A multimedia gallery currently supporting images and videos.
   * Each gallery is registered with the GalleryManager singleton and is set
   * to its container's 'gallery' attribute. Each call to the GalleryManager's
   * initializeBlock function made by common.js instantiates a Gallery2 instance
   * for the given gallery node.
   */
  Y.Squarespace.Gallery2 = Y.Base.create("Gallery", Y.Squarespace.Widgets.Gismo, [], {

    initializer: function() {
      if (this.get('slides').isEmpty()) {
        console.warn('Did not find any slides, not instantiating gallery.');
        return;
      }

      this._debugger = new Y.Squarespace.Debugger({name: 'Gallery2', output: false, uid: true});

      this._images        = this.get('container').all('img[data-src]');
      this._imagesByMedia = {}; // cache images by type (e.g. image, video, video-thumbnail)
      this._slidesByMedia = {}; // cache slides by type

      Y.Squarespace.GalleryManager.registerGallery(this);

      this.get('slides').each(function(slide) {
        if (!slide.getAttribute('data-type')) {
          slide.setAttribute('data-type', slide.one('.sqs-video-wrapper') ? 'video' : 'image');
        }
      });

      this._loadByItemId();

      this.plug(this.get('design'), this.get('designOptions'));

      this.bindUI();

      this.get('container').plug(Y.Squarespace.NodeDestroyNotifier, {
        onDestroy: function() {
          this.destroy();
        },
        context: this
      });

      this.get('container').setData('gallery', this);
    },

    getProperty: function(name) { // ################### REMOVE
      var currentClass = this.constructor,
          value        = this.constructor[name];

      while (Y.Lang.isUndefined(value)) {
        // go up one level
        if (currentClass.superclass) {
          currentClass = currentClass.superclass.constructor;
        } else {
          break;
        }
        // stop at the topmost level
        if (Y.Lang.isUndefined(currentClass)) {
          break;
        }
        value = currentClass[name];
      }
      return value;
    },

    destructor: function() {
      if (this._autoplayHandle) { this._autoplayHandle.cancel(); }

      if (this._wrapperEl) {
        this.get('slides').each(function(slide) {
          this.get('container').append(slide);
        }, this);
        this._wrapperEl.remove();
      }

      if (this.get('lazyLoad')) {
        Y.Squarespace.GalleryManager.removeImageQueue(this.getImages());
      }

      this.get('container').clearData('gallery');
    },

    bindUI: function() {
      // resize emitter
      this._flushEvents('refreshOnResize');
      if (this.get('refreshOnResize')) {
        if (!this.get('resizeEmitter')) { this.set('resizeEmitter', new Y.Squarespace.ResizeEmitter({timeout: 100})); }

        this._event(this.get('resizeEmitter').on('resize:end', function() {
          this.refresh();
        }, this), 'refreshOnResize');
      }

      this._flushEvents('refreshOnOrientationChange');
      if (this.get('refreshOnOrientationChange')) {
        this._event(Y.one(window).on('orientationchange', function() {
          this.refresh();
        }, this), 'refreshOnOrientationChange');
      }

      // keyboard
      if (this.get('keyboard')) {
        var getTargetGallery = Y.bind(function() {
          if (this.get('inMotion')) { return false; }

          var galleries = Y.Squarespace.GalleryManager.getGalleries();
          for (var i = 0; i < galleries.length; i++) {
            var galleryContainer = galleries[i].get('container');
            if (galleryContainer.inRegion(Y.one(Y.config.win).get('region')) && galleryContainer.get('offsetHeight')) {
              return galleries[i]; // return gallery that is in viewport and visible
            }
          }

          return false;
        }, this);

        if (this.get('keys.previous')) {
          this._event(
            Y.on('key', function(e) {
              var gallery = getTargetGallery();

              if (gallery) {
                e.preventDefault();

                gallery.previousSlide();
              }
            }, window, this.get('keys.previous'), this),
            'keyboard'
          );
        }

        if (this.get('keys.next')) {
          this._event(
            Y.on('key', function(e) {
              var gallery = getTargetGallery();

              if (gallery) {
                e.preventDefault();

                gallery.nextSlide();
              }
            }, window, this.get('keys.next'), this),
            'keyboard'
          );
        }
      }

      // autoplay
      this._bindUIAutoplay();
      this.after('autoplayChange', this._bindUIAutoplay, this);
      this.after('autoplayOptionsChange', this._bindUIAutoplay, this);

      // elements
      this._bindUIElements();
      this.after('elementsChange', this._bindUIElements, this);

      this.fire('bindUI');
    },

    syncUI: function() {
      this.getSlides().filter('.'+this.getProperty('ACTIVE_CLASS'))
          .removeClass(this.getProperty('ACTIVE_CLASS'))
          .each(function(activeSlide) {
            this.setVideoState(activeSlide);
          }, this);

      var currentSlide = this._currentSlide();

      if (currentSlide) { currentSlide.addClass(this.getProperty('ACTIVE_CLASS')); }

      if (!this.get('loop')) {
        if (this.get('elements.next')) {
          if (this.get('currentIndex') >= (this.get('numberOfSlides') - 1)) {
            this.get('elements.next').addClass(this.getProperty('DISABLED_PAGINATION_CLASS'));
          } else {
            this.get('elements.next').removeClass(this.getProperty('DISABLED_PAGINATION_CLASS'));
          }
        }

        if (this.get('elements.previous')) {
          if (this.get('currentIndex') <= 0) {
            this.get('elements.previous').addClass(this.getProperty('DISABLED_PAGINATION_CLASS'));
          } else {
            this.get('elements.previous').removeClass(this.getProperty('DISABLED_PAGINATION_CLASS'));
          }
        }
      }

      if (this.get('elements.currentIndex')) { this.get('elements.currentIndex').setContent(this.get('currentIndex') + 1); }
      if (this.get('elements.totalSlides')) { this.get('elements.totalSlides').setContent(this.get('numberOfSlides')); }

      this.fire('syncUI');
    },

    refresh: function() {
      this.syncUI();

      if (this.get('lazyLoad')) {
        this.getImages().each(function(img,i) {
          if (img.loader && img.get('complete')) { // refresh ones that are loaded already
            img.fire('refresh');
          }
        }, this);
      } else {
        this.getImages().each(function(img) {
          img.fire('refresh');
        }, this);
      }

      this.getSlides('video').each(function(videoSlide) {
        videoSlide.one('.sqs-video-wrapper').videoloader.reload();
      });

      this.fire('refresh');
    },

    refreshContentMode: function(mode) {
      this.getImages('image').each(function(image) {
        image.loader.set('mode', mode);
      });

      this.getSlides('video').each(function(videoSlide) {
        videoSlide.one('.sqs-video-wrapper').videoloader.set('mode', mode);
      });
    },

    plugLoaders: function() {
      var loaderOptions = {};

      if (this.get('lazyLoad')) {
        loaderOptions.load = 'viewport'; // default load option for lazyLoad
        Y.Squarespace.GalleryManager.addImageQueue(this.getImages());
      }

      loaderOptions = Y.merge(loaderOptions, this.get('loaderOptions'));

      // plug video slides with the video loader
      this.getSlides('video').each(function(videoSlide) {
        videoSlide.one('.sqs-video-wrapper').plug(Y.Squarespace.VideoLoader, { mode: this.get('loaderOptions.mode') });
      }, this);

      // plug in image loader to ALL images
      this.getImages().plug(Y.Squarespace.Loader2, loaderOptions);
    },


    loadImages: function(images) {
      images.each(function(img) {
        this._event(img.on('load', function() {
          this.fire('image-loaded');
        }, this));
      }, this);

      if (this.get('lazyLoad')) {
        Y.Squarespace.GalleryManager.promoteImageQueue(images);
      } else {
        images.each(function(img) {
          img.loader.set('load', true);
          img.fire('refresh');
        });
      }
    },

    previousSlide: function(e) {
      if (e) { e.preventDefault(); }
      var currentSlide = this._currentSlide();

      this.setVideoState(currentSlide);

      var toIndex = this.get('currentIndex') - 1;
      if (toIndex < 0 && !this.get('loop')) {
        this.fire('reachedBeginning');
        return;
      }
      this.set('currentIndex', toIndex % this.get('numberOfSlides'), {direction: -1});
    },

    nextSlide: function(e) {
      if (e) { e.preventDefault(); }
      var currentSlide = this._currentSlide();

      this.setVideoState(currentSlide);

      var toIndex = this.get('currentIndex') + 1;
      if (toIndex >= this.get('numberOfSlides') && !this.get('loop')) {
        this.fire('reachedEnd');
        return;
      }
      this.set('currentIndex', toIndex % this.get('numberOfSlides'), {direction: 1});
    },

    renderWrapper: function() {
      if (this._wrapperEl) { return; }

      var wrapperEl = Y.Node.create('<div class="sqs-wrapper"></div>');
      this.get('slides').each(function(slide) {
        wrapperEl.append(slide);
      }, this);

      this._wrapperEl = wrapperEl;
      this.get('container').append(this._wrapperEl);
    },

    addChild: function(gallery) {
      var linkedGalleries = this.get('linkedGalleries');

      var sync = Y.bind(function(e) {
        if (e.calledFromSync) { return; }

        for (var i = 0; i < linkedGalleries.length; i++) {
          if (e.calledFromChild != linkedGalleries[i]) {
            linkedGalleries[i].set('currentIndex', this.get('currentIndex'), {
              calledFromSync: true
            });
          }
        }
      }, this);

      if (!this._linkedGalleryBinding) {
        this._linkedGalleryBinding = this.after('currentIndexChange', function(e) {
          sync(e);
        }, this);
      }

      if (this.get('keyboard')) { gallery.set('keyboard', false); }

      // fire events on the child to the host.
      gallery.after('currentIndexChange', function(e) {
        if (!e.calledFromSync) {
          this.set('currentIndex', e.newVal, {
            calledFromChild: gallery
          });
        }
      }, this);

      linkedGalleries.push(gallery);
      gallery.get('linkedGalleries').push(this);
      gallery.syncUI();
    },

    setVideoState: function(slide) {
      if (this._slideType(slide) != 'video') { return; }
      var video = slide.one('.sqs-video-wrapper').videoloader;
      if (video.get('overlay')) {
        video.showOverlay();
      } else if (video.get('apiFriendly')) {
        video.pause();
      } else if (['object', 'iframe'].indexOf(video.get('type')) != -1) {
        video.refreshVideo();
      }
    },

    getSlides: function(slideType) {
      if (slideType) {
        return this._slidesByType(slideType);
      } else {
        return this.get('slides');
      }
    },

    getImages: function(slideType) {
      if (slideType) {
        return this._imagesByType(slideType);
      } else {
        return this._images;
      }
    },

    _bindUIAutoplay: function() {
      var autoplay = this.get('autoplay');

      if (this._autoplayHandle) {
        this._autoplayHandle.cancel();
        this._flushEvents('autoplay');
      }

      if (autoplay) {
        var mouseover = false;

        this._autoplayHandle = Y.later(this.get('autoplayOptions.timeout'), this, function() {
          if (!!mouseover) { return; }

          if (this.get('autoplayOptions.interval')) {
            var next = Math.ceil(Math.random() * this.get('numberOfSlides'));
            while (next == this.get('currentIndex')) {
              this.set('currentIndex',next);
            }
          } else {
            this.nextSlide();
          }
        }, null, true);

        var elements = [this.get('container'), this.get('elements.previous'), this.get('elements.next')];

        if (this.get('autoplayOptions.pauseOnMouseover')) {
          var mouseoverElements = this.get('autoplayOptions.pauseOnMouseover');
          for (var i = 0; i < mouseoverElements.length; i++) {
            elements.push(Y.one(mouseoverElements[i]));
          }
        }

        /*jslint loopfunc: true */
        for (var i = 0; i < elements.length; i++) {
          var el = elements[i];
          if (Y.Lang.isString(el)) {
            el = this.get(el);
          }

          if (el && !Y.Squarespace.GalleryManager.isMobile()) {
            this._event(el.on(['mouseenter','mousemove'], function() {
              mouseover = true;
            }), 'autoplay');

            this._event(el.on('mouseout', function() {
              mouseover = false;
            }), 'autoplay');
          }
        }
        /*jslint loopfunc: false */
      }
    },

    _bindUIElements: function() {
      var cleanAndRebindElements = Y.bind(function(elements) {
        for (var i = 0; i < elements.length; i++) {
          element = elements[i];
          this._flushEvents('controls-' + element);

          if (this.get('elements.' + element)) {
            this.get('elements.' + element).each(function(elem) {
              this._event(elem.on('click', this[element + 'Slide'], this), 'controls-' + element);
            }, this);
          }
        }
      }, this);

      cleanAndRebindElements(['previous', 'next']);

      this._flushEvents('controls-controls');
      if (this.get('elements.controls')) {
        this.get('elements.controls').each(function(controlsEl) {
          var childrenEls = controlsEl.get('children');

          childrenEls.each(function(childEl, n) {
            this._event(
              childEl.on('click', function() {
                this.set('currentIndex', n);
              }, this),
              'controls-controls'
            );
          }, this);

          this.after('currentIndexChange', function(e) {
            childrenEls.filter('.' + this.getProperty('ACTIVE_CLASS')).removeClass(this.getProperty('ACTIVE_CLASS'));
            childrenEls.item(e.newVal).addClass(this.getProperty('ACTIVE_CLASS'));
          });

          childrenEls.item(this.get('currentIndex')).addClass(this.getProperty('ACTIVE_CLASS'));
        }, this);

        // disable controls if single slide
        if (this.getSlides().size() <= 1) {
          this.get('elements.controls').addClass('sqs-gallery-controls-disabled');
        }
      }
    },

    /*
     * Set currentIndex if itemId is provided in querystring
     */
    _loadByItemId: function() {
      this._history = new Y.HistoryHash();
      if (this.get('historyHash')) {
        this._history.on('itemIdChange', function(e) {
          this.get('slides').each(function(slide, n) {
            if (slide.getAttribute('data-slide-id') == e.newVal) {
              this.set('currentIndex', n);
              // this.fire('currentIndexChange');
            }
          }, this);
        }, this);

        this.on('currentIndexChange', function(e) {
          this._history.addValue(this.get('historyHash'), this.get('slides').item(e.newVal).getAttribute('data-slide-id'));
        }, this);
      }

      if (this.get('historyHash') || this._history.get('itemId')) {
        var currentHistoryHash = this._history.get('itemId') || this._history.get(this.get('historyHash'));
        var currentIndex;
        if (currentHistoryHash) {
          this.get('slides').each(function(slide, n) {
            if (slide.getAttribute('data-slide-id') == currentHistoryHash) {
              currentIndex = n;
            }
          });
        }

        if (!Y.Lang.isNumber(currentIndex)) {
          currentIndex = parseInt(this._history.get(this.get('historyHash')), 10);
        }

        if (!!this._history.get('itemId')) {
          this._history.replaceValue('itemId', null);
        }

        if (Y.Lang.isNumber(currentIndex)) {
          this.set('currentIndex', currentIndex);
        }
      }
    },

    _currentSlide: function() {
      return this.get('slides').item(this.get('currentIndex'));
    },

    _slidesByType: function(slideType) {
      if (!this._slidesByMedia[slideType]) {
        this._slidesByMedia[slideType] = this.get('slides').filter('[data-type="' + slideType + '"]');
      }
      return this._slidesByMedia[slideType];
    },

    _imagesByType: function(slideType) {
      if (!this._imagesByMedia[slideType]) {
        this._imagesByMedia[slideType] = new Y.NodeList();

        this._slidesByType(slideType).each(function(slide) {
          var image = slide.test('img') ? slide : slide.one('img[data-src]');
          if (image) {
            this._imagesByMedia[slideType].push(image);
          }
        }, this);
      }
      return this._imagesByMedia[slideType];
    },

    _slideType: function(slide) {
      if (slide.getAttribute('data-type') == 'image') {
        return 'image';
      } else  if (slide.getAttribute('data-type') == 'video') {
        return 'video';
      } else {
        return 'image';
      }
    },

    /**
     * Getters & Setters.
     */
    _getContainer: function(value) {
      if (Y.Lang.isString(value)) {
        value = Y.one(value);
      }
      return value;
    },

    _cleanCurrentIndex: function(currentIndex) {
      if (currentIndex < 0) { currentIndex = this.get('numberOfSlides') + currentIndex; }
      return currentIndex % this.get('numberOfSlides');
    },

    _getDesign: function(_design) {
      var design = GalleryDesigns[_design];
        if (!design) {
        throw Error("These aren't the gallery designs you're looking for. (We couldn't find a design by the name '" + _design + "')");
      }
      return design;
    },

    _getElements: function(elements) {
      for (var i in elements) {
        if (!(elements[i] instanceof Y.NodeList)) {
          elements[i] = Y.all(elements[i]);
        }
      }
      return elements;
    },

    _setElements: function(newElements, name) {
      this._bindUIElements();
    },

    _setLoaderOptions: function(loaderOptions) {
      if (loaderOptions.hasOwnProperty('fit') && loaderOptions.fit) {
        loaderOptions.mode = 'fit';
      } else if (loaderOptions.hasOwnProperty('fill') && loaderOptions.fill) {
        loaderOptions.mode = 'fill';
      }

      return loaderOptions;
    },

    _getNumberOfSlides: function() {
      return this.get('slides').size();
    },

    _getSlides: function(value) {
      var container = this._wrapperEl || this.get('container');

      if (!value) {
        value = container.get('children');
      }

      if (Y.Lang.isString(value)) {
        value = container.all(value);
      }

      return value;
    },

    _getWrapper: function(value) {
      if (Y.Lang.isString(value)) {
        value = Y.one(value);
      }
      return value;
    },

    _validateCurrentIndex: function(newVal) {
      if (this.get('inMotion')) {
        return false;
      } else {
        for (var i = 0; i < this.get('linkedGalleries').length; i++) {
          var linkedGallery = this.get('linkedGalleries')[i];
          if (linkedGallery.get('inMotion') && newVal != linkedGallery.get('currentIndex')) {
            return false;
          }
        }
        return true;
      }
    }
  }, {
    NS: 'gallery',
    ACTIVE_CLASS: 'sqs-active-slide',
    DISABLED_PAGINATION_CLASS: 'sqs-disabled',
    ATTRS: {
      autoplay: {
        value: false
      },
      autoplayOptions: {
        value: {
          randomize: true,
          timeout: 5000,
          pauseOnMouseover: []
        }
      },
      container: {
        getter: '_getContainer'
      },
      currentIndex: {
        value: 0,
        getter: '_cleanCurrentIndex',
        setter: '_cleanCurrentIndex',
        validator: '_validateCurrentIndex'
      },
      design: {
        value: 'base',
        getter: '_getDesign'
      },
      designOptions: {
        value: {}
      },
      elements: {
        value: {
          next: null,
          previous: null,
          currentIndex: null,
          totalSlides: null,
          controls: null
        },
        getter: '_getElements',
        setter: '_setElements',
        lazyAdd: false
      },
      historyHash: {
        value: false
      },
      inMotion: {
        value: false
      },
      keyboard: {
        value: true
      },
      keys: {
        value: {
          previous: 'down:37',
          next: 'down:39'
        }
      },
      lazyLoad: {
        value: false
      },
      linkedGalleries: {
        value: []
      },
      loaderOptions: {
        value: {},
        setter: '_setLoaderOptions'
      },
      loop: {
        value: false
      },
      numberOfSlides: {
        getter: '_getNumberOfSlides'
      },
      refreshOnResize: {
        value: false
      },
      refreshOnOrientationChange: {
        value: false
      },
      resizeEmitter: {
        value: null
      },
      slides: {
        getter: '_getSlides'
      }
    }
  });


  /**
   * Mixin for lazyloading behavior
   */
  var GalleryLoadingBehavior = {};
  GalleryLoadingBehavior.ByViewport = Y.Base.create('GalleryLoadingBehavior', Y.Base, [], {

    scrollHandler: null,
    scrollEl: null,
    scrollRegion: null,
    imageRegions: null,

    initializer: function() {
      if (this.get('host').get('lazyLoad')) {
        this.scrollHandler = this._getScrollEl().on('scroll', this._viewportLoad, this);
      }
    },

    destructor: function() {
      if (this.scrollHandler) {
        this.scrollHandler.detach();
      }
    },

    _getScrollEl: function() {
      if (!this.scrollEl) {
        // cache the scrollEl to reduce hits to DOM
        this.scrollEl = this.get('host').get('container').ancestor(function(el) {
          return (el.getStyle('overflowY').match(/scroll|auto/) &&
                  el.get('scrollHeight') > el.get('clientHeight'));
        });

        if (!this.scrollEl || this.scrollEl.test('html,body')) {
          this.scrollEl = Y.one(Y.config.win);
        }
      }

      return this.scrollEl;
    },

    loadItems: function() {
      var gallery = this.get('host');
      var images = gallery.getImages();

      if (gallery.get('lazyLoad')) {
        // cache dom info needed for viewport check
        this.imageRegions = [];
        this.scrollRegion = this._getScrollEl().get('region');

        images.each(function(el) {
          this.imageRegions.push(el.get('region'));
        }, this);

        this._viewportLoad();
      } else {
        gallery.loadImages(images);
      }
    },

    // Load images within viewport
    _viewportLoad: function() {
      var viewTop = this._getScrollEl().get('scrollTop');
      var viewBottom = viewTop + this.scrollRegion.height;
      var imagesInViewport = new Y.NodeList();

      this.get('host').getImages().each(function(img, i) {
        var imgRegion = this.imageRegions[i];

        // Only doing vertical check to keep things simple
        if ((imgRegion.top >= viewTop && imgRegion.top <= viewBottom) ||
            (imgRegion.bottom >= viewTop && imgRegion.bottom <= viewBottom)) {
          imagesInViewport.push(img);
        }
      }, this);

      this.get('host').loadImages(imagesInViewport);
    }
  });

  GalleryLoadingBehavior.ByCurrentIndex = Y.Base.create('GalleryLoadingBehavior', Y.Base, [], {
    loadItems: function() {
      var gallery = this.get('host'),
          images = gallery.getImages();

      if (gallery.get('lazyLoad')) {
        var startIndex = gallery.get('currentIndex')-this.get('preloadCount'),
            endIndex = gallery.get('currentIndex')+this.get('preloadCount'),
            imagesNearby = new Y.NodeList();

        if (gallery.get('loop')) {
          endIndex = endIndex % gallery.get('slides').size();
        } else {
          startIndex = Math.max(0,startIndex);
          endIndex = Math.min(gallery.get('slides').size()-1, endIndex);
        }

        if (startIndex >= 0 && startIndex <= endIndex) {
          imagesNearby = images.slice(startIndex, endIndex+1);
        } else {
          imagesNearby = imagesNearby.concat(images.slice(startIndex));
          imagesNearby = imagesNearby.concat(images.slice(0, endIndex+1));
        }

        gallery.loadImages(imagesNearby);
      } else {
        gallery.loadImages(images);
      }
    }
  });

  /**
   * Gallery designs to be plugged into the Gallery2 instance
   * for a given gallery.
   */
  var GalleryDesigns = {};
  GalleryDesigns.base = Y.Base.create("GalleryDesignBase", Y.Plugin.Base, [Y.Squarespace.GismoBase, GalleryLoadingBehavior.ByViewport], {

    initializer: function() {
      this.get('host').after('currentIndexChange', function() {
        this.get('host').syncUI();
      }, this);

      this.get('host').plugLoaders();
      this.loadItems();
      this.get('host').syncUI();
    },

    destructor: function() {

    },

    _getProperty: function(name) {
      return this.constructor[name];
    }
  }, {
    NS: 'gallery-design',
    ATTRS: {}
  });

  GalleryDesigns.stacked = Y.Base.create("GalleryDesignStacked", Y.Plugin.Base, [Y.Squarespace.GismoBase, GalleryLoadingBehavior.ByCurrentIndex], {

    initializer: function() {
      var host = this.get('host');

      host.get('container').addClass(this._getProperty('CONTAINER_CLASS'));
      host.get('slides').addClass(this._getProperty('SLIDE_CLASS'));

      this.plug(this.get('transition'), this.get('transitionOptions'));

      host.after('currentIndexChange', this.syncUI, this);
      host.after('refresh', this.syncUI, this);
      host.after('image-loaded', this._positionMetaOverlay, this);

      host.get('slides').each(function(el, n) {
        var img = el.test('img') ? el : el.one('img');
        if (img) {
          img.onceAfter('loaded', function() {
            el.addClass('loaded');
          }, this);
        } else {
          el.addClass('loaded');
        }
      }, this);

      host.plugLoaders();

      if (this.get('autoHeight')) {
        var evaluateHeight = Y.bind(function() {
          this.containerHeight = this._calculateContainerHeight();
          this.get('host').get('container').setStyles({height: this.containerHeight});
        }, this);

        evaluateHeight();
        this._event((new Y.Squarespace.ResizeEmitter({timeout: 100})).on('resize', evaluateHeight));
      }

      host.refresh();

      this.bindUI();
      this.syncUI();
    },

    destructor: function() {
      if (this.get('autoHeight')) { this.get('host').get('container').setStyles({height: null}); }

      this.get('host').get('slides').each(function(slide) {
        slide.setStyles({
          opacity: null
        });

        slide.removeClass(this._getProperty('SLIDE_CLASS'));
      }, this);
    },

    bindUI: function() {
      if (this.get('clickBehavior')) {
        this._event(this.get('host').get('container').on('click', function(e) {
          if (e.target.ancestor('a', true)) { return; } // click on a link, let default browser behavior continue.
          var slide = e.target.ancestor('.slide');
          if (slide && !!slide.getAttribute('data-click-through-url')) {
            window.location.href = slide.getAttribute('data-click-through-url');
            e.preventDefault();
            return;
          }

          if (this.get('host')._slideType(this.get('host')._currentSlide()) != 'video') {
            switch (this.get('clickBehavior')) {
              case 'next':
                this.get('host').nextSlide();
              break;
              case 'previous':
                this.get('host').previousSlide();
              break;
              default:
                var region = slide ? slide.get('region') : this.get('host').get('container').get('region');
                var right = (region.width/2) + region.left;
                if (e.pageX > right) {
                  this.get('host').nextSlide();
                } else {
                  this.get('host').previousSlide();
                }
              break;
            }
          }
          e.preventDefault();
        }, this));
      }
    },

    syncUI: function(e) {
      this.get('host').syncUI();

      this.fire('transition', e || {
        newVal: this.get('host').get('currentIndex')
      });
      this.loadItems();
      this._positionMetaOverlay();
    },

    /*
     * Handle how slide caption appears:
     *  - position meta container based on config
     *  - turn it into a simple meta view on mobile,
     *  - resize meta container if it exceeds gallery container height
     */
    _positionMetaOverlay: function() {
      if (!Y.Lang.isNumber(this.get('host').get('currentIndex'))) return;

      var slide = this.get('host').get('slides').item(this.get('host').get('currentIndex'));
      var meta = slide.one('.meta');
      var offsetEl = slide.one('img');
      var container = this.get('host').get('container');
      if (!offsetEl) {
        offsetEl = slide;
      }

      var ancestorVideoWrapper = offsetEl.ancestor('.sqs-video-wrapper',true);
      if (ancestorVideoWrapper) {
        offsetEl = ancestorVideoWrapper;
        ancestorVideoWrapper.videoloader.on('showingVideoChange', function(e) {
          slide[e.newVal ? 'addClass' : 'removeClass']('video-playing');
        });
      }

      if (meta) {
        var galleryOptions = container.getAncestorData('galleryOptions');
        if (galleryOptions) {
          switch (galleryOptions['meta-position'] || 'bottom') {
            case 'top':
            case 'bottom':
              meta.setStyles({
                left: offsetEl.get('offsetLeft'),
                width: offsetEl.get('offsetWidth')
              });
              break;
            case 'top-left':
            case 'bottom-left':
              meta.setStyles({
                left: offsetEl.get('offsetLeft'),
                maxWidth: offsetEl.get('offsetWidth') / 2
              });
              break;
            case 'top-right':
            case 'bottom-right':
              meta.setStyles({
                right: slide.get('offsetWidth') - (offsetEl.get('offsetLeft') + offsetEl.get('offsetWidth')),
                maxWidth: offsetEl.get('offsetWidth') / 2
              });
              break;
            case 'center':
              meta.setStyles({
                maxWidth: offsetEl.get('offsetWidth') / 2
              }); // set it, and forget it!
              meta.setStyles({
                marginLeft: meta.get('offsetWidth') / -2,
                marginTop: meta.get('offsetHeight') / -2
              });
              break;
          }
        }
        if (meta.get('offsetHeight')/container.get('offsetHeight') > 0.9) {
          meta
            .setStyles({'height': container.get('offsetHeight')*0.4})
            .addClass('overflow');
        }
      }
    },

    /*
     *  Return the minimum height of all images
     */
    _calculateContainerHeight: function() {
      var dims = [];
      var minHeight = this.get('host').get('container').get('offsetHeight');

      this.get('host').get('slides').each(function(slide) {
        switch (this.get('host')._slideType(slide)) {
          case 'image':
            var image = slide.test('img') ? slide : slide.one('img');
            if (image) {
              var imgNodeDims = Y.Squarespace.Rendering.getDimensionsFromNode(image);
              var imageDim = Y.Squarespace.Rendering.getHeightForWidth(imgNodeDims.width, imgNodeDims.height, slide.get('offsetWidth'));
              if (!isNaN(imageDim)) {
                dims.push(imageDim);
              }
//            } else {
//              this.get('host')._debugger.log('_calculateContainerHeight', 'Couldnt evaluate height for slide.');
            }
          break;

          case 'video':
            var videoDim = Y.Squarespace.Rendering.getHeightForWidth(slide.one('.sqs-video-wrapper').videoloader.getWidth(), slide.one('.sqs-video-wrapper').videoloader.getHeight(), slide.get('offsetWidth'));
            if (!isNaN(videoDim)) { dims.push(videoDim); }
          break;
        }
      }, this);

      if (dims.length > 0) {
        minHeight = Math.min.apply(Math.min, dims);
      }
      return minHeight;
    },

    /**
     * Getters & Setters.
     */
     _getProperty: function(name) {
       return this.constructor[name];
     },

    _getTransition: function(transition) {
      transition = GalleryStackedTransitions[transition];
      if (!transition) {
        throw Error("These aren't the gallery stacked transitions you're looking for. (We couldn't find a transition by the name " + transition + " )");
      }

      return transition;
    }
  }, {
    NS: 'gallery-design',
    CONTAINER_CLASS: 'sqs-gallery-design-stacked',
    SLIDE_CLASS: 'sqs-gallery-design-stacked-slide',
    ATTRS: {
      autoHeight: {
        value: true
      },
      clickBehavior: {
        value: 'next'
      },
      easing: {
        value: Y.Easing.easeOutStrong
      },
      speed: {
        value: 0.3
      },
      preloadCount: {
        value: 1
      },
      transition: {
        value: 'fade',
        getter: '_getTransition'
      },
      transitionOptions: {
        value: {}
      }
    }
  });

  GalleryDesigns.strip = Y.Base.create("GalleryDesignBase", Y.Plugin.Base, [Y.Squarespace.GismoBase, GalleryLoadingBehavior.ByCurrentIndex], {

    initializer: function() {
      var host = this.get('host');

      host.get('container').addClass(this._getProperty('CONTAINER_CLASS'));
      host.get('slides').addClass(this._getProperty('SLIDE_CLASS'));

      this._event(host.on('image-loaded', this._syncUIRefreshWrapperWidth, this));

      host.plugLoaders();

      var stripHeight = host.get('container').get('offsetHeight');
      host._slidesByType('video').each(function(videoSlide) {
        var videoRatio = videoSlide.one('.sqs-video-wrapper').videoloader.getWidth() / videoSlide.one('.sqs-video-wrapper').videoloader.getHeight();
        videoSlide.one('.sqs-video-wrapper').setStyle('paddingRight', videoRatio*stripHeight);
        if (videoSlide.one('img')) {
          videoSlide.one('img').refresh();
        }
      });

      host.renderWrapper();

      host.after('currentIndexChange', this.syncUI, this);

      this.loadItems();
      this.syncUI();
      this.bindUI();
    },

    destructor: function() {
      this.get('host').get('container').removeClass(this._getProperty('CONTAINER_CLASS'));
      this.get('host').get('slides').removeClass(this._getProperty('SLIDE_CLASS'));
    },

    bindUI: function() {
      var initialSlide = this.get('host')._currentSlide();
      this.get('host').get('slides').each(function(slide, n) {
        var slideType = this.get('host')._slideType(slide);
        if (slideType == 'video' && slide != initialSlide) {
          slide.one('.sqs-video-wrapper').videoloader.set('inactive', true);
        }

        this._event(slide.on('click', function(e) {
          if (slideType == 'video' && !slide.one('.sqs-video-wrapper').videoloader.get('inactive')) { return; }

          var clickThroughUrl = e.target.getAttribute('data-click-through-url');
          if (!!clickThroughUrl) {
            window.location.href = clickThroughUrl;
            e.preventDefault();
            return;
          }

          var currentSlide = this.get('host')._currentSlide();
          var currentSlideType = this.get('host')._slideType(currentSlide);

          if (n == this.get('host').get('currentIndex')) {
            switch (this.get('activeSlideClickBehavior')) {
              case 'next':
                this.get('host').nextSlide();
              break;
              case 'previous':
                this.get('host').previousSlide();
              break;
              default:
                this.get('host').set('currentIndex', n);
              break;
            }
          } else {
            this.get('host').set('currentIndex', n);
          }

          var newSlide = this.get('host')._currentSlide();
          var newSlideType = this.get('host')._slideType(newSlide);

          if (currentSlide != newSlide) {
            if (newSlideType == 'video') {
              newSlide.one('.sqs-video-wrapper').videoloader.set('inactive', false);
              if (newSlide == slide) {
                newSlide.one('.sqs-video-wrapper').videoloader.showVideo();
              }
            }

            if (currentSlideType == 'video') {
              currentSlide.one('.sqs-video-wrapper').videoloader.set('inactive', true);
            }
          }
        }, this));
      }, this);

      this.get('host').on('currentIndexChange', function(e) {
        var slides = this.get('host').get('slides');
        if (e.newVal < 0) { e.newVal = slides.size() - 1; }
        var previousSlide = slides.item(e.prevVal);
        var nextSlide = slides.item(e.newVal);

        if (this.get('host')._slideType(previousSlide) == 'video') {
          previousSlide.one('.sqs-video-wrapper').videoloader.set('inactive', true);
        }

        if (this.get('host')._slideType(nextSlide) == 'video') {
          nextSlide.one('.sqs-video-wrapper').videoloader.set('inactive', false);
        }
      }, this);

      var currentIndexEl = this.get('host').get('slides').item(this.get('currentIndex') || 0);
      if (currentIndexEl) {
        currentIndexEl.addClass(this._getProperty('SLIDE_CLASS'));
      }
    },

    syncUI: function(e) {

      if (!e || !e.calledFromParent) {
        this.get('host').syncUI();
      }

      this._syncUIRefreshWrapperWidth();

      this.loadItems();
    },

    _syncUIRefreshWrapperWidth: function() {
      if (this.get('host').get('container').hasClass('sqs.gallery-thumbnails')) {
        var thumbnailsEl = this.get('host').get('container');
        var thumbnailHeight = thumbnailsEl.get('offsetHeight');
        thumbnailsEl.all('.sqs-video-thumbnail').each(function(videoThumbnailEl) {
          if (videoThumbnailEl.hasClass('no-image')) {
            videoThumbnailEl.one('.sqs-video-thumbnail-inner').setStyles({
              'width': Math.floor(thumbnailHeight*(16/9)) + 'px'
            });
          }

          var imgEl = videoThumbnailEl.one('img');
          if (imgEl) {
            videoThumbnailEl.removeClass('loading');
            videoThumbnailEl.setAttribute('style', "width: " + imgEl.get('offsetWidth') + 'px !important');
          }
        });
      }

      // recalculate the wrapper width
      var wrapperEl = this.get('host')._wrapperEl;

      wrapperEl.setStyles({
        width: null
      });

      var wrapperWidth = 0;
      var slideOffset = 0;
      this.get('host').get('slides').each(function(slide, n) {
        if (this.get('host').get('currentIndex') > n) {
          slideOffset += slide.get('offsetWidth');
        }

        wrapperWidth += slide.get('offsetWidth');
      }, this);

      // evaluate the container width
      var containerWidth = this.get('host').get('container').get('offsetWidth');

      var currentSlide = this.get('host')._currentSlide();

      // figure out how much we need to offset that last image.
      switch (this.get('alignment')) {
        case 'start':
          // DO NOTHING.
        break;
        case 'middle':
          slideOffset -= (containerWidth - currentSlide.get('offsetWidth')) / 2;
          if (slideOffset < 0) { slideOffset = 0; }
        break;
        case 'end':
          slideOffset -= (containerWidth - currentSlide.get('offsetWidth'));
          if (slideOffset < 0) { slideOffset = 0; }
        break;
      }

      // if the wrapper is bigger than the container,
      // center the strip.
      if (wrapperWidth < containerWidth) {
        slideOffset = (containerWidth - wrapperWidth) / -2;
      } else if (slideOffset > (wrapperWidth - containerWidth)) {
        slideOffset = (wrapperWidth - containerWidth);
      }

      // set the wrapper element to twice what it needs to be, it doesn't really matter.
      // plus, twice is always better.
      wrapperEl.setStyles({
        width: wrapperWidth * 2
      });

      // animate the wrapper to the right position
      var ctx = this;
      this._anim(wrapperEl, {
        left: -1 * slideOffset
      }, {
        duration: this.get('speed'),
        easing: this.get('easing'),
        start: function() {
          ctx.get('host').set('inMotion', true);
        },
        end: function() {
          ctx.get('host').set('inMotion', false);
        }
      }).run();
    },

    /**
     * Getters & Setters.
     */
    _getProperty: function(name) {
      return this.constructor[name];
    }
  }, {
    NS: 'gallery-design',
    CONTAINER_CLASS: 'sqs-gallery-design-strip',
    SLIDE_CLASS: 'sqs-gallery-design-strip-slide',
    ATTRS: {
      speed: {
        value: 0.3
      },
      easing: {
        value: Y.Easing.easeOutStrong
      },
      activeSlideClickBehavior: {
        value: 'next'
      },
      preloadCount: {
        value: 1
      },
      alignment: {
        value: 'middle',
        validator: function(v) {
          return ['start','middle','end'].indexOf(v) != -1;
        }
      }
    }
  });

  GalleryDesigns.grid = Y.Base.create("GalleryDesignGrid", Y.Plugin.Base, [Y.Squarespace.GismoBase, GalleryLoadingBehavior.ByViewport], {

    initializer: function() {
      var host = this.get('host');

      // add element class names.
      host.get('container').addClass(this._getProperty('CONTAINER_CLASS'));

      // fade out all the nodes, as well as add a class
      host.get('slides')
        .addClass(this._getProperty('SLIDE_CLASS'));

      host.getImages('image').each(function(img) {
        img.setStyles({
          opacity: 0
        });
        this._event(img.once('load', function() {
          this._timer(Y.later(Math.random() * 500, this, function() {
            var anim = this._anim(img, {
              opacity: 1
            }, {
              duration: 1
            });
            if (!this.get('destroyed') && anim.get('node').inDoc()) {
              var viewport = Y.DOM.viewportRegion();
              if (anim.get('node').inRegion(viewport)){
                anim.run();
              } else {
                img.setStyles({opacity: null});
              }
            }
          }));
        }, this));
      }, this);

      host.getSlides('video').each(function(videoSlide) {
        videoSlide.all('.sqs-video-wrapper').each(function(video) {
          video.setStyles({
            opacity: 0
          });
          var anim = this._anim(video, {opacity: 1}, {duration: 1});
          this._timer(Y.later(Math.random() *500, this, function() {
            anim.run();
          }));
        }, this);
      }, this);

      host.plugLoaders();
      this.loadItems();

      host.getSlides('video').each(function(videoSlide) {
        var videoWrapper = videoSlide.one('.sqs-video-wrapper');
        var videoLoader = videoWrapper.videoloader;

        if (this.get('lightbox')) {
          videoLoader.set('inactive', true);
        }

        if (videoSlide.one('.content-fit')) {
          videoLoader.set('mode', 'fit');
        } else {
          videoLoader.set('mode', 'fill');
        }
      }, this);

      this.bindUI();
    },

    destructor: function() {
      this.get('host').get('container').removeClass(this._getProperty('CONTAINER_CLASS'));
      this.get('host').get('slides')
        .removeClass(this._getProperty('SLIDE_CLASS'));
    },

    bindUI: function() {

      if (!this.get('lightbox')) { return; }

      this.get('host').getSlides('video').each(function(videoSlide) {
        var videoOverlay = videoSlide.one('.sqs-video-wrapper').videoloader.get('overlay');
        if (videoOverlay) {
          videoOverlay.detach('click');
        }
      });

      var lightboxSet = [];
      this.get('host').get('slides').each(function(slide, n) {
        if (this.get('host')._slideType(slide) == 'video') {
          lightboxSet.push({ content: slide.one('.sqs-video-wrapper') });
        } else {
          if (!slide.hasAttribute('data-title') && !slide.hasAttribute('data-description')) {
            var innerNodeWithTitleOrDescription = slide.one('[data-title],[data-description]');
            if (innerNodeWithTitleOrDescription) {
              slide = innerNodeWithTitleOrDescription;
            }
          }

          var title = slide.getAttribute('data-title');
          var description = slide.getAttribute('data-description');

          lightboxSet.push({
            content: slide.one('img'),
            meta: (title ? '<h1>' + title + '</h1>' : '') + (description ? description : '')
          });
        }
      }, this);

      this.get('host').get('slides').each(function(slideEl) {
        slideEl.on('click', function(e) {
          e.halt();

          if (this.lightbox) {
            this.lightbox.destroy();
            delete this.lightbox;
          }

          this.lightbox = new Y.Squarespace.Lightbox2({
            controls: {
              previous: true,
              next: true
            },
            set: lightboxSet,
            currentSetIndex: this.get('host').get('slides').indexOf(e.target.ancestor('.' + this._getProperty('SLIDE_CLASS', true)))
          });

          this.lightbox.render();
        }, this);
      }, this);
    },

    /**
     * Getters & Setters.
     */
    _getProperty: function(name) {
      return this.constructor[name];
    }
  }, {
    NS: 'gallery-design',
    CONTAINER_CLASS: 'sqs-gallery-design-grid',
    SLIDE_CLASS: 'sqs-gallery-design-grid-slide',
    ATTRS: {
      lightbox: {
        value: true
      },
      perRow: {
        value: 4
      }
    }
  });

  GalleryDesigns.autocolumns = Y.Base.create("GalleryDesignAutocolumns", Y.Plugin.Base, [Y.Squarespace.GismoBase, GalleryLoadingBehavior.ByViewport], {

    dimensions: null,

    initializer: function() {
      this.host = this.get('host');

      // add element class names.
      this.host.get('container').addClass(this._getProperty('CONTAINER_CLASS'));

      // fade out all the nodes, as well as add a class
      this.host.get('slides')
        .addClass(this._getProperty('SLIDE_CLASS'));

      this.host.after('refresh', this.syncUI, this);
      this._event((new Y.Squarespace.ResizeEmitter({timeout: 100})).on('resize', this.syncUI, this));

      this.host.after(['columnWidthChange', 'columnWidthBehaviorChange', 'aspectRatioChange', 'gutterChange', 'mixedContentChange'], function(e) {
        this.set(e.attrName, e.newVal);
        if (e.attrName == 'aspectRatio') {
          this._evaluateBricks();
        }
        this.syncUI();
      }, this);

      this.host.plugLoaders();

      this._evaluateBricks();

      this.syncUI();
    },

    destructor: function() {
      this.get('host').get('container').removeClass(this._getProperty('CONTAINER_CLASS'));
      this.get('host').get('slides')
        .removeClass(this._getProperty('SLIDE_CLASS'));

      this._flushEvents();
    },

    syncUI: function() {
      var containerWidth = this.host.get('container').get('offsetWidth'),
          aspectRatio = this.get('aspectRatio'),
          gutter = this.get('gutter'),
          mixedContent = this.get('mixedContent');

      // evaluate the number of columns
      var numberOfColumns =
        Math[this.get('columnWidthBehavior') == 'min' ? 'floor' : 'ceil'](
          Math.max(containerWidth / this.get('columnWidth'), 1) // atleast 1
        );

      var gutterWidth = this.get('gutter') * (numberOfColumns - 1);
      var rawColumnWidth = (containerWidth - gutterWidth) / numberOfColumns,
          columnWidth = Math.floor(rawColumnWidth);

      // keep track of the columns
      var columnsLastBottom = [];
      for (var i = 0; i < numberOfColumns; i++) {
        columnsLastBottom[i] = 0;
      }

      // now position them.
      this.host.get('slides').each(function(brick, i) {
        var whichColumn = i % numberOfColumns;

        // choose shortest column when bricks are uneven height
        if (!aspectRatio) {
          whichColumn = columnsLastBottom.indexOf(Math.min.apply(Math, columnsLastBottom));
        }

        var leftPosition = columnWidth * whichColumn;
        if (whichColumn !== 0) {
          leftPosition += gutter * whichColumn;
        }

        var brickHeight, brickWidth = columnWidth;

        if (aspectRatio) {
          brickHeight = brickWidth / aspectRatio;
        } else {
          brickHeight = this._getBrickHeight(brick, i, brickWidth);
        }

        // Handle space after rightmost bricks
        if (whichColumn === numberOfColumns - 1 && columnWidth !== rawColumnWidth) {
          brickWidth = containerWidth - leftPosition;
          if (!mixedContent) {
            brick.addClass('slide-stretched'); // make image vertical aligned
          }
        }

        var styles = {
          top: columnsLastBottom[whichColumn] + 'px',
          left: leftPosition + 'px',
          width: brickWidth + 'px',
          height: brickHeight + 'px'
        };

        brick.setStyles(styles);

        brickHeight += gutter;
        columnsLastBottom[whichColumn] += brickHeight;
      }, this);

      this.host.get('container').setStyle('height', Math.max.apply(Math, columnsLastBottom) - gutter + 'px');

      // space things out for better performance
      Y.later(1, this, this.loadItems);
    },

    _getBrickHeight: function(brick, i, width) {

      // get from calculated dimensions
      if (this._hasValidDimensions(this.dimensions[i])) {
        return Math.floor(Y.Squarespace.Rendering.getHeightForWidth(this.dimensions[i].width, this.dimensions[i].height, width));
      } else { // have to do this the hard way... DOM access
        brick.setStyles({
          'width': width + 'px',
          'height': null
        });

        brick.all('img').each(function(img) {
          ImageLoader.load(img, { load: 'viewport' });
        });

        return brick.get('offsetHeight');
      }

    },

    // Return true if dimensions can be used to estimate height
    _hasValidDimensions: function(obj) {

      return obj && obj.width && obj.height ? true : false;

    },

    // optimization for guessing brick dimensions without hitting DOM
    _evaluateBricks: function() {

      this.dimensions = [];

      this.host.getSlides().each(function(slide) {
        var img = slide.one('img[data-image-dimensions]');
        img && img.loader.set('mode', this.get('aspectRatio') ? 'fill' : 'none');

        if (img && !this.get('mixedContent')) {
          this.dimensions.push(Y.Squarespace.Rendering.getDimensionsFromNode(img));
        } else {
          this.dimensions.push(null);
        }
      }, this);

    },

    /**
     * Getters & Setters.
     */
    _getProperty: function(name) {
      return this.constructor[name];
    }

  }, {
    NS: 'gallery-design',
    CONTAINER_CLASS: 'sqs-gallery-design-autocolumns',
    SLIDE_CLASS: 'sqs-gallery-design-autocolumns-slide',
    ATTRS: {
      columnWidthBehavior: {
        value: 'min'
      },
      columnWidth: {
        value: 250
      },
      gutter: {
        value: 0
      },
      aspectRatio: {
        value: 0
      },
      mixedContent: { /* Disables optimizations */
        value: false
      },
      slideCompare: { /* Internal */
        value: true
      }
    }
  });

  /**
   * Transitions to be used with the stacked GalleryDesign
   */
  var GalleryStackedTransitions = {};
  GalleryStackedTransitions.base = Y.Base.create("GalleryDesignStackedTransition", Y.Plugin.Base, [Y.Squarespace.GismoBase], {

    baseZIndex: 888,

    initializer: function() {
      this.get('host').get('host').get('slides')
        .setStyles({
          opacity: 0,
          zIndex: this.baseZIndex
        });

      // IE
      if (Y.UA.ie) {
        this.get('host').get('host').get('slides').setStyles({
          visibility: "hidden"
        });
      }

      this.get('host').on('transition', this.transition, this);
    },

    _getProperty: function(name) {
      return this.constructor[name];
    }
  }, {
    NS: 'gallery-stacked-transition'
  });

  GalleryStackedTransitions.fade = Y.Base.create("GalleryDesignStackedTransition", GalleryStackedTransitions.base, [], {

    transition: function(e) {
      this.get('host').get('host').set('inMotion', true);

      var currentIndex = e.newVal || this.get('host').get('host').get('currentIndex'),
          prevIndex = e.prevVal;

      if (Y.Lang.isNumber(currentIndex)) {
        var currentSlide = this.get('host').get('host').getSlides().item(currentIndex);

        if (currentSlide) {
          currentSlide.setStyles({ visibility: null, zIndex: (this.baseZIndex+1) });

          this._anim(currentSlide, {
            opacity: 1
          }, {
            duration: this.get('host').get('speed'),
            easing: this.get('host').get('easing'),
            end: Y.bind(function() {
              this.get('host').get('host').set('inMotion', false);
            }, this)
          }).run();
        }
      }

      if (Y.Lang.isNumber(prevIndex)) {
        var prevSlide = this.get('host').get('host').getSlides().item(prevIndex);
        if (prevSlide) {
          this._anim(prevSlide, {
            opacity: 0
          }, {
            duration: this.get('host').get('speed'),
            end: Y.bind(function() {
              prevSlide.setStyles({ visibility: 'hidden', zIndex: null });
              this.get('host').get('host').set('inMotion', false);
            }, this)
          }).run();
        }
      }
    }
  }, {
    NS: 'gallery-stacked-transition'
  });

  GalleryStackedTransitions.swipe = Y.Base.create("GalleryDesignStackedTransition", GalleryStackedTransitions.base, [], {
    initializer: function() {

      this.galleryHost = this.get('host').get('host');
      this.container = this.galleryHost.get('container');
      this.slides = this.galleryHost.get('slides');

      this.container.addClass(this._getProperty('CONTAINER_CLASS'));

      this.container.get('parentNode').addClass(this._getProperty('WRAPPER_CLASS'));

      /* reset styles set by base */
      this.slides.setStyles({
        opacity: null,
        visibility: null
      });

      this.bindUI();
      this.syncUI();

      this._event((new Y.Squarespace.ResizeEmitter({timeout: 100})).on('resize', function() {
        this.syncUI();
      }, this));

    },

    bindUI: function() {
      var touchTime,
          move,
          MIN_SCROLL = this.container.get('parentNode').width() / 2.25,
          MIN_TIME = 250;

      this.container.on('touchstart', function(e) {
        move = false;
        touchTime = (new Date()).getTime();
      });

      this.container.on('touchmove', function(e) {
        move = true;
      });

      this.container.on('touchend', function(e) {
        var scrollLeft = this.container.get('parentNode').get('scrollLeft'),
            currentIndex = this.galleryHost.get('currentIndex'),
            currentSlidePosition = this._getSlidePosition(currentIndex),
            absScroll = Math.abs(currentSlidePosition - scrollLeft),
            longTouch = ((new Date()).getTime() - touchTime) > 250 ? true : false;

        if ( longTouch === true ) { // swipe
          if ( absScroll > MIN_SCROLL ) { // above threshold
            scrollLeft > currentSlidePosition ? currentIndex++ : currentIndex--;
          }
        } else if ( longTouch === false && move === false ) {  // tap
          // dont transition when tapping non image elements
          if (!e.target.get('tagName').match(/img/i)) {
            return;
          }
          currentIndex++;
        } else if ( move === true && absScroll > 0 ) { // flick
          scrollLeft > currentSlidePosition ? currentIndex++ : currentIndex--;
        }

        this._adjustPosition(currentIndex);
      }, this);

    },

    // position slides
    syncUI: function() {
      this.containerWidth = this.container.get('parentNode').width();
      this.container.setStyle('width', this.slides.size() * this.containerWidth + 'px');
      this.slides.setStyle('width', this.containerWidth + 'px');
      this._adjustPosition();
    },

    transition: function(e) {
      if (this.galleryHost.get('inMotion') || this.slides.size() == 0) return;

      this._adjustPosition();
    },

    _getSlidePosition: function(index) {
      return this.containerWidth * index;
    },

    _adjustPosition: function(index) {

      index = Y.Lang.isUndefined(index) ? this.galleryHost.get('currentIndex') : index;

      var scrollLeft = this.container.get('parentNode').get('scrollLeft'),
          targetSlidePosition = this._getSlidePosition(index);

      if (scrollLeft == targetSlidePosition) {
        return;
      }

      this.galleryHost.set('inMotion', true);

      new Y.Anim({
        node: this.container.get('parentNode'),
        to: { scrollLeft: targetSlidePosition },
        duration: 1.0, /* speed slide speed slide duration */
        easing: Y.Easing.easeOut
      }).run().on('end', function() {
        this.galleryHost.set('inMotion', false);
        this.galleryHost.set('currentIndex', index);
      }, this);
    },

    destructor: function() {
      this.container.removeClass(this._getProperty('CONTAINER_CLASS'));
      this._flushEvents();
    }

  }, {
    NS: 'gallery-stacked-transition',
    CONTAINER_CLASS: 'sqs-gallery-design-stacked-swipe',
    WRAPPER_CLASS: 'sqs-gallery-design-stacked-swipe-wrapper',
    ATTRS: {
    }
  });

  GalleryStackedTransitions.scroll = Y.Base.create("GalleryDesignStackedTransition", GalleryStackedTransitions.base, [], {
    initializer: function() {

      this.galleryHost = this.get('host').get('host');
      this.container = this.galleryHost.get('container');
      this.slides = this.galleryHost.get('slides');
      this.containerWidth = this.container.get('parentNode').width();

      this.container.addClass(this._getProperty('CONTAINER_CLASS'));
      this.slides.setStyles({
        opacity: 1,
        visibility: 'visible'
      });

      // position slides
      this.container.setStyle('width', this.slides.size() * this.containerWidth + 'px');
      this.slides.setStyle('width', this.containerWidth + 'px');
      this._adjustPosition(this._getCurrentSlidePosition());

      this._event((new Y.Squarespace.ResizeEmitter({timeout: 100})).on('resize', function() {
        this.containerWidth = this.container.get('parentNode').width(); // update
        this.container.setStyle('width', this.slides.size() * this.containerWidth + 'px');
        this.slides.setStyle('width', this.containerWidth + 'px');
        this._adjustPosition(this._getCurrentSlidePosition());
      }, this));

      // touch event handler provides smooth scroll effect
      if (Modernizr && Modernizr.touch) {

        this.touchListener   = null,
        this.touchStartPoint = null,

        this.touchListener = new Y.Squarespace.TouchEventListener(this.container, { move: true, swipe: true, preventDefaultTouchEvents: false });
        Y.on('squarespace:ontouch', function(event) { this._onTouch(event); }, this);
      }
    },

    destructor: function() {
      this.container.removeClass(this._getProperty('CONTAINER_CLASS'));
      if (this.touchListener) {
        this.touchListener.removeEventHandlers();
      }
      this._flushEvents();
    },

    transition: function(e) {
      if (this.galleryHost.get('inMotion') || this.slides.size() == 0) return;

      this._adjustPosition(this._getCurrentSlidePosition(), true);
      return;
    },

    _getOffsetAttribute: function() {
      return this.get('direction') == 'horizontal' ? 'offsetWidth' : 'offsetWidth';
    },

    _getContainerDim: function() {
      return this.get('host').get('host').get('container').get(this._getOffsetAttribute());
    },

    _getDirection: function(prevVal, newVal) {
      if (prevVal < newVal) { return 1; } else { return -1; }
    },

    _getCurrentSlidePosition: function() {
      return -1 * this.containerWidth * this.galleryHost.get('currentIndex');
    },

    _onTouch: function(event) {
      var container = this.get('host').get('host').get('container'),
          elem = event.targetEl;

      if (elem.getAttribute('href')) {
        // Allow click on anchors
        this._handleAnchors(elem);
      } else if (event.touchEvent.touches.length > 1 || this.touchZoom) {
        // multitouch means zooming
        this.get('zooming') && this._handlePanning(event);
      } else if (container.contains(elem) && !elem.ancestor('.image-detail-wrapper, .sqs-video-wrapper')) {
        switch(event.action) {
          case Y.Squarespace.TouchEventListener.ActionTypes.swipeUp:
            Y.fire('transition:scroll:swipeup', {container: container});
            break;
          case Y.Squarespace.TouchEventListener.ActionTypes.swipeDown:
            Y.fire('transition:scroll:swipedown', {container: container});
            break;
          case Y.Squarespace.TouchEventListener.ActionTypes.tapped:
            Y.fire('transition:scroll:tapped', event);
            break;
          case Y.Squarespace.TouchEventListener.ActionTypes.touchStart:
            this.touchStartPoint = event.point;
            break;
          case Y.Squarespace.TouchEventListener.ActionTypes.touchMove:
            this._scrollByDistance(event.point);
            break;
          case Y.Squarespace.TouchEventListener.ActionTypes.touchEnd:
            this._finishScroll(event.point);
            break;
        }
      }

      if (!elem.ancestor('.image-detail-wrapper, .sqs-video-wrapper')) {
        event.touchEvent.preventDefault();
      }
    },

    _handleAnchors: function(elem) {
      if (elem.getAttribute('target').match(/_blank/)) {
        window.open(elem.getAttribute('href'));
      } else {
        window.location.href = elem.getAttribute('href');
      }
    },

    _handlePanning: function(event) {
      if (!event.targetEl.get('tagName').match(/img/i)) {
        return;
      }

      // Multi-touch means user is trying to zoom in/out
      if (event.touchEvent.touches.length > 1) {
        this.prevScale = this.prevScale || 1; // initialize if not set yet

        this.touchScale = this.prevScale * event.touchEvent.scale;

        if (this.touchScale >= 1) {
          this.touchZoom = true;

          event.targetEl.setStyles({
            'webkitTransform': 'scale3d('+this.touchScale+','+this.touchScale+',1)'
          });

          // load highest resolution version
          var imgSrc = event.targetEl.getAttribute('src').split('?format=');
          if (imgSrc.length > 1) {
            event.targetEl.setAttribute('src', imgSrc[0]);
          }
        } else {
          this.touchZoom = false;
          this.touchStartPoint = null; // to prevent touchEnd from transitioning

          event.targetEl.setStyles({
            'webkitTransform': 'scale3d(1,1,1)',
            'left': null,
            'top': null
          });
          ImageLoader.load(event.targetEl, { load: true });
        }

      } else if (event.action == Y.Squarespace.TouchEventListener.ActionTypes.tapped) {
        Y.fire('transition:scroll:tapped', event);
      } else if (this.touchZoom && event.action == Y.Squarespace.TouchEventListener.ActionTypes.touchStart) { // this is the start of another panning effort
        this.touchStartPoint = event.point;
        event.targetEl.setAttribute('original-left', event.targetEl.getStyle('left'));
        event.targetEl.setAttribute('original-top', event.targetEl.getStyle('top'));
      } else if (event.action == Y.Squarespace.TouchEventListener.ActionTypes.touchMove) { // user is panning around
        var currentImg = event.targetEl,
            diffX = this.touchStartPoint.x - event.point.x,
            diffY = this.touchStartPoint.y - event.point.y,
            imgLeft = parseInt(currentImg.getAttribute('original-left'), 10),
            imgTop = parseInt(currentImg.getAttribute('original-top'), 10);
        currentImg.setStyles({
          'left': imgLeft - diffX + 'px',
          'top': imgTop - diffY + 'px'
        });
      } else if (event.action == Y.Squarespace.TouchEventListener.ActionTypes.touchEnd) {
        this.prevScale = this.touchScale || 1;
      }

    },

    _scrollByDistance: function(newVal) {
      if (!this.touchStartPoint || this.slides.size() < 2) { return; }

      var gallery       = this.get('host').get('host'),
          slides        = gallery.get('slides'),
          currentIndex  = gallery.get('currentIndex'),
          diff          = 0,
          fromStyle     = {},
          toStyle       = {'opacity': 1};

      if (this.get('direction') == 'vertical') {
        diff = this.touchStartPoint.y-newVal.y;
      } else {
        diff = this.touchStartPoint.x-newVal.x;
      }

      if (diff > 0 && currentIndex + 1 >= slides.size()) {
        gallery.fire('reachedEnd');
        this.touchStartPoint = null;
        return;
      } else if (diff < 0 && currentIndex - 1 < 0) {
        gallery.fire('reachedBeginning');
        this.touchStartPoint = null;
        return;
      }

      this._adjustPosition(this._getCurrentSlidePosition() - diff);
    },

    _finishScroll: function(newVal) {
      if (!this.touchStartPoint || this.slides.size() < 2) {
        return;
      }

      var gallery      = this.galleryHost,
          diff         = 0,
          currentIndex = gallery.get('currentIndex');

      if (this.get('direction') == 'vertical') {
        diff = this.touchStartPoint.y-newVal.y;
      } else {
        diff = this.touchStartPoint.x-newVal.x;
      }

      currentIndex = diff >= 0 ? currentIndex + 1 : currentIndex - 1;

      if (currentIndex < 0) {
        gallery.fire('reachedBeginning');
        this.touchStartPoint = null;
        return;
      } else if(currentIndex >= gallery.get('slides').size()) {
        gallery.fire('reachedEnd');
        this.touchStartPoint = null;
        return;
      }

      this._adjustPosition(-1 * this.containerWidth * currentIndex, true, 0.4);

      gallery.set('inMotion', false);

      gallery.set('currentIndex', currentIndex, {'direction': (diff > 0 ? 1 : -1)});
    },

    /*
      Shift slide to correct horiztonal/vertical position
    */
    _adjustPosition: function(targetPos, bAnim, speed) {
      var styles = {},
          direction = this.get('direction'),
          bAccelerate = this.get('accelerate');

      if (bAccelerate) {
        styles['transform'] = direction == 'vertical' ?
                                    'translate3d(0,'+targetPos+'px,0)' :
                                    'translate3d('+targetPos+'px,0,0)';
      } else {
        styles[direction == 'vertical' ? 'top' : 'left'] = targetPos + 'px';
      }


      if (bAnim) {
        if (bAccelerate) {
          this.container.transition({ duration: speed || this.get('host').get('speed'), transform: styles['transform'], easing: speed ? Y.Easing.easeInStrong : this.get('host').get('easing') });
        } else {
          this.galleryHost.set('inMotion', true);
          this._anim(this.container, styles, { duration: speed || this.get('host').get('speed'), easing: speed ? Y.Easing.easeInStrong : this.get('host').get('easing') }).run().on('end', function() {
            this.galleryHost.set('inMotion', false);
          }, this);
        }
      } else {
        this.container.setStyles(styles);
      }
    }
  }, {
    NS: 'gallery-stacked-transition',
    CONTAINER_CLASS: 'sqs-gallery-design-stacked-scrollHorz',
    ATTRS: {
      direction: {
        value: 'horizontal'
      },
      zooming: {
        value: true
      },
      accelerate: {
        value: false
      }
    }
  });


  /**
   * The overlay for LightBox2
   */
  Y.Squarespace.Lightbox2Overlay = Y.Base.create('LightboxOverlay', Y.Squarespace.Widgets.Gismo, [], {

    renderUI: function() {
      this._overlayEl = Y.Node.create('<div class="sqs-lightbox-overlay sqs-lightbox-overlay-' + this.get('overlayStyle') + '"></div>');

      this.get('contentBox').appendChild(this._overlayEl);
      this.get('contentBox').plug(Y.Squarespace.ScrollLock);

      this.show();
    },

    show: function() {
      this._overlayEl.setStyles({zIndex: '10000000'});

      var fadeInAnim = this._anim(this._overlayEl, {opacity: this.get('opacity')}, {duration: this.get('speed')});

      fadeInAnim.on('end', function() {
        this.fire('shown');
      }, this);

      fadeInAnim.run();
    },

    overlayHideAndDestroy: function() {
      this.once('hidden', this.destroy, this);
      this._hide();
    },

    _hide: function() {
      this.fire('hide');

      var fadeOutAnim = this._anim(this._overlayEl, {opacity: 0}, {duration: this.get('speed')});

      fadeOutAnim.on('end', function() {
        this.fire('hidden');
      }, this);

      if (this.get('destroyed')) {
        this.fire('hidden');
      } else {
        fadeOutAnim.run();
      }
    },

    _getContainer: function() {
      return this._overlayEl;
    }
  }, {
    NS: 'overlay',
    ATTRS: {
      opacity: {
        value: 0.95
      },
      overlayStyle: {
        value: 'default'
      },
      container: {
        getter: '_getContainer'
      },
      speed: {
        value: 0.3
      }
    }
  });

  /**
   * A lightbox used to render sets of images and videos with a fullscreen overlay.
   */
  Y.Squarespace.Lightbox2 = Y.Base.create('Lightbox2', Y.Squarespace.Widgets.Gismo, [], {

    initializer: function() {
      window.ACTIVE_LIGHTBOX = this;

      this._overlay = new Y.Squarespace.Lightbox2Overlay();
      this._overlay.on('hide', this.hideAndDestroy, this);

      this.bMobile = Y.Squarespace.GalleryManager.isMobile();

      this.resizeEmitter = new Y.Squarespace.ResizeEmitter({timeout: 100});
    },

    destructor: function() {
      this._flushEvents();
      this._slideshow && this._slideshow.destroy();
      this._overlay.destroy();
    },

    renderUI: function() {
      Y.Squarespace.Lightbox2.superclass.renderUI.call(this);

      Y.one('body').addClass('sqs-lightbox-open');

      var contentBox = this.get('contentBox');

      this._overlay.render(contentBox);

      if (this.get('set').length > 1) {
        if (!this.bMobile && this.get('controls.previous')) {
          this._previousEl = Y.Node.create('<a class="sqs-lightbox-previous"></a>');
          contentBox.appendChild(this._previousEl);
        }

        if (!this.bMobile && this.get('controls.next')) {
          this._nextEl = Y.Node.create('<a class="sqs-lightbox-next"></a>');
          contentBox.appendChild(this._nextEl);
        }
      } else if (!this.get('set').length) {
        this.set('set', [{ content: this.get('content'), meta: this.get('meta') }]);
      }
      this._slideshow = this.createSlideshow(contentBox);
      this._lightboxContentEl = this._slideshow.get('container');

      this._closeEl = Y.Node.create('<a class="sqs-lightbox-close"></a>').appendTo(contentBox).hide();

      if (this.bMobile) {
        this._metaTriggerEl = Y.Node.create('<a class="sqs-lightbox-meta-trigger">&bull;</a>').appendTo(contentBox);
      }

      this._lightboxContentEl.plug(Y.Squarespace.Animations.Scalable);
      this._lightboxContentEl.once('shown', function() {
          this._lightboxContentEl.setStyles({
            transform: null
          });
      }, this);

      this._overlay.once('shown', function() {
        this.ignoreBodyClicks = true;
        Y.Squarespace.EscManager.addTarget(this);

        this._lightboxContentEl.show();
        this._closeEl && this._closeEl.show();

        var videoEl = this._slideshow.get('slides').item(this._slideshow.get('currentIndex')).one('.sqs-video-wrapper');
        if (videoEl) {
          videoEl.videoloader.showVideo();
        }
      }, this);

      contentBox.plug(Y.Squarespace.ScrollLock);
    },

    bindUI: function() {

      Y.Squarespace.Lightbox2.superclass.bindUI.call(this);

      this._slideshow.after('refresh', this.syncUI, this);

      this._slideshow.after('currentIndexChange', Y.bind(function(e) {
        this.set('currentSetIndex', e.newVal);
        this.syncUI();
      },this));

      if (this._closeEl) {
        this._event(this._closeEl.on('click', function(e) {
          e.halt();
          this.hideAndDestroy(true);
        }, this));
      }

      if (this._metaTriggerEl) {
        this._event(this._metaTriggerEl.on('click', function() {
          this.toggleMeta();
        }, this), 'meta-trigger');
      }

      if (this._previousEl) {
        this._event(this._previousEl.on('click', function(e) {
          e.halt();
          this.previous();
        }, this), 'previous-click');

        var throttledPrevious = Y.throttle(Y.bind(this.previous,this), 200);

        this._event(
          Y.on('key', function(e) {
            e.halt();
            throttledPrevious();
          }, window, 'down:37', this),
          'keyboard'
        );

      }

      if (this._nextEl) {
        this._event(this._nextEl.on('click', function(e) {
          e.halt();
          this.next();
        }, this), 'next-click');

        var throttledNext = Y.throttle(Y.bind(this.next,this), 200);

        this._event(
          Y.on('key', function(e) {
            e.halt();
            throttledNext();
          }, window, 'down:39', this),
          'keyboard'
        );

        if (!this.bMobile) {
          this.setupNavigationFade();
        }
      }

      this._event(this.get('contentBox').on('click', this.onContentBoxClick, this));

      this._event(Y.on('transition:scroll:tapped', function(e) {
        this.onContentBoxClick(e.touchEvent);
      }, this));

    },

    onContentBoxClick: function(e) {
      if (!e.target.ancestor('a', true)) {
        e.halt();
        if (e.target.ancestor('.sqs-video-wrapper')) {
          e.target.ancestor('.sqs-video-wrapper').videoloader.showVideo();
          return;
        }

        if (!this.bMobile) {
          var viewWidth = Y.one('body').get('winWidth'),
              viewHeight = Y.one('body').get('winHeight'),
              viewPaddingPercent = 0.02;

          // If within viewport boundary
          if (e.clientX > viewWidth*viewPaddingPercent && e.clientX < viewWidth*(1-viewPaddingPercent)
              && e.clientY > viewHeight*viewPaddingPercent && e.clientY < viewHeight*(1-viewPaddingPercent)) {
            // If on right side of viewport, go next
            if (e.clientX >= viewWidth/2 &&  this._nextEl) {
              this.next();
              return;
            } else if (e.clientX < Y.one('body').get('winWidth')/2 && this._previousEl) {
              this.previous();
              return;
            }
          }
        }

        this.hideAndDestroy(true);
      } else {
        e.stopImmediatePropagation();
      }
    },

    syncUI: function() {
      var scrollTop = Y.one((Y.UA.gecko || Y.UA.ie) ? 'html' : 'body').get('scrollTop');
      this.get('contentBox').setStyles({
        top: scrollTop,
        height: window.innerHeight
      });

      var slideEl = this._slideshow._currentSlide();

      var metaEl = slideEl.one('.sqs-lightbox-meta') || this.createMetaEl(slideEl);
      if (metaEl) {
        this._metaTriggerEl && this._metaTriggerEl.show();
        if (!this.bMobile) {
          var firstEl = slideEl.one('.sqs-lightbox-padder').get('children').item(0);
          metaEl.setStyles({
            bottom: firstEl.getStyle('top'),
            left: firstEl.getStyle('left'),
            right: firstEl.getStyle('left')
          });
        } else {
          metaEl.appendTo(slideEl);

          metaEl.setStyles({
            bottom: this.bMetaEnabled ? 0 : '-5000px',
            left: 0,
            right: 0
          });

          metaEl.addClass('overlay-description-visible');
        }
      } else {
        this._metaTriggerEl && this._metaTriggerEl.hide();
      }
    },

    previous: function() {
      this._slideshow.previousSlide();
    },

    next: function() {
      this._slideshow.nextSlide();
    },

    close: function() {
      this.hideAndDestroy();
    },

    toggleMeta: function() {
      this.get('contentBox').all('.sqs-lightbox-meta').each(Y.bind(function(metaEl) {
        this.bMetaEnabled = parseInt(metaEl.getStyle('bottom'), 10) === 0 ? true : false;
        this._anim(metaEl, {bottom: this.bMetaEnabled ? '-5000px' : '0' }, {duration: this.get('speed')}).run();
        this.bMetaEnabled = !this.bMetaEnabled;
      },this));
    },

    hideAndDestroy: function(overlay) {
      if (Y.Lang.isBoolean(overlay) && overlay) {
        this._overlay.overlayHideAndDestroy();
      } else {
        this.once('hidden', this.destroy);
        this.hide();
      }
      Y.one('body').removeClass('sqs-lightbox-open');
    },

    hide: function() {
      var anim = this._anim(this.get('contentBox'), {opacity: 0}, {duration: this.get('speed')});

      anim.once('end', function() {
        Y.Squarespace.EscManager.removeTarget(this);
        this.fire('hidden');
      }, this);

      if (this.get('destroyed')) {
        anim.fire('end');
      } else {
        anim.run();
      }
    },

    // Show nav arrows only when mouse moves
    setupNavigationFade: function() {
      var aTimer,
          cancelFade = function() { if (aTimer) aTimer.cancel(); },
          fadeLater = function(elem) {
            cancelFade();

            if (elem && elem.inViewportRegion()) {
              elem.addClass('mouseover').siblings().removeClass('mouseover');
              aTimer = Y.later(500, this, function() {
                if (elem && elem.inViewportRegion()) elem.removeClass('mouseover');
              });
            }
          };

      this._event(this._nextEl.on('mouseenter', function() {
        cancelFade();
      }), 'nav-next-onmouse');
      this._event(this._previousEl.on('mouseenter', function() {
        cancelFade();
      }), 'nav-prev-onmouse');

      this._event(this._lightboxContentEl.on('mousemove', Y.bind(function(e) {
        if (e.clientX < Y.one('body').get('winWidth')/2) {
          fadeLater(this._previousEl);
        } else {
          fadeLater(this._nextEl);
        }
      },this)), 'container-hovering');
    },

    createSlideshow: function(contentBox) {
      var slideshowEl = Y.Node.create('<div class="sqs-lightbox-slideshow"></div>').appendTo(contentBox);

      var slideSet = this.get('set');
      for(var i=0; i<slideSet.length; i++) {
        var slide = Y.Node.create('<div class="sqs-lightbox-slide"></div>').appendTo(slideshowEl),
            slidePadder = Y.Node.create('<div class="sqs-lightbox-padder"></div>').appendTo(slide),
            content = Y.one(slideSet[i].content.cloneNode(true)).appendTo(slidePadder)
                        .setAttribute('data-image-stretch', 'false') // make sure it doesn't stretch
                        .setStyle('opacity', null) // null out any styles set explicitly
                        .removeClass('video-fill'); // remove existing video mode (images won't have any)
      };

      var slideshow = new Y.Squarespace.Gallery2({
        container: slideshowEl,
        currentIndex: this.get('currentSetIndex'),
        loop: !this.bMobile,
        autoplay: false,
        refreshOnResize: true,
        refreshOnOrientationChange: true,
        design: 'stacked',
        keyboard: false,
        designOptions: {
          clickBehavior: false,
          easing: Y.Easing.easeInOutExpo,
          speed: 0.3,
          autoHeight: false,
          transition: this.bMobile ? 'scroll' : 'fade',
          transitionOptions: {
            direction: 'horizontal'
          }
        },
        loaderOptions: {
          mode: 'fit'
        },
        lazyLoad: true
      });

      return slideshow;
    },

    createMetaEl: function(el) {
      el = el.one('.sqs-lightbox-padder'); // this is what we work with
      var metaElContent = this.getCurrentElMeta();
      if (metaElContent) {
        var metaEl = Y.Node.create('<div class="sqs-lightbox-meta"></div>');
        metaEl.appendChild(metaElContent);
        el.appendChild(metaEl);

        if (!this.bMobile) {
          this._event(el.one(':first-child').on('mouseenter', function() {
            metaEl.addClass('overlay-description-visible');
          }, this), 'meta-hovering');

          this._event(el.one(':first-child').on('mouseleave', function() {
            metaEl.removeClass('overlay-description-visible');
          }, this), 'meta-hovering');

          this._event(metaEl.on('mouseenter', function() {
            metaEl.addClass('overlay-description-visible');
          }, this), 'meta-hovering');

          this._event(metaEl.on('mouseleave', function() {
            metaEl.removeClass('overlay-description-visible');
          }, this), 'meta-hovering');
        }

        return metaEl;
      }
    },

    getCurrentElContent: function() {
      if (this.get('set').length > 0) {
        return this.get('set')[this.get('currentSetIndex')].content;
      } else {
        return this.get('content');
      }
    },

    getCurrentElMeta: function() {
      if (this.get('set').length > 0) {
        return this.get('set')[this.get('currentSetIndex')].meta;
      } else {
        return this.get('meta');
      }
    }

  }, {
    NS: 'lightbox2',
    ATTRS: {
      content: {},
      controls: {
        value: {
          previous: false,
          next: false
        }
      },
      currentSetIndex: {
        value: 0
      },
      meta: {},
      padding: {
        value: 100
      },
      set: {
        value: []
      },
      speed: {
        value: 0.3
      }
    }
  });


  /**
   * A plugin for LightBox2
   */
  Y.Squarespace.Lightbox2Plug = Y.Base.create("Lightbox2Plug", Y.Plugin.Base, [Y.Squarespace.GismoBase], {

    initializer: function() {
      this._event(this.get('host').on('click', function(e) {
        e.preventDefault();

        var ctx = this;
        Y.use('squarespace-ui-base', function(){
          var lightbox = new Y.Squarespace.Lightbox2(Y.merge({
            content: Y.Node.create(ctx.get('host').getAttribute('data-lightbox'))
          }, ctx.get('lightboxOptions')));
          lightbox.render();
        });
      }, this));
    }
  }, {
    NS: 'lightbox2plugin',
    ATTRS: {
      lightboxOptions: {}
    }
  });


  /**
   * This keeps track of the gallery instances on the page
   */
  Y.Squarespace.GalleryManager = Singleton.create({

    ready: function() {
      this._galleries = [];
      this._imageQueue = new Y.AsyncQueue();
      this._queueThrottle = this.isMobile() ? 1 : 16;
    },

    registerGallery: function(i) {
      this._galleries.push(i);
    },

    getGalleries: function() {
      return this._galleries;
    },

    initializeBlock: function(el) {
      var dataBlockJson = el.getAttribute('data-block-json');

      var data;
      if (dataBlockJson) {
        try {
          data = JSON.parse(dataBlockJson);
        } catch(e) {
          console.error("Error decoding gallery block data.");
          return;
        }
      } else {
        data = el.getAncestorData('block').value;
      }

      if (!data) {
        throw "Error evaluating gallery block data.";
      }

      // TODO: refactor design names to avoid this code -dbarber
      var design;
      switch (data.design) {
        case 'stacked':   design = 'base';    break;
        case 'slider':    design = 'strip';   break;
        case 'slideshow': design = 'stacked'; break;
        case 'grid':      design = 'grid';    break;
        default:          design = 'base';    break;
      }

      var container = el.one('.sqs-gallery-container');
      if (!container) {
        console.warn("Returning, no wrapper found.");
        return;
      }

      if (['grid', 'stacked'].indexOf(design) !== -1) {
        container.ancestor('.sqs-block').removeClass('vsize-' + data.vSize);
      }

      var gallery;

      if (!container.one('.sqs-gallery').getData('gallery')) {
        var designOptions = {};
        var loaderOptions = {};

        if (['grid', 'stacked'].indexOf(design) !== -1) {
          designOptions.autoHeight = true;

          loaderOptions.mode = data['auto-crop'] ? 'fill' : 'fit';
        }

        if (design == 'strip') {
          // TODO: refactor alignment names to avoid this code -dbarber
          var alignment;
          switch (data['active-alignment']) {
            case 'left':   alignment = 'start';  break;
            case 'center': alignment = 'middle'; break;
            case 'right':  alignment = 'end';    break;
            default:       alignment = 'middle'; break;
          }
          designOptions.alignment = alignment;
        }

        if (design == 'grid') {
          designOptions.lightbox = Static.IN_BACKEND ? false : data.lightbox;
          designOptions.perRow = parseInt(data['thumbnails-per-row'], 10);
          loaderOptions.mode = data['square-thumbs'] ? 'fill' : 'fit';
        }

        var keyboard = (design === 'grid') ? false : true;

        container.setData('galleryOptions', data);

        gallery = new Y.Squarespace.Gallery2({
          containerWrapper: container,
          container: container.one('.sqs-gallery'),
          elements: {
            previous: container.one('.sqs-gallery-controls .previous'),
            next: container.one('.sqs-gallery-controls .next')
          },
          design: design,
          designOptions: designOptions,
          loaderOptions: loaderOptions,
          keyboard: keyboard,
          lazyLoad: true,
          autoplay: data.autoplay,
          loop: true,
          refreshOnResize: true,
          refreshOnOrientationChange: true
        });

        if (data['autoplay-duration']) {
          var duration = parseInt(data['autoplay-duration'] * 1000, 10);
          if (gallery.get('autoplayOptions.timeout') != duration) {
            gallery.set('autoplayOptions.timeout', duration);
          }
        }
      } else {
        // this._debugger.log('Refreshing gallery.');
        gallery = container.one('.sqs-gallery').getData('gallery');
        gallery.refresh();
      }

      var thumbnailsEl = el.one('.sqs-gallery-thumbnails');
      if (thumbnailsEl) {

        if (design === 'stacked' && !!data.thumbnails) {
          var thumbnailHeight = data['thumbnail-strip-height'];
          thumbnailsEl.all('.sqs-video-thumbnail').each(function(videoThumbnailEl) {
            if (videoThumbnailEl.hasClass('no-image')) {
              videoThumbnailEl.one('.sqs-video-thumbnail-inner').setStyles({
                'width': Math.floor(thumbnailHeight*(16/9)) + 'px'
              });
            }

            var imgEl = videoThumbnailEl.one('img');
            if (imgEl) {
              imgEl.once('load', function() {
                videoThumbnailEl.removeClass('loading');
                videoThumbnailEl.setAttribute('style', "width: " + imgEl.get('offsetWidth') + 'px !important');
              });
            }
          });

          thumbnailsEl.setStyles({
            height: thumbnailHeight,
            marginTop: data['thumbnail-strip-margin']
          });

          var thumbnails;
          if (!thumbnailsEl.getData('gallery')) {
            thumbnails = new Y.Squarespace.Gallery2({
              container: thumbnailsEl,
              elements: {},
              loop: true,
              design: 'strip',
              designOptions: {
                activeSlideClickBehavior: false,
                preloadCount: Math.ceil(gallery.get('container').get('offsetWidth')/thumbnailHeight)
              },
              lazyLoad: true,
              loaderOptions: {
                canvas: false
              },
              refreshOnResize: true,
              refreshOnOrientationChange: true
            });

            gallery.addChild(thumbnails);
          } else {
            // this._debugger.log('Refresh thumbnails.');
            thumbnails = thumbnailsEl.getData('gallery');
            thumbnails.refresh();
          }
        }
      }
    },

    refreshAll: function() {
      Y.Array.each(this._galleries, function(gallery) {
        gallery.refresh();
      });
    },

    // Fetch next image (if throttle not hit yet)
    runImageQueue: function() {
      if (this._queueThrottle > 0) {
        this._imageQueue.run();
      } else {
        this._imageQueue.pause();
      }
    },

    // Add NodeList of imgs to Queue
    addImageQueue: function(imgs) {
      imgs.each(function(img) {
        this._imageQueue.add({
          fn: function() {

            if (img && img._node) { // skip invalid states
              img.plug(Y.Squarespace.Loader2, {
                load: true
              });
              img.fire('refresh');

              if (!img.get('complete')) {
                this._queueThrottle--;

                img.once(['load','error'], function(e) {
                  this._queueThrottle++;
                  this.runImageQueue();
                }, this);
              }
            }

            this.runImageQueue();
          },
          context: this,
          id: img.getAttribute('data-src')
        });
      }, this);
    },

    // Promote NodeList of imgs to top of Queue
    promoteImageQueue: function(imgs) {
      for(var i=imgs.size()-1; i>=0; i--) {
        // promote in reverse to match original order
        this._imageQueue.promote(imgs.item(i).getAttribute('data-src'));
      }

      this.runImageQueue(); // Good time to start the queue (if it hasn't already)
    },

    // Remove NodeList of imgs from queue
    removeImageQueue: function(imgs) {
      imgs.each(function(img) {
        this._imageQueue.remove(img.getAttribute('data-src'));
      }, this);
    },

    isMobile: function() {
      return !Y.Lang.isUndefined(window.orientation) || navigator.userAgent.toLowerCase().indexOf('mobile') !== -1;
    }

  });
}, '1.0', {
  requires: [
    "base",
    "plugin",
    "widget",
    "squarespace-gismo",
    "squarespace-animations",
    "squarespace-debugger",
    "squarespace-gallery-stacked",
    "node",
    "event-key",
    "squarespace-image-loader",
    "squarespace-common",
    "history",
    "yui-throttle",
    "event-mouseenter",
    "squarespace-touch-event-listener",
    "squarespace-video-loader",
    "async-queue"
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/autocomplete-base/autocomplete-base.js
// ----------------------------------------------------------------------------------------

YUI.add('autocomplete-base', function (Y, NAME) {

/**
Provides automatic input completion or suggestions for text input fields and
textareas.

@module autocomplete
@main autocomplete
@since 3.3.0
**/

/**
`Y.Base` extension that provides core autocomplete logic (but no UI
implementation) for a text input field or textarea. Must be mixed into a
`Y.Base`-derived class to be useful.

@module autocomplete
@submodule autocomplete-base
**/

/**
Extension that provides core autocomplete logic (but no UI implementation) for a
text input field or textarea.

The `AutoCompleteBase` class provides events and attributes that abstract away
core autocomplete logic and configuration, but does not provide a widget
implementation or suggestion UI. For a prepackaged autocomplete widget, see
`AutoCompleteList`.

This extension cannot be instantiated directly, since it doesn't provide an
actual implementation. It's intended to be mixed into a `Y.Base`-based class or
widget.

`Y.Widget`-based example:

    YUI().use('autocomplete-base', 'widget', function (Y) {
        var MyAC = Y.Base.create('myAC', Y.Widget, [Y.AutoCompleteBase], {
            // Custom prototype methods and properties.
        }, {
            // Custom static methods and properties.
        });

        // Custom implementation code.
    });

`Y.Base`-based example:

    YUI().use('autocomplete-base', function (Y) {
        var MyAC = Y.Base.create('myAC', Y.Base, [Y.AutoCompleteBase], {
            initializer: function () {
                this._bindUIACBase();
                this._syncUIACBase();
            },

            // Custom prototype methods and properties.
        }, {
            // Custom static methods and properties.
        });

        // Custom implementation code.
    });

@class AutoCompleteBase
**/

var Escape  = Y.Escape,
    Lang    = Y.Lang,
    YArray  = Y.Array,
    YObject = Y.Object,

    isFunction = Lang.isFunction,
    isString   = Lang.isString,
    trim       = Lang.trim,

    INVALID_VALUE = Y.Attribute.INVALID_VALUE,

    _FUNCTION_VALIDATOR = '_functionValidator',
    _SOURCE_SUCCESS     = '_sourceSuccess',

    ALLOW_BROWSER_AC    = 'allowBrowserAutocomplete',
    INPUT_NODE          = 'inputNode',
    QUERY               = 'query',
    QUERY_DELIMITER     = 'queryDelimiter',
    REQUEST_TEMPLATE    = 'requestTemplate',
    RESULTS             = 'results',
    RESULT_LIST_LOCATOR = 'resultListLocator',
    VALUE               = 'value',
    VALUE_CHANGE        = 'valueChange',

    EVT_CLEAR   = 'clear',
    EVT_QUERY   = QUERY,
    EVT_RESULTS = RESULTS;

function AutoCompleteBase() {}

AutoCompleteBase.prototype = {
    // -- Lifecycle Methods ----------------------------------------------------
    initializer: function () {
        // AOP bindings.
        Y.before(this._bindUIACBase, this, 'bindUI');
        Y.before(this._syncUIACBase, this, 'syncUI');

        // -- Public Events ----------------------------------------------------

        /**
        Fires after the query has been completely cleared or no longer meets the
        minimum query length requirement.

        @event clear
        @param {String} prevVal Value of the query before it was cleared.
        @param {String} src Source of the event.
        @preventable _defClearFn
        **/
        this.publish(EVT_CLEAR, {
            defaultFn: this._defClearFn
        });

        /**
        Fires when the contents of the input field have changed and the input
        value meets the criteria necessary to generate an autocomplete query.

        @event query
        @param {String} inputValue Full contents of the text input field or
            textarea that generated the query.
        @param {String} query AutoComplete query. This is the string that will
            be used to request completion results. It may or may not be the same
            as `inputValue`.
        @param {String} src Source of the event.
        @preventable _defQueryFn
        **/
        this.publish(EVT_QUERY, {
            defaultFn: this._defQueryFn
        });

        /**
        Fires after query results are received from the source. If no source has
        been set, this event will not fire.

        @event results
        @param {Array|Object} data Raw, unfiltered result data (if available).
        @param {String} query Query that generated these results.
        @param {Object[]} results Array of filtered, formatted, and highlighted
            results. Each item in the array is an object with the following
            properties:

            @param {Node|HTMLElement|String} results.display Formatted result
                HTML suitable for display to the user. If no custom formatter is
                set, this will be an HTML-escaped version of the string in the
                `text` property.
            @param {String} [results.highlighted] Highlighted (but not
                formatted) result text. This property will only be set if a
                highlighter is in use.
            @param {Any} results.raw Raw, unformatted result in whatever form it
                was provided by the source.
            @param {String} results.text Plain text version of the result,
                suitable for being inserted into the value of a text input field
                or textarea when the result is selected by a user. This value is
                not HTML-escaped and should not be inserted into the page using
                `innerHTML` or `Node#setContent()`.

        @preventable _defResultsFn
        **/
        this.publish(EVT_RESULTS, {
            defaultFn: this._defResultsFn
        });
    },

    destructor: function () {
        this._acBaseEvents && this._acBaseEvents.detach();

        delete this._acBaseEvents;
        delete this._cache;
        delete this._inputNode;
        delete this._rawSource;
    },

    // -- Public Prototype Methods ---------------------------------------------

    /**
    Clears the result cache.

    @method clearCache
    @chainable
    @since 3.5.0
    **/
    clearCache: function () {
        this._cache && (this._cache = {});
        return this;
    },

    /**
    Sends a request to the configured source. If no source is configured, this
    method won't do anything.

    Usually there's no reason to call this method manually; it will be called
    automatically when user input causes a `query` event to be fired. The only
    time you'll need to call this method manually is if you want to force a
    request to be sent when no user input has occurred.

    @method sendRequest
    @param {String} [query] Query to send. If specified, the `query` attribute
        will be set to this query. If not specified, the current value of the
        `query` attribute will be used.
    @param {Function} [requestTemplate] Request template function. If not
        specified, the current value of the `requestTemplate` attribute will be
        used.
    @chainable
    **/
    sendRequest: function (query, requestTemplate) {
        var request,
            source = this.get('source');

        if (query || query === '') {
            this._set(QUERY, query);
        } else {
            query = this.get(QUERY) || '';
        }

        if (source) {
            if (!requestTemplate) {
                requestTemplate = this.get(REQUEST_TEMPLATE);
            }

            request = requestTemplate ?
                requestTemplate.call(this, query) : query;


            source.sendRequest({
                query  : query,
                request: request,

                callback: {
                    success: Y.bind(this._onResponse, this, query)
                }
            });
        }

        return this;
    },

    // -- Protected Lifecycle Methods ------------------------------------------

    /**
    Attaches event listeners and behaviors.

    @method _bindUIACBase
    @protected
    **/
    _bindUIACBase: function () {
        var inputNode  = this.get(INPUT_NODE),
            tokenInput = inputNode && inputNode.tokenInput;

        // If the inputNode has a node-tokeninput plugin attached, bind to the
        // plugin's inputNode instead.
        if (tokenInput) {
            inputNode = tokenInput.get(INPUT_NODE);
            this._set('tokenInput', tokenInput);
        }

        if (!inputNode) {
            Y.error('No inputNode specified.');
            return;
        }

        this._inputNode = inputNode;

        this._acBaseEvents = new Y.EventHandle([
            // This is the valueChange event on the inputNode, provided by the
            // event-valuechange module, not our own valueChange.
            inputNode.on(VALUE_CHANGE, this._onInputValueChange, this),
            inputNode.on('blur', this._onInputBlur, this),

            this.after(ALLOW_BROWSER_AC + 'Change', this._syncBrowserAutocomplete),
            this.after('sourceTypeChange', this._afterSourceTypeChange),
            this.after(VALUE_CHANGE, this._afterValueChange)
        ]);
    },

    /**
    Synchronizes the UI state of the `inputNode`.

    @method _syncUIACBase
    @protected
    **/
    _syncUIACBase: function () {
        this._syncBrowserAutocomplete();
        this.set(VALUE, this.get(INPUT_NODE).get(VALUE));
    },

    // -- Protected Prototype Methods ------------------------------------------

    /**
    Creates a DataSource-like object that simply returns the specified array as
    a response. See the `source` attribute for more details.

    @method _createArraySource
    @param {Array} source
    @return {Object} DataSource-like object.
    @protected
    **/
    _createArraySource: function (source) {
        var that = this;

        return {
            type: 'array',
            sendRequest: function (request) {
                that[_SOURCE_SUCCESS](source.concat(), request);
            }
        };
    },

    /**
    Creates a DataSource-like object that passes the query to a custom-defined
    function, which is expected to call the provided callback with an array of
    results. See the `source` attribute for more details.

    @method _createFunctionSource
    @param {Function} source Function that accepts a query and a callback as
      parameters, and calls the callback with an array of results.
    @return {Object} DataSource-like object.
    @protected
    **/
    _createFunctionSource: function (source) {
        var that = this;

        return {
            type: 'function',
            sendRequest: function (request) {
                var value;

                function afterResults(results) {
                    that[_SOURCE_SUCCESS](results || [], request);
                }

                // Allow both synchronous and asynchronous functions. If we get
                // a truthy return value, assume the function is synchronous.
                if ((value = source(request.query, afterResults))) {
                    afterResults(value);
                }
            }
        };
    },

    /**
    Creates a DataSource-like object that looks up queries as properties on the
    specified object, and returns the found value (if any) as a response. See
    the `source` attribute for more details.

    @method _createObjectSource
    @param {Object} source
    @return {Object} DataSource-like object.
    @protected
    **/
    _createObjectSource: function (source) {
        var that = this;

        return {
            type: 'object',
            sendRequest: function (request) {
                var query = request.query;

                that[_SOURCE_SUCCESS](
                    YObject.owns(source, query) ? source[query] : [],
                    request
                );
            }
        };
    },

    /**
    Returns `true` if _value_ is either a function or `null`.

    @method _functionValidator
    @param {Function|null} value Value to validate.
    @protected
    **/
    _functionValidator: function (value) {
        return value === null || isFunction(value);
    },

    /**
    Faster and safer alternative to `Y.Object.getValue()`. Doesn't bother
    casting the path to an array (since we already know it's an array) and
    doesn't throw an error if a value in the middle of the object hierarchy is
    neither `undefined` nor an object.

    @method _getObjectValue
    @param {Object} obj
    @param {Array} path
    @return {Any} Located value, or `undefined` if the value was
        not found at the specified path.
    @protected
    **/
    _getObjectValue: function (obj, path) {
        if (!obj) {
            return;
        }

        for (var i = 0, len = path.length; obj && i < len; i++) {
            obj = obj[path[i]];
        }

        return obj;
    },

    /**
    Parses result responses, performs filtering and highlighting, and fires the
    `results` event.

    @method _parseResponse
    @param {String} query Query that generated these results.
    @param {Object} response Response containing results.
    @param {Object} data Raw response data.
    @protected
    **/
    _parseResponse: function (query, response, data) {
        var facade = {
                data   : data,
                query  : query,
                results: []
            },

            listLocator = this.get(RESULT_LIST_LOCATOR),
            results     = [],
            unfiltered  = response && response.results,

            filters,
            formatted,
            formatter,
            highlighted,
            highlighter,
            i,
            len,
            maxResults,
            result,
            text,
            textLocator;

        if (unfiltered && listLocator) {
            unfiltered = listLocator.call(this, unfiltered);
        }

        if (unfiltered && unfiltered.length) {
            filters     = this.get('resultFilters');
            textLocator = this.get('resultTextLocator');

            // Create a lightweight result object for each result to make them
            // easier to work with. The various properties on the object
            // represent different formats of the result, and will be populated
            // as we go.
            for (i = 0, len = unfiltered.length; i < len; ++i) {
                result = unfiltered[i];

                text = textLocator ?
                        textLocator.call(this, result) :
                        result.toString();

                results.push({
                    display: Escape.html(text),
                    raw    : result,
                    text   : text
                });
            }

            // Run the results through all configured result filters. Each
            // filter returns an array of (potentially fewer) result objects,
            // which is then passed to the next filter, and so on.
            for (i = 0, len = filters.length; i < len; ++i) {
                results = filters[i].call(this, query, results.concat());

                if (!results) {
                    return;
                }

                if (!results.length) {
                    break;
                }
            }

            if (results.length) {
                formatter   = this.get('resultFormatter');
                highlighter = this.get('resultHighlighter');
                maxResults  = this.get('maxResults');

                // If maxResults is set and greater than 0, limit the number of
                // results.
                if (maxResults && maxResults > 0 &&
                        results.length > maxResults) {
                    results.length = maxResults;
                }

                // Run the results through the configured highlighter (if any).
                // The highlighter returns an array of highlighted strings (not
                // an array of result objects), and these strings are then added
                // to each result object.
                if (highlighter) {
                    highlighted = highlighter.call(this, query,
                            results.concat());

                    if (!highlighted) {
                        return;
                    }

                    for (i = 0, len = highlighted.length; i < len; ++i) {
                        result = results[i];
                        result.highlighted = highlighted[i];
                        result.display     = result.highlighted;
                    }
                }

                // Run the results through the configured formatter (if any) to
                // produce the final formatted results. The formatter returns an
                // array of strings or Node instances (not an array of result
                // objects), and these strings/Nodes are then added to each
                // result object.
                if (formatter) {
                    formatted = formatter.call(this, query, results.concat());

                    if (!formatted) {
                        return;
                    }

                    for (i = 0, len = formatted.length; i < len; ++i) {
                        results[i].display = formatted[i];
                    }
                }
            }
        }

        facade.results = results;
        this.fire(EVT_RESULTS, facade);
    },

    /**
    Returns the query portion of the specified input value, or `null` if there
    is no suitable query within the input value.

    If a query delimiter is defined, the query will be the last delimited part
    of of the string.

    @method _parseValue
    @param {String} value Input value from which to extract the query.
    @return {String|null} query
    @protected
    **/
    _parseValue: function (value) {
        var delim = this.get(QUERY_DELIMITER);

        if (delim) {
            value = value.split(delim);
            value = value[value.length - 1];
        }

        return Lang.trimLeft(value);
    },

    /**
    Setter for the `enableCache` attribute.

    @method _setEnableCache
    @param {Boolean} value
    @protected
    @since 3.5.0
    **/
    _setEnableCache: function (value) {
        // When `this._cache` is an object, result sources will store cached
        // results in it. When it's falsy, they won't. This way result sources
        // don't need to get the value of the `enableCache` attribute on every
        // request, which would be sloooow.
        this._cache = value ? {} : null;
    },

    /**
    Setter for locator attributes.

    @method _setLocator
    @param {Function|String|null} locator
    @return {Function|null}
    @protected
    **/
    _setLocator: function (locator) {
        if (this[_FUNCTION_VALIDATOR](locator)) {
            return locator;
        }

        var that = this;

        locator = locator.toString().split('.');

        return function (result) {
            return result && that._getObjectValue(result, locator);
        };
    },

    /**
    Setter for the `requestTemplate` attribute.

    @method _setRequestTemplate
    @param {Function|String|null} template
    @return {Function|null}
    @protected
    **/
    _setRequestTemplate: function (template) {
        if (this[_FUNCTION_VALIDATOR](template)) {
            return template;
        }

        template = template.toString();

        return function (query) {
            return Lang.sub(template, {query: encodeURIComponent(query)});
        };
    },

    /**
    Setter for the `resultFilters` attribute.

    @method _setResultFilters
    @param {Array|Function|String|null} filters `null`, a filter
        function, an array of filter functions, or a string or array of strings
        representing the names of methods on `Y.AutoCompleteFilters`.
    @return {Function[]} Array of filter functions (empty if <i>filters</i> is
        `null`).
    @protected
    **/
    _setResultFilters: function (filters) {
        var acFilters, getFilterFunction;

        if (filters === null) {
            return [];
        }

        acFilters = Y.AutoCompleteFilters;

        getFilterFunction = function (filter) {
            if (isFunction(filter)) {
                return filter;
            }

            if (isString(filter) && acFilters &&
                    isFunction(acFilters[filter])) {
                return acFilters[filter];
            }

            return false;
        };

        if (Lang.isArray(filters)) {
            filters = YArray.map(filters, getFilterFunction);
            return YArray.every(filters, function (f) { return !!f; }) ?
                    filters : INVALID_VALUE;
        } else {
            filters = getFilterFunction(filters);
            return filters ? [filters] : INVALID_VALUE;
        }
    },

    /**
    Setter for the `resultHighlighter` attribute.

    @method _setResultHighlighter
    @param {Function|String|null} highlighter `null`, a highlighter function, or
        a string representing the name of a method on
        `Y.AutoCompleteHighlighters`.
    @return {Function|null}
    @protected
    **/
    _setResultHighlighter: function (highlighter) {
        var acHighlighters;

        if (this[_FUNCTION_VALIDATOR](highlighter)) {
            return highlighter;
        }

        acHighlighters = Y.AutoCompleteHighlighters;

        if (isString(highlighter) && acHighlighters &&
                isFunction(acHighlighters[highlighter])) {
            return acHighlighters[highlighter];
        }

        return INVALID_VALUE;
    },

    /**
    Setter for the `source` attribute. Returns a DataSource or a DataSource-like
    object depending on the type of _source_ and/or the value of the
    `sourceType` attribute.

    @method _setSource
    @param {Any} source AutoComplete source. See the `source` attribute for
        details.
    @return {DataSource|Object}
    @protected
    **/
    _setSource: function (source) {
        var sourceType = this.get('sourceType') || Lang.type(source),
            sourceSetter;

        if ((source && isFunction(source.sendRequest))
                || source === null
                || sourceType === 'datasource') {

            // Quacks like a DataSource instance (or null). Make it so!
            this._rawSource = source;
            return source;
        }

        // See if there's a registered setter for this source type.
        if ((sourceSetter = AutoCompleteBase.SOURCE_TYPES[sourceType])) {
            this._rawSource = source;
            return Lang.isString(sourceSetter) ?
                    this[sourceSetter](source) : sourceSetter(source);
        }

        Y.error("Unsupported source type '" + sourceType + "'. Maybe autocomplete-sources isn't loaded?");
        return INVALID_VALUE;
    },

    /**
    Shared success callback for non-DataSource sources.

    @method _sourceSuccess
    @param {Any} data Response data.
    @param {Object} request Request object.
    @protected
    **/
    _sourceSuccess: function (data, request) {
        request.callback.success({
            data: data,
            response: {results: data}
        });
    },

    /**
    Synchronizes the UI state of the `allowBrowserAutocomplete` attribute.

    @method _syncBrowserAutocomplete
    @protected
    **/
    _syncBrowserAutocomplete: function () {
        var inputNode = this.get(INPUT_NODE);

        if (inputNode.get('nodeName').toLowerCase() === 'input') {
            inputNode.setAttribute('autocomplete',
                    this.get(ALLOW_BROWSER_AC) ? 'on' : 'off');
        }
    },

    /**
    Updates the query portion of the `value` attribute.

    If a query delimiter is defined, the last delimited portion of the input
    value will be replaced with the specified _value_.

    @method _updateValue
    @param {String} newVal New value.
    @protected
    **/
    _updateValue: function (newVal) {
        var delim = this.get(QUERY_DELIMITER),
            insertDelim,
            len,
            prevVal;

        newVal = Lang.trimLeft(newVal);

        if (delim) {
            insertDelim = trim(delim); // so we don't double up on spaces
            prevVal     = YArray.map(trim(this.get(VALUE)).split(delim), trim);
            len         = prevVal.length;

            if (len > 1) {
                prevVal[len - 1] = newVal;
                newVal = prevVal.join(insertDelim + ' ');
            }

            newVal = newVal + insertDelim + ' ';
        }

        this.set(VALUE, newVal);
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
    Updates the current `source` based on the new `sourceType` to ensure that
    the two attributes don't get out of sync when they're changed separately.

    @method _afterSourceTypeChange
    @param {EventFacade} e
    @protected
    **/
    _afterSourceTypeChange: function (e) {
        if (this._rawSource) {
            this.set('source', this._rawSource);
        }
    },

    /**
    Handles change events for the `value` attribute.

    @method _afterValueChange
    @param {EventFacade} e
    @protected
    **/
    _afterValueChange: function (e) {
        var newVal   = e.newVal,
            self     = this,
            uiChange = e.src === AutoCompleteBase.UI_SRC,
            delay, fire, minQueryLength, query;

        // Update the UI if the value was changed programmatically.
        if (!uiChange) {
            self._inputNode.set(VALUE, newVal);
        }


        minQueryLength = self.get('minQueryLength');
        query          = self._parseValue(newVal) || '';

        if (minQueryLength >= 0 && query.length >= minQueryLength) {
            // Only query on changes that originate from the UI.
            if (uiChange) {
                delay = self.get('queryDelay');

                fire = function () {
                    self.fire(EVT_QUERY, {
                        inputValue: newVal,
                        query     : query,
                        src       : e.src
                    });
                };

                if (delay) {
                    clearTimeout(self._delay);
                    self._delay = setTimeout(fire, delay);
                } else {
                    fire();
                }
            } else {
                // For programmatic value changes, just update the query
                // attribute without sending a query.
                self._set(QUERY, query);
            }
        } else {
            clearTimeout(self._delay);

            self.fire(EVT_CLEAR, {
                prevVal: e.prevVal ? self._parseValue(e.prevVal) : null,
                src    : e.src
            });
        }
    },

    /**
    Handles `blur` events on the input node.

    @method _onInputBlur
    @param {EventFacade} e
    @protected
    **/
    _onInputBlur: function (e) {
        var delim = this.get(QUERY_DELIMITER),
            delimPos,
            newVal,
            value;

        // If a query delimiter is set and the input's value contains one or
        // more trailing delimiters, strip them.
        if (delim && !this.get('allowTrailingDelimiter')) {
            delim = Lang.trimRight(delim);
            value = newVal = this._inputNode.get(VALUE);

            if (delim) {
                while ((newVal = Lang.trimRight(newVal)) &&
                        (delimPos = newVal.length - delim.length) &&
                        newVal.lastIndexOf(delim) === delimPos) {

                    newVal = newVal.substring(0, delimPos);
                }
            } else {
                // Delimiter is one or more space characters, so just trim the
                // value.
                newVal = Lang.trimRight(newVal);
            }

            if (newVal !== value) {
                this.set(VALUE, newVal);
            }
        }
    },

    /**
    Handles `valueChange` events on the input node and fires a `query` event
    when the input value meets the configured criteria.

    @method _onInputValueChange
    @param {EventFacade} e
    @protected
    **/
    _onInputValueChange: function (e) {
        var newVal = e.newVal;

        // Don't query if the internal value is the same as the new value
        // reported by valueChange.
        if (newVal !== this.get(VALUE)) {
            this.set(VALUE, newVal, {src: AutoCompleteBase.UI_SRC});
        }
    },

    /**
    Handles source responses and fires the `results` event.

    @method _onResponse
    @param {EventFacade} e
    @protected
    **/
    _onResponse: function (query, e) {
        // Ignore stale responses that aren't for the current query.
        if (query === (this.get(QUERY) || '')) {
            this._parseResponse(query || '', e.response, e.data);
        }
    },

    // -- Protected Default Event Handlers -------------------------------------

    /**
    Default `clear` event handler. Sets the `results` attribute to an empty
    array and `query` to null.

    @method _defClearFn
    @protected
    **/
    _defClearFn: function () {
        this._set(QUERY, null);
        this._set(RESULTS, []);
    },

    /**
    Default `query` event handler. Sets the `query` attribute and sends a
    request to the source if one is configured.

    @method _defQueryFn
    @param {EventFacade} e
    @protected
    **/
    _defQueryFn: function (e) {
        this.sendRequest(e.query); // sendRequest will set the 'query' attribute
    },

    /**
    Default `results` event handler. Sets the `results` attribute to the latest
    results.

    @method _defResultsFn
    @param {EventFacade} e
    @protected
    **/
    _defResultsFn: function (e) {
        this._set(RESULTS, e[RESULTS]);
    }
};

AutoCompleteBase.ATTRS = {
    /**
    Whether or not to enable the browser's built-in autocomplete functionality
    for input fields.

    @attribute allowBrowserAutocomplete
    @type Boolean
    @default false
    **/
    allowBrowserAutocomplete: {
        value: false
    },

    /**
    When a `queryDelimiter` is set, trailing delimiters will automatically be
    stripped from the input value by default when the input node loses focus.
    Set this to `true` to allow trailing delimiters.

    @attribute allowTrailingDelimiter
    @type Boolean
    @default false
    **/
    allowTrailingDelimiter: {
        value: false
    },

    /**
    Whether or not to enable in-memory caching in result sources that support
    it.

    @attribute enableCache
    @type Boolean
    @default true
    @since 3.5.0
    **/
    enableCache: {
        lazyAdd: false, // we need the setter to run on init
        setter: '_setEnableCache',
        value: true
    },

    /**
    Node to monitor for changes, which will generate `query` events when
    appropriate. May be either an `<input>` or a `<textarea>`.

    @attribute inputNode
    @type Node|HTMLElement|String
    @initOnly
    **/
    inputNode: {
        setter: Y.one,
        writeOnce: 'initOnly'
    },

    /**
    Maximum number of results to return. A value of `0` or less will allow an
    unlimited number of results.

    @attribute maxResults
    @type Number
    @default 0
    **/
    maxResults: {
        value: 0
    },

    /**
    Minimum number of characters that must be entered before a `query` event
    will be fired. A value of `0` allows empty queries; a negative value will
    effectively disable all `query` events.

    @attribute minQueryLength
    @type Number
    @default 1
    **/
    minQueryLength: {
        value: 1
    },

    /**
    Current query, or `null` if there is no current query.

    The query might not be the same as the current value of the input node, both
    for timing reasons (due to `queryDelay`) and because when one or more
    `queryDelimiter` separators are in use, only the last portion of the
    delimited input string will be used as the query value.

    @attribute query
    @type String|null
    @default null
    @readonly
    **/
    query: {
        readOnly: true,
        value: null
    },

    /**
    Number of milliseconds to delay after input before triggering a `query`
    event. If new input occurs before this delay is over, the previous input
    event will be ignored and a new delay will begin.

    This can be useful both to throttle queries to a remote data source and to
    avoid distracting the user by showing them less relevant results before
    they've paused their typing.

    @attribute queryDelay
    @type Number
    @default 100
    **/
    queryDelay: {
        value: 100
    },

    /**
    Query delimiter string. When a delimiter is configured, the input value
    will be split on the delimiter, and only the last portion will be used in
    autocomplete queries and updated when the `query` attribute is
    modified.

    @attribute queryDelimiter
    @type String|null
    @default null
    **/
    queryDelimiter: {
        value: null
    },

    /**
    Source request template. This can be a function that accepts a query as a
    parameter and returns a request string, or it can be a string containing the
    placeholder "{query}", which will be replaced with the actual URI-encoded
    query. In either case, the resulting string will be appended to the request
    URL when the `source` attribute is set to a remote DataSource, JSONP URL, or
    XHR URL (it will not be appended to YQL URLs).

    While `requestTemplate` may be set to either a function or a string, it will
    always be returned as a function that accepts a query argument and returns a
    string.

    @attribute requestTemplate
    @type Function|String|null
    @default null
    **/
    requestTemplate: {
        setter: '_setRequestTemplate',
        value: null
    },

    /**
    Array of local result filter functions. If provided, each filter will be
    called with two arguments when results are received: the query and an array
    of result objects. See the documentation for the `results` event for a list
    of the properties available on each result object.

    Each filter is expected to return a filtered or modified version of the
    results array, which will then be passed on to subsequent filters, then the
    `resultHighlighter` function (if set), then the `resultFormatter` function
    (if set), and finally to subscribers to the `results` event.

    If no `source` is set, result filters will not be called.

    Prepackaged result filters provided by the autocomplete-filters and
    autocomplete-filters-accentfold modules can be used by specifying the filter
    name as a string, such as `'phraseMatch'` (assuming the necessary filters
    module is loaded).

    @attribute resultFilters
    @type Array
    @default []
    **/
    resultFilters: {
        setter: '_setResultFilters',
        value: []
    },

    /**
    Function which will be used to format results. If provided, this function
    will be called with two arguments after results have been received and
    filtered: the query and an array of result objects. The formatter is
    expected to return an array of HTML strings or Node instances containing the
    desired HTML for each result.

    See the documentation for the `results` event for a list of the properties
    available on each result object.

    If no `source` is set, the formatter will not be called.

    @attribute resultFormatter
    @type Function|null
    **/
    resultFormatter: {
        validator: _FUNCTION_VALIDATOR,
        value: null
    },

    /**
    Function which will be used to highlight results. If provided, this function
    will be called with two arguments after results have been received and
    filtered: the query and an array of filtered result objects. The highlighter
    is expected to return an array of highlighted result text in the form of
    HTML strings.

    See the documentation for the `results` event for a list of the properties
    available on each result object.

    If no `source` is set, the highlighter will not be called.

    @attribute resultHighlighter
    @type Function|null
    **/
    resultHighlighter: {
        setter: '_setResultHighlighter',
        value: null
    },

    /**
    Locator that should be used to extract an array of results from a non-array
    response.

    By default, no locator is applied, and all responses are assumed to be
    arrays by default. If all responses are already arrays, you don't need to
    define a locator.

    The locator may be either a function (which will receive the raw response as
    an argument and must return an array) or a string representing an object
    path, such as "foo.bar.baz" (which would return the value of
    `result.foo.bar.baz` if the response is an object).

    While `resultListLocator` may be set to either a function or a string, it
    will always be returned as a function that accepts a response argument and
    returns an array.

    @attribute resultListLocator
    @type Function|String|null
    **/
    resultListLocator: {
        setter: '_setLocator',
        value: null
    },

    /**
    Current results, or an empty array if there are no results.

    @attribute results
    @type Array
    @default []
    @readonly
    **/
    results: {
        readOnly: true,
        value: []
    },

    /**
    Locator that should be used to extract a plain text string from a non-string
    result item. The resulting text value will typically be the value that ends
    up being inserted into an input field or textarea when the user of an
    autocomplete implementation selects a result.

    By default, no locator is applied, and all results are assumed to be plain
    text strings. If all results are already plain text strings, you don't need
    to define a locator.

    The locator may be either a function (which will receive the raw result as
    an argument and must return a string) or a string representing an object
    path, such as "foo.bar.baz" (which would return the value of
    `result.foo.bar.baz` if the result is an object).

    While `resultTextLocator` may be set to either a function or a string, it
    will always be returned as a function that accepts a result argument and
    returns a string.

    @attribute resultTextLocator
    @type Function|String|null
    **/
    resultTextLocator: {
        setter: '_setLocator',
        value: null
    },

    /**
    Source for autocomplete results. The following source types are supported:

    <dl>
      <dt>Array</dt>
      <dd>
        <p>
        The full array will be provided to any configured filters for each
        query. This is an easy way to create a fully client-side autocomplete
        implementation.
        </p>

        <p>
        Example: `['first result', 'second result', 'etc']`
        </p>
      </dd>

      <dt>DataSource</dt>
      <dd>
        A `DataSource` instance or other object that provides a DataSource-like
        `sendRequest` method. See the `DataSource` documentation for details.
      </dd>

      <dt>Function</dt>
      <dd>
        <p>
        A function source will be called with the current query and a
        callback function as parameters, and should either return an array of
        results (for synchronous operation) or return nothing and pass an
        array of results to the provided callback (for asynchronous
        operation).
        </p>

        <p>
        Example (synchronous):
        </p>

        <pre>
        function (query) {
            return ['foo', 'bar'];
        }
        </pre>

        <p>
        Example (async):
        </p>

        <pre>
        function (query, callback) {
            callback(['foo', 'bar']);
        }
        </pre>
      </dd>

      <dt>Object</dt>
      <dd>
        <p>
        An object will be treated as a query hashmap. If a property on the
        object matches the current query, the value of that property will be
        used as the response.
        </p>

        <p>
        The response is assumed to be an array of results by default. If the
        response is not an array, provide a `resultListLocator` to
        process the response and return an array.
        </p>

        <p>
        Example: `{foo: ['foo result 1', 'foo result 2'], bar: ['bar result']}`
        </p>
      </dd>
    </dl>

    If the optional `autocomplete-sources` module is loaded, then
    the following additional source types will be supported as well:

    <dl>
      <dt>&lt;select&gt; Node</dt>
      <dd>
        You may provide a YUI Node instance wrapping a &lt;select&gt;
        element, and the options in the list will be used as results. You
        will also need to specify a `resultTextLocator` of 'text'
        or 'value', depending on what you want to use as the text of the
        result.

        Each result will be an object with the following properties:

        <dl>
          <dt>html (String)</dt>
          <dd>
            <p>HTML content of the &lt;option&gt; element.</p>
          </dd>

          <dt>index (Number)</dt>
          <dd>
            <p>Index of the &lt;option&gt; element in the list.</p>
          </dd>

          <dt>node (Y.Node)</dt>
          <dd>
            <p>Node instance referring to the original &lt;option&gt; element.</p>
          </dd>

          <dt>selected (Boolean)</dt>
          <dd>
            <p>Whether or not this item is currently selected in the
            &lt;select&gt; list.</p>
          </dd>

          <dt>text (String)</dt>
          <dd>
            <p>Text content of the &lt;option&gt; element.</p>
          </dd>

          <dt>value (String)</dt>
          <dd>
            <p>Value of the &lt;option&gt; element.</p>
          </dd>
        </dl>
      </dd>

      <dt>String (JSONP URL)</dt>
      <dd>
        <p>
        If a URL with a `{callback}` placeholder is provided, it will be used to
        make a JSONP request. The `{query}` placeholder will be replaced with
        the current query, and the `{callback}` placeholder will be replaced
        with an internally-generated JSONP callback name. Both placeholders must
        appear in the URL, or the request will fail. An optional `{maxResults}`
        placeholder may also be provided, and will be replaced with the value of
        the maxResults attribute (or 1000 if the maxResults attribute is 0 or
        less).
        </p>

        <p>
        The response is assumed to be an array of results by default. If the
        response is not an array, provide a `resultListLocator` to process the
        response and return an array.
        </p>

        <p>
        <strong>The `jsonp` module must be loaded in order for
        JSONP URL sources to work.</strong> If the `jsonp` module
        is not already loaded, it will be loaded on demand if possible.
        </p>

        <p>
        Example: `'http://example.com/search?q={query}&callback={callback}'`
        </p>
      </dd>

      <dt>String (XHR URL)</dt>
      <dd>
        <p>
        If a URL without a `{callback}` placeholder is provided, it will be used
        to make a same-origin XHR request. The `{query}` placeholder will be
        replaced with the current query. An optional `{maxResults}` placeholder
        may also be provided, and will be replaced with the value of the
        maxResults attribute (or 1000 if the maxResults attribute is 0 or less).
        </p>

        <p>
        The response is assumed to be a JSON array of results by default. If the
        response is a JSON object and not an array, provide a
        `resultListLocator` to process the response and return an array. If the
        response is in some form other than JSON, you will need to use a custom
        DataSource instance as the source.
        </p>

        <p>
        <strong>The `io-base` and `json-parse` modules
        must be loaded in order for XHR URL sources to work.</strong> If
        these modules are not already loaded, they will be loaded on demand
        if possible.
        </p>

        <p>
        Example: `'http://example.com/search?q={query}'`
        </p>
      </dd>

      <dt>String (YQL query)</dt>
      <dd>
        <p>
        If a YQL query is provided, it will be used to make a YQL request. The
        `{query}` placeholder will be replaced with the current autocomplete
        query. This placeholder must appear in the YQL query, or the request
        will fail. An optional `{maxResults}` placeholder may also be provided,
        and will be replaced with the value of the maxResults attribute (or 1000
        if the maxResults attribute is 0 or less).
        </p>

        <p>
        <strong>The `yql` module must be loaded in order for YQL
        sources to work.</strong> If the `yql` module is not
        already loaded, it will be loaded on demand if possible.
        </p>

        <p>
        Example: `'select * from search.suggest where query="{query}"'`
        </p>
      </dd>
    </dl>

    As an alternative to providing a source, you could simply listen for `query`
    events and handle them any way you see fit. Providing a source is optional,
    but will usually be simpler.

    @attribute source
    @type Array|DataSource|Function|Node|Object|String|null
    **/
    source: {
        setter: '_setSource',
        value: null
    },

    /**
    May be used to force a specific source type, overriding the automatic source
    type detection. It should almost never be necessary to do this, but as they
    taught us in the Boy Scouts, one should always be prepared, so it's here if
    you need it. Be warned that if you set this attribute and something breaks,
    it's your own fault.

    Supported `sourceType` values are: 'array', 'datasource', 'function', and
    'object'.

    If the `autocomplete-sources` module is loaded, the following additional
    source types are supported: 'io', 'jsonp', 'select', 'string', 'yql'

    @attribute sourceType
    @type String
    **/
    sourceType: {
        value: null
    },

    /**
    If the `inputNode` specified at instantiation time has a `node-tokeninput`
    plugin attached to it, this attribute will be a reference to the
    `Y.Plugin.TokenInput` instance.

    @attribute tokenInput
    @type Plugin.TokenInput
    @readonly
    **/
    tokenInput: {
        readOnly: true
    },

    /**
    Current value of the input node.

    @attribute value
    @type String
    @default ''
    **/
    value: {
        // Why duplicate this._inputNode.get('value')? Because we need a
        // reliable way to track the source of value changes. We want to perform
        // completion when the user changes the value, but not when we change
        // the value.
        value: ''
    }
};

// This tells Y.Base.create() to copy these static properties to any class
// AutoCompleteBase is mixed into.
AutoCompleteBase._buildCfg = {
    aggregates: ['SOURCE_TYPES'],
    statics   : ['UI_SRC']
};

/**
Mapping of built-in source types to their setter functions. DataSource instances
and DataSource-like objects are handled natively, so are not mapped here.

@property SOURCE_TYPES
@type {Object}
@static
**/
AutoCompleteBase.SOURCE_TYPES = {
    array     : '_createArraySource',
    'function': '_createFunctionSource',
    object    : '_createObjectSource'
};

AutoCompleteBase.UI_SRC = (Y.Widget && Y.Widget.UI_SRC) || 'ui';

Y.AutoCompleteBase = AutoCompleteBase;


}, '3.10.1', {
    "optional": [
        "autocomplete-sources"
    ],
    "requires": [
        "array-extras",
        "base-build",
        "escape",
        "event-valuechange",
        "node-base"
    ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/querystring-stringify/querystring-stringify.js
// ----------------------------------------------------------------------------------------

YUI.add('querystring-stringify', function (Y, NAME) {

/**
 * Provides Y.QueryString.stringify method for converting objects to Query Strings.
 *
 * @module querystring
 * @submodule querystring-stringify
 */

var QueryString = Y.namespace("QueryString"),
    stack = [],
    L = Y.Lang;

/**
 * Provides Y.QueryString.escape method to be able to override default encoding
 * method.  This is important in cases where non-standard delimiters are used, if
 * the delimiters would not normally be handled properly by the builtin
 * (en|de)codeURIComponent functions.
 * Default: encodeURIComponent
 *
 * @method escape
 * @for QueryString
 * @static
 **/
QueryString.escape = encodeURIComponent;

/**
 * <p>Converts an arbitrary value to a Query String representation.</p>
 *
 * <p>Objects with cyclical references will trigger an exception.</p>
 *
 * @method stringify
 * @for QueryString
 * @public
 * @param obj {Variant} any arbitrary value to convert to query string
 * @param cfg {Object} (optional) Configuration object.  The three
 * supported configurations are:
 * <ul><li>sep: When defined, the value will be used as the key-value
 * separator.  The default value is "&".</li>
 * <li>eq: When defined, the value will be used to join the key to
 * the value.  The default value is "=".</li>
 * <li>arrayKey: When set to true, the key of an array will have the
 * '[]' notation appended to the key.  The default value is false.
 * </li></ul>
 * @param name {String} (optional) Name of the current key, for handling children recursively.
 * @static
 */
QueryString.stringify = function (obj, c, name) {
    var begin, end, i, l, n, s,
        sep = c && c.sep ? c.sep : "&",
        eq = c && c.eq ? c.eq : "=",
        aK = c && c.arrayKey ? c.arrayKey : false;

    if (L.isNull(obj) || L.isUndefined(obj) || L.isFunction(obj)) {
        return name ? QueryString.escape(name) + eq : '';
    }

    if (L.isBoolean(obj) || Object.prototype.toString.call(obj) === '[object Boolean]') {
        obj =+ obj;
    }

    if (L.isNumber(obj) || L.isString(obj)) {
        return QueryString.escape(name) + eq + QueryString.escape(obj);
    }

    if (L.isArray(obj)) {
        s = [];
        name = aK ? name + '[]' : name;
        l = obj.length;
        for (i = 0; i < l; i++) {
            s.push( QueryString.stringify(obj[i], c, name) );
        }

        return s.join(sep);
    }
    // now we know it's an object.

    // Check for cyclical references in nested objects
    for (i = stack.length - 1; i >= 0; --i) {
        if (stack[i] === obj) {
            throw new Error("QueryString.stringify. Cyclical reference");
        }
    }

    stack.push(obj);
    s = [];
    begin = name ? name + '[' : '';
    end = name ? ']' : '';
    for (i in obj) {
        if (obj.hasOwnProperty(i)) {
            n = begin + i + end;
            s.push(QueryString.stringify(obj[i], c, n));
        }
    }

    stack.pop();
    s = s.join(sep);
    if (!s && name) {
        return name + "=";
    }

    return s;
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-touch/event-touch.js
// ----------------------------------------------------------------------------------------

YUI.add('event-touch', function (Y, NAME) {

/**
Adds touch event facade normalization properties (touches, changedTouches, targetTouches etc.) to the DOM event facade. Adds
touch events to the DOM events whitelist.

@example
    YUI().use('event-touch', function (Y) {
        Y.one('#myDiv').on('touchstart', function(e) {
            ...
        });
    });
@module event
@submodule event-touch
 */
var SCALE = "scale",
    ROTATION = "rotation",
    IDENTIFIER = "identifier",
    win = Y.config.win,
    GESTURE_MAP = {};

/**
 * Adds touch event facade normalization properties to the DOM event facade
 *
 * @method _touch
 * @for DOMEventFacade
 * @private
 * @param ev {Event} the DOM event
 * @param currentTarget {HTMLElement} the element the listener was attached to
 * @param wrapper {Event.Custom} the custom event wrapper for this DOM event
 */
Y.DOMEventFacade.prototype._touch = function(e, currentTarget, wrapper) {

    var i,l, etCached, et,touchCache;


    if (e.touches) {

        /**
         * Array of individual touch events for touch points that are still in
         * contact with the touch surface.
         *
         * @property touches
         * @type {DOMEventFacade[]}
         */
        this.touches = [];
        touchCache = {};

        for (i = 0, l = e.touches.length; i < l; ++i) {
            et = e.touches[i];
            touchCache[Y.stamp(et)] = this.touches[i] = new Y.DOMEventFacade(et, currentTarget, wrapper);
        }
    }

    if (e.targetTouches) {

        /**
         * Array of individual touch events still in contact with the touch
         * surface and whose `touchstart` event occurred inside the same taregt
         * element as the current target element.
         *
         * @property targetTouches
         * @type {DOMEventFacade[]}
         */
        this.targetTouches = [];

        for (i = 0, l = e.targetTouches.length; i < l; ++i) {
            et = e.targetTouches[i];
            etCached = touchCache && touchCache[Y.stamp(et, true)];

            this.targetTouches[i] = etCached || new Y.DOMEventFacade(et, currentTarget, wrapper);

        }
    }

    if (e.changedTouches) {

        /**
        An array of event-specific touch events.

        For `touchstart`, the touch points that became active with the current
        event.

        For `touchmove`, the touch points that have changed since the last
        event.

        For `touchend`, the touch points that have been removed from the touch
        surface.

        @property changedTouches
        @type {DOMEventFacade[]}
        **/
        this.changedTouches = [];

        for (i = 0, l = e.changedTouches.length; i < l; ++i) {
            et = e.changedTouches[i];
            etCached = touchCache && touchCache[Y.stamp(et, true)];

            this.changedTouches[i] = etCached || new Y.DOMEventFacade(et, currentTarget, wrapper);

        }
    }

    if (SCALE in e) {
        this[SCALE] = e[SCALE];
    }

    if (ROTATION in e) {
        this[ROTATION] = e[ROTATION];
    }

    if (IDENTIFIER in e) {
        this[IDENTIFIER] = e[IDENTIFIER];
    }
};

//Adding MSPointer events to whitelisted DOM Events. MSPointer event payloads
//have the same properties as mouse events.
if (Y.Node.DOM_EVENTS) {
    Y.mix(Y.Node.DOM_EVENTS, {
        touchstart:1,
        touchmove:1,
        touchend:1,
        touchcancel:1,
        gesturestart:1,
        gesturechange:1,
        gestureend:1,
        MSPointerDown:1,
        MSPointerUp:1,
        MSPointerMove:1
    });
}

//Add properties to Y.EVENT.GESTURE_MAP based on feature detection.
if ((win && ("ontouchstart" in win)) && !(Y.UA.chrome && Y.UA.chrome < 6)) {
    GESTURE_MAP.start = ["touchstart", "mousedown"];
    GESTURE_MAP.end = ["touchend", "mouseup"];
    GESTURE_MAP.move = ["touchmove", "mousemove"];
    GESTURE_MAP.cancel = ["touchcancel", "mousecancel"];
}



else if (win && ("msPointerEnabled" in win.navigator)) {
    GESTURE_MAP.start = "MSPointerDown";
    GESTURE_MAP.end = "MSPointerUp";
    GESTURE_MAP.move = "MSPointerMove";
    GESTURE_MAP.cancel = "MSPointerCancel";
}

else {
    GESTURE_MAP.start = "mousedown";
    GESTURE_MAP.end = "mouseup";
    GESTURE_MAP.move = "mousemove";
    GESTURE_MAP.cancel = "mousecancel";
}

/**
 * A object literal with keys "start", "end", and "move". The value for each key is a
 * string representing the event for that environment. For touch environments, the respective
 * values are "touchstart", "touchend" and "touchmove". Mouse and MSPointer environments are also
 * supported via feature detection.
 *
 * @property _GESTURE_MAP
 * @type Object
 * @static
 */
Y.Event._GESTURE_MAP = GESTURE_MAP;


}, '3.10.1', {"requires": ["node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/gesture-simulate/gesture-simulate.js
// ----------------------------------------------------------------------------------------

YUI.add('gesture-simulate', function (Y, NAME) {

/**
 * Simulate high-level user gestures by generating a set of native DOM events.
 *
 * @module gesture-simulate
 * @requires event-simulate, async-queue, node-screen
 */

var NAME = "gesture-simulate",

    // phantomjs check may be temporary, until we determine if it really support touch all the way through, like it claims to (http://code.google.com/p/phantomjs/issues/detail?id=375)
    SUPPORTS_TOUCH = ((Y.config.win && ("ontouchstart" in Y.config.win)) && !(Y.UA.phantomjs) && !(Y.UA.chrome && Y.UA.chrome < 6)),

    gestureNames = {
        tap: 1,
        doubletap: 1,
        press: 1,
        move: 1,
        flick: 1,
        pinch: 1,
        rotate: 1
    },

    touchEvents = {
        touchstart: 1,
        touchmove: 1,
        touchend: 1,
        touchcancel: 1
    },

    document = Y.config.doc,
    emptyTouchList,

    EVENT_INTERVAL = 20,        // 20ms
    START_PAGEX,                // will be adjusted to the node element center
    START_PAGEY,                // will be adjusted to the node element center

    // defaults that user can override.
    DEFAULTS = {
        // tap gestures
        HOLD_TAP: 10,           // 10ms
        DELAY_TAP: 10,          // 10ms

        // press gesture
        HOLD_PRESS: 3000,       // 3sec
        MIN_HOLD_PRESS: 1000,   // 1sec
        MAX_HOLD_PRESS: 60000,  // 1min

        // move gesture
        DISTANCE_MOVE: 200,     // 200 pixels
        DURATION_MOVE: 1000,    // 1sec
        MAX_DURATION_MOVE: 5000,// 5sec

        // flick gesture
        MIN_VELOCITY_FLICK: 1.3,
        DISTANCE_FLICK: 200,     // 200 pixels
        DURATION_FLICK: 1000,    // 1sec
        MAX_DURATION_FLICK: 5000,// 5sec

        // pinch/rotation
        DURATION_PINCH: 1000     // 1sec
    },

    TOUCH_START = 'touchstart',
    TOUCH_MOVE = 'touchmove',
    TOUCH_END = 'touchend',

    GESTURE_START = 'gesturestart',
    GESTURE_CHANGE = 'gesturechange',
    GESTURE_END = 'gestureend',

    MOUSE_UP    = 'mouseup',
    MOUSE_MOVE  = 'mousemove',
    MOUSE_DOWN  = 'mousedown',
    MOUSE_CLICK = 'click',
    MOUSE_DBLCLICK = 'dblclick',

    X_AXIS = 'x',
    Y_AXIS = 'y';


function Simulations(node) {
    if(!node) {
        Y.error(NAME+': invalid target node');
    }
    this.node = node;
    this.target = Y.Node.getDOMNode(node);

    var startXY = this.node.getXY(),
        dims = this._getDims();

    START_PAGEX = startXY[0] + (dims[0])/2;
    START_PAGEY = startXY[1] + (dims[1])/2;
}

Simulations.prototype = {

    /**
     * Helper method to convert a degree to a radian.
     *
     * @method _toRadian
     * @private
     * @param {Number} deg A degree to be converted to a radian.
     * @return {Number} The degree in radian.
     */
    _toRadian: function(deg) {
        return deg * (Math.PI/180);
    },

    /**
     * Helper method to get height/width while accounting for
     * rotation/scale transforms where possible by using the
     * bounding client rectangle height/width instead of the
     * offsetWidth/Height which region uses.
     * @method _getDims
     * @private
     * @return {Array} Array with [height, width]
     */
    _getDims : function() {
        var region,
            width,
            height;

        // Ideally, this should be in DOM somewhere.
        if (this.target.getBoundingClientRect) {
            region = this.target.getBoundingClientRect();

            if ("height" in region) {
                height = region.height;
            } else {
                // IE7,8 has getBCR, but no height.
                height = Math.abs(region.bottom - region.top);
            }

            if ("width" in region) {
                width = region.width;
            } else {
                // IE7,8 has getBCR, but no width.
                width = Math.abs(region.right - region.left);
            }
        } else {
            region = this.node.get("region");
            width = region.width;
            height = region.height;
        }

        return [width, height];
    },

    /**
     * Helper method to convert a point relative to the node element into
     * the point in the page coordination.
     *
     * @method _calculateDefaultPoint
     * @private
     * @param {Array} point A point relative to the node element.
     * @return {Array} The same point in the page coordination.
     */
    _calculateDefaultPoint: function(point) {

        var height;

        if(!Y.Lang.isArray(point) || point.length === 0) {
            point = [START_PAGEX, START_PAGEY];
        } else {
            if(point.length == 1) {
                height = this._getDims[1];
                point[1] = height/2;
            }
            // convert to page(viewport) coordination
            point[0] = this.node.getX() + point[0];
            point[1] = this.node.getY() + point[1];
        }

        return point;
    },

    /**
     * The "rotate" and "pinch" methods are essencially same with the exact same
     * arguments. Only difference is the required parameters. The rotate method
     * requires "rotation" parameter while the pinch method requires "startRadius"
     * and "endRadius" parameters.
     *
     * @method rotate
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Array} center A center point where the pinch gesture of two fingers
     *      should happen. It is relative to the top left corner of the target
     *      node element.
     * @param {Number} startRadius A radius of start circle where 2 fingers are
     *      on when the gesture starts. This is optional. The default is a fourth of
     *      either target node width or height whichever is smaller.
     * @param {Number} endRadius A radius of end circle where 2 fingers will be on when
     *      the pinch or spread gestures are completed. This is optional.
     *      The default is a fourth of either target node width or height whichever is less.
     * @param {Number} duration A duration of the gesture in millisecond.
     * @param {Number} start A start angle(0 degree at 12 o'clock) where the
     *      gesture should start. Default is 0.
     * @param {Number} rotation A rotation in degree. It is required.
     */
    rotate: function(cb, center, startRadius, endRadius, duration, start, rotation) {
        var radius,
            r1 = startRadius,   // optional
            r2 = endRadius;     // optional

        if(!Y.Lang.isNumber(r1) || !Y.Lang.isNumber(r2) || r1<0 || r2<0) {
            radius = (this.target.offsetWidth < this.target.offsetHeight)?
                this.target.offsetWidth/4 : this.target.offsetHeight/4;
            r1 = radius;
            r2 = radius;
        }

        // required
        if(!Y.Lang.isNumber(rotation)) {
            Y.error(NAME+'Invalid rotation detected.');
        }

        this.pinch(cb, center, r1, r2, duration, start, rotation);
    },

    /**
     * The "rotate" and "pinch" methods are essencially same with the exact same
     * arguments. Only difference is the required parameters. The rotate method
     * requires "rotation" parameter while the pinch method requires "startRadius"
     * and "endRadius" parameters.
     *
     * The "pinch" gesture can simulate various 2 finger gestures such as pinch,
     * spread and/or rotation. The "startRadius" and "endRadius" are required.
     * If endRadius is larger than startRadius, it becomes a spread gesture
     * otherwise a pinch gesture.
     *
     * @method pinch
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Array} center A center point where the pinch gesture of two fingers
     *      should happen. It is relative to the top left corner of the target
     *      node element.
     * @param {Number} startRadius A radius of start circle where 2 fingers are
     *      on when the gesture starts. This paramenter is required.
     * @param {Number} endRadius A radius of end circle where 2 fingers will be on when
     *      the pinch or spread gestures are completed. This parameter is required.
     * @param {Number} duration A duration of the gesture in millisecond.
     * @param {Number} start A start angle(0 degree at 12 o'clock) where the
     *      gesture should start. Default is 0.
     * @param {Number} rotation If rotation is desired during the pinch or
     *      spread gestures, this parameter can be used. Default is 0 degree.
     */
    pinch: function(cb, center, startRadius, endRadius, duration, start, rotation) {
        var eventQueue,
            i,
            interval = EVENT_INTERVAL,
            touches,
            id = 0,
            r1 = startRadius,   // required
            r2 = endRadius,     // required
            radiusPerStep,
            centerX, centerY,
            startScale, endScale, scalePerStep,
            startRot, endRot, rotPerStep,
            path1 = {start: [], end: []}, // paths for 1st and 2nd fingers.
            path2 = {start: [], end: []},
            steps,
            touchMove;

        center = this._calculateDefaultPoint(center);

        if(!Y.Lang.isNumber(r1) || !Y.Lang.isNumber(r2) || r1<0 || r2<0) {
            Y.error(NAME+'Invalid startRadius and endRadius detected.');
        }

        if(!Y.Lang.isNumber(duration) || duration <= 0) {
            duration = DEFAULTS.DURATION_PINCH;
        }

        if(!Y.Lang.isNumber(start)) {
            start = 0.0;
        } else {
            start = start%360;
            while(start < 0) {
                start += 360;
            }
        }

        if(!Y.Lang.isNumber(rotation)) {
            rotation = 0.0;
        }

        Y.AsyncQueue.defaults.timeout = interval;
        eventQueue = new Y.AsyncQueue();

        // range determination
        centerX = center[0];
        centerY = center[1];

        startRot = start;
        endRot = start + rotation;

        // 1st finger path
        path1.start = [
            centerX + r1*Math.sin(this._toRadian(startRot)),
            centerY - r1*Math.cos(this._toRadian(startRot))
        ];
        path1.end   = [
            centerX + r2*Math.sin(this._toRadian(endRot)),
            centerY - r2*Math.cos(this._toRadian(endRot))
        ];

        // 2nd finger path
        path2.start = [
            centerX - r1*Math.sin(this._toRadian(startRot)),
            centerY + r1*Math.cos(this._toRadian(startRot))
        ];
        path2.end   = [
            centerX - r2*Math.sin(this._toRadian(endRot)),
            centerY + r2*Math.cos(this._toRadian(endRot))
        ];

        startScale = 1.0;
        endScale = endRadius/startRadius;

        // touch/gesture start
        eventQueue.add({
            fn: function() {
                var coord1, coord2, coord, touches;

                // coordinate for each touch object.
                coord1 = {
                    pageX: path1.start[0],
                    pageY: path1.start[1],
                    clientX: path1.start[0],
                    clientY: path1.start[1]
                };
                coord2 = {
                    pageX: path2.start[0],
                    pageY: path2.start[1],
                    clientX: path2.start[0],
                    clientY: path2.start[1]
                };
                touches = this._createTouchList([Y.merge({
                    identifier: (id++)
                }, coord1), Y.merge({
                    identifier: (id++)
                }, coord2)]);

                // coordinate for top level event
                coord = {
                    pageX: (path1.start[0] + path2.start[0])/2,
                    pageY: (path1.start[0] + path2.start[1])/2,
                    clientX: (path1.start[0] + path2.start[0])/2,
                    clientY: (path1.start[0] + path2.start[1])/2
                };

                this._simulateEvent(this.target, TOUCH_START, Y.merge({
                    touches: touches,
                    targetTouches: touches,
                    changedTouches: touches,
                    scale: startScale,
                    rotation: startRot
                }, coord));

                if(Y.UA.ios >= 2.0) {
                    /* gesture starts when the 2nd finger touch starts.
                    * The implementation will fire 1 touch start event for both fingers,
                    * simulating 2 fingers touched on the screen at the same time.
                    */
                    this._simulateEvent(this.target, GESTURE_START, Y.merge({
                        scale: startScale,
                        rotation: startRot
                    }, coord));
                }
            },
            timeout: 0,
            context: this
        });

        // gesture change
        steps = Math.floor(duration/interval);
        radiusPerStep = (r2 - r1)/steps;
        scalePerStep = (endScale - startScale)/steps;
        rotPerStep = (endRot - startRot)/steps;

        touchMove = function(step) {
            var radius = r1 + (radiusPerStep)*step,
                px1 = centerX + radius*Math.sin(this._toRadian(startRot + rotPerStep*step)),
                py1 = centerY - radius*Math.cos(this._toRadian(startRot + rotPerStep*step)),
                px2 = centerX - radius*Math.sin(this._toRadian(startRot + rotPerStep*step)),
                py2 = centerY + radius*Math.cos(this._toRadian(startRot + rotPerStep*step)),
                px = (px1+px2)/2,
                py = (py1+py2)/2,
                coord1, coord2, coord, touches;

            // coordinate for each touch object.
            coord1 = {
                pageX: px1,
                pageY: py1,
                clientX: px1,
                clientY: py1
            };
            coord2 = {
                pageX: px2,
                pageY: py2,
                clientX: px2,
                clientY: py2
            };
            touches = this._createTouchList([Y.merge({
                identifier: (id++)
            }, coord1), Y.merge({
                identifier: (id++)
            }, coord2)]);

            // coordinate for top level event
            coord = {
                pageX: px,
                pageY: py,
                clientX: px,
                clientY: py
            };

            this._simulateEvent(this.target, TOUCH_MOVE, Y.merge({
                touches: touches,
                targetTouches: touches,
                changedTouches: touches,
                scale: startScale + scalePerStep*step,
                rotation: startRot + rotPerStep*step
            }, coord));

            if(Y.UA.ios >= 2.0) {
                this._simulateEvent(this.target, GESTURE_CHANGE, Y.merge({
                    scale: startScale + scalePerStep*step,
                    rotation: startRot + rotPerStep*step
                }, coord));
            }
        };

        for (i=0; i < steps; i++) {
            eventQueue.add({
                fn: touchMove,
                args: [i],
                context: this
            });
        }

        // gesture end
        eventQueue.add({
            fn: function() {
                var emptyTouchList = this._getEmptyTouchList(),
                    coord1, coord2, coord, touches;

                // coordinate for each touch object.
                coord1 = {
                    pageX: path1.end[0],
                    pageY: path1.end[1],
                    clientX: path1.end[0],
                    clientY: path1.end[1]
                };
                coord2 = {
                    pageX: path2.end[0],
                    pageY: path2.end[1],
                    clientX: path2.end[0],
                    clientY: path2.end[1]
                };
                touches = this._createTouchList([Y.merge({
                    identifier: (id++)
                }, coord1), Y.merge({
                    identifier: (id++)
                }, coord2)]);

                // coordinate for top level event
                coord = {
                    pageX: (path1.end[0] + path2.end[0])/2,
                    pageY: (path1.end[0] + path2.end[1])/2,
                    clientX: (path1.end[0] + path2.end[0])/2,
                    clientY: (path1.end[0] + path2.end[1])/2
                };

                if(Y.UA.ios >= 2.0) {
                    this._simulateEvent(this.target, GESTURE_END, Y.merge({
                        scale: endScale,
                        rotation: endRot
                    }, coord));
                }

                this._simulateEvent(this.target, TOUCH_END, Y.merge({
                    touches: emptyTouchList,
                    targetTouches: emptyTouchList,
                    changedTouches: touches,
                    scale: endScale,
                    rotation: endRot
                }, coord));
            },
            context: this
        });

        if(cb && Y.Lang.isFunction(cb)) {
            eventQueue.add({
                fn: cb,

                // by default, the callback runs the node context where
                // simulateGesture method is called.
                context: this.node

                //TODO: Use args to pass error object as 1st param if there is an error.
                //args:
            });
        }

        eventQueue.run();
    },

    /**
     * The "tap" gesture can be used for various single touch point gestures
     * such as single tap, N number of taps, long press. The default is a single
     * tap.
     *
     * @method tap
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Array} point A point(relative to the top left corner of the
     *      target node element) where the tap gesture should start. The default
     *      is the center of the taget node.
     * @param {Number} times The number of taps. Default is 1.
     * @param {Number} hold The hold time in milliseconds between "touchstart" and
     *      "touchend" event generation. Default is 10ms.
     * @param {Number} delay The time gap in millisecond between taps if this
     *      gesture has more than 1 tap. Default is 10ms.
     */
    tap: function(cb, point, times, hold, delay) {
        var eventQueue = new Y.AsyncQueue(),
            emptyTouchList = this._getEmptyTouchList(),
            touches,
            coord,
            i,
            touchStart,
            touchEnd;

        point = this._calculateDefaultPoint(point);

        if(!Y.Lang.isNumber(times) || times < 1) {
            times = 1;
        }

        if(!Y.Lang.isNumber(hold)) {
            hold = DEFAULTS.HOLD_TAP;
        }

        if(!Y.Lang.isNumber(delay)) {
            delay = DEFAULTS.DELAY_TAP;
        }

        coord = {
            pageX: point[0],
            pageY: point[1],
            clientX: point[0],
            clientY: point[1]
        };

        touches = this._createTouchList([Y.merge({identifier: 0}, coord)]);

        touchStart = function() {
            this._simulateEvent(this.target, TOUCH_START, Y.merge({
                touches: touches,
                targetTouches: touches,
                changedTouches: touches
            }, coord));
        };

        touchEnd = function() {
            this._simulateEvent(this.target, TOUCH_END, Y.merge({
                touches: emptyTouchList,
                targetTouches: emptyTouchList,
                changedTouches: touches
            }, coord));
        };

        for (i=0; i < times; i++) {
            eventQueue.add({
                fn: touchStart,
                context: this,
                timeout: (i === 0)? 0 : delay
            });

            eventQueue.add({
                fn: touchEnd,
                context: this,
                timeout: hold
            });
        }

        if(times > 1 && !SUPPORTS_TOUCH) {
            eventQueue.add({
                fn: function() {
                    this._simulateEvent(this.target, MOUSE_DBLCLICK, coord);
                },
                context: this
            });
        }

        if(cb && Y.Lang.isFunction(cb)) {
            eventQueue.add({
                fn: cb,

                // by default, the callback runs the node context where
                // simulateGesture method is called.
                context: this.node

                //TODO: Use args to pass error object as 1st param if there is an error.
                //args:
            });
        }

        eventQueue.run();
    },

    /**
     * The "flick" gesture is a specialized "move" that has some velocity
     * and the movement always runs either x or y axis. The velocity is calculated
     * with "distance" and "duration" arguments. If the calculated velocity is
     * below than the minimum velocity, the given duration will be ignored and
     * new duration will be created to make a valid flick gesture.
     *
     * @method flick
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Array} point A point(relative to the top left corner of the
     *      target node element) where the flick gesture should start. The default
     *      is the center of the taget node.
     * @param {String} axis Either "x" or "y".
     * @param {Number} distance A distance in pixels to flick.
     * @param {Number} duration A duration of the gesture in millisecond.
     *
     */
    flick: function(cb, point, axis, distance, duration) {
        var path;

        point = this._calculateDefaultPoint(point);

        if(!Y.Lang.isString(axis)) {
            axis = X_AXIS;
        } else {
            axis = axis.toLowerCase();
            if(axis !== X_AXIS && axis !== Y_AXIS) {
                Y.error(NAME+'(flick): Only x or y axis allowed');
            }
        }

        if(!Y.Lang.isNumber(distance)) {
            distance = DEFAULTS.DISTANCE_FLICK;
        }

        if(!Y.Lang.isNumber(duration)){
            duration = DEFAULTS.DURATION_FLICK; // ms
        } else {
            if(duration > DEFAULTS.MAX_DURATION_FLICK) {
                duration = DEFAULTS.MAX_DURATION_FLICK;
            }
        }

        /*
         * Check if too slow for a flick.
         * Adjust duration if the calculated velocity is less than
         * the minimum velcocity to be claimed as a flick.
         */
        if(Math.abs(distance)/duration < DEFAULTS.MIN_VELOCITY_FLICK) {
            duration = Math.abs(distance)/DEFAULTS.MIN_VELOCITY_FLICK;
        }

        path = {
            start: Y.clone(point),
            end: [
                (axis === X_AXIS) ? point[0]+distance : point[0],
                (axis === Y_AXIS) ? point[1]+distance : point[1]
            ]
        };

        this._move(cb, path, duration);
    },

    /**
     * The "move" gesture simulate the movement of any direction between
     * the straight line of start and end point for the given duration.
     * The path argument is an object with "point", "xdist" and "ydist" properties.
     * The "point" property is an array with x and y coordinations(relative to the
     * top left corner of the target node element) while "xdist" and "ydist"
     * properties are used for the distance along the x and y axis. A negative
     * distance number can be used to drag either left or up direction.
     *
     * If no arguments are given, it will simulate the default move, which
     * is moving 200 pixels from the center of the element to the positive X-axis
     * direction for 1 sec.
     *
     * @method move
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Object} path An object with "point", "xdist" and "ydist".
     * @param {Number} duration A duration of the gesture in millisecond.
     */
    move: function(cb, path, duration) {
        var convertedPath;

        if(!Y.Lang.isObject(path)) {
            path = {
                point: this._calculateDefaultPoint([]),
                xdist: DEFAULTS.DISTANCE_MOVE,
                ydist: 0
            };
        } else {
            // convert to the page coordination
            if(!Y.Lang.isArray(path.point)) {
                path.point = this._calculateDefaultPoint([]);
            } else {
                path.point = this._calculateDefaultPoint(path.point);
            }

            if(!Y.Lang.isNumber(path.xdist)) {
                path.xdist = DEFAULTS.DISTANCE_MOVE;
            }

            if(!Y.Lang.isNumber(path.ydist)) {
                path.ydist = 0;
            }
        }

        if(!Y.Lang.isNumber(duration)){
            duration = DEFAULTS.DURATION_MOVE; // ms
        } else {
            if(duration > DEFAULTS.MAX_DURATION_MOVE) {
                duration = DEFAULTS.MAX_DURATION_MOVE;
            }
        }

        convertedPath = {
            start: Y.clone(path.point),
            end: [path.point[0]+path.xdist, path.point[1]+path.ydist]
        };

        this._move(cb, convertedPath, duration);
    },

    /**
     * A base method on top of "move" and "flick" methods. The method takes
     * the path with start/end properties and duration to generate a set of
     * touch events for the movement gesture.
     *
     * @method _move
     * @private
     * @param {Function} cb The callback to execute when the gesture simulation
     *      is completed.
     * @param {Object} path An object with "start" and "end" properties. Each
     *      property should be an array with x and y coordination (e.g. start: [100, 50])
     * @param {Number} duration A duration of the gesture in millisecond.
     */
    _move: function(cb, path, duration) {
        var eventQueue,
            i,
            interval = EVENT_INTERVAL,
            steps, stepX, stepY,
            id = 0,
            touchMove;

        if(!Y.Lang.isNumber(duration)){
            duration = DEFAULTS.DURATION_MOVE; // ms
        } else {
            if(duration > DEFAULTS.MAX_DURATION_MOVE) {
                duration = DEFAULTS.MAX_DURATION_MOVE;
            }
        }

        if(!Y.Lang.isObject(path)) {
            path = {
                start: [
                    START_PAGEX,
                    START_PAGEY
                ],
                end: [
                    START_PAGEX + DEFAULTS.DISTANCE_MOVE,
                    START_PAGEY
                ]
            };
        } else {
            if(!Y.Lang.isArray(path.start)) {
                path.start = [
                    START_PAGEX,
                    START_PAGEY
                ];
            }
            if(!Y.Lang.isArray(path.end)) {
                path.end = [
                    START_PAGEX + DEFAULTS.DISTANCE_MOVE,
                    START_PAGEY
                ];
            }
        }

        Y.AsyncQueue.defaults.timeout = interval;
        eventQueue = new Y.AsyncQueue();

        // start
        eventQueue.add({
            fn: function() {
                var coord = {
                        pageX: path.start[0],
                        pageY: path.start[1],
                        clientX: path.start[0],
                        clientY: path.start[1]
                    },
                    touches = this._createTouchList([
                        Y.merge({identifier: (id++)}, coord)
                    ]);

                this._simulateEvent(this.target, TOUCH_START, Y.merge({
                    touches: touches,
                    targetTouches: touches,
                    changedTouches: touches
                }, coord));
            },
            timeout: 0,
            context: this
        });

        // move
        steps = Math.floor(duration/interval);
        stepX = (path.end[0] - path.start[0])/steps;
        stepY = (path.end[1] - path.start[1])/steps;

        touchMove = function(step) {
            var px = path.start[0]+(stepX * step),
                py = path.start[1]+(stepY * step),
                coord = {
                    pageX: px,
                    pageY: py,
                    clientX: px,
                    clientY: py
                },
                touches = this._createTouchList([
                    Y.merge({identifier: (id++)}, coord)
                ]);

            this._simulateEvent(this.target, TOUCH_MOVE, Y.merge({
                touches: touches,
                targetTouches: touches,
                changedTouches: touches
            }, coord));
        };

        for (i=0; i < steps; i++) {
            eventQueue.add({
                fn: touchMove,
                args: [i],
                context: this
            });
        }

        // last move
        eventQueue.add({
            fn: function() {
                var coord = {
                        pageX: path.end[0],
                        pageY: path.end[1],
                        clientX: path.end[0],
                        clientY: path.end[1]
                    },
                    touches = this._createTouchList([
                        Y.merge({identifier: id}, coord)
                    ]);

                this._simulateEvent(this.target, TOUCH_MOVE, Y.merge({
                    touches: touches,
                    targetTouches: touches,
                    changedTouches: touches
                }, coord));
            },
            timeout: 0,
            context: this
        });

        // end
        eventQueue.add({
            fn: function() {
                var coord = {
                    pageX: path.end[0],
                    pageY: path.end[1],
                    clientX: path.end[0],
                    clientY: path.end[1]
                },
                emptyTouchList = this._getEmptyTouchList(),
                touches = this._createTouchList([
                    Y.merge({identifier: id}, coord)
                ]);

                this._simulateEvent(this.target, TOUCH_END, Y.merge({
                    touches: emptyTouchList,
                    targetTouches: emptyTouchList,
                    changedTouches: touches
                }, coord));
            },
            context: this
        });

        if(cb && Y.Lang.isFunction(cb)) {
            eventQueue.add({
                fn: cb,

                // by default, the callback runs the node context where
                // simulateGesture method is called.
                context: this.node

                //TODO: Use args to pass error object as 1st param if there is an error.
                //args:
            });
        }

        eventQueue.run();
    },

    /**
     * Helper method to return a singleton instance of empty touch list.
     *
     * @method _getEmptyTouchList
     * @private
     * @return {TouchList | Array} An empty touch list object.
     */
    _getEmptyTouchList: function() {
        if(!emptyTouchList) {
            emptyTouchList = this._createTouchList([]);
        }

        return emptyTouchList;
    },

    /**
     * Helper method to convert an array with touch points to TouchList object as
     * defined in http://www.w3.org/TR/touch-events/
     *
     * @method _createTouchList
     * @private
     * @param {Array} touchPoints
     * @return {TouchList | Array} If underlaying platform support creating touch list
     *      a TouchList object will be returned otherwise a fake Array object
     *      will be returned.
     */
    _createTouchList: function(touchPoints) {
        /*
        * Android 4.0.3 emulator:
        * Native touch api supported starting in version 4.0 (Ice Cream Sandwich).
        * However the support seems limited. In Android 4.0.3 emulator, I got
        * "TouchList is not defined".
        */
        var touches = [],
            touchList,
            self = this;

        if(!!touchPoints && Y.Lang.isArray(touchPoints)) {
            if(Y.UA.android && Y.UA.android >= 4.0 || Y.UA.ios && Y.UA.ios >= 2.0) {
                Y.each(touchPoints, function(point) {
                    if(!point.identifier) {point.identifier = 0;}
                    if(!point.pageX) {point.pageX = 0;}
                    if(!point.pageY) {point.pageY = 0;}
                    if(!point.screenX) {point.screenX = 0;}
                    if(!point.screenY) {point.screenY = 0;}

                    touches.push(document.createTouch(Y.config.win,
                        self.target,
                        point.identifier,
                        point.pageX, point.pageY,
                        point.screenX, point.screenY));
                });

                touchList = document.createTouchList.apply(document, touches);
            } else if(Y.UA.ios && Y.UA.ios < 2.0) {
                Y.error(NAME+': No touch event simulation framework present.');
            } else {
                // this will inclide android(Y.UA.android && Y.UA.android < 4.0)
                // and desktops among all others.

                /*
                 * Touch APIs are broken in androids older than 4.0. We will use
                 * simulated touch apis for these versions.
                 */
                touchList = [];
                Y.each(touchPoints, function(point) {
                    if(!point.identifier) {point.identifier = 0;}
                    if(!point.clientX)  {point.clientX = 0;}
                    if(!point.clientY)  {point.clientY = 0;}
                    if(!point.pageX)    {point.pageX = 0;}
                    if(!point.pageY)    {point.pageY = 0;}
                    if(!point.screenX)  {point.screenX = 0;}
                    if(!point.screenY)  {point.screenY = 0;}

                    touchList.push({
                        target: self.target,
                        identifier: point.identifier,
                        clientX: point.clientX,
                        clientY: point.clientY,
                        pageX: point.pageX,
                        pageY: point.pageY,
                        screenX: point.screenX,
                        screenY: point.screenY
                    });
                });

                touchList.item = function(i) {
                    return touchList[i];
                };
            }
        } else {
            Y.error(NAME+': Invalid touchPoints passed');
        }

        return touchList;
    },

    /**
     * @method _simulateEvent
     * @private
     * @param {HTMLElement} target The DOM element that's the target of the event.
     * @param {String} type The type of event or name of the supported gesture to simulate
     *      (i.e., "click", "doubletap", "flick").
     * @param {Object} options (Optional) Extra options to copy onto the event object.
     *      For gestures, options are used to refine the gesture behavior.
     * @return {void}
     */
    _simulateEvent: function(target, type, options) {
        var touches;

        if (touchEvents[type]) {
            if(SUPPORTS_TOUCH) {
                Y.Event.simulate(target, type, options);
            } else {
                // simulate using mouse events if touch is not applicable on this platform.
                // but only single touch event can be simulated.
                if(this._isSingleTouch(options.touches, options.targetTouches, options.changedTouches)) {
                    type = {
                        touchstart: MOUSE_DOWN,
                        touchmove: MOUSE_MOVE,
                        touchend: MOUSE_UP
                    }[type];

                    options.button = 0;
                    options.relatedTarget = null; // since we are not using mouseover event.

                    // touchend has none in options.touches.
                    touches = (type === MOUSE_UP)? options.changedTouches : options.touches;

                    options = Y.mix(options, {
                        screenX: touches.item(0).screenX,
                        screenY: touches.item(0).screenY,
                        clientX: touches.item(0).clientX,
                        clientY: touches.item(0).clientY
                    }, true);

                    Y.Event.simulate(target, type, options);

                    if(type == MOUSE_UP) {
                        Y.Event.simulate(target, MOUSE_CLICK, options);
                    }
                } else {
                    Y.error("_simulateEvent(): Event '" + type + "' has multi touch objects that can't be simulated in your platform.");
                }
            }
        } else {
            // pass thru for all non touch events
            Y.Event.simulate(target, type, options);
        }
    },

    /**
     * Helper method to check the single touch.
     * @method _isSingleTouch
     * @private
     * @param {TouchList} touches
     * @param {TouchList} targetTouches
     * @param {TouchList} changedTouches
     */
    _isSingleTouch: function(touches, targetTouches, changedTouches) {
        return (touches && (touches.length <= 1)) &&
            (targetTouches && (targetTouches.length <= 1)) &&
            (changedTouches && (changedTouches.length <= 1));
    }
};

/*
 * A gesture simulation class.
 */
Y.GestureSimulation = Simulations;

/*
 * Various simulation default behavior properties. If user override
 * Y.GestureSimulation.defaults, overriden values will be used and this
 * should be done before the gesture simulation.
 */
Y.GestureSimulation.defaults = DEFAULTS;

/*
 * The high level gesture names that YUI knows how to simulate.
 */
Y.GestureSimulation.GESTURES = gestureNames;

/**
 * Simulates the higher user level gesture of the given name on a target.
 * This method generates a set of low level touch events(Apple specific gesture
 * events as well for the iOS platforms) asynchronously. Note that gesture
 * simulation is relying on `Y.Event.simulate()` method to generate
 * the touch events under the hood. The `Y.Event.simulate()` method
 * itself is a synchronous method.
 *
 * Users are suggested to use `Node.simulateGesture()` method which
 * basically calls this method internally. Supported gestures are `tap`,
 * `doubletap`, `press`, `move`, `flick`, `pinch` and `rotate`.
 *
 * The `pinch` gesture is used to simulate the pinching and spreading of two
 * fingers. During a pinch simulation, rotation is also possible. Essentially
 * `pinch` and `rotate` simulations share the same base implementation to allow
 * both pinching and rotation at the same time. The only difference is `pinch`
 * requires `start` and `end` option properties while `rotate` requires `rotation`
 * option property.
 *
 * The `pinch` and `rotate` gestures can be described as placing 2 fingers along a
 * circle. Pinching and spreading can be described by start and end circles while
 * rotation occurs on a single circle. If the radius of the start circle is greater
 * than the end circle, the gesture becomes a pinch, otherwise it is a spread spread.
 *
 * @example
 *
 *     var node = Y.one("#target");
 *
 *     // double tap example
 *     node.simulateGesture("doubletap", function() {
 *         // my callback function
 *     });
 *
 *     // flick example from the center of the node, move 50 pixels down for 50ms)
 *     node.simulateGesture("flick", {
 *         axis: y,
 *         distance: -100
 *         duration: 50
 *     }, function() {
 *         // my callback function
 *     });
 *
 *     // simulate rotating a node 75 degrees counter-clockwise
 *     node.simulateGesture("rotate", {
 *         rotation: -75
 *     });
 *
 *     // simulate a pinch and a rotation at the same time.
 *     // fingers start on a circle of radius 100 px, placed at top/bottom
 *     // fingers end on a circle of radius 50px, placed at right/left
 *     node.simulateGesture("pinch", {
 *         r1: 100,
 *         r2: 50,
 *         start: 0
 *         rotation: 90
 *     });
 *
 * @method simulateGesture
 * @param {HTMLElement|Node} node The YUI node or HTML element that's the target
 *      of the event.
 * @param {String} name The name of the supported gesture to simulate. The
 *      supported gesture name is one of "tap", "doubletap", "press", "move",
 *      "flick", "pinch" and "rotate".
 * @param {Object} [options] Extra options used to define the gesture behavior:
 *
 *      Valid options properties for the `tap` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the tap should be simulated. Default is the center of the node
 *        element.
 *      @param {Number} [options.hold=10] (Optional) The hold time in milliseconds.
 *        This is the time between `touchstart` and `touchend` event generation.
 *      @param {Number} [options.times=1] (Optional) Indicates the number of taps.
 *      @param {Number} [options.delay=10] (Optional) The number of milliseconds
 *        before the next tap simulation happens. This is valid only when `times`
 *        is more than 1.
 *
 *      Valid options properties for the `doubletap` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the doubletap should be simulated. Default is the center of the
 *        node element.
 *
 *      Valid options properties for the `press` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the press should be simulated. Default is the center of the node
 *        element.
 *      @param {Number} [options.hold=3000] (Optional) The hold time in milliseconds.
 *        This is the time between `touchstart` and `touchend` event generation.
 *        Default is 3000ms (3 seconds).
 *
 *      Valid options properties for the `move` gesture:
 *
 *      @param {Object} [options.path] (Optional) Indicates the path of the finger
 *        movement. It's an object with three optional properties: `point`,
 *        `xdist` and  `ydist`.
 *        @param {Array} [options.path.point] A starting point of the gesture.
 *          Default is the center of the node element.
 *        @param {Number} [options.path.xdist=200] A distance to move in pixels
 *          along the X axis. A negative distance value indicates moving left.
 *        @param {Number} [options.path.ydist=0] A distance to move in pixels
 *          along the Y axis. A negative distance value indicates moving up.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *
 *      Valid options properties for the `flick` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x, y] coordinates
 *        where the flick should be simulated. Default is the center of the
 *        node element.
 *      @param {String} [options.axis='x'] (Optional) Valid values are either
 *        "x" or "y". Indicates axis to move along. The flick can move to one of
 *        4 directions(left, right, up and down).
 *      @param {Number} [options.distance=200] (Optional) Distance to move in pixels
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds. User given value could be automatically
 *        adjusted by the framework if it is below the minimum velocity to be
 *        a flick gesture.
 *
 *      Valid options properties for the `pinch` gesture:
 *
 *      @param {Array} [options.center] (Optional) The center of the circle where
 *        two fingers are placed. Default is the center of the node element.
 *      @param {Number} [options.r1] (Required) Pixel radius of the start circle
 *        where 2 fingers will be on when the gesture starts. The circles are
 *        centered at the center of the element.
 *      @param {Number} [options.r2] (Required) Pixel radius of the end circle
 *        when this gesture ends.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *      @param {Number} [options.start=0] (Optional) Starting degree of the first
 *        finger. The value is relative to the path of the north. Default is 0
 *        (i.e., 12:00 on a clock).
 *      @param {Number} [options.rotation=0] (Optional) Degrees to rotate from
 *        the starting degree. A negative value means rotation to the
 *        counter-clockwise direction.
 *
 *      Valid options properties for the `rotate` gesture:
 *
 *      @param {Array} [options.center] (Optional) The center of the circle where
 *        two fingers are placed. Default is the center of the node element.
 *      @param {Number} [options.r1] (Optional) Pixel radius of the start circle
 *        where 2 fingers will be on when the gesture starts. The circles are
 *        centered at the center of the element. Default is a fourth of the node
 *        element width or height, whichever is smaller.
 *      @param {Number} [options.r2] (Optional) Pixel radius of the end circle
 *        when this gesture ends. Default is a fourth of the node element width or
 *        height, whichever is smaller.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *      @param {Number} [options.start=0] (Optional) Starting degree of the first
 *        finger. The value is relative to the path of the north. Default is 0
 *        (i.e., 12:00 on a clock).
 *      @param {Number} [options.rotation] (Required) Degrees to rotate from
 *        the starting degree. A negative value means rotation to the
 *        counter-clockwise direction.
 *
 * @param {Function} [cb] The callback to execute when the asynchronouse gesture
 *      simulation is completed.
 *      @param {Error} cb.err An error object if the simulation is failed.
 * @return {void}
 * @for Event
 * @static
 */
Y.Event.simulateGesture = function(node, name, options, cb) {

    node = Y.one(node);

    var sim = new Y.GestureSimulation(node);
    name = name.toLowerCase();

    if(!cb && Y.Lang.isFunction(options)) {
        cb = options;
        options = {};
    }

    options = options || {};

    if (gestureNames[name]) {
        switch(name) {
            // single-touch: point gestures
            case 'tap':
                sim.tap(cb, options.point, options.times, options.hold, options.delay);
                break;
            case 'doubletap':
                sim.tap(cb, options.point, 2);
                break;
            case 'press':
                if(!Y.Lang.isNumber(options.hold)) {
                    options.hold = DEFAULTS.HOLD_PRESS;
                } else if(options.hold < DEFAULTS.MIN_HOLD_PRESS) {
                    options.hold = DEFAULTS.MIN_HOLD_PRESS;
                } else if(options.hold > DEFAULTS.MAX_HOLD_PRESS) {
                    options.hold = DEFAULTS.MAX_HOLD_PRESS;
                }
                sim.tap(cb, options.point, 1, options.hold);
                break;

            // single-touch: move gestures
            case 'move':
                sim.move(cb, options.path, options.duration);
                break;
            case 'flick':
                sim.flick(cb, options.point, options.axis, options.distance,
                    options.duration);
                break;

            // multi-touch: pinch/rotation gestures
            case 'pinch':
                sim.pinch(cb, options.center, options.r1, options.r2,
                    options.duration, options.start, options.rotation);
                break;
            case 'rotate':
                sim.rotate(cb, options.center, options.r1, options.r2,
                    options.duration, options.start, options.rotation);
                break;
        }
    } else {
        Y.error(NAME+': Not a supported gesture simulation: '+name);
    }
};


}, '3.10.1', {"requires": ["async-queue", "event-simulate", "node-screen"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/imageloader.js
// ----------------------------------------------------------------------------------------

/*
 * Image Loader 3
 *
 * As fresh as it gets.
 * Bottle of Jameson not included.
 *
 * @author naz@squarespace.com
 * @github http://github.com/nhassan/cerato.git
 */

/*jshint supernew: true */

/**
 * The Squarespace Image Crop Sizes
 * @const
 * @type {Array}
 */
var SQUARESPACE_SIZES = [1500, 1000, 750, 500, 300, 100];

/**
 * The className that's added to any node that is currently loading.
 * @const
 * @type {string}
 */
var IMAGE_LOADING_CLASS = 'loading';

/*
 * Image Loader
 * This is a singleton, that has utilities on it.
 */
var ImageLoader = new (

  /**
   * @class ImageLoader
   * @constructor
   * @namespace Squarespace
   */
  function _ImageLoader_() {

    /*
     * THE LIQUOR (KEY METHODS)
     * -----------------------------------------------------
     */

    /**
     * Routes the element to the correct processors for evaluating the
     * appropriate width + height of an element. Everything goes straight
     *
     * @method load
     * @expose
     * @param {Node} el The <img /> element.
     * @param {Object} loaderParameters The loader parameters to overwrite.
     */
    this.load = function(el, loaderParameters) {

      if (el['getDOMNode']) { el = el['getDOMNode'](); }

      var imageData = this._getDataFromNode(el, loaderParameters);
      var hasImageData = !(!imageData.dimensions || !imageData.dimensions.width || !imageData.dimensions.height);

      var loadMode = imageData.load+'';
      if (loadMode === 'false') {
        return false;
      }

      var cropMode = imageData.mode;
      if (hasImageData && (cropMode == 'fit' || cropMode == 'fill')) {
        var parentNode = el.parentNode;
        if (!parentNode) {
          console.error('Not doing anything, parentNode not found.');
          return false;
        }

        var refreshed = this.refresh(el, loaderParameters, parentNode);
        if (!refreshed) {
          return false;
        }
      }

      var intention = this._intendToLoad(el, imageData);
      if (typeof(intention) == "string" && loadMode !== 'viewport') {
        var srcToSet = this.getUrl(intention, imageData);
        if (el.getAttribute('src') !== srcToSet) {
          el.onload = function() {
            el.className = el.className.replace(IMAGE_LOADING_CLASS, ' ').trim(); // remove class
          };

          if (!el.getAttribute('src') && el.className.indexOf(IMAGE_LOADING_CLASS) === -1) {
            el.className += (el.className ? ' ' : '') + IMAGE_LOADING_CLASS; // add class
          }

          if (!el.getAttribute('src') && hasImageData) {
            el.setAttribute('src', srcToSet);
          } else {
            preloadImage(srcToSet, function() {
              if (!hasImageData) {
                el.setAttribute('data-image-dimensions', this.width + 'x' + this.height);
                ImageLoader.load(el, loaderParameters);
              } else {
                el.setAttribute('src', srcToSet);
              }
            }, function() {
              el.className = el.className.replace(IMAGE_LOADING_CLASS, ' ').trim(); // remove class
              el.setAttribute('src', srcToSet);
            });
          }
        }
        return true;
      } else {
        return intention;
      }

      // helper
      function preloadImage(src, callback, errorCallback) {
        var img = new Image();
        img.onload = callback;
        img.onerror = errorCallback;
        img.src = src;
      }
    },

    /**
     * Handles "fit" & "fill" crop modes. Evaluates the positioning for the <img />
     * element as well the positioning
     *
     * @method refresh
     * @private
     * @param {Node} el The <img /> element.
     * @param {Object} loaderParameters The image data for this element.
     * @param {Object|Node} parentNode The parentNode for this element to use a context.
     */
    this.refresh = function(el, loaderParameters, parentNode) {

      if (el['getDOMNode']) { el = el['getDOMNode'](); }
      if (parentNode && parentNode['getDOMNode']) { parentNode = parentNode['getDOMNode'](); }

      parentNode = parentNode || el.parentNode;
      if (!parentNode) {
        console.error('Not doing anything, parentNode not found.');
        return false;
      }

      var imageData = this._getDataFromNode(el, loaderParameters);

      var parentWidth    = parentNode.offsetWidth,
          parentHeight   = parentNode.offsetHeight;

      var mode = imageData.mode;

      if (mode == 'none') {
        return; // nothing to do here!
      }

      var originalWidth  = imageData.dimensions.width,
          originalHeight = imageData.dimensions.height;

      var imageRatio  = originalWidth / originalHeight;
      var parentRatio = parentWidth / parentHeight;

      // the scale determines the other values.
      var scale;
      if (mode === 'fill') {
        scale = imageRatio > parentRatio ? parentHeight / originalHeight : parentWidth / originalWidth;
      } else if (mode === 'fit') {
        scale = imageRatio < parentRatio ? parentHeight / originalHeight : parentWidth / originalWidth;
      }

      if (!imageData.stretch && mode == 'fit' && scale > 1) {
        scale = 1;
      }

      // evaluate the new width & height
      var targetWidth = Math.floor(originalWidth * scale);
      var targetHeight = Math.floor(originalHeight * scale);

      // position
      var targetLeft;
      var targetTop;

      if (mode === 'fill') {
        targetLeft = Math.min( Math.max( ( parentWidth / 2 ) - (targetWidth * imageData.focalPoint.x), (parentWidth-targetWidth) ), 0 );
        targetTop = Math.min( Math.max( ( parentHeight / 2 ) - (targetHeight * imageData.focalPoint.y), (parentHeight-targetHeight) ), 0 );
      } else if (mode === 'fit') {
        var alignment = imageData.fitAlignment;
        if (alignment.left) {
          targetLeft = 0; // left
        } else if (alignment.right) {
          targetLeft = (parentWidth - targetWidth); // right
        } else {
          targetLeft = targetWidth < parentWidth ? ( parentWidth - targetWidth ) / 2 : 0; // center
        }

        if (alignment.top) {
          targetTop = 0;
        } else if (alignment.bottom) {
          targetTop = (parentHeight - targetHeight);
        } else {
          targetTop  = targetHeight < parentHeight ? ( parentHeight - targetHeight ) / 2 : 0;  // top
        }

        // make sure offsetHeight is calculated correctly in FF
        if (this._getStyle(el, 'display') == 'inline') {
          el.style.fontSize = '0px';
        }

        // modify for borders
        targetWidth -= el.offsetHeight - el.clientHeight;
        targetHeight -= el.offsetWidth - el.clientWidth;
      }

      // if the targetWidth or targetHeight are zero, bail
      if (targetWidth === 0 || targetHeight === 0) {
        return false;
      }

      // set everything
      el.style.top = Math.floor(targetTop) + 'px';
      el.style.left = Math.floor(targetLeft) + 'px';
      el.style.width = Math.floor(targetWidth) + 'px';
      el.style.height = Math.floor(targetHeight) + 'px';

      var parentPosition = this._getStyle(parentNode, 'position');
      el.style.position = (parentPosition == 'relative' ? 'absolute' : 'relative');

      if (mode == 'fill') {
        var parentOverflow = this._getStyle(parentNode, 'overflow');
        if (!parentOverflow || parentOverflow != 'hidden') {
          parentNode.style.overflow = 'hidden';
        }
      }

      return true;
    };

    /*
     * THE ROCKS (UTILITIES)
     * -----------------------------------------------------
     */

    /**
     * Evaluates the correct size to load.
     *
     * @method _intendToLoad
     * @private
     * @param {Node} el The <img /> element.
     * @param {Object} imageData Object representing the image data.
     */
    this._intendToLoad = function(el, imageData) {
      imageData = imageData || this._getDataFromNode(el);

      // is it actually on the page?
      // or if there's no source, don't load
      if (!imageData.source) {
        return false;
      }

      var width = el.offsetWidth;
      var height = el.offsetHeight;

      // cross browser behavior
      var parentNode = el.parentNode;
      var ctx = this;

      function validateDimension(dimension, value) {

        // ensure width and height calculated from function refresh is not overwritten
        if (imageData.mode === 'none') {
          el.style.width = null;
          el.style.height = null;
        }

        var auxValue = parseFloat(el.getAttribute(dimension));
        var _floatAuxValue = parseFloat(auxValue);

        if (!_floatAuxValue || isNaN(_floatAuxValue)) {
          auxValue = ctx._getStyle(el, dimension);
          _floatAuxValue = parseFloat(auxValue);
        }

        if (!_floatAuxValue || isNaN(_floatAuxValue)) {
          auxValue = ctx._getStyle(el, 'max-' + dimension, 'max' + (dimension.substr(0,1).toUpperCase() + dimension.substr(1)));
          _floatAuxValue = parseFloat(auxValue);
        }

        if (value === 0 || !!auxValue) {
          switch (ctx._stringType(auxValue)) {
            case 'percentage':
              value = (parseInt(auxValue, 10) / 100) * parentNode.offsetWidth;
              break;
            case 'number':
              value = parseInt(auxValue, 10);
              break;
          }
        }

        if (!_floatAuxValue && value !== 0 && !el.getAttribute('src')) {
          value = 0;
        }

        return value;
      }

      // Remove extra spacing introduced by alt
      var alt = el.getAttribute('alt');
      var reflow = (alt && alt.length > 0 && imageData.mode === 'none' && !el.getAttribute('src'));
      if (reflow) {
        var display = el.style.display;
        el.removeAttribute('alt');
        el.style.display = 'none';
        el.offsetHeight+0; // force reflow
        el.style.display = display;
      }

      width = validateDimension('width', width);
      height = validateDimension('height', height);

      if (reflow) {
        el.setAttribute('alt', alt);
      }

      if (width === 0 && height === 0) {
        width = imageData.dimensions.width;
        height = imageData.dimensions.height;
      } else if (width === 0) {
        width = this.getDimensionForValue('width', height, imageData);
      } else if (height === 0) {
        height = this.getDimensionForValue('height', width, imageData);
      }

      // need placeholder space for lazyloading
      if (imageData.load === 'viewport') {
        el.style.width = Math.floor(width)+'px';
        el.style.height = Math.floor(height)+'px';
      }

      return this.getSquarespaceSize(width, height, imageData);
    };

    /**
     * Get the Image Data from a node.
     *
     * @method _getDataFromNode
     * @expose
     * @param {Node} el The <img /> element
     * @param {Object=} params Parameters to set on the ImageData
     * @return {Object} imageData Object representing the image data.
     */
    this._getDataFromNode = function(el, params) {
      params = params || {};
      var loaderData = {
        focalPoint: {
          x: 0.5,
          y: 0.5
        },
        dimensions: {
          width: null,
          height: null
        },
        mode: 'none',
        fitAlignment: {
          center: true
        },
        load: 'true',
        stretch: true
      };

      // focal points
      if (params.focalPoint) {
        loaderData.focalPoint = params.focalPoint;
      } else {
        var nodeFocalPoint = el.getAttribute('data-image-focal-point');
        if (!!nodeFocalPoint && (nodeFocalPoint = nodeFocalPoint.split(',')) && nodeFocalPoint.length == 2) {
          loaderData.focalPoint = {
            x: parseFloat(nodeFocalPoint[0]),
            y: parseFloat(nodeFocalPoint[1])
          };
        }
      }

      // image dimensions
      if (params.dimensions) {
        loaderData.dimensions = params.dimensions;
      } else {
        var nodeImageDimensions = el.getAttribute('data-image-dimensions');
        if (!!nodeImageDimensions && (nodeImageDimensions = nodeImageDimensions.split('x')) && nodeImageDimensions.length == 2) {
          loaderData.dimensions = {
            width: parseInt(nodeImageDimensions[0], 10),
            height: parseInt(nodeImageDimensions[1], 10)
          };
        }
      }

      // crop mode
      if (params.mode) {
        loaderData.mode = params.mode;
      } else {
        var parentNodeClassNames = el.parentNode.className;
        if (parentNodeClassNames.indexOf('content-fill') !== -1) {
          loaderData.mode = 'fill';
        } else if (parentNodeClassNames.indexOf('content-fit') !== -1) {
          loaderData.mode = 'fit';
        }
      }

      // fitAlignment
      if (loaderData.mode === 'fit') {
        var fitAlignment = params.fitAlignment || el.getAttribute('data-alignment') || el.parentNode.getAttribute('data-alignment');
        if (!!fitAlignment) {
          loaderData.fitAlignment = {
            top: fitAlignment.indexOf('top') !== -1,
            left: fitAlignment.indexOf('left') !== -1,
            center: fitAlignment.indexOf('center') !== -1,
            right: fitAlignment.indexOf('right') !== -1,
            bottom: fitAlignment.indexOf('bottom') !== -1
          };
        }
      }

      // loading
      if (params.load) {
        loaderData.load = params.load;
      } else {
        var nodeLoad = el.getAttribute('data-load');
        if (nodeLoad) {
          loaderData.load = nodeLoad;
        }
      }

      // stretch
      if (typeof(params.stretch) !== "undefined") {
        loaderData.stretch = params.stretch;
      } else {
        var stretch = el.getAttribute('data-image-stretch');
        if(stretch) {
          loaderData.stretch = stretch === "true" ? true: false;
        }
      }

      // source
      if (params.source) {
        loaderData.source = params.source;
      } else {
        loaderData.source = el.getAttribute('data-image') || el.getAttribute('data-src');
      }

      // sanitize the url
      if (
        loaderData.source &&
        (loaderData.source.indexOf('squarespace.com') !== -1 || loaderData.source.indexOf('squarespace.net') !== -1) &&
        (loaderData.source.substr(0,5) === 'http:') &&
        (window.location.protocol.substr(0,5) === 'https')
      ) {
        loaderData.source = loaderData.source.replace('http://', 'https://');
      }

      return loaderData;
    };

    /**
     * Return the type of number the input is.
     *
     * @method _stringType
     * @private
     * @param {string} str The un-altereted, directors cut, version of the string.
     * @return {(string|number)} The type of number the input was.
     */
    this._stringType = function(str) {
      if (typeof(str) === "string" && str.indexOf('%') !== -1) {
        return 'percentage';
      } else if (!isNaN(parseInt(str, 10))) {
        return 'number';
      } else {
        return NaN;
      }
    };

    /**
     * Returns the computed style on an element.
     * from http://www.quirksmode.org/dom/getstyles.html
     *
     * @method _getStyle
     * @private
     * @param {Node} el The element
     * @param {string} computedStyle The style property.
     * @param {string=} currentStyle The style property, for when using computedStyle (IE).
     */
    this._getStyle = function(el, computedStyle, currentStyle) {
      var y;
      if (el.currentStyle) {
        y = el.currentStyle[currentStyle || computedStyle];
      } else if (window.getComputedStyle) {
        y = document.defaultView.getComputedStyle(el,null).getPropertyValue(computedStyle);
      }

      return y;
    };

    /**
     * Return if the image is visible on screen or not
     *
     * @method _isVisible
     * @private
     * @param {Node} _el The element you want the position of.
     * @return {boolean} If the image is visible or not on screen.
     */
    this._isVisible = function(_el) {
      var rect = _el.getBoundingClientRect();
      var isVisible = (
            rect.left >= 0   && rect.top >= 0 ||
            rect.bottom >= 0 && rect.right >= 0 ||
            rect.left >= 0   && rect.bottom >= 0 ||
            rect.right >= 0  && rect.top >= 0);

      return isVisible;
    };

    /**
     * Get the appropriate Squarespace size for the image.
     *
     * @method getSquarespaceSize
     * @param {number} width The requested width of the rendered image.
     * @param {number} height The request height of the rendered image.
     * @param {Object} imageData Object representing the image data.
     * @return {string} The appropriate Squarespace size.
     */
    this.getSquarespaceSize = function(width, height, imageData) {
      // get original image dimensions
      var oWidth = imageData.dimensions.width;
      var oHeight = imageData.dimensions.height;

      // get the ratio
      var oRatio = oHeight / oWidth;
      var nWidth = height / oRatio;

      // max width.
      var maxWidth = Math.max(nWidth, width);

      // load twice the size for retina displays
      if (typeof(window.devicePixelRatio) == "number") {
        maxWidth = maxWidth * window.devicePixelRatio;
      }

      for (var i = 1; i < SQUARESPACE_SIZES.length; i++) {
        if (maxWidth > SQUARESPACE_SIZES[i]) { break; }
      }

      return SQUARESPACE_SIZES[i - 1] + 'w';
    };

    /**
     * Get the appropriate alternate dimension for the image.
     * -> ('width', 100, ...) returns the height for the image at 100 width.
     *
     * @method getDimensionForValue
     * @expose
     * @param {string} dimension The dimension that you represents the value passed in.
     * @param {number} value The value of the dimension passed in.
     * @param {Object} imageData Object representing the image data.
     * @return {number} The alternate dimension.
     */
    this.getDimensionForValue = function(dimension, value, imageData) {
      var oWidth = imageData.dimensions.width;
      var oHeight = imageData.dimensions.height;

      if (dimension == 'width') {
        return ( oWidth / oHeight ) * value;
      } else if (dimension == 'height') {
        return ( oHeight / oWidth ) * value;
      } else {
        return NaN;
      }
    };

    /**
     * Get the formatted url with the appropriate size
     * @method getUrl
     * @param size {Number} ?
     * @param imageData {Object} ?
     */
    this.getUrl = function(size, imageData) {
      var source = imageData.source;
      if (size && (source[0] == '/' || source.indexOf('squarespace.com') != -1 || source.indexOf('squarespace.net') != -1)) {
        if (source.indexOf('format=' + size) === -1) {
          source = source + (source.indexOf('?') !== -1 ? '&' : '?') + "format=" + size;
        }

        // in the backend UI, fetch locally rather than from S3
        // (prevents race conditions where S3 is too slow to propagate permissions changes)
        if (window.Static && window.Static.IN_BACKEND && source.indexOf('storage=local') === -1) {
          source += "&storage=local";
        }

        return source;
      }

      return imageData.source;
    };
  }
)();

/*
 * For the Google Closure Compiler, we need to export what we need.
 */
window['ImageLoader'] = ImageLoader;


//
// This is the automatic ImageLoader.
// It'll go through and start loading the images that it can,
// and keep on firing refresh when appropriate.
//
var siteCSSHandle;
var loopHandle;
var imagesTimer = 50; // this is because firefox doesn't have document.images ready when we expect it to (when the css is ready).
function ancestorHasClass(el, className) {
  if (typeof(el.className) !== "undefined" && el.className.indexOf(className) !== -1) {
    return true;
  } else if (!el.parentNode) {
    return false;
  } else {
    return ancestorHasClass(el.parentNode, className);
  }
}

// These are here to handle IE 6 & 7 (and IE 8 in 7 compat mode)
var hasAttr = function(node, name) { return node.hasAttribute ? node.hasAttribute(name) : !!node.attributes[name]; };
var getAttr = function(node, name) { return node.getAttribute ? node.getAttribute(name) : node.attributes[name]; };

function init() {
  var IMGS = document.images;
  var SS = document.styleSheets;

  if (IMGS.length > 0) {
    for (var i = 0, ii = IMGS.length; i < ii; i++) {
      if ((hasAttr(IMGS[i], 'data-image') || hasAttr(IMGS[i], 'data-src')) && (getAttr(IMGS[i], 'data-load')+"") !== 'false') {
        ImageLoader.load(IMGS[i]);
      }
    }
  }
}

init();

// allow the static analyzer to inject the imageloader into rollups
if (YUI) {
  YUI.add('squarespace-imageloader', function (Y) {  });
}



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/yui-throttle/yui-throttle.js
// ----------------------------------------------------------------------------------------

YUI.add('yui-throttle', function (Y, NAME) {

/**
Throttles a call to a method based on the time between calls. This method is attached
to the `Y` object and is <a href="../classes/YUI.html#method_throttle">documented there</a>.

    var fn = Y.throttle(function() {
        counter++;
    });

    for (i; i< 35000; i++) {
        out++;
        fn();
    }


@module yui
@submodule yui-throttle
*/

/*! Based on work by Simon Willison: http://gist.github.com/292562 */
/**
 * Throttles a call to a method based on the time between calls.
 * @method throttle
 * @for YUI
 * @param fn {function} The function call to throttle.
 * @param ms {int} The number of milliseconds to throttle the method call.
 * Can set globally with Y.config.throttleTime or by call. Passing a -1 will
 * disable the throttle. Defaults to 150.
 * @return {function} Returns a wrapped function that calls fn throttled.
 * @since 3.1.0
 */
Y.throttle = function(fn, ms) {
    ms = (ms) ? ms : (Y.config.throttleTime || 150);

    if (ms === -1) {
        return function() {
            fn.apply(null, arguments);
        };
    }

    var last = Y.Lang.now();

    return function() {
        var now = Y.Lang.now();
        if (now - last > ms) {
            last = now;
            fn.apply(null, arguments);
        }
    };
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/autocomplete-list/autocomplete-list.js
// ----------------------------------------------------------------------------------------

YUI.add('autocomplete-list', function (Y, NAME) {

/**
Traditional autocomplete dropdown list widget, just like Mom used to make.

@module autocomplete
@submodule autocomplete-list
**/

/**
Traditional autocomplete dropdown list widget, just like Mom used to make.

@class AutoCompleteList
@extends Widget
@uses AutoCompleteBase
@uses WidgetPosition
@uses WidgetPositionAlign
@constructor
@param {Object} config Configuration object.
**/

var Lang   = Y.Lang,
    Node   = Y.Node,
    YArray = Y.Array,

    // Whether or not we need an iframe shim.
    useShim = Y.UA.ie && Y.UA.ie < 7,

    // keyCode constants.
    KEY_TAB = 9,

    // String shorthand.
    _CLASS_ITEM        = '_CLASS_ITEM',
    _CLASS_ITEM_ACTIVE = '_CLASS_ITEM_ACTIVE',
    _CLASS_ITEM_HOVER  = '_CLASS_ITEM_HOVER',
    _SELECTOR_ITEM     = '_SELECTOR_ITEM',

    ACTIVE_ITEM      = 'activeItem',
    ALWAYS_SHOW_LIST = 'alwaysShowList',
    CIRCULAR         = 'circular',
    HOVERED_ITEM     = 'hoveredItem',
    ID               = 'id',
    ITEM             = 'item',
    LIST             = 'list',
    RESULT           = 'result',
    RESULTS          = 'results',
    VISIBLE          = 'visible',
    WIDTH            = 'width',

    // Event names.
    EVT_SELECT = 'select',

List = Y.Base.create('autocompleteList', Y.Widget, [
    Y.AutoCompleteBase,
    Y.WidgetPosition,
    Y.WidgetPositionAlign
], {
    // -- Prototype Properties -------------------------------------------------
    ARIA_TEMPLATE: '<div/>',
    ITEM_TEMPLATE: '<li/>',
    LIST_TEMPLATE: '<ul/>',

    // Widget automatically attaches delegated event handlers to everything in
    // Y.Node.DOM_EVENTS, including synthetic events. Since Widget's event
    // delegation won't work for the synthetic valuechange event, and since
    // it creates a name collision between the backcompat "valueChange" synth
    // event alias and AutoCompleteList's "valueChange" event for the "value"
    // attr, this hack is necessary in order to prevent Widget from attaching
    // valuechange handlers.
    UI_EVENTS: (function () {
        var uiEvents = Y.merge(Y.Node.DOM_EVENTS);

        delete uiEvents.valuechange;
        delete uiEvents.valueChange;

        return uiEvents;
    }()),

    // -- Lifecycle Prototype Methods ------------------------------------------
    initializer: function () {
        var inputNode = this.get('inputNode');

        if (!inputNode) {
            Y.error('No inputNode specified.');
            return;
        }

        this._inputNode  = inputNode;
        this._listEvents = [];

        // This ensures that the list is rendered inside the same parent as the
        // input node by default, which is necessary for proper ARIA support.
        this.DEF_PARENT_NODE = inputNode.get('parentNode');

        // Cache commonly used classnames and selectors for performance.
        this[_CLASS_ITEM]        = this.getClassName(ITEM);
        this[_CLASS_ITEM_ACTIVE] = this.getClassName(ITEM, 'active');
        this[_CLASS_ITEM_HOVER]  = this.getClassName(ITEM, 'hover');
        this[_SELECTOR_ITEM]     = '.' + this[_CLASS_ITEM];

        /**
        Fires when an autocomplete suggestion is selected from the list,
        typically via a keyboard action or mouse click.

        @event select
        @param {Node} itemNode List item node that was selected.
        @param {Object} result AutoComplete result object.
        @preventable _defSelectFn
        **/
        this.publish(EVT_SELECT, {
            defaultFn: this._defSelectFn
        });
    },

    destructor: function () {
        while (this._listEvents.length) {
            this._listEvents.pop().detach();
        }

        if (this._ariaNode) {
            this._ariaNode.remove().destroy(true);
        }
    },

    bindUI: function () {
        this._bindInput();
        this._bindList();
    },

    renderUI: function () {
        var ariaNode    = this._createAriaNode(),
            boundingBox = this.get('boundingBox'),
            contentBox  = this.get('contentBox'),
            inputNode   = this._inputNode,
            listNode    = this._createListNode(),
            parentNode  = inputNode.get('parentNode');

        inputNode.addClass(this.getClassName('input')).setAttrs({
            'aria-autocomplete': LIST,
            'aria-expanded'    : false,
            'aria-owns'        : listNode.get('id')
        });

        // ARIA node must be outside the widget or announcements won't be made
        // when the widget is hidden.
        parentNode.append(ariaNode);

        // Add an iframe shim for IE6.
        if (useShim) {
            boundingBox.plug(Y.Plugin.Shim);
        }

        this._ariaNode    = ariaNode;
        this._boundingBox = boundingBox;
        this._contentBox  = contentBox;
        this._listNode    = listNode;
        this._parentNode  = parentNode;
    },

    syncUI: function () {
        // No need to call _syncPosition() here; the other _sync methods will
        // call it when necessary.
        this._syncResults();
        this._syncVisibility();
    },

    // -- Public Prototype Methods ---------------------------------------------

    /**
    Hides the list, unless the `alwaysShowList` attribute is `true`.

    @method hide
    @see show
    @chainable
    **/
    hide: function () {
        return this.get(ALWAYS_SHOW_LIST) ? this : this.set(VISIBLE, false);
    },

    /**
    Selects the specified _itemNode_, or the current `activeItem` if _itemNode_
    is not specified.

    @method selectItem
    @param {Node} [itemNode] Item node to select.
    @param {EventFacade} [originEvent] Event that triggered the selection, if
        any.
    @chainable
    **/
    selectItem: function (itemNode, originEvent) {
        if (itemNode) {
            if (!itemNode.hasClass(this[_CLASS_ITEM])) {
                return this;
            }
        } else {
            itemNode = this.get(ACTIVE_ITEM);

            if (!itemNode) {
                return this;
            }
        }

        this.fire(EVT_SELECT, {
            itemNode   : itemNode,
            originEvent: originEvent || null,
            result     : itemNode.getData(RESULT)
        });

        return this;
    },

    // -- Protected Prototype Methods ------------------------------------------

    /**
    Activates the next item after the currently active item. If there is no next
    item and the `circular` attribute is `true`, focus will wrap back to the
    input node.

    @method _activateNextItem
    @chainable
    @protected
    **/
    _activateNextItem: function () {
        var item = this.get(ACTIVE_ITEM),
            nextItem;

        if (item) {
            nextItem = item.next(this[_SELECTOR_ITEM]) ||
                    (this.get(CIRCULAR) ? null : item);
        } else {
            nextItem = this._getFirstItemNode();
        }

        this.set(ACTIVE_ITEM, nextItem);

        return this;
    },

    /**
    Activates the item previous to the currently active item. If there is no
    previous item and the `circular` attribute is `true`, focus will wrap back
    to the input node.

    @method _activatePrevItem
    @chainable
    @protected
    **/
    _activatePrevItem: function () {
        var item     = this.get(ACTIVE_ITEM),
            prevItem = item ? item.previous(this[_SELECTOR_ITEM]) :
                    this.get(CIRCULAR) && this._getLastItemNode();

        this.set(ACTIVE_ITEM, prevItem || null);

        return this;
    },

    /**
    Appends the specified result _items_ to the list inside a new item node.

    @method _add
    @param {Array|Node|HTMLElement|String} items Result item or array of
        result items.
    @return {NodeList} Added nodes.
    @protected
    **/
    _add: function (items) {
        var itemNodes = [];

        YArray.each(Lang.isArray(items) ? items : [items], function (item) {
            itemNodes.push(this._createItemNode(item).setData(RESULT, item));
        }, this);

        itemNodes = Y.all(itemNodes);
        this._listNode.append(itemNodes.toFrag());

        return itemNodes;
    },

    /**
    Updates the ARIA live region with the specified message.

    @method _ariaSay
    @param {String} stringId String id (from the `strings` attribute) of the
        message to speak.
    @param {Object} [subs] Substitutions for placeholders in the string.
    @protected
    **/
    _ariaSay: function (stringId, subs) {
        var message = this.get('strings.' + stringId);
        this._ariaNode.set('text', subs ? Lang.sub(message, subs) : message);
    },

    /**
    Binds `inputNode` events and behavior.

    @method _bindInput
    @protected
    **/
    _bindInput: function () {
        var inputNode = this._inputNode,
            alignNode, alignWidth, tokenInput;

        // Null align means we can auto-align. Set align to false to prevent
        // auto-alignment, or a valid alignment config to customize the
        // alignment.
        if (this.get('align') === null) {
            // If this is a tokenInput, align with its bounding box.
            // Otherwise, align with the inputNode. Bit of a cheat.
            tokenInput = this.get('tokenInput');
            alignNode  = (tokenInput && tokenInput.get('boundingBox')) || inputNode;

            this.set('align', {
                node  : alignNode,
                points: ['tl', 'bl']
            });

            // If no width config is set, attempt to set the list's width to the
            // width of the alignment node. If the alignment node's width is
            // falsy, do nothing.
            if (!this.get(WIDTH) && (alignWidth = alignNode.get('offsetWidth'))) {
                this.set(WIDTH, alignWidth);
            }
        }

        // Attach inputNode events.
        this._listEvents = this._listEvents.concat([
            inputNode.after('blur',  this._afterListInputBlur, this),
            inputNode.after('focus', this._afterListInputFocus, this)
        ]);
    },

    /**
    Binds list events.

    @method _bindList
    @protected
    **/
    _bindList: function () {
        this._listEvents = this._listEvents.concat([
            Y.one('doc').after('click', this._afterDocClick, this),
            Y.one('win').after('windowresize', this._syncPosition, this),

            this.after({
                mouseover: this._afterMouseOver,
                mouseout : this._afterMouseOut,

                activeItemChange    : this._afterActiveItemChange,
                alwaysShowListChange: this._afterAlwaysShowListChange,
                hoveredItemChange   : this._afterHoveredItemChange,
                resultsChange       : this._afterResultsChange,
                visibleChange       : this._afterVisibleChange
            }),

            this._listNode.delegate('click', this._onItemClick,
                    this[_SELECTOR_ITEM], this)
        ]);
    },

    /**
    Clears the contents of the tray.

    @method _clear
    @protected
    **/
    _clear: function () {
        this.set(ACTIVE_ITEM, null);
        this._set(HOVERED_ITEM, null);

        this._listNode.get('children').remove(true);
    },

    /**
    Creates and returns an ARIA live region node.

    @method _createAriaNode
    @return {Node} ARIA node.
    @protected
    **/
    _createAriaNode: function () {
        var ariaNode = Node.create(this.ARIA_TEMPLATE);

        return ariaNode.addClass(this.getClassName('aria')).setAttrs({
            'aria-live': 'polite',
            role       : 'status'
        });
    },

    /**
    Creates and returns an item node with the specified _content_.

    @method _createItemNode
    @param {Object} result Result object.
    @return {Node} Item node.
    @protected
    **/
    _createItemNode: function (result) {
        var itemNode = Node.create(this.ITEM_TEMPLATE);

        return itemNode.addClass(this[_CLASS_ITEM]).setAttrs({
            id  : Y.stamp(itemNode),
            role: 'option'
        }).setAttribute('data-text', result.text).append(result.display);
    },

    /**
    Creates and returns a list node. If the `listNode` attribute is already set
    to an existing node, that node will be used.

    @method _createListNode
    @return {Node} List node.
    @protected
    **/
    _createListNode: function () {
        var listNode = this.get('listNode') || Node.create(this.LIST_TEMPLATE);

        listNode.addClass(this.getClassName(LIST)).setAttrs({
            id  : Y.stamp(listNode),
            role: 'listbox'
        });

        this._set('listNode', listNode);
        this.get('contentBox').append(listNode);

        return listNode;
    },

    /**
    Gets the first item node in the list, or `null` if the list is empty.

    @method _getFirstItemNode
    @return {Node|null}
    @protected
    **/
    _getFirstItemNode: function () {
        return this._listNode.one(this[_SELECTOR_ITEM]);
    },

    /**
    Gets the last item node in the list, or `null` if the list is empty.

    @method _getLastItemNode
    @return {Node|null}
    @protected
    **/
    _getLastItemNode: function () {
        return this._listNode.one(this[_SELECTOR_ITEM] + ':last-child');
    },

    /**
    Synchronizes the result list's position and alignment.

    @method _syncPosition
    @protected
    **/
    _syncPosition: function () {
        // Force WidgetPositionAlign to refresh its alignment.
        this._syncUIPosAlign();

        // Resize the IE6 iframe shim to match the list's dimensions.
        this._syncShim();
    },

    /**
    Synchronizes the results displayed in the list with those in the _results_
    argument, or with the `results` attribute if an argument is not provided.

    @method _syncResults
    @param {Array} [results] Results.
    @protected
    **/
    _syncResults: function (results) {
        if (!results) {
            results = this.get(RESULTS);
        }

        this._clear();

        if (results.length) {
            this._add(results);
            this._ariaSay('items_available');
        }

        this._syncPosition();

        if (this.get('activateFirstItem') && !this.get(ACTIVE_ITEM)) {
            this.set(ACTIVE_ITEM, this._getFirstItemNode());
        }
    },

    /**
    Synchronizes the size of the iframe shim used for IE6 and lower. In other
    browsers, this method is a noop.

    @method _syncShim
    @protected
    **/
    _syncShim: useShim ? function () {
        var shim = this._boundingBox.shim;

        if (shim) {
            shim.sync();
        }
    } : function () {},

    /**
    Synchronizes the visibility of the tray with the _visible_ argument, or with
    the `visible` attribute if an argument is not provided.

    @method _syncVisibility
    @param {Boolean} [visible] Visibility.
    @protected
    **/
    _syncVisibility: function (visible) {
        if (this.get(ALWAYS_SHOW_LIST)) {
            visible = true;
            this.set(VISIBLE, visible);
        }

        if (typeof visible === 'undefined') {
            visible = this.get(VISIBLE);
        }

        this._inputNode.set('aria-expanded', visible);
        this._boundingBox.set('aria-hidden', !visible);

        if (visible) {
            this._syncPosition();
        } else {
            this.set(ACTIVE_ITEM, null);
            this._set(HOVERED_ITEM, null);

            // Force a reflow to work around a glitch in IE6 and 7 where some of
            // the contents of the list will sometimes remain visible after the
            // container is hidden.
            this._boundingBox.get('offsetWidth');
        }

        // In some pages, IE7 fails to repaint the contents of the list after it
        // becomes visible. Toggling a bogus class on the body forces a repaint
        // that fixes the issue.
        if (Y.UA.ie === 7) {
            // Note: We don't actually need to use ClassNameManager here. This
            // class isn't applying any actual styles; it's just frobbing the
            // body element to force a repaint. The actual class name doesn't
            // really matter.
            Y.one('body')
                .addClass('yui3-ie7-sucks')
                .removeClass('yui3-ie7-sucks');
        }
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
    Handles `activeItemChange` events.

    @method _afterActiveItemChange
    @param {EventFacade} e
    @protected
    **/
    _afterActiveItemChange: function (e) {
        var inputNode = this._inputNode,
            newVal    = e.newVal,
            prevVal   = e.prevVal,
            node;

        // The previous item may have disappeared by the time this handler runs,
        // so we need to be careful.
        if (prevVal && prevVal._node) {
            prevVal.removeClass(this[_CLASS_ITEM_ACTIVE]);
        }

        if (newVal) {
            newVal.addClass(this[_CLASS_ITEM_ACTIVE]);
            inputNode.set('aria-activedescendant', newVal.get(ID));
        } else {
            inputNode.removeAttribute('aria-activedescendant');
        }

        if (this.get('scrollIntoView')) {
            node = newVal || inputNode;

            if (!node.inRegion(Y.DOM.viewportRegion(), true)
                    || !node.inRegion(this._contentBox, true)) {

                node.scrollIntoView();
            }
        }
    },

    /**
    Handles `alwaysShowListChange` events.

    @method _afterAlwaysShowListChange
    @param {EventFacade} e
    @protected
    **/
    _afterAlwaysShowListChange: function (e) {
        this.set(VISIBLE, e.newVal || this.get(RESULTS).length > 0);
    },

    /**
    Handles click events on the document. If the click is outside both the
    input node and the bounding box, the list will be hidden.

    @method _afterDocClick
    @param {EventFacade} e
    @protected
    @since 3.5.0
    **/
    _afterDocClick: function (e) {
        var boundingBox = this._boundingBox,
            target      = e.target;

        if(target !== this._inputNode && target !== boundingBox &&
                target.ancestor('#' + boundingBox.get('id'), true)){
            this.hide();
        }
    },

    /**
    Handles `hoveredItemChange` events.

    @method _afterHoveredItemChange
    @param {EventFacade} e
    @protected
    **/
    _afterHoveredItemChange: function (e) {
        var newVal  = e.newVal,
            prevVal = e.prevVal;

        if (prevVal) {
            prevVal.removeClass(this[_CLASS_ITEM_HOVER]);
        }

        if (newVal) {
            newVal.addClass(this[_CLASS_ITEM_HOVER]);
        }
    },

    /**
    Handles `inputNode` blur events.

    @method _afterListInputBlur
    @protected
    **/
    _afterListInputBlur: function () {
        this._listInputFocused = false;

        if (this.get(VISIBLE) &&
                !this._mouseOverList &&
                (this._lastInputKey !== KEY_TAB ||
                    !this.get('tabSelect') ||
                    !this.get(ACTIVE_ITEM))) {
            this.hide();
        }
    },

    /**
    Handles `inputNode` focus events.

    @method _afterListInputFocus
    @protected
    **/
    _afterListInputFocus: function () {
        this._listInputFocused = true;
    },

    /**
    Handles `mouseover` events.

    @method _afterMouseOver
    @param {EventFacade} e
    @protected
    **/
    _afterMouseOver: function (e) {
        var itemNode = e.domEvent.target.ancestor(this[_SELECTOR_ITEM], true);

        this._mouseOverList = true;

        if (itemNode) {
            this._set(HOVERED_ITEM, itemNode);
        }
    },

    /**
    Handles `mouseout` events.

    @method _afterMouseOut
    @param {EventFacade} e
    @protected
    **/
    _afterMouseOut: function () {
        this._mouseOverList = false;
        this._set(HOVERED_ITEM, null);
    },

    /**
    Handles `resultsChange` events.

    @method _afterResultsChange
    @param {EventFacade} e
    @protected
    **/
    _afterResultsChange: function (e) {
        this._syncResults(e.newVal);

        if (!this.get(ALWAYS_SHOW_LIST)) {
            this.set(VISIBLE, !!e.newVal.length);
        }
    },

    /**
    Handles `visibleChange` events.

    @method _afterVisibleChange
    @param {EventFacade} e
    @protected
    **/
    _afterVisibleChange: function (e) {
        this._syncVisibility(!!e.newVal);
    },

    /**
    Delegated event handler for item `click` events.

    @method _onItemClick
    @param {EventFacade} e
    @protected
    **/
    _onItemClick: function (e) {
        var itemNode = e.currentTarget;

        this.set(ACTIVE_ITEM, itemNode);
        this.selectItem(itemNode, e);
    },

    // -- Protected Default Event Handlers -------------------------------------

    /**
    Default `select` event handler.

    @method _defSelectFn
    @param {EventFacade} e
    @protected
    **/
    _defSelectFn: function (e) {
        var text = e.result.text;

        // TODO: support typeahead completion, etc.
        this._inputNode.focus();
        this._updateValue(text);
        this._ariaSay('item_selected', {item: text});
        this.hide();
    }
}, {
    ATTRS: {
        /**
        If `true`, the first item in the list will be activated by default when
        the list is initially displayed and when results change.

        @attribute activateFirstItem
        @type Boolean
        @default false
        **/
        activateFirstItem: {
            value: false
        },

        /**
        Item that's currently active, if any. When the user presses enter, this
        is the item that will be selected.

        @attribute activeItem
        @type Node
        **/
        activeItem: {
            setter: Y.one,
            value: null
        },

        /**
        If `true`, the list will remain visible even when there are no results
        to display.

        @attribute alwaysShowList
        @type Boolean
        @default false
        **/
        alwaysShowList: {
            value: false
        },

        /**
        If `true`, keyboard navigation will wrap around to the opposite end of
        the list when navigating past the first or last item.

        @attribute circular
        @type Boolean
        @default true
        **/
        circular: {
            value: true
        },

        /**
        Item currently being hovered over by the mouse, if any.

        @attribute hoveredItem
        @type Node|null
        @readOnly
        **/
        hoveredItem: {
            readOnly: true,
            value: null
        },

        /**
        Node that will contain result items.

        @attribute listNode
        @type Node|null
        @initOnly
        **/
        listNode: {
            writeOnce: 'initOnly',
            value: null
        },

        /**
        If `true`, the viewport will be scrolled to ensure that the active list
        item is visible when necessary.

        @attribute scrollIntoView
        @type Boolean
        @default false
        **/
        scrollIntoView: {
            value: false
        },

        /**
        Translatable strings used by the AutoCompleteList widget.

        @attribute strings
        @type Object
        **/
        strings: {
            valueFn: function () {
                return Y.Intl.get('autocomplete-list');
            }
        },

        /**
        If `true`, pressing the tab key while the list is visible will select
        the active item, if any.

        @attribute tabSelect
        @type Boolean
        @default true
        **/
        tabSelect: {
            value: true
        },

        // The "visible" attribute is documented in Widget.
        visible: {
            value: false
        }
    },

    CSS_PREFIX: Y.ClassNameManager.getClassName('aclist')
});

Y.AutoCompleteList = List;

/**
Alias for <a href="AutoCompleteList.html">`AutoCompleteList`</a>. See that class
for API docs.

@class AutoComplete
**/

Y.AutoComplete = List;


}, '3.10.1', {
    "lang": [
        "en",
        "es",
        "it"
    ],
    "requires": [
        "autocomplete-base",
        "event-resize",
        "node-screen",
        "selector-css3",
        "shim-plugin",
        "widget",
        "widget-position",
        "widget-position-align"
    ],
    "skinnable": true
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/core/enum.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-enum', function(Y) {

  Y.namespace('Squarespace').NewsletterMessageStatus = {
    DRAFT:               1,
    TEST_SEND:           2,
    TEST_SENDING:        3,
    TEST_SENT:           4,
    TEST_ERROR:          5,
    CONFIRMED:           6,
    SEND:                7,
    PENDING:             11,
    SENDING:             8,
    SENT:                9,
    ERROR:               10
  };

  Y.namespace('Squarespace').NewsletterSubscriberStatus = {
    ACTIVE:              1,
    PENDING_CONFIRMATION:  2,
    SUSPENDED:           3
  };

  Y.namespace('Squarespace').NewsletterSubscriberSortBy = {
    NAME_DESC:           -3,
    ADDED_ON_DESC:       -2,
    EMAIL_DESC:          -1,
    EMAIL:               1,
    ADDED_ON:            2,
    NAME:                3
  };

  Y.namespace('Squarespace').NewsletterSubscriberSource = {
    USER:                1,
    ADMIN:               2,
    IMPORT:              3
  };

  Y.namespace('Squarespace').USPSServiceTypes = {
    FIRST_CLASS:         1,
    PRIORITY:            2,
    EXPRESS:             3,
    STANDARD:            4
  };

  Y.namespace('Squarespace').BillingStatus = {
    FREE:                1,
    LINKED:              2,
    SUBSCRIBED:          3,
    TRIAL:               4
  };

  Y.namespace('Squarespace').WebsiteRole = {
    ADMIN:               1,
    BILLING:             2,
    REPORTING:           3,
    EDITOR:              4,
    MODERATOR:           6,
    COMMENTER:           7,
    STORE_MANAGER:       8
  };

  Y.namespace('Squarespace').AccessPermissions = {
    AUTHENTICATED:       0,
    CONFIG:              1,
    ADMIN:               2,
    CONFIG_CONTENT_MANAGER:  11,
    CONFIG_SETTINGS:     12,
    CONFIG_ACTIVITY:     13,
    CONFIG_COMMERCE:     14,
    CONFIG_NEWSLETTER:   15,
    CONFIG_CHANGE_STRUCTURE:  1110,
    CONFIG_TRUSTED_COMMENTER:  1111,
    CONFIG_SETTINGS_GENERAL:  1210,
    CONFIG_SETTINGS_LOCALE:  1211,
    CONFIG_SETTINGS_SOCIAL_ACCOUNT:  1212,
    CONFIG_SETTINGS_FACEBOOK:  1213,
    CONFIG_SETTINGS_SOCIAL_SETTINGS:  1214,
    CONFIG_SETTINGS_MEMBER_ACCOUNTS:  1215,
    CONFIG_SETTINGS_DOMAIN:  1216,
    CONFIG_SETTINGS_TEMPLATE:  1217,
    CONFIG_SETTINGS_IMPORT:  1218,
    CONFIG_SETTINGS_CODEINJECT:  1219,
    CONFIG_SETTINGS_ADVANCED:  1220,
    CONFIG_SETTINGS_DEVELOPER:  1221,
    CONFIG_SETTINGS_SESSIONS:  1222,
    CONFIG_SETTINGS_MOBILE:  1223,
    CONFIG_SETTINGS_BILLING:  1224,
    CONFIG_SETTINGS_SUPPORT:  1225,
    CONFIG_SETTINGS_SITE:  1226,
    CONFIG_ACTIVITY_STATS:  1310,
    CONFIG_ACTIVITY_COMMENTS:  1311,
    CONFIG_COMMERCE_ORDERS:  1410,
    CONFIG_COMMERCE_STORE_SETTINGS:  1411,
    CONFIG_COMMERCE_SHIPPING:  1412,
    CONFIG_COMMERCE_COUPONS:  1413,
    CONFIG_COMMERCE_TAXES:  1414,
    CONFIG_COMMERCE_EMAIL_NOTIFICATIONS:  1415,
    CONFIG_COMMERCE_INVENTORY:  1416,
    CONFIG_NEWSLETTER_READ_SUBSCRIBER:  1510,
    CONFIG_NEWSLETTER_WRITE_SUBSCRIBER:  1511,
    CONFIG_NEWSLETTER_READ_GROUP:  1512,
    CONFIG_NEWSLETTER_WRITE_GROUP:  1513,
    CONFIG_NEWSLETTER_READ_MESSAGE:  1514,
    CONFIG_NEWSLETTER_WRITE_MESSAGE:  1515,
    CONFIG_NEWSLETTER_READ_SETTINGS:  1516,
    CONFIG_NEWSLETTER_WRITE_SETTINGS:  1517,
    ADMIN_GRANT_ACCESS:  2010,
    ADMIN_BILLING_READ:  2011,
    ADMIN_BILLING_WRITE:  2012,
    ADMIN_READ_CUSTOMER_DATA:  2013,
    ADMIN_WRITE_CUSTOMER_DATA:  2014,
    ADMIN_DEV_SETTINGS:  2015,
    ADMIN_MARKETING_READ:  2016,
    ADMIN_MARKETING_WRITE:  2017,
    ADMIN_LOGINAS:       2018,
    ADMIN_TEMPLATE_SETTINGS:  2019,
    ADMIN_SYSTEM_JSON_VIEW:  2020,
    ADMIN_TAXONOMY:      2021,
    ADMIN_CHANGE_USER_EMAIL:  2022,
    ADMIN_ADD_NOTE:      2023,
    ADMIN_EDIT_OTHER_NOTES:  2024,
    ADMIN_EXTEND_TRIAL:  2025,
    ADMIN_BIZPIPE_STATS_MOBILE_ACCESS:  2026
  };

  Y.namespace('Squarespace').MemberAccountRole = {
    SUPERADMIN:          1,
    BILLING:             2,
    SUPPORT:             3,
    DEV:                 4,
    MARKETING:           5,
    SUPPORT_SUPERVISOR:  6,
    INTERNAL_REPORTING:  7
  };

  Y.namespace('Squarespace').ShippingPriceRequestStatus = {
    SUCCESS:             1,
    DESTINATION_MISSING:  2,
    CARRIER_UNAVAILABLE:  3
  };

  Y.namespace('Squarespace').TweakTypes = {
    COLOR:               1,
    HUE:                 2,
    FONT:                3,
    IMAGE:               4,
    VALUE:               5,
    MARGIN:              6,
    PADDING:             7,
    DROPDOWN:            8,
    CHECKBOX:            9,
    COLORPALETTE:        10
  };

  Y.namespace('Squarespace').StoreStates = {
    LIVE:                1,
    TEST_MODE:           2,
    NOT_CONNECTED:       3
  };

  Y.namespace('Squarespace').ProductTypes = {
    PHYSICAL:            1,
    DIGITAL:             2,
    SERVICE:             3
  };

  Y.namespace('Squarespace').WidgetTypes = {
    NAVIGATION:          1,
    HTML:                2,
    LOGO:                3,
    MAP:                 4,
    IMAGE:               5,
    TWITTER:             6,
    JOURNAL:             7,
    GALLERY:             8,
    FORM:                9,
    GEO:                 10,
    INDEX:               11,
    COLLECTION_LINK:     12,
    LINK:                13,
    TAGCLOUD:            14,
    COMMENTS:            16,
    FOLDER:              17,
    MENU:                18,
    SOCIAL_LINKS:        19,
    SUMMARY:             20,
    SPACER:              21,
    EMBED:               22,
    CODE:                23,
    FOURSQUARE:          24,
    INSTAGRAM:           25,
    CALENDAR:            26,
    POSTS_BY_AUTHOR:     27,
    POSTS_BY_TAG:        28,
    POSTS_BY_CATEGORY:   29,
    POSTS_BY_MONTH:      30,
    QUOTE:               31,
    VIDEO:               32,
    SEARCH:              33,
    AUDIO:               41,
    FIVEHUNDREDPIX:      42,
    PRODUCT:             43,
    MARKDOWN:            44,
    FLICKR:              45,
    AMAZON:              46,
    HORIZONTAL_RULE:     47,
    SOCIAL_ACCOUNT_LINKS:  48,
    RSS:                 49,
    OPENTABLE:           50,
    NEWSLETTER:          51,
    DONATION:            52
  };

  Y.namespace('Squarespace').MediaProcessingConstants = {
    QUEUED:              1,
    PROCESSING:          2,
    READY:               3,
    ERROR:               4,
    DOWNLOAD_ERROR:      5,
    ERROR_TOO_LARGE:     6,
    ERROR_FILE_NOT_FOUND:  7,
    ERROR_UNSUPPORTED_IMAGE_TYPE:  8,
    ERROR_UNSUPPORTED_AUDIO_TYPE:  9
  };

  Y.namespace('Squarespace').FormType = {
    BLOCK:               1,
    PRODUCT:             2,
    DONATION:            3,
    SPLASH_PAGE:         4
  };

  Y.namespace('Squarespace').CensusDataType = {
    TOTAL:               1,
    PAGE_URL:            2,
    PAGE_TITLE:          3,
    BROWSER:             4,
    OS:                  5,
    COUNTRY:             6,
    REFERRER:            7,
    SEARCH_TERM:         8,
    SEARCH_ENGINE:       9,
    SUBSCRIBER:          10
  };

  Y.namespace('Squarespace').CommentSortTypes = {
    OLDEST_FIRST:        1,
    NEWEST_FIRST:        2,
    MOST_LIKED:          3,
    LEAST_LIKED:         4,
    MOST_FLAGGED:        5
  };

  Y.namespace('Squarespace').EventView = {
    CALENDAR:            0,
    LIST:                1
  };

  Y.namespace('Squarespace').SocialIconAlignments = {
    LEFT:                'left',
    RIGHT:               'right',
    CENTER:              'center'
  };

  Y.namespace('Squarespace').SocialIconColors = {
    BLACK:               'black',
    WHITE:               'white',
    STANDARD:            'standard'
  };

  Y.namespace('Squarespace').PlanViolationErrors = {
    PAGE_LIMIT_EXCEEDED:  1,
    STORAGE_LIMIT_EXCEEDED:  2
  };

  Y.namespace('Squarespace').FormStorageBackendType = {
    GOOGLE:              1,
    MAILCHIMP:           2,
    EMAIL:               3
  };

  Y.namespace('Squarespace').OrderStates = {
    WAITING:             1,
    SHIPPED:             2,
    REFUNDED:            3,
    CANCELLED:           4
  };

  Y.namespace('Squarespace').CurrencySymbol = {
    USD:                 '$',
    CAD:                 '$',
    GBP:                 'Â£',
    AUD:                 '$',
    EUR:                 'â‚¬'
  };

  Y.namespace('Squarespace').SocialIconSizes = {
    SMALL:               'small',
    DEFAULT:             'default',
    LARGE:               'large'
  };

  Y.namespace('Squarespace').OrderPaymentStates = {
    NOT_CHARGED:         1,
    AUTHORIZED:          2,
    PAID:                3,
    REFUNDED:            4
  };

  Y.namespace('Squarespace').CommentTargetTypes = {
    ITEM:                1,
    COLLECTION:          2
  };

  Y.namespace('Squarespace').ConfigurationMenuItemType = {
    HOME:                1,
    CONTENT:             2,
    DASHBOARD:           3,
    SETTINGS:            4,
    COMMERCE:            5,
    FOLDER:              6,
    HELP:                7,
    NEWSLETTERS:         8
  };

  Y.namespace('Squarespace').JobTypes = {
    IMAGE_PROCESSING:    2,
    IMPORTING:           3,
    PUSH:                4,
    S3:                  6,
    SMTP:                7,
    DESK_TICKET:         8,
    SEARCH_REINDEX:      9,
    INSTAGRAM:           10,
    SOCIAL_PULL:         11,
    FOURSQUARE:          12,
    DYNECT:              13,
    BETAEND:             14,
    BULK_IMAGE_PROCESSING:  15,
    EXPORTING_WORDPRESS:  16,
    EXPORTING_INTERNAL:  17,
    COLLECTION_SYNC:     18,
    CONTENT_STATS_REGENERATION:  19,
    SEARCH_REALTIME:     20,
    GENERATE_SITEMAP:    21,
    IMAGE_FOCAL_POINT:   22,
    MIGRATE_CONTENT_STATS:  23,
    DELETE_WEBSITE:      24,
    RESTORE_DELETED_WEBSITE:  25,
    STATS_MIGRATION:     26,
    STATS_COPY:          27,
    AUDIO_PROCESSING:    28,
    SEND_NEWSLETTER_MESSAGE:  29,
    PUBLISH_SCHEDULED_POST:  30,
    DISABLE_COMMENTS:    31
  };

  Y.namespace('Squarespace').WorkflowStates = {
    PUBLISHED:           1,
    SCHEDULED:           2,
    NEEDS_REVIEW:        3,
    DRAFT:               4,
    PRIVATE:             5
  };

  Y.namespace('Squarespace').MeasurementStandard = {
    IMPERIAL:            1,
    METRIC:              2
  };

  Y.namespace('Squarespace').ExternalServiceProviders = {
    FOURSQUARE:          1,
    FACEBOOK:            2,
    FLICKR:              3,
    TWITTER:             4,
    GOOGLE:              5,
    GOOGLE_SPREADSHEET:  6,
    TUMBLR:              8,
    DROPBOX:             9,
    INSTAGRAM:           10,
    YOUTUBE:             11,
    VIMEO:               12,
    MAILCHIMP:           13,
    LINKEDIN:            14,
    STRIPE:              15,
    FIVEHUNDREDPIX:      16,
    SMUGMUG:             17,
    DRIBBBLE:            18,
    PINTEREST:           19,
    EMAIL:               20,
    GOOGLEAUTH2:         21,
    GOOGLEDOCS2:         22,
    GITHUB:              23
  };

  Y.namespace('Squarespace').OrderEventType = {
    STATE_CHANGE:        1,
    PAYMENT_STATE_CHANGE:  2
  };

  Y.namespace('Squarespace').CensusGranularity = {
    HOURLY:              1,
    DAILY:               2,
    WEEKLY:              3,
    MONTHLY:             4
  };

  Y.namespace('Squarespace').TaxScopes = {
    COUNTRY:             1,
    STATE:               2,
    LOCAL:               3
  };

  Y.namespace('Squarespace').CommentStates = {
    ENABLED:             1,
    DISABLED:            2
  };

  Y.namespace('Squarespace').CensusDataMetric = {
    ALL:                 0,
    VIEWS:               1,
    VISITS:              2,
    VISITORS:            3,
    COUNT:               4
  };

  Y.namespace('Squarespace').ShippingRateTypes = {
    FLAT:                1,
    WEIGHT_RANGE:        3,
    USPS:                6
  };

  Y.namespace('Squarespace').StatusConstants = {
    EXPIRED:             1,
    PASTDUE:             2,
    TRIAL:               3,
    BETA:                4,
    REMOVED:             5,
    INTERNAL:            6,
    COMPED:              7,
    ACTIVE:              8
  };

  Y.namespace('Squarespace').SocialServices = {
    TWITTER:             1,
    FACEBOOK:            2,
    GOOGLE:              3,
    LINKEDIN:            4,
    STUMBLE:             5,
    REDDIT:              6,
    PINTEREST:           7,
    TUMBLR:              8
  };

  Y.namespace('Squarespace').AccountStates = {
    ACTIVE:              1,
    UNAUTHORIZED:        2
  };

  Y.namespace('Squarespace').ContentConstants = {
    TEXT:                1,
    IMAGE:               2,
    QUOTE:               4,
    LINK:                5,
    CHAT:                6,
    AUDIO:               7,
    VIDEO:               8,
    VIDEO_DEPRECATED:    9,
    REVIEW:              10,
    STORE_ITEM:          11,
    EVENT:               12,
    THREAD:              13,
    GALLERY:             14,
    BINARY:              15,
    CSSASSET:            16,
    TWEAKASSET:          17,
    DIGITALGOOD:         18,
    ATTACHMENT:          19,
    EXPORT_WORDPRESS:    20,
    EXPORT_INTERNAL:     21,
    TWEET:               50,
    RSS:                 51,
    CHECKIN:             52,
    DELICIOUS:           53,
    KBARTICLE:           54
  };

  Y.namespace('Squarespace').CollectionOrdering = {
    USER:                1,
    CHRONOLOGICAL:       2,
    CUSTOM:              3,
    CALENDAR:            4,
    MUSIC_ALBUM:         5,
    KNOWLEDGE_BASE:      6
  };

  Y.namespace('Squarespace').SocialIconStyles = {
    ROUND:               'round',
    SQUARE:              'square',
    ICON_ONLY:           'icon-only'
  };

  Y.namespace('Squarespace').CommentStatuses = {
    APPROVED:            1,
    AWAITING_MODERATION:  2,
    DELETED:             3,
    SPAM:                4,
    POSSIBLY_SPAM:       5
  };

  Y.namespace('Squarespace').FocalPointSources = {
    HUMAN:               1,
    MACHINE:             2,
    DEFAULT:             3
  };

  Y.namespace('Squarespace').ImportingSources = {
    V5:                  1,
    WORDPRESS:           2,
    TUMBLR:              3,
    BLOGGER:             5,
    FLICKR:              6,
    ETSY:                7,
    SHOPIFY:             8,
    BIG_CARTEL:          9
  };

  Y.namespace('Squarespace').SplashPageCallToActionTypes = {
    NONE:                1,
    LINK:                2,
    LIGHTBOX_VIDEO:      3,
    FORM:                4,
    IOS_LINK:            5,
    ANDROID_LINK:        6
  };

  Y.namespace('Squarespace').JobStatuses = {
    WAITING:             1,
    PROCESSING:          2,
    SUCCESS:             3,
    FAILURE:             4,
    CANCELLED:           5,
    SCHEDULED:           6
  };

}, '1.0', { requires: [] });


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/attribute-extras/attribute-extras.js
// ----------------------------------------------------------------------------------------

YUI.add('attribute-extras', function (Y, NAME) {

    /**
     * The attribute module provides an augmentable Attribute implementation, which
     * adds configurable attributes and attribute change events to the class being
     * augmented. It also provides a State class, which is used internally by Attribute,
     * but can also be used independently to provide a name/property/value data structure to
     * store state.
     *
     * @module attribute
     */

    /**
     * The attribute-extras submodule provides less commonly used attribute methods, and can
     * be augmented/mixed into an implemention which used attribute-core.
     *
     * @module attribute
     * @submodule attribute-extras
     */
    var BROADCAST = "broadcast",
        PUBLISHED = "published",
        INIT_VALUE = "initValue",

        MODIFIABLE = {
            readOnly:1,
            writeOnce:1,
            getter:1,
            broadcast:1
        };

    /**
     * A augmentable implementation for AttributeCore, providing less frequently used
     * methods for Attribute management such as modifyAttrs(), removeAttr and reset()
     *
     * @class AttributeExtras
     * @extensionfor AttributeCore
     */
    function AttributeExtras() {}

    AttributeExtras.prototype = {

        /**
         * Updates the configuration of an attribute which has already been added.
         * <p>
         * The properties which can be modified through this interface are limited
         * to the following subset of attributes, which can be safely modified
         * after a value has already been set on the attribute: readOnly, writeOnce,
         * broadcast and getter.
         * </p>
         * @method modifyAttr
         * @param {String} name The name of the attribute whose configuration is to be updated.
         * @param {Object} config An object with configuration property/value pairs, specifying the configuration properties to modify.
         */
        modifyAttr: function(name, config) {
            var host = this, // help compression
                prop, state;

            if (host.attrAdded(name)) {

                if (host._isLazyAttr(name)) {
                    host._addLazyAttr(name);
                }

                state = host._state;
                for (prop in config) {
                    if (MODIFIABLE[prop] && config.hasOwnProperty(prop)) {
                        state.add(name, prop, config[prop]);

                        // If we reconfigured broadcast, need to republish
                        if (prop === BROADCAST) {
                            state.remove(name, PUBLISHED);
                        }
                    }
                }
            }
            /*jshint maxlen:200*/
            /*jshint maxlen:150 */
        },

        /**
         * Removes an attribute from the host object
         *
         * @method removeAttr
         * @param {String} name The name of the attribute to be removed.
         */
        removeAttr: function(name) {
            this._state.removeAll(name);
        },

        /**
         * Resets the attribute (or all attributes) to its initial value, as long as
         * the attribute is not readOnly, or writeOnce.
         *
         * @method reset
         * @param {String} name Optional. The name of the attribute to reset.  If omitted, all attributes are reset.
         * @return {Object} A reference to the host object.
         * @chainable
         */
        reset : function(name) {
            var host = this;  // help compression

            if (name) {
                if (host._isLazyAttr(name)) {
                    host._addLazyAttr(name);
                }
                host.set(name, host._state.get(name, INIT_VALUE));
            } else {
                Y.each(host._state.data, function(v, n) {
                    host.reset(n);
                });
            }
            return host;
        },

        /**
         * Returns an object with the configuration properties (and value)
         * for the given attribute. If attrName is not provided, returns the
         * configuration properties for all attributes.
         *
         * @method _getAttrCfg
         * @protected
         * @param {String} name Optional. The attribute name. If not provided, the method will return the configuration for all attributes.
         * @return {Object} The configuration properties for the given attribute, or all attributes.
         */
        _getAttrCfg : function(name) {
            var o,
                state = this._state;

            if (name) {
                o = state.getAll(name) || {};
            } else {
                o = {};
                Y.each(state.data, function(v, n) {
                    o[n] = state.getAll(n);
                });
            }

            return o;
        }
    };

    Y.AttributeExtras = AttributeExtras;


}, '3.10.1', {"requires": ["oop"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/calendar/calendar.js
// ----------------------------------------------------------------------------------------

YUI.add('calendar', function (Y, NAME) {

/**
 * The Calendar component is a UI widget that allows users
 * to view dates in a two-dimensional month grid, as well as
 * to select one or more dates, or ranges of dates. Calendar
 * is generated dynamically and relies on the developer to
 * provide for a progressive enhancement alternative.
 *
 *
 * @module calendar
 */

var getCN             = Y.ClassNameManager.getClassName,
    CALENDAR          = 'calendar',
    KEY_DOWN          = 40,
    KEY_UP            = 38,
    KEY_LEFT          = 37,
    KEY_RIGHT         = 39,
    KEY_ENTER         = 13,
    KEY_SPACE         = 32,
    CAL_DAY_SELECTED  = getCN(CALENDAR, 'day-selected'),
    CAL_DAY_HILITED   = getCN(CALENDAR, 'day-highlighted'),
    CAL_DAY           = getCN(CALENDAR, 'day'),
    CAL_PREVMONTH_DAY = getCN(CALENDAR, 'prevmonth-day'),
    CAL_NEXTMONTH_DAY = getCN(CALENDAR, 'nextmonth-day'),
    CAL_GRID          = getCN(CALENDAR, 'grid'),
    ydate             = Y.DataType.Date,
    CAL_PANE          = getCN(CALENDAR, 'pane'),
    os                = Y.UA.os;

/** Create a calendar view to represent a single or multiple
    * month range of dates, rendered as a grid with date and
    * weekday labels.
    *
    * @class Calendar
    * @extends CalendarBase
    * @param config {Object} Configuration object (see Configuration attributes)
    * @constructor
    */
function Calendar() {
    Calendar.superclass.constructor.apply ( this, arguments );
}

Y.Calendar = Y.extend(Calendar, Y.CalendarBase, {

    _keyEvents: [],

    _highlightedDateNode: null,

    /**
     * A property tracking the last selected date on the calendar, for the
     * purposes of multiple selection.
     *
     * @property _lastSelectedDate
     * @type Date
     * @default null
     * @private
     */
    _lastSelectedDate: null,

    /**
     * Designated initializer. Activates the navigation plugin for the calendar.
     *
     * @method initializer
     */
    initializer : function () {
        this.plug(Y.Plugin.CalendarNavigator);

        this._keyEvents = [];
        this._highlightedDateNode = null;
        this._lastSelectedDate = null;
    },

    /**
     * Overrides the _bindCalendarEvents placeholder in CalendarBase
     * and binds calendar events during bindUI stage.
     * @method _bindCalendarEvents
     * @protected
     */
    _bindCalendarEvents : function () {
        var contentBox = this.get('contentBox'),
            pane       = contentBox.one("." + CAL_PANE);

        pane.on("selectstart", this._preventSelectionStart);
        pane.delegate("click", this._clickCalendar, "." + CAL_DAY + ", ." + CAL_PREVMONTH_DAY + ", ." + CAL_NEXTMONTH_DAY, this);
        pane.delegate("keydown", this._keydownCalendar, "." + CAL_GRID, this);
        pane.delegate("focus", this._focusCalendarGrid, "." + CAL_GRID, this);
        pane.delegate("focus", this._focusCalendarCell, "." + CAL_DAY, this);
        pane.delegate("blur", this._blurCalendarGrid, "." + CAL_GRID + ",." + CAL_DAY, this);
    },

    /**
     * Prevents text selection if it is started within the calendar pane
     * @method _preventSelectionStart
     * @param event {Event} The selectstart event
     * @protected
     */
    _preventSelectionStart : function (event) {
        event.preventDefault();
    },

    /**
     * Highlights a specific date node with keyboard highlight class
     * @method _highlightDateNode
     * @param oDate {Date} Date corresponding the node to be highlighted
     * @protected
     */
    _highlightDateNode : function (oDate) {
        this._unhighlightCurrentDateNode();
        var newNode = this._dateToNode(oDate);
        newNode.focus();
        newNode.addClass(CAL_DAY_HILITED);
    },

    /**
     * Unhighlights a specific date node currently highlighted with keyboard highlight class
     * @method _unhighlightCurrentDateNode
     * @protected
     */
    _unhighlightCurrentDateNode : function () {
        var allHilitedNodes = this.get("contentBox").all("." + CAL_DAY_HILITED);
        if (allHilitedNodes) {
            allHilitedNodes.removeClass(CAL_DAY_HILITED);
        }
    },

    /**
     * Returns the grid number for a specific calendar grid (for multi-grid templates)
     * @method _getGridNumber
     * @param gridNode {Node} Node corresponding to a specific grid
     * @protected
     */
    _getGridNumber : function (gridNode) {
        var idParts = gridNode.get("id").split("_").reverse();

        return parseInt(idParts[0], 10);
    },

    /**
     * Handler for loss of focus of calendar grid
     * @method _blurCalendarGrid
     * @protected
     */
    _blurCalendarGrid : function () {
        this._unhighlightCurrentDateNode();
    },


    /**
     * Handler for gain of focus of calendar cell
     * @method _focusCalendarCell
     * @protected
     */
    _focusCalendarCell : function (ev) {
        this._highlightedDateNode = ev.target;
        ev.stopPropagation();
    },

    /**
     * Handler for gain of focus of calendar grid
     * @method _focusCalendarGrid
     * @protected
     */
    _focusCalendarGrid : function () {
        this._unhighlightCurrentDateNode();
        this._highlightedDateNode = null;
    },

    /**
     * Handler for keyboard press on a calendar grid
     * @method _keydownCalendar
     * @protected
     */
    _keydownCalendar : function (ev) {
        var gridNum = this._getGridNumber(ev.target),
            curDate = !this._highlightedDateNode ? null : this._nodeToDate(this._highlightedDateNode),
            keyCode = ev.keyCode,
            dayNum = 0,
            dir = '',
            selMode,
            newDate,
            startDate,
            endDate,
            lastPaneDate;

        switch(keyCode) {
            case KEY_DOWN:
                dayNum = 7;
                dir = 's';
                break;
            case KEY_UP:
                dayNum = -7;
                dir = 'n';
                break;
            case KEY_LEFT:
                dayNum = -1;
                dir = 'w';
                break;
            case KEY_RIGHT:
                dayNum = 1;
                dir = 'e';
                break;
            case KEY_SPACE: case KEY_ENTER:
                ev.preventDefault();
                if (this._highlightedDateNode) {
                    selMode = this.get("selectionMode");
                    if (selMode === "single" && !this._highlightedDateNode.hasClass(CAL_DAY_SELECTED)) {
                            this._clearSelection(true);
                            this._addDateToSelection(curDate);
                    } else if (selMode === "multiple" || selMode === "multiple-sticky") {
                        if (this._highlightedDateNode.hasClass(CAL_DAY_SELECTED)) {
                            this._removeDateFromSelection(curDate);
                        } else {
                            this._addDateToSelection(curDate);
                        }
                    }
                }
                break;
        }


        if (keyCode === KEY_DOWN || keyCode === KEY_UP || keyCode === KEY_LEFT || keyCode === KEY_RIGHT) {

            if (!curDate) {
                curDate = ydate.addMonths(this.get("date"), gridNum);
                dayNum = 0;
            }

            ev.preventDefault();

            newDate = ydate.addDays(curDate, dayNum);
            startDate = this.get("date");
            endDate = ydate.addMonths(this.get("date"), this._paneNumber - 1);
            lastPaneDate = new Date(endDate);
            endDate.setDate(ydate.daysInMonth(endDate));

            if (ydate.isInRange(newDate, startDate, endDate)) {
/*
                var paneShift = (newDate.getMonth() - curDate.getMonth()) % 10;

                if (paneShift != 0) {
                    var newGridNum = gridNum + paneShift,
                            contentBox = this.get('contentBox'),
                            newPane = contentBox.one("#" + this._calendarId + "_pane_" + newGridNum);
                            newPane.focus();
                }
*/
                this._highlightDateNode(newDate);
            } else if (ydate.isGreater(startDate, newDate)) {
                if (!ydate.isGreaterOrEqual(this.get("minimumDate"), startDate)) {
                    this.set("date", ydate.addMonths(startDate, -1));
                    this._highlightDateNode(newDate);
                }
            } else if (ydate.isGreater(newDate, endDate)) {
                if (!ydate.isGreaterOrEqual(lastPaneDate, this.get("maximumDate"))) {
                    this.set("date", ydate.addMonths(startDate, 1));
                    this._highlightDateNode(newDate);
                }
            }
        }
    },

    /**
     * Handles the calendar clicks based on selection mode.
     * @method _clickCalendar
     * @param {Event} ev A click event
     * @private
     */
    _clickCalendar : function (ev) {
        var clickedCell = ev.currentTarget,
            clickedCellIsDay = clickedCell.hasClass(CAL_DAY) &&
                                !clickedCell.hasClass(CAL_PREVMONTH_DAY) &&
                                !clickedCell.hasClass(CAL_NEXTMONTH_DAY),

        clickedCellIsSelected = clickedCell.hasClass(CAL_DAY_SELECTED),
        selectedDate;

        switch (this.get("selectionMode")) {
            case("single"):
                if (clickedCellIsDay) {
                    if (!clickedCellIsSelected) {
                        this._clearSelection(true);
                        this._addDateToSelection(this._nodeToDate(clickedCell));
                    }
                }
                break;
            case("multiple-sticky"):
                if (clickedCellIsDay) {
                    if (clickedCellIsSelected) {
                        this._removeDateFromSelection(this._nodeToDate(clickedCell));
                    } else {
                        this._addDateToSelection(this._nodeToDate(clickedCell));
                    }
                }
                break;
            case("multiple"):
                if (clickedCellIsDay) {
                    if (!ev.metaKey && !ev.ctrlKey && !ev.shiftKey) {
                        this._clearSelection(true);
                        this._lastSelectedDate = this._nodeToDate(clickedCell);
                        this._addDateToSelection(this._lastSelectedDate);
                    } else if (((os === 'macintosh' && ev.metaKey) || (os !== 'macintosh' && ev.ctrlKey)) && !ev.shiftKey) {
                        if (clickedCellIsSelected) {
                            this._removeDateFromSelection(this._nodeToDate(clickedCell));
                            this._lastSelectedDate = null;
                        } else {
                            this._lastSelectedDate = this._nodeToDate(clickedCell);
                            this._addDateToSelection(this._lastSelectedDate);
                        }
                    } else if (((os === 'macintosh' && ev.metaKey) || (os !== 'macintosh' && ev.ctrlKey)) && ev.shiftKey) {
                        if (this._lastSelectedDate) {
                            selectedDate = this._nodeToDate(clickedCell);
                            this._addDateRangeToSelection(selectedDate, this._lastSelectedDate);
                            this._lastSelectedDate = selectedDate;
                        } else {
                            this._lastSelectedDate = this._nodeToDate(clickedCell);
                            this._addDateToSelection(this._lastSelectedDate);
                        }
                    } else if (ev.shiftKey) {
                        if (this._lastSelectedDate) {
                            selectedDate = this._nodeToDate(clickedCell);
                            this._clearSelection(true);
                            this._addDateRangeToSelection(selectedDate, this._lastSelectedDate);
                            this._lastSelectedDate = selectedDate;
                        } else {
                            this._clearSelection(true);
                            this._lastSelectedDate = this._nodeToDate(clickedCell);
                            this._addDateToSelection(this._lastSelectedDate);
                        }
                    }
                }
                break;
        }

        if (clickedCellIsDay) {
            /**
            * Fired when a specific date cell in the calendar is clicked. The event carries a
            * payload which includes a `cell` property corresponding to the node of the actual
            * date cell, and a `date` property, with the `Date` that was clicked.
            *
            * @event dateClick
            */
            this.fire("dateClick", {cell: clickedCell, date: this._nodeToDate(clickedCell)});
        } else if (clickedCell.hasClass(CAL_PREVMONTH_DAY)) {
            /**
            * Fired when any of the previous month's days displayed before the calendar grid
            * are clicked.
            *
            * @event prevMonthClick
            */
            this.fire("prevMonthClick");
        } else if (clickedCell.hasClass(CAL_NEXTMONTH_DAY)) {
            /**
            * Fired when any of the next month's days displayed after the calendar grid
            * are clicked.
            *
            * @event nextMonthClick
            */
            this.fire("nextMonthClick");
        }
    },

    /**
     * Subtracts one month from the current calendar view.
     * @method subtractMonth
     * @return {Calendar} A reference to this object
     * @chainable
     */
    subtractMonth : function (e) {
        this.set("date", ydate.addMonths(this.get("date"), -1));
        if (e) {
            e.halt();
        }
        return this;
    },

    /**
     * Subtracts one year from the current calendar view.
     * @method subtractYear
     * @return {Calendar} A reference to this object
     * @chainable
     */
    subtractYear : function (e) {
        this.set("date", ydate.addYears(this.get("date"), -1));
        if (e) {
            e.halt();
        }
        return this;
    },

    /**
     * Adds one month to the current calendar view.
     * @method addMonth
     * @return {Calendar} A reference to this object
     * @chainable
     */
    addMonth : function (e) {
        this.set("date", ydate.addMonths(this.get("date"), 1));
        if (e) {
            e.halt();
        }
        return this;
    },

    /**
     * Adds one year to the current calendar view.
     * @method addYear
     * @return {Calendar} A reference to this object
     * @chainable
     */
    addYear : function (e) {
        this.set("date", ydate.addYears(this.get("date"), 1));
        if (e) {
            e.halt();
        }
        return this;
    }
}, {
    /**
    * The identity of the widget.
    *
    * @property NAME
    * @type String
    * @default 'calendar'
    * @readOnly
    * @protected
    * @static
    */
    NAME: "calendar",

    /**
    * Static property used to define the default attribute configuration of
    * the Widget.
    *
    * @property ATTRS
    * @type {Object}
    * @protected
    * @static
    */
    ATTRS: {

        /**
         * A setting specifying the type of selection the calendar allows.
         * Possible values include:
         * <ul>
         *   <li>`single` - One date at a time</li>
         *   <li>`multiple-sticky` - Multiple dates, selected one at a time (the dates "stick"). This option
         *   is appropriate for mobile devices, where function keys from the keyboard are not available.</li>
         *   <li>`multiple` - Multiple dates, selected with Ctrl/Meta keys for additional single
         *   dates, and Shift key for date ranges.</li>
         *
         * @attribute selectionMode
         * @type String
         * @default single
         */
        selectionMode: {
            value: "single"
        },

        /**
         * The date corresponding to the current calendar view. Always
         * normalized to the first of the month that contains the date
         * at assignment time. Used as the first date visible in the
         * calendar.
         *
         * @attribute date
         * @type Date
         * @default Today's date as set on the user's computer.
         */
        date: {
            value: new Date(),
            lazyAdd: false,
            setter: function (val) {

                var newDate = this._normalizeDate(val),
                    newTopDate = ydate.addMonths(newDate, this._paneNumber - 1),
                    minDate = this.get("minimumDate"),
                    maxDate = this.get("maximumDate"),
                    actualMaxDate;

                if ((!minDate || ydate.isGreaterOrEqual(newDate, minDate)) &&
                        (!maxDate || ydate.isGreaterOrEqual(maxDate, newTopDate))
                ) {
                    return newDate;
                } else if (minDate && ydate.isGreater(minDate, newDate)) {
                    return minDate;
                } else if (maxDate && ydate.isGreater(newTopDate, maxDate)) {
                    actualMaxDate = ydate.addMonths(maxDate, -1*(this._paneNumber - 1));
                    return actualMaxDate;
                }
            }
        },

        /**
         * The minimum date that can be displayed by the calendar. The calendar will not
         * allow dates earlier than this one to be set, and will reset any earlier date to
         * this date. Should be `null` if no minimum date is needed.
         *
         * @attribute minimumDate
         * @type Date
         * @default null
         */
        minimumDate: {
            value: null,
            setter: function (val) {
                if (val) {
                    var curDate = this.get('date'),
                        newMinDate = this._normalizeDate(val);
                    if (curDate && !ydate.isGreaterOrEqual(curDate, newMinDate)) {
                        this.set('date', newMinDate);
                    }
                    return newMinDate;
                } else {
                    return this._normalizeDate(val);
                }
            }
        },

        /**
         * The maximum date that can be displayed by the calendar. The calendar will not
         * allow dates later than this one to be set, and will reset any later date to
         * this date. Should be `null` if no maximum date is needed.
         *
         * @attribute maximumDate
         * @type Date
         * @default null
         */
        maximumDate: {
            value: null,
            setter: function (val) {
                if (val) {
                    var curDate = this.get('date'),
                        newMaxDate = this._normalizeDate(val);
                    if (curDate && !ydate.isGreaterOrEqual(val, ydate.addMonths(curDate, this._paneNumber - 1))) {
                        this.set('date', ydate.addMonths(newMaxDate, -1*(this._paneNumber -1)));
                    }
                    return newMaxDate;
                } else {
                    return val;
                }
            }
        }
    }
});

}, '3.10.1', {
    "requires": [
        "calendar-base",
        "calendarnavigator"
    ],
    "lang": [
        "de",
        "en",
        "es",
        "es-AR",
        "fr",
        "it",
        "ja",
        "nb-NO",
        "nl",
        "pt-BR",
        "ru",
        "zh-HANT-TW"
    ],
    "skinnable": true
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/attribute-complex/attribute-complex.js
// ----------------------------------------------------------------------------------------

YUI.add('attribute-complex', function (Y, NAME) {

    /**
     * Adds support for attribute providers to handle complex attributes in the constructor
     *
     * @module attribute
     * @submodule attribute-complex
     * @for Attribute
     * @deprecated AttributeComplex's overrides are now part of AttributeCore.
     */

    var Attribute = Y.Attribute;

    Attribute.Complex = function() {};
    Attribute.Complex.prototype = {

        /**
         * Utility method to split out simple attribute name/value pairs ("x")
         * from complex attribute name/value pairs ("x.y.z"), so that complex
         * attributes can be keyed by the top level attribute name.
         *
         * @method _normAttrVals
         * @param {Object} valueHash An object with attribute name/value pairs
         *
         * @return {Object} An object literal with 2 properties - "simple" and "complex",
         * containing simple and complex attribute values respectively keyed
         * by the top level attribute name, or null, if valueHash is falsey.
         *
         * @private
         */
        _normAttrVals : Attribute.prototype._normAttrVals,

        /**
         * Returns the initial value of the given attribute from
         * either the default configuration provided, or the
         * over-ridden value if it exists in the set of initValues
         * provided and the attribute is not read-only.
         *
         * @param {String} attr The name of the attribute
         * @param {Object} cfg The attribute configuration object
         * @param {Object} initValues The object with simple and complex attribute name/value pairs returned from _normAttrVals
         *
         * @return {Any} The initial value of the attribute.
         *
         * @method _getAttrInitVal
         * @private
         */
        _getAttrInitVal : Attribute.prototype._getAttrInitVal

    };

    // Consistency with the rest of the Attribute addons for now.
    Y.AttributeComplex = Attribute.Complex;


}, '3.10.1', {"requires": ["attribute-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-base/event-base.js
// ----------------------------------------------------------------------------------------

(function () {
var GLOBAL_ENV = YUI.Env;

if (!GLOBAL_ENV._ready) {
    GLOBAL_ENV._ready = function() {
        GLOBAL_ENV.DOMReady = true;
        GLOBAL_ENV.remove(YUI.config.doc, 'DOMContentLoaded', GLOBAL_ENV._ready);
    };

    GLOBAL_ENV.add(YUI.config.doc, 'DOMContentLoaded', GLOBAL_ENV._ready);
}
})();
YUI.add('event-base', function (Y, NAME) {

/*
 * DOM event listener abstraction layer
 * @module event
 * @submodule event-base
 */

/**
 * The domready event fires at the moment the browser's DOM is
 * usable. In most cases, this is before images are fully
 * downloaded, allowing you to provide a more responsive user
 * interface.
 *
 * In YUI 3, domready subscribers will be notified immediately if
 * that moment has already passed when the subscription is created.
 *
 * One exception is if the yui.js file is dynamically injected into
 * the page.  If this is done, you must tell the YUI instance that
 * you did this in order for DOMReady (and window load events) to
 * fire normally.  That configuration option is 'injected' -- set
 * it to true if the yui.js script is not included inline.
 *
 * This method is part of the 'event-ready' module, which is a
 * submodule of 'event'.
 *
 * @event domready
 * @for YUI
 */
Y.publish('domready', {
    fireOnce: true,
    async: true
});

if (YUI.Env.DOMReady) {
    Y.fire('domready');
} else {
    Y.Do.before(function() { Y.fire('domready'); }, YUI.Env, '_ready');
}

/**
 * Custom event engine, DOM event listener abstraction layer, synthetic DOM
 * events.
 * @module event
 * @submodule event-base
 */

/**
 * Wraps a DOM event, properties requiring browser abstraction are
 * fixed here.  Provids a security layer when required.
 * @class DOMEventFacade
 * @param ev {Event} the DOM event
 * @param currentTarget {HTMLElement} the element the listener was attached to
 * @param wrapper {Event.Custom} the custom event wrapper for this DOM event
 */

    var ua = Y.UA,

    EMPTY = {},

    /**
     * webkit key remapping required for Safari < 3.1
     * @property webkitKeymap
     * @private
     */
    webkitKeymap = {
        63232: 38, // up
        63233: 40, // down
        63234: 37, // left
        63235: 39, // right
        63276: 33, // page up
        63277: 34, // page down
        25:     9, // SHIFT-TAB (Safari provides a different key code in
                   // this case, even though the shiftKey modifier is set)
        63272: 46, // delete
        63273: 36, // home
        63275: 35  // end
    },

    /**
     * Returns a wrapped node.  Intended to be used on event targets,
     * so it will return the node's parent if the target is a text
     * node.
     *
     * If accessing a property of the node throws an error, this is
     * probably the anonymous div wrapper Gecko adds inside text
     * nodes.  This likely will only occur when attempting to access
     * the relatedTarget.  In this case, we now return null because
     * the anonymous div is completely useless and we do not know
     * what the related target was because we can't even get to
     * the element's parent node.
     *
     * @method resolve
     * @private
     */
    resolve = function(n) {
        if (!n) {
            return n;
        }
        try {
            if (n && 3 == n.nodeType) {
                n = n.parentNode;
            }
        } catch(e) {
            return null;
        }

        return Y.one(n);
    },

    DOMEventFacade = function(ev, currentTarget, wrapper) {
        this._event = ev;
        this._currentTarget = currentTarget;
        this._wrapper = wrapper || EMPTY;

        // if not lazy init
        this.init();
    };

Y.extend(DOMEventFacade, Object, {

    init: function() {

        var e = this._event,
            overrides = this._wrapper.overrides,
            x = e.pageX,
            y = e.pageY,
            c,
            currentTarget = this._currentTarget;

        this.altKey   = e.altKey;
        this.ctrlKey  = e.ctrlKey;
        this.metaKey  = e.metaKey;
        this.shiftKey = e.shiftKey;
        this.type     = (overrides && overrides.type) || e.type;
        this.clientX  = e.clientX;
        this.clientY  = e.clientY;

        this.pageX = x;
        this.pageY = y;

        // charCode is unknown in keyup, keydown. keyCode is unknown in keypress.
        // FF 3.6 - 8+? pass 0 for keyCode in keypress events.
        // Webkit, FF 3.6-8+?, and IE9+? pass 0 for charCode in keydown, keyup.
        // Webkit and IE9+? duplicate charCode in keyCode.
        // Opera never sets charCode, always keyCode (though with the charCode).
        // IE6-8 don't set charCode or which.
        // All browsers other than IE6-8 set which=keyCode in keydown, keyup, and
        // which=charCode in keypress.
        //
        // Moral of the story: (e.which || e.keyCode) will always return the
        // known code for that key event phase. e.keyCode is often different in
        // keypress from keydown and keyup.
        c = e.keyCode || e.charCode;

        if (ua.webkit && (c in webkitKeymap)) {
            c = webkitKeymap[c];
        }

        this.keyCode = c;
        this.charCode = c;
        // Fill in e.which for IE - implementers should always use this over
        // e.keyCode or e.charCode.
        this.which = e.which || e.charCode || c;
        // this.button = e.button;
        this.button = this.which;

        this.target = resolve(e.target);
        this.currentTarget = resolve(currentTarget);
        this.relatedTarget = resolve(e.relatedTarget);

        if (e.type == "mousewheel" || e.type == "DOMMouseScroll") {
            this.wheelDelta = (e.detail) ? (e.detail * -1) : Math.round(e.wheelDelta / 80) || ((e.wheelDelta < 0) ? -1 : 1);
        }

        if (this._touch) {
            this._touch(e, currentTarget, this._wrapper);
        }
    },

    stopPropagation: function() {
        this._event.stopPropagation();
        this._wrapper.stopped = 1;
        this.stopped = 1;
    },

    stopImmediatePropagation: function() {
        var e = this._event;
        if (e.stopImmediatePropagation) {
            e.stopImmediatePropagation();
        } else {
            this.stopPropagation();
        }
        this._wrapper.stopped = 2;
        this.stopped = 2;
    },

    preventDefault: function(returnValue) {
        var e = this._event;
        e.preventDefault();
        e.returnValue = returnValue || false;
        this._wrapper.prevented = 1;
        this.prevented = 1;
    },

    halt: function(immediate) {
        if (immediate) {
            this.stopImmediatePropagation();
        } else {
            this.stopPropagation();
        }

        this.preventDefault();
    }

});

DOMEventFacade.resolve = resolve;
Y.DOM2EventFacade = DOMEventFacade;
Y.DOMEventFacade = DOMEventFacade;

    /**
     * The native event
     * @property _event
     * @type {Native DOM Event}
     * @private
     */

    /**
    The name of the event (e.g. "click")

    @property type
    @type {String}
    **/

    /**
    `true` if the "alt" or "option" key is pressed.

    @property altKey
    @type {Boolean}
    **/

    /**
    `true` if the shift key is pressed.

    @property shiftKey
    @type {Boolean}
    **/

    /**
    `true` if the "Windows" key on a Windows keyboard, "command" key on an
    Apple keyboard, or "meta" key on other keyboards is pressed.

    @property metaKey
    @type {Boolean}
    **/

    /**
    `true` if the "Ctrl" or "control" key is pressed.

    @property ctrlKey
    @type {Boolean}
    **/

    /**
     * The X location of the event on the page (including scroll)
     * @property pageX
     * @type {Number}
     */

    /**
     * The Y location of the event on the page (including scroll)
     * @property pageY
     * @type {Number}
     */

    /**
     * The X location of the event in the viewport
     * @property clientX
     * @type {Number}
     */

    /**
     * The Y location of the event in the viewport
     * @property clientY
     * @type {Number}
     */

    /**
     * The keyCode for key events.  Uses charCode if keyCode is not available
     * @property keyCode
     * @type {Number}
     */

    /**
     * The charCode for key events.  Same as keyCode
     * @property charCode
     * @type {Number}
     */

    /**
     * The button that was pushed. 1 for left click, 2 for middle click, 3 for
     * right click.  This is only reliably populated on `mouseup` events.
     * @property button
     * @type {Number}
     */

    /**
     * The button that was pushed.  Same as button.
     * @property which
     * @type {Number}
     */

    /**
     * Node reference for the targeted element
     * @property target
     * @type {Node}
     */

    /**
     * Node reference for the element that the listener was attached to.
     * @property currentTarget
     * @type {Node}
     */

    /**
     * Node reference to the relatedTarget
     * @property relatedTarget
     * @type {Node}
     */

    /**
     * Number representing the direction and velocity of the movement of the mousewheel.
     * Negative is down, the higher the number, the faster.  Applies to the mousewheel event.
     * @property wheelDelta
     * @type {Number}
     */

    /**
     * Stops the propagation to the next bubble target
     * @method stopPropagation
     */

    /**
     * Stops the propagation to the next bubble target and
     * prevents any additional listeners from being exectued
     * on the current target.
     * @method stopImmediatePropagation
     */

    /**
     * Prevents the event's default behavior
     * @method preventDefault
     * @param returnValue {string} sets the returnValue of the event to this value
     * (rather than the default false value).  This can be used to add a customized
     * confirmation query to the beforeunload event).
     */

    /**
     * Stops the event propagation and prevents the default
     * event behavior.
     * @method halt
     * @param immediate {boolean} if true additional listeners
     * on the current target will not be executed
     */
(function() {
/**
 * The event utility provides functions to add and remove event listeners,
 * event cleansing.  It also tries to automatically remove listeners it
 * registers during the unload event.
 * @module event
 * @main event
 * @submodule event-base
 */

/**
 * The event utility provides functions to add and remove event listeners,
 * event cleansing.  It also tries to automatically remove listeners it
 * registers during the unload event.
 *
 * @class Event
 * @static
 */

Y.Env.evt.dom_wrappers = {};
Y.Env.evt.dom_map = {};

var YDOM = Y.DOM,
    _eventenv = Y.Env.evt,
    config = Y.config,
    win = config.win,
    add = YUI.Env.add,
    remove = YUI.Env.remove,

    onLoad = function() {
        YUI.Env.windowLoaded = true;
        Y.Event._load();
        remove(win, "load", onLoad);
    },

    onUnload = function() {
        Y.Event._unload();
    },

    EVENT_READY = 'domready',

    COMPAT_ARG = '~yui|2|compat~',

    shouldIterate = function(o) {
        try {
            // TODO: See if there's a more performant way to return true early on this, for the common case
            return (o && typeof o !== "string" && Y.Lang.isNumber(o.length) && !o.tagName && !YDOM.isWindow(o));
        } catch(ex) {
            return false;
        }
    },

    // aliases to support DOM event subscription clean up when the last
    // subscriber is detached. deleteAndClean overrides the DOM event's wrapper
    // CustomEvent _delete method.
    _ceProtoDelete = Y.CustomEvent.prototype._delete,
    _deleteAndClean = function(s) {
        var ret = _ceProtoDelete.apply(this, arguments);

        if (!this.hasSubs()) {
            Y.Event._clean(this);
        }

        return ret;
    },

Event = function() {

    /**
     * True after the onload event has fired
     * @property _loadComplete
     * @type boolean
     * @static
     * @private
     */
    var _loadComplete =  false,

    /**
     * The number of times to poll after window.onload.  This number is
     * increased if additional late-bound handlers are requested after
     * the page load.
     * @property _retryCount
     * @static
     * @private
     */
    _retryCount = 0,

    /**
     * onAvailable listeners
     * @property _avail
     * @static
     * @private
     */
    _avail = [],

    /**
     * Custom event wrappers for DOM events.  Key is
     * 'event:' + Element uid stamp + event type
     * @property _wrappers
     * @type Y.Event.Custom
     * @static
     * @private
     */
    _wrappers = _eventenv.dom_wrappers,

    _windowLoadKey = null,

    /**
     * Custom event wrapper map DOM events.  Key is
     * Element uid stamp.  Each item is a hash of custom event
     * wrappers as provided in the _wrappers collection.  This
     * provides the infrastructure for getListeners.
     * @property _el_events
     * @static
     * @private
     */
    _el_events = _eventenv.dom_map;

    return {

        /**
         * The number of times we should look for elements that are not
         * in the DOM at the time the event is requested after the document
         * has been loaded.  The default is 1000@amp;40 ms, so it will poll
         * for 40 seconds or until all outstanding handlers are bound
         * (whichever comes first).
         * @property POLL_RETRYS
         * @type int
         * @static
         * @final
         */
        POLL_RETRYS: 1000,

        /**
         * The poll interval in milliseconds
         * @property POLL_INTERVAL
         * @type int
         * @static
         * @final
         */
        POLL_INTERVAL: 40,

        /**
         * addListener/removeListener can throw errors in unexpected scenarios.
         * These errors are suppressed, the method returns false, and this property
         * is set
         * @property lastError
         * @static
         * @type Error
         */
        lastError: null,


        /**
         * poll handle
         * @property _interval
         * @static
         * @private
         */
        _interval: null,

        /**
         * document readystate poll handle
         * @property _dri
         * @static
         * @private
         */
         _dri: null,

        /**
         * True when the document is initially usable
         * @property DOMReady
         * @type boolean
         * @static
         */
        DOMReady: false,

        /**
         * @method startInterval
         * @static
         * @private
         */
        startInterval: function() {
            if (!Event._interval) {
Event._interval = setInterval(Event._poll, Event.POLL_INTERVAL);
            }
        },

        /**
         * Executes the supplied callback when the item with the supplied
         * id is found.  This is meant to be used to execute behavior as
         * soon as possible as the page loads.  If you use this after the
         * initial page load it will poll for a fixed time for the element.
         * The number of times it will poll and the frequency are
         * configurable.  By default it will poll for 10 seconds.
         *
         * <p>The callback is executed with a single parameter:
         * the custom object parameter, if provided.</p>
         *
         * @method onAvailable
         *
         * @param {string||string[]}   id the id of the element, or an array
         * of ids to look for.
         * @param {function} fn what to execute when the element is found.
         * @param {object}   p_obj an optional object to be passed back as
         *                   a parameter to fn.
         * @param {boolean|object}  p_override If set to true, fn will execute
         *                   in the context of p_obj, if set to an object it
         *                   will execute in the context of that object
         * @param checkContent {boolean} check child node readiness (onContentReady)
         * @static
         * @deprecated Use Y.on("available")
         */
        // @TODO fix arguments
        onAvailable: function(id, fn, p_obj, p_override, checkContent, compat) {

            var a = Y.Array(id), i, availHandle;


            for (i=0; i<a.length; i=i+1) {
                _avail.push({
                    id:         a[i],
                    fn:         fn,
                    obj:        p_obj,
                    override:   p_override,
                    checkReady: checkContent,
                    compat:     compat
                });
            }
            _retryCount = this.POLL_RETRYS;

            // We want the first test to be immediate, but async
            setTimeout(Event._poll, 0);

            availHandle = new Y.EventHandle({

                _delete: function() {
                    // set by the event system for lazy DOM listeners
                    if (availHandle.handle) {
                        availHandle.handle.detach();
                        return;
                    }

                    var i, j;

                    // otherwise try to remove the onAvailable listener(s)
                    for (i = 0; i < a.length; i++) {
                        for (j = 0; j < _avail.length; j++) {
                            if (a[i] === _avail[j].id) {
                                _avail.splice(j, 1);
                            }
                        }
                    }
                }

            });

            return availHandle;
        },

        /**
         * Works the same way as onAvailable, but additionally checks the
         * state of sibling elements to determine if the content of the
         * available element is safe to modify.
         *
         * <p>The callback is executed with a single parameter:
         * the custom object parameter, if provided.</p>
         *
         * @method onContentReady
         *
         * @param {string}   id the id of the element to look for.
         * @param {function} fn what to execute when the element is ready.
         * @param {object}   obj an optional object to be passed back as
         *                   a parameter to fn.
         * @param {boolean|object}  override If set to true, fn will execute
         *                   in the context of p_obj.  If an object, fn will
         *                   exectute in the context of that object
         *
         * @static
         * @deprecated Use Y.on("contentready")
         */
        // @TODO fix arguments
        onContentReady: function(id, fn, obj, override, compat) {
            return Event.onAvailable(id, fn, obj, override, true, compat);
        },

        /**
         * Adds an event listener
         *
         * @method attach
         *
         * @param {String}   type     The type of event to append
         * @param {Function} fn        The method the event invokes
         * @param {String|HTMLElement|Array|NodeList} el An id, an element
         *  reference, or a collection of ids and/or elements to assign the
         *  listener to.
         * @param {Object}   context optional context object
         * @param {Boolean|object}  args 0..n arguments to pass to the callback
         * @return {EventHandle} an object to that can be used to detach the listener
         *
         * @static
         */

        attach: function(type, fn, el, context) {
            return Event._attach(Y.Array(arguments, 0, true));
        },

        _createWrapper: function (el, type, capture, compat, facade) {

            var cewrapper,
                ek  = Y.stamp(el),
                key = 'event:' + ek + type;

            if (false === facade) {
                key += 'native';
            }
            if (capture) {
                key += 'capture';
            }


            cewrapper = _wrappers[key];


            if (!cewrapper) {
                // create CE wrapper
                cewrapper = Y.publish(key, {
                    silent: true,
                    bubbles: false,
                    contextFn: function() {
                        if (compat) {
                            return cewrapper.el;
                        } else {
                            cewrapper.nodeRef = cewrapper.nodeRef || Y.one(cewrapper.el);
                            return cewrapper.nodeRef;
                        }
                    }
                });

                cewrapper.overrides = {};

                // for later removeListener calls
                cewrapper.el = el;
                cewrapper.key = key;
                cewrapper.domkey = ek;
                cewrapper.type = type;
                cewrapper.fn = function(e) {
                    cewrapper.fire(Event.getEvent(e, el, (compat || (false === facade))));
                };
                cewrapper.capture = capture;

                if (el == win && type == "load") {
                    // window load happens once
                    cewrapper.fireOnce = true;
                    _windowLoadKey = key;
                }
                cewrapper._delete = _deleteAndClean;

                _wrappers[key] = cewrapper;
                _el_events[ek] = _el_events[ek] || {};
                _el_events[ek][key] = cewrapper;

                add(el, type, cewrapper.fn, capture);
            }

            return cewrapper;

        },

        _attach: function(args, conf) {

            var compat,
                handles, oEl, cewrapper, context,
                fireNow = false, ret,
                type = args[0],
                fn = args[1],
                el = args[2] || win,
                facade = conf && conf.facade,
                capture = conf && conf.capture,
                overrides = conf && conf.overrides;

            if (args[args.length-1] === COMPAT_ARG) {
                compat = true;
            }

            if (!fn || !fn.call) {
// throw new TypeError(type + " attach call failed, callback undefined");
                return false;
            }

            // The el argument can be an array of elements or element ids.
            if (shouldIterate(el)) {

                handles=[];

                Y.each(el, function(v, k) {
                    args[2] = v;
                    handles.push(Event._attach(args.slice(), conf));
                });

                // return (handles.length === 1) ? handles[0] : handles;
                return new Y.EventHandle(handles);

            // If the el argument is a string, we assume it is
            // actually the id of the element.  If the page is loaded
            // we convert el to the actual element, otherwise we
            // defer attaching the event until the element is
            // ready
            } else if (Y.Lang.isString(el)) {

                // oEl = (compat) ? Y.DOM.byId(el) : Y.Selector.query(el);

                if (compat) {
                    oEl = YDOM.byId(el);
                } else {

                    oEl = Y.Selector.query(el);

                    switch (oEl.length) {
                        case 0:
                            oEl = null;
                            break;
                        case 1:
                            oEl = oEl[0];
                            break;
                        default:
                            args[2] = oEl;
                            return Event._attach(args, conf);
                    }
                }

                if (oEl) {

                    el = oEl;

                // Not found = defer adding the event until the element is available
                } else {

                    ret = Event.onAvailable(el, function() {

                        ret.handle = Event._attach(args, conf);

                    }, Event, true, false, compat);

                    return ret;

                }
            }

            // Element should be an html element or node
            if (!el) {
                return false;
            }

            if (Y.Node && Y.instanceOf(el, Y.Node)) {
                el = Y.Node.getDOMNode(el);
            }

            cewrapper = Event._createWrapper(el, type, capture, compat, facade);
            if (overrides) {
                Y.mix(cewrapper.overrides, overrides);
            }

            if (el == win && type == "load") {

                // if the load is complete, fire immediately.
                // all subscribers, including the current one
                // will be notified.
                if (YUI.Env.windowLoaded) {
                    fireNow = true;
                }
            }

            if (compat) {
                args.pop();
            }

            context = args[3];

            // set context to the Node if not specified
            // ret = cewrapper.on.apply(cewrapper, trimmedArgs);
            ret = cewrapper._on(fn, context, (args.length > 4) ? args.slice(4) : null);

            if (fireNow) {
                cewrapper.fire();
            }

            return ret;

        },

        /**
         * Removes an event listener.  Supports the signature the event was bound
         * with, but the preferred way to remove listeners is using the handle
         * that is returned when using Y.on
         *
         * @method detach
         *
         * @param {String} type the type of event to remove.
         * @param {Function} fn the method the event invokes.  If fn is
         * undefined, then all event handlers for the type of event are
         * removed.
         * @param {String|HTMLElement|Array|NodeList|EventHandle} el An
         * event handle, an id, an element reference, or a collection
         * of ids and/or elements to remove the listener from.
         * @return {boolean} true if the unbind was successful, false otherwise.
         * @static
         */
        detach: function(type, fn, el, obj) {

            var args=Y.Array(arguments, 0, true), compat, l, ok, i,
                id, ce;

            if (args[args.length-1] === COMPAT_ARG) {
                compat = true;
                // args.pop();
            }

            if (type && type.detach) {
                return type.detach();
            }

            // The el argument can be a string
            if (typeof el == "string") {

                // el = (compat) ? Y.DOM.byId(el) : Y.all(el);
                if (compat) {
                    el = YDOM.byId(el);
                } else {
                    el = Y.Selector.query(el);
                    l = el.length;
                    if (l < 1) {
                        el = null;
                    } else if (l == 1) {
                        el = el[0];
                    }
                }
                // return Event.detach.apply(Event, args);
            }

            if (!el) {
                return false;
            }

            if (el.detach) {
                args.splice(2, 1);
                return el.detach.apply(el, args);
            // The el argument can be an array of elements or element ids.
            } else if (shouldIterate(el)) {
                ok = true;
                for (i=0, l=el.length; i<l; ++i) {
                    args[2] = el[i];
                    ok = ( Y.Event.detach.apply(Y.Event, args) && ok );
                }

                return ok;
            }

            if (!type || !fn || !fn.call) {
                return Event.purgeElement(el, false, type);
            }

            id = 'event:' + Y.stamp(el) + type;
            ce = _wrappers[id];

            if (ce) {
                return ce.detach(fn);
            } else {
                return false;
            }

        },

        /**
         * Finds the event in the window object, the caller's arguments, or
         * in the arguments of another method in the callstack.  This is
         * executed automatically for events registered through the event
         * manager, so the implementer should not normally need to execute
         * this function at all.
         * @method getEvent
         * @param {Event} e the event parameter from the handler
         * @param {HTMLElement} el the element the listener was attached to
         * @return {Event} the event
         * @static
         */
        getEvent: function(e, el, noFacade) {
            var ev = e || win.event;

            return (noFacade) ? ev :
                new Y.DOMEventFacade(ev, el, _wrappers['event:' + Y.stamp(el) + e.type]);
        },

        /**
         * Generates an unique ID for the element if it does not already
         * have one.
         * @method generateId
         * @param el the element to create the id for
         * @return {string} the resulting id of the element
         * @static
         */
        generateId: function(el) {
            return YDOM.generateID(el);
        },

        /**
         * We want to be able to use getElementsByTagName as a collection
         * to attach a group of events to.  Unfortunately, different
         * browsers return different types of collections.  This function
         * tests to determine if the object is array-like.  It will also
         * fail if the object is an array, but is empty.
         * @method _isValidCollection
         * @param o the object to test
         * @return {boolean} true if the object is array-like and populated
         * @deprecated was not meant to be used directly
         * @static
         * @private
         */
        _isValidCollection: shouldIterate,

        /**
         * hook up any deferred listeners
         * @method _load
         * @static
         * @private
         */
        _load: function(e) {
            if (!_loadComplete) {
                _loadComplete = true;

                // Just in case DOMReady did not go off for some reason
                // E._ready();
                if (Y.fire) {
                    Y.fire(EVENT_READY);
                }

                // Available elements may not have been detected before the
                // window load event fires. Try to find them now so that the
                // the user is more likely to get the onAvailable notifications
                // before the window load notification
                Event._poll();
            }
        },

        /**
         * Polling function that runs before the onload event fires,
         * attempting to attach to DOM Nodes as soon as they are
         * available
         * @method _poll
         * @static
         * @private
         */
        _poll: function() {
            if (Event.locked) {
                return;
            }

            if (Y.UA.ie && !YUI.Env.DOMReady) {
                // Hold off if DOMReady has not fired and check current
                // readyState to protect against the IE operation aborted
                // issue.
                Event.startInterval();
                return;
            }

            Event.locked = true;

            // keep trying until after the page is loaded.  We need to
            // check the page load state prior to trying to bind the
            // elements so that we can be certain all elements have been
            // tested appropriately
            var i, len, item, el, notAvail, executeItem,
                tryAgain = !_loadComplete;

            if (!tryAgain) {
                tryAgain = (_retryCount > 0);
            }

            // onAvailable
            notAvail = [];

            executeItem = function (el, item) {
                var context, ov = item.override;
                try {
                    if (item.compat) {
                        if (item.override) {
                            if (ov === true) {
                                context = item.obj;
                            } else {
                                context = ov;
                            }
                        } else {
                            context = el;
                        }
                        item.fn.call(context, item.obj);
                    } else {
                        context = item.obj || Y.one(el);
                        item.fn.apply(context, (Y.Lang.isArray(ov)) ? ov : []);
                    }
                } catch (e) {
                }
            };

            // onAvailable
            for (i=0,len=_avail.length; i<len; ++i) {
                item = _avail[i];
                if (item && !item.checkReady) {

                    // el = (item.compat) ? Y.DOM.byId(item.id) : Y.one(item.id);
                    el = (item.compat) ? YDOM.byId(item.id) : Y.Selector.query(item.id, null, true);

                    if (el) {
                        executeItem(el, item);
                        _avail[i] = null;
                    } else {
                        notAvail.push(item);
                    }
                }
            }

            // onContentReady
            for (i=0,len=_avail.length; i<len; ++i) {
                item = _avail[i];
                if (item && item.checkReady) {

                    // el = (item.compat) ? Y.DOM.byId(item.id) : Y.one(item.id);
                    el = (item.compat) ? YDOM.byId(item.id) : Y.Selector.query(item.id, null, true);

                    if (el) {
                        // The element is available, but not necessarily ready
                        // @todo should we test parentNode.nextSibling?
                        if (_loadComplete || (el.get && el.get('nextSibling')) || el.nextSibling) {
                            executeItem(el, item);
                            _avail[i] = null;
                        }
                    } else {
                        notAvail.push(item);
                    }
                }
            }

            _retryCount = (notAvail.length === 0) ? 0 : _retryCount - 1;

            if (tryAgain) {
                // we may need to strip the nulled out items here
                Event.startInterval();
            } else {
                clearInterval(Event._interval);
                Event._interval = null;
            }

            Event.locked = false;

            return;

        },

        /**
         * Removes all listeners attached to the given element via addListener.
         * Optionally, the node's children can also be purged.
         * Optionally, you can specify a specific type of event to remove.
         * @method purgeElement
         * @param {HTMLElement} el the element to purge
         * @param {boolean} recurse recursively purge this element's children
         * as well.  Use with caution.
         * @param {string} type optional type of listener to purge. If
         * left out, all listeners will be removed
         * @static
         */
        purgeElement: function(el, recurse, type) {
            // var oEl = (Y.Lang.isString(el)) ? Y.one(el) : el,
            var oEl = (Y.Lang.isString(el)) ?  Y.Selector.query(el, null, true) : el,
                lis = Event.getListeners(oEl, type), i, len, children, child;

            if (recurse && oEl) {
                lis = lis || [];
                children = Y.Selector.query('*', oEl);
                len = children.length;
                for (i = 0; i < len; ++i) {
                    child = Event.getListeners(children[i], type);
                    if (child) {
                        lis = lis.concat(child);
                    }
                }
            }

            if (lis) {
                for (i = 0, len = lis.length; i < len; ++i) {
                    lis[i].detachAll();
                }
            }

        },

        /**
         * Removes all object references and the DOM proxy subscription for
         * a given event for a DOM node.
         *
         * @method _clean
         * @param wrapper {CustomEvent} Custom event proxy for the DOM
         *                  subscription
         * @private
         * @static
         * @since 3.4.0
         */
        _clean: function (wrapper) {
            var key    = wrapper.key,
                domkey = wrapper.domkey;

            remove(wrapper.el, wrapper.type, wrapper.fn, wrapper.capture);
            delete _wrappers[key];
            delete Y._yuievt.events[key];
            if (_el_events[domkey]) {
                delete _el_events[domkey][key];
                if (!Y.Object.size(_el_events[domkey])) {
                    delete _el_events[domkey];
                }
            }
        },

        /**
         * Returns all listeners attached to the given element via addListener.
         * Optionally, you can specify a specific type of event to return.
         * @method getListeners
         * @param el {HTMLElement|string} the element or element id to inspect
         * @param type {string} optional type of listener to return. If
         * left out, all listeners will be returned
         * @return {CustomEvent} the custom event wrapper for the DOM event(s)
         * @static
         */
        getListeners: function(el, type) {
            var ek = Y.stamp(el, true), evts = _el_events[ek],
                results=[] , key = (type) ? 'event:' + ek + type : null,
                adapters = _eventenv.plugins;

            if (!evts) {
                return null;
            }

            if (key) {
                // look for synthetic events
                if (adapters[type] && adapters[type].eventDef) {
                    key += '_synth';
                }

                if (evts[key]) {
                    results.push(evts[key]);
                }

                // get native events as well
                key += 'native';
                if (evts[key]) {
                    results.push(evts[key]);
                }

            } else {
                Y.each(evts, function(v, k) {
                    results.push(v);
                });
            }

            return (results.length) ? results : null;
        },

        /**
         * Removes all listeners registered by pe.event.  Called
         * automatically during the unload event.
         * @method _unload
         * @static
         * @private
         */
        _unload: function(e) {
            Y.each(_wrappers, function(v, k) {
                if (v.type == 'unload') {
                    v.fire(e);
                }
                v.detachAll();
            });
            remove(win, "unload", onUnload);
        },

        /**
         * Adds a DOM event directly without the caching, cleanup, context adj, etc
         *
         * @method nativeAdd
         * @param {HTMLElement} el      the element to bind the handler to
         * @param {string}      type   the type of event handler
         * @param {function}    fn      the callback to invoke
         * @param {boolen}      capture capture or bubble phase
         * @static
         * @private
         */
        nativeAdd: add,

        /**
         * Basic remove listener
         *
         * @method nativeRemove
         * @param {HTMLElement} el      the element to bind the handler to
         * @param {string}      type   the type of event handler
         * @param {function}    fn      the callback to invoke
         * @param {boolen}      capture capture or bubble phase
         * @static
         * @private
         */
        nativeRemove: remove
    };

}();

Y.Event = Event;

if (config.injected || YUI.Env.windowLoaded) {
    onLoad();
} else {
    add(win, "load", onLoad);
}

// Process onAvailable/onContentReady items when when the DOM is ready in IE
if (Y.UA.ie) {
    Y.on(EVENT_READY, Event._poll);
}

try {
    add(win, "unload", onUnload);
} catch(e) {
}

Event.Custom = Y.CustomEvent;
Event.Subscriber = Y.Subscriber;
Event.Target = Y.EventTarget;
Event.Handle = Y.EventHandle;
Event.Facade = Y.EventFacade;

Event._poll();

}());

/**
 * DOM event listener abstraction layer
 * @module event
 * @submodule event-base
 */

/**
 * Executes the callback as soon as the specified element
 * is detected in the DOM.  This function expects a selector
 * string for the element(s) to detect.  If you already have
 * an element reference, you don't need this event.
 * @event available
 * @param type {string} 'available'
 * @param fn {function} the callback function to execute.
 * @param el {string} an selector for the element(s) to attach
 * @param context optional argument that specifies what 'this' refers to.
 * @param args* 0..n additional arguments to pass on to the callback function.
 * These arguments will be added after the event object.
 * @return {EventHandle} the detach handle
 * @for YUI
 */
Y.Env.evt.plugins.available = {
    on: function(type, fn, id, o) {
        var a = arguments.length > 4 ?  Y.Array(arguments, 4, true) : null;
        return Y.Event.onAvailable.call(Y.Event, id, fn, o, a);
    }
};

/**
 * Executes the callback as soon as the specified element
 * is detected in the DOM with a nextSibling property
 * (indicating that the element's children are available).
 * This function expects a selector
 * string for the element(s) to detect.  If you already have
 * an element reference, you don't need this event.
 * @event contentready
 * @param type {string} 'contentready'
 * @param fn {function} the callback function to execute.
 * @param el {string} an selector for the element(s) to attach.
 * @param context optional argument that specifies what 'this' refers to.
 * @param args* 0..n additional arguments to pass on to the callback function.
 * These arguments will be added after the event object.
 * @return {EventHandle} the detach handle
 * @for YUI
 */
Y.Env.evt.plugins.contentready = {
    on: function(type, fn, id, o) {
        var a = arguments.length > 4 ? Y.Array(arguments, 4, true) : null;
        return Y.Event.onContentReady.call(Y.Event, id, fn, o, a);
    }
};


}, '3.10.1', {"requires": ["event-custom-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/social-buttons.js
// ----------------------------------------------------------------------------------------

/**
 * Social Button Widget
 *
 * @module squarespace-social-button
 */
YUI.add('squarespace-social-buttons', function(Y) {
  Y.namespace("Squarespace");

  var Services = Y.Squarespace.SocialServices,
      /*
       * How long to wait, in ms, after a render
       * script has been loaded to confirm it's actually
       * done its job.
       *
       * This is necessary because not all APIs provide
       * callbacks to confirm that the service has been
       * rendered. It may be better to poll the DOM
       * for their iFrame or other elements,
       * but then we're at the mercy of thir developers.
       *
       */
      RENDER_SAFETY_DELAY = 400,
      SocialButton = Y.Squarespace.SocialButton;

  /**
   * Renders buttons across the page that expand
   * to a dropdown list of social services' share buttons.
   *
   * @class SocialButtons
   */
  var SocialButtons =
  Y.Squarespace.SocialButtons = Y.Base.create('socialButtons', Y.Base, [], {
    initializer: function(config) {
      var services = this.get('services');
      /*
       * Array of configuration objects for individual buttons of the form:
       *  {
       *    title: (Title of the page to share),
       *    url: (URL of the page to share),
       *    id: (Unique identifier for the button),
       *    node: (Container node)
       *  }
       */
      this._buttonConfigs = {};

      /*
       * Array of SocialButton widgets.
       */
      this._buttons = [];

      /*
       * Array of event handles.
       */
      this._eventHandles = [];

      if(services.length > 0) {
        this._scanForButtons();
        this._initializeButtons();
        this._bindEvents();
        this._renderButtons();
      } else {
        this._markButtonsAsEmpty();
      }
    },

    _markButtonsAsEmpty: function() {
      Y.all(SocialButtons.SOCIAL_BUTTON_CONTAINER).addClass('empty');
    },

    /**
     * Scans the page for social button containers and
     * creates configuration options for them in
     * _buttonConfigs
     *
     * @method _scanForButtons
     * @protected
     */
    _scanForButtons: function() {
      var buttonContainers = Y.all(SocialButtons.SOCIAL_BUTTON_CONTAINER),
          services = this.get('services');

      buttonContainers.each(function(cont) {
        var title = cont.getAttribute(SocialButtons.TITLE),
            url = Static.SQUARESPACE_CONTEXT.website.baseUrl + cont.getAttribute(SocialButtons.FULL_URL),
            recordType = parseInt(cont.getAttribute(SocialButtons.RECORD_TYPE), 10),
            assetUrl = cont.getAttribute(SocialButtons.ASSET_URL),
            systemDataId = cont.getAttribute(SocialButtons.SYSTEM_DATA_ID),
            id = Y.guid(SocialButtons.ID_PREFIX);

        this._buttonConfigs[id] = {
          id: id,
          title: title,
          url: url,
          recordType: recordType,
          assetUrl: assetUrl,
          systemDataId: systemDataId,
          services: services,
          node: cont
        };

      }, this);
    },

    /**
     * Constructs SocialButton widgets from the
     * button schemas.
     *
     * @method _initializeButtons
     * @protected
     */
    _initializeButtons: function() {
      this._buttons = Y.Array.map(Y.Object.values(this._buttonConfigs), function(config) {
        return new SocialButton(config);
      });
    },

    /**
     * Attach event handlers to button widgets to handle rendering.
     *
     * @method _bindEvents
     * @protected
     */
    _bindEvents: function() {
      this._eventHandles.push(this.after('cleanup', this._defaultDestroy, this));
    },

    /**
     * Render the buttons to the DOM.
     *
     * @method _renderButtons
     * @protected
     */
    _renderButtons: function() {
      this._buttons.filter(this._excludeOnlyPinterest, this).forEach(function(button) {
        var id = button.get('id');
        button.render(this._buttonConfigs[id].node);
      }, this);

    },

    /**
     * Destroy this object.
     *
     * @method destructor
     */
    destructor: function() {
      this.fire('cleanup');
    },

    /**
     * Detach all event handlers created by this object.
     *
     * @method _unbindEvents
     * @private
     */
    _unbindEvents: function() {
      this._eventHandles.forEach(function(handle) {
        handle.detach();
        handle = null;
      });
    },

    /**
     * Default event handler for the destroy event.
     *
     * @method _defaultDestroy
     * @protected
     */
    _defaultDestroy: function() {
      this._destroyButtons();
      this._unbindEvents();
      this.fire('destroyed');
    },

    /**
     * Calls the destructor of all buttons managed by this object.
     *
     * @method _destroyButtons
     * @protected
     */
    _destroyButtons: function() {
      this._buttons.forEach(function(button) {
        button.destroy();
      }, this);
    },

    /**
     * Filter function to exclude social buttons that are for items that are incompatible with Pinterest,
     * but only have pinterest as a valid service.
     *
     * Also excludes buttons for which there is no recordType provided.
     *
     * @method _excludeOnlyPinterest
     * @param btn { Object } SocialButton to check.
     * @return True if the above conditions hold, false otherwise.
     */
    _excludeOnlyPinterest: function(btn) {
      var recordType = btn.get('recordType');
      /*
       * Exclude this button if the template author did not provide a record type or if
       * this button is for an item that is not an image post, but it's only service is
       * Printerest.
       */
      if(recordType !== Y.Squarespace.ContentConstants.IMAGE && this._onlyServiceIsPinterest(btn)) {
        return false;
      } else {
        return true;
      }
    },

    _onlyServiceIsPinterest: function(btn) {
      var services = btn.get('services');

      return services.length === 1 && services[0] === Y.Squarespace.SocialServices.PINTEREST;
    }

  }, {

    /**
     * Name of the attribute under which the full URL for a button is stored.
     *
     * @property FULL_URL
     */
    FULL_URL: 'data-full-url',

    /**
     * Name of the attribute under which the asset URL for a button is stored.
     *
     * @property ASSET_URL
     */
    ASSET_URL: 'data-asset-url',

    /**
     * Name of the attribute under which the systemDataId for a button is stored.
     *
     * @property SYSTEM_DATA_ID
     */
    SYSTEM_DATA_ID: 'data-system-data-id',

    /**
     * Name of the attribute under which the record type for a button is stored.
     *
     * @property RECORD_TYPE
     */
    RECORD_TYPE: 'data-record-type',

    /**
     * Prefix for GUIDs generated for social buttons.
     *
     * @property ID_PREFIX
     */
    ID_PREFIX: 'social-',

    /**
     * Name of the attribute under which the title of a link for a button is stored.
     *
     * @property TITLE
     */
    TITLE: 'data-title',

    /**
     * CSS selector used to find social button containers on a page.
     *
     * @property SOCIAL_BUTTON_CONTAINER
     */
    SOCIAL_BUTTON_CONTAINER: '.squarespace-social-buttons',

    ATTRS: {
      /**
       * Social services (by code defined in squarespace-utils) to render.
       *
       * @default Value of Static.SQUARESPACE_CONTEXT.website.shareButtonOptions
       * @attribute services
       * @type Array
       */
      services: {
        valueFn: function() {
          return Y.Array.map(Y.Object.keys(Static.SQUARESPACE_CONTEXT.website.shareButtonOptions || { }),
            function(n) {
              return parseInt(n, 10);
            });
        }

      }
    }
  });

  // ------------------------------------------------------------------------------------------------
  // Initialize
  // ------------------------------------------------------------------------------------------------

  Squarespace.onInitialize(Y, function() {
    if (!Y.all('.squarespace-social-buttons').isEmpty()) {
      new Y.Squarespace.SocialButtons();
    }
  });

}, '1.0', { requires: [
              'squarespace-social-button',
              'base',
              'base-build',
              'node',
              'array-extras'
              ]
          });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-position/widget-position.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-position', function (Y, NAME) {

/**
 * Provides basic XY positioning support for Widgets, though an extension
 *
 * @module widget-position
 */
    var Lang = Y.Lang,
        Widget = Y.Widget,

        XY_COORD = "xy",

        POSITION = "position",
        POSITIONED = "positioned",
        BOUNDING_BOX = "boundingBox",
        RELATIVE = "relative",

        RENDERUI = "renderUI",
        BINDUI = "bindUI",
        SYNCUI = "syncUI",

        UI = Widget.UI_SRC,

        XYChange = "xyChange";

    /**
     * Widget extension, which can be used to add positioning support to the base Widget class,
     * through the <a href="Base.html#method_build">Base.build</a> method.
     *
     * @class WidgetPosition
     * @param {Object} config User configuration object
     */
    function Position(config) {
        this._posNode = this.get(BOUNDING_BOX);

        // WIDGET METHOD OVERLAP
        Y.after(this._renderUIPosition, this, RENDERUI);
        Y.after(this._syncUIPosition, this, SYNCUI);
        Y.after(this._bindUIPosition, this, BINDUI);
    }

    /**
     * Static property used to define the default attribute
     * configuration introduced by WidgetPosition.
     *
     * @property ATTRS
     * @static
     * @type Object
     */
    Position.ATTRS = {

        /**
         * @attribute x
         * @type number
         * @default 0
         *
         * @description Page X co-ordinate for the widget. This attribute acts as a facade for the
         * xy attribute. Changes in position can be monitored by listening for xyChange events.
         */
        x: {
            setter: function(val) {
                this._setX(val);
            },
            getter: function() {
                return this._getX();
            },
            lazyAdd:false
        },

        /**
         * @attribute y
         * @type number
         * @default 0
         *
         * @description Page Y co-ordinate for the widget. This attribute acts as a facade for the
         * xy attribute. Changes in position can be monitored by listening for xyChange events.
         */
        y: {
            setter: function(val) {
                this._setY(val);
            },
            getter: function() {
                return this._getY();
            },
            lazyAdd: false
        },

        /**
         * @attribute xy
         * @type Array
         * @default [0,0]
         *
         * @description Page XY co-ordinate pair for the widget.
         */
        xy: {
            value:[0,0],
            validator: function(val) {
                return this._validateXY(val);
            }
        }
    };

    /**
     * Default class used to mark the boundingBox of a positioned widget.
     *
     * @property POSITIONED_CLASS_NAME
     * @type String
     * @default "yui-widget-positioned"
     * @static
     */
    Position.POSITIONED_CLASS_NAME = Widget.getClassName(POSITIONED);

    Position.prototype = {

        /**
         * Creates/Initializes the DOM to support xy page positioning.
         * <p>
         * This method in invoked after renderUI is invoked for the Widget class
         * using YUI's aop infrastructure.
         * </p>
         * @method _renderUIPosition
         * @protected
         */
        _renderUIPosition : function() {
            this._posNode.addClass(Position.POSITIONED_CLASS_NAME);
        },

        /**
         * Synchronizes the UI to match the Widgets xy page position state.
         * <p>
         * This method in invoked after syncUI is invoked for the Widget class
         * using YUI's aop infrastructure.
         * </p>
         * @method _syncUIPosition
         * @protected
         */
        _syncUIPosition : function() {
            var posNode = this._posNode;
            if (posNode.getStyle(POSITION) === RELATIVE) {
                this.syncXY();
            }
            this._uiSetXY(this.get(XY_COORD));
        },

        /**
         * Binds event listeners responsible for updating the UI state in response to
         * Widget position related state changes.
         * <p>
         * This method in invoked after bindUI is invoked for the Widget class
         * using YUI's aop infrastructure.
         * </p>
         * @method _bindUIPosition
         * @protected
         */
        _bindUIPosition :function() {
            this.after(XYChange, this._afterXYChange);
        },

        /**
         * Moves the Widget to the specified page xy co-ordinate position.
         *
         * @method move
         *
         * @param {Number} x The new x position
         * @param {Number} y The new y position
         * <p>Or</p>
         * @param {Array} x, y values passed as an array ([x, y]), to support
         * simple pass through of Node.getXY results
         */
        move: function () {
            var args = arguments,
                coord = (Lang.isArray(args[0])) ? args[0] : [args[0], args[1]];
                this.set(XY_COORD, coord);
        },

        /**
         * Synchronizes the Panel's "xy", "x", and "y" properties with the
         * Widget's position in the DOM.
         *
         * @method syncXY
         */
        syncXY : function () {
            this.set(XY_COORD, this._posNode.getXY(), {src: UI});
        },

        /**
         * Default validator for the XY attribute
         *
         * @method _validateXY
         * @protected
         * @param {Array} val The XY page co-ordinate value which is being set.
         * @return {boolean} true if valid, false if not.
         */
        _validateXY : function(val) {
            return (Lang.isArray(val) && Lang.isNumber(val[0]) && Lang.isNumber(val[1]));
        },

        /**
         * Default setter for the X attribute. The setter passes the X value through
         * to the XY attribute, which is the sole store for the XY state.
         *
         * @method _setX
         * @protected
         * @param {Number} val The X page co-ordinate value
         */
        _setX : function(val) {
            this.set(XY_COORD, [val, this.get(XY_COORD)[1]]);
        },

        /**
         * Default setter for the Y attribute. The setter passes the Y value through
         * to the XY attribute, which is the sole store for the XY state.
         *
         * @method _setY
         * @protected
         * @param {Number} val The Y page co-ordinate value
         */
        _setY : function(val) {
            this.set(XY_COORD, [this.get(XY_COORD)[0], val]);
        },

        /**
         * Default getter for the X attribute. The value is retrieved from
         * the XY attribute, which is the sole store for the XY state.
         *
         * @method _getX
         * @protected
         * @return {Number} The X page co-ordinate value
         */
        _getX : function() {
            return this.get(XY_COORD)[0];
        },

        /**
         * Default getter for the Y attribute. The value is retrieved from
         * the XY attribute, which is the sole store for the XY state.
         *
         * @method _getY
         * @protected
         * @return {Number} The Y page co-ordinate value
         */
        _getY : function() {
            return this.get(XY_COORD)[1];
        },

        /**
         * Default attribute change listener for the xy attribute, responsible
         * for updating the UI, in response to attribute changes.
         *
         * @method _afterXYChange
         * @protected
         * @param {EventFacade} e The event facade for the attribute change
         */
        _afterXYChange : function(e) {
            if (e.src != UI) {
                this._uiSetXY(e.newVal);
            }
        },

        /**
         * Updates the UI to reflect the XY page co-ordinates passed in.
         *
         * @method _uiSetXY
         * @protected
         * @param {String} val The XY page co-ordinates value to be reflected in the UI
         */
        _uiSetXY : function(val) {
            this._posNode.setXY(val);
        }
    };

    Y.WidgetPosition = Position;


}, '3.10.1', {"requires": ["base-build", "node-screen", "widget"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/pluginhost-base/pluginhost-base.js
// ----------------------------------------------------------------------------------------

YUI.add('pluginhost-base', function (Y, NAME) {

    /**
     * Provides the augmentable PluginHost interface, which can be added to any class.
     * @module pluginhost
     */

    /**
     * Provides the augmentable PluginHost interface, which can be added to any class.
     * @module pluginhost-base
     */

    /**
     * <p>
     * An augmentable class, which provides the augmented class with the ability to host plugins.
     * It adds <a href="#method_plug">plug</a> and <a href="#method_unplug">unplug</a> methods to the augmented class, which can
     * be used to add or remove plugins from instances of the class.
     * </p>
     *
     * <p>Plugins can also be added through the constructor configuration object passed to the host class' constructor using
     * the "plugins" property. Supported values for the "plugins" property are those defined by the <a href="#method_plug">plug</a> method.
     *
     * For example the following code would add the AnimPlugin and IOPlugin to Overlay (the plugin host):
     * <xmp>
     * var o = new Overlay({plugins: [ AnimPlugin, {fn:IOPlugin, cfg:{section:"header"}}]});
     * </xmp>
     * </p>
     * <p>
     * Plug.Host's protected <a href="#method_initPlugins">_initPlugins</a> and <a href="#method_destroyPlugins">_destroyPlugins</a>
     * methods should be invoked by the host class at the appropriate point in the host's lifecyle.
     * </p>
     *
     * @class Plugin.Host
     */

    var L = Y.Lang;

    function PluginHost() {
        this._plugins = {};
    }

    PluginHost.prototype = {

        /**
         * Adds a plugin to the host object. This will instantiate the
         * plugin and attach it to the configured namespace on the host object.
         *
         * @method plug
         * @chainable
         * @param P {Function | Object |Array} Accepts the plugin class, or an
         * object with a "fn" property specifying the plugin class and
         * a "cfg" property specifying the configuration for the Plugin.
         * <p>
         * Additionally an Array can also be passed in, with the above function or
         * object values, allowing the user to add multiple plugins in a single call.
         * </p>
         * @param config (Optional) If the first argument is the plugin class, the second argument
         * can be the configuration for the plugin.
         * @return {Base} A reference to the host object
         */
        plug: function(Plugin, config) {
            var i, ln, ns;

            if (L.isArray(Plugin)) {
                for (i = 0, ln = Plugin.length; i < ln; i++) {
                    this.plug(Plugin[i]);
                }
            } else {
                if (Plugin && !L.isFunction(Plugin)) {
                    config = Plugin.cfg;
                    Plugin = Plugin.fn;
                }

                // Plugin should be fn by now
                if (Plugin && Plugin.NS) {
                    ns = Plugin.NS;

                    config = config || {};
                    config.host = this;

                    if (this.hasPlugin(ns)) {
                        // Update config
                        if (this[ns].setAttrs) {
                            this[ns].setAttrs(config);
                        }
                    } else {
                        // Create new instance
                        this[ns] = new Plugin(config);
                        this._plugins[ns] = Plugin;
                    }
                }
            }
            return this;
        },

        /**
         * Removes a plugin from the host object. This will destroy the
         * plugin instance and delete the namespace from the host object.
         *
         * @method unplug
         * @param {String | Function} plugin The namespace of the plugin, or the plugin class with the static NS namespace property defined. If not provided,
         * all registered plugins are unplugged.
         * @return {Base} A reference to the host object
         * @chainable
         */
        unplug: function(plugin) {
            var ns = plugin,
                plugins = this._plugins;

            if (plugin) {
                if (L.isFunction(plugin)) {
                    ns = plugin.NS;
                    if (ns && (!plugins[ns] || plugins[ns] !== plugin)) {
                        ns = null;
                    }
                }

                if (ns) {
                    if (this[ns]) {
                        if (this[ns].destroy) {
                            this[ns].destroy();
                        }
                        delete this[ns];
                    }
                    if (plugins[ns]) {
                        delete plugins[ns];
                    }
                }
            } else {
                for (ns in this._plugins) {
                    if (this._plugins.hasOwnProperty(ns)) {
                        this.unplug(ns);
                    }
                }
            }
            return this;
        },

        /**
         * Determines if a plugin has plugged into this host.
         *
         * @method hasPlugin
         * @param {String} ns The plugin's namespace
         * @return {Plugin} Returns a truthy value (the plugin instance) if present, or undefined if not.
         */
        hasPlugin : function(ns) {
            return (this._plugins[ns] && this[ns]);
        },

        /**
         * Initializes static plugins registered on the host (using the
         * Base.plug static method) and any plugins passed to the
         * instance through the "plugins" configuration property.
         *
         * @method _initPlugins
         * @param {Config} config The configuration object with property name/value pairs.
         * @private
         */

        _initPlugins: function(config) {
            this._plugins = this._plugins || {};

            if (this._initConfigPlugins) {
                this._initConfigPlugins(config);
            }
        },

        /**
         * Unplugs and destroys all plugins on the host
         * @method _destroyPlugins
         * @private
         */
        _destroyPlugins: function() {
            this.unplug();
        }
    };

    Y.namespace("Plugin").Host = PluginHost;


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/attribute-base/attribute-base.js
// ----------------------------------------------------------------------------------------

YUI.add('attribute-base', function (Y, NAME) {

    /**
     * The attribute module provides an augmentable Attribute implementation, which
     * adds configurable attributes and attribute change events to the class being
     * augmented. It also provides a State class, which is used internally by Attribute,
     * but can also be used independently to provide a name/property/value data structure to
     * store state.
     *
     * @module attribute
     */

    /**
     * The attribute-base submodule provides core attribute handling support, with everything
     * aside from complex attribute handling in the provider's constructor.
     *
     * @module attribute
     * @submodule attribute-base
     */

    /**
     * <p>
     * Attribute provides configurable attribute support along with attribute change events. It is designed to be
     * augmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state,
     * along with attribute change events.
     * </p>
     * <p>For example, attributes added to the host can be configured:</p>
     * <ul>
     *     <li>As read only.</li>
     *     <li>As write once.</li>
     *     <li>With a setter function, which can be used to manipulate
     *     values passed to Attribute's <a href="#method_set">set</a> method, before they are stored.</li>
     *     <li>With a getter function, which can be used to manipulate stored values,
     *     before they are returned by Attribute's <a href="#method_get">get</a> method.</li>
     *     <li>With a validator function, to validate values before they are stored.</li>
     * </ul>
     *
     * <p>See the <a href="#method_addAttr">addAttr</a> method, for the complete set of configuration
     * options available for attributes.</p>
     *
     * <p><strong>NOTE:</strong> Most implementations will be better off extending the <a href="Base.html">Base</a> class,
     * instead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration
     * of attributes for derived classes, accounting for values passed into the constructor.</p>
     *
     * @class Attribute
     * @param attrs {Object} The attributes to add during construction (passed through to <a href="#method_addAttrs">addAttrs</a>).
     *        These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.
     * @param values {Object} The initial attribute values to apply (passed through to <a href="#method_addAttrs">addAttrs</a>).
     *        These are not merged/cloned. The caller is responsible for isolating user provided values if required.
     * @param lazy {boolean} Whether or not to add attributes lazily (passed through to <a href="#method_addAttrs">addAttrs</a>).
     * @uses AttributeCore
     * @uses AttributeObservable
     * @uses EventTarget
     * @uses AttributeExtras
     */
    function Attribute() {
        Y.AttributeCore.apply(this, arguments);
        Y.AttributeObservable.apply(this, arguments);
        Y.AttributeExtras.apply(this, arguments);
    }

    Y.mix(Attribute, Y.AttributeCore, false, null, 1);
    Y.mix(Attribute, Y.AttributeExtras, false, null, 1);

    // Needs to be `true`, to overwrite methods from AttributeCore
    Y.mix(Attribute, Y.AttributeObservable, true, null, 1);

    /**
     * <p>The value to return from an attribute setter in order to prevent the set from going through.</p>
     *
     * <p>You can return this value from your setter if you wish to combine validator and setter
     * functionality into a single setter function, which either returns the massaged value to be stored or
     * AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>
     *
     * @property INVALID_VALUE
     * @type Object
     * @static
     * @final
     */
    Attribute.INVALID_VALUE = Y.AttributeCore.INVALID_VALUE;

    /**
     * The list of properties which can be configured for
     * each attribute (e.g. setter, getter, writeOnce etc.).
     *
     * This property is used internally as a whitelist for faster
     * Y.mix operations.
     *
     * @property _ATTR_CFG
     * @type Array
     * @static
     * @protected
     */
    Attribute._ATTR_CFG = Y.AttributeCore._ATTR_CFG.concat(Y.AttributeObservable._ATTR_CFG);

    /**
     * Utility method to protect an attribute configuration hash, by merging the
     * entire object and the individual attr config objects.
     *
     * @method protectAttrs
     * @static
     * @param {Object} attrs A hash of attribute to configuration object pairs.
     * @return {Object} A protected version of the `attrs` argument.
     */
    Attribute.protectAttrs = Y.AttributeCore.protectAttrs;

    Y.Attribute = Attribute;


}, '3.10.1', {"requires": ["attribute-core", "attribute-observable", "attribute-extras"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-custom-complex/event-custom-complex.js
// ----------------------------------------------------------------------------------------

YUI.add('event-custom-complex', function (Y, NAME) {



/**
 * Adds event facades, preventable default behavior, and bubbling.
 * events.
 * @module event-custom
 * @submodule event-custom-complex
 */

var FACADE,
    FACADE_KEYS,
    YObject = Y.Object,
    key,
    EMPTY = {},
    CEProto = Y.CustomEvent.prototype,
    ETProto = Y.EventTarget.prototype,

    mixFacadeProps = function(facade, payload) {
        var p;

        for (p in payload) {
            if (!(FACADE_KEYS.hasOwnProperty(p))) {
                facade[p] = payload[p];
            }
        }
    };

/**
 * Wraps and protects a custom event for use when emitFacade is set to true.
 * Requires the event-custom-complex module
 * @class EventFacade
 * @param e {Event} the custom event
 * @param currentTarget {HTMLElement} the element the listener was attached to
 */

Y.EventFacade = function(e, currentTarget) {

    if (!e) {
        e = EMPTY;
    }

    this._event = e;

    /**
     * The arguments passed to fire
     * @property details
     * @type Array
     */
    this.details = e.details;

    /**
     * The event type, this can be overridden by the fire() payload
     * @property type
     * @type string
     */
    this.type = e.type;

    /**
     * The real event type
     * @property _type
     * @type string
     * @private
     */
    this._type = e.type;

    //////////////////////////////////////////////////////

    /**
     * Node reference for the targeted eventtarget
     * @property target
     * @type Node
     */
    this.target = e.target;

    /**
     * Node reference for the element that the listener was attached to.
     * @property currentTarget
     * @type Node
     */
    this.currentTarget = currentTarget;

    /**
     * Node reference to the relatedTarget
     * @property relatedTarget
     * @type Node
     */
    this.relatedTarget = e.relatedTarget;

};

Y.mix(Y.EventFacade.prototype, {

    /**
     * Stops the propagation to the next bubble target
     * @method stopPropagation
     */
    stopPropagation: function() {
        this._event.stopPropagation();
        this.stopped = 1;
    },

    /**
     * Stops the propagation to the next bubble target and
     * prevents any additional listeners from being exectued
     * on the current target.
     * @method stopImmediatePropagation
     */
    stopImmediatePropagation: function() {
        this._event.stopImmediatePropagation();
        this.stopped = 2;
    },

    /**
     * Prevents the event's default behavior
     * @method preventDefault
     */
    preventDefault: function() {
        this._event.preventDefault();
        this.prevented = 1;
    },

    /**
     * Stops the event propagation and prevents the default
     * event behavior.
     * @method halt
     * @param immediate {boolean} if true additional listeners
     * on the current target will not be executed
     */
    halt: function(immediate) {
        this._event.halt(immediate);
        this.prevented = 1;
        this.stopped = (immediate) ? 2 : 1;
    }

});

CEProto.fireComplex = function(args) {

    var es,
        ef,
        q,
        queue,
        ce,
        ret = true,
        events,
        subs,
        ons,
        afters,
        afterQueue,
        postponed,
        prevented,
        preventedFn,
        defaultFn,
        self = this,
        host = self.host || self,
        next,
        oldbubble,
        stack,
        yuievt = host._yuievt,
        hasPotentialSubscribers;

    stack = self.stack;

    if (stack) {

        // queue this event if the current item in the queue bubbles
        if (self.queuable && self.type !== stack.next.type) {
            self.log('queue ' + self.type);

            if (!stack.queue) {
                stack.queue = [];
            }
            stack.queue.push([self, args]);

            return true;
        }
    }

    hasPotentialSubscribers = self.hasSubs() || yuievt.hasTargets || self.broadcast;

    self.target = self.target || host;
    self.currentTarget = host;

    self.details = args.concat();

    if (hasPotentialSubscribers) {

        es = stack || {

           id: self.id, // id of the first event in the stack
           next: self,
           silent: self.silent,
           stopped: 0,
           prevented: 0,
           bubbling: null,
           type: self.type,
           // defaultFnQueue: new Y.Queue(),
           defaultTargetOnly: self.defaultTargetOnly

        };

        subs = self.getSubs();
        ons = subs[0];
        afters = subs[1];

        self.stopped = (self.type !== es.type) ? 0 : es.stopped;
        self.prevented = (self.type !== es.type) ? 0 : es.prevented;

        if (self.stoppedFn) {
            // PERF TODO: Can we replace with callback, like preventedFn. Look into history
            events = new Y.EventTarget({
                fireOnce: true,
                context: host
            });
            self.events = events;
            events.on('stopped', self.stoppedFn);
        }

        // self.log("Firing " + self  + ", " + "args: " + args);
        self.log("Firing " + self.type);

        self._facade = null; // kill facade to eliminate stale properties

        ef = self._getFacade(args);

        if (ons) {
            self._procSubs(ons, args, ef);
        }

        // bubble if this is hosted in an event target and propagation has not been stopped
        if (self.bubbles && host.bubble && !self.stopped) {
            oldbubble = es.bubbling;

            es.bubbling = self.type;

            if (es.type !== self.type) {
                es.stopped = 0;
                es.prevented = 0;
            }

            ret = host.bubble(self, args, null, es);

            self.stopped = Math.max(self.stopped, es.stopped);
            self.prevented = Math.max(self.prevented, es.prevented);

            es.bubbling = oldbubble;
        }

        prevented = self.prevented;

        if (prevented) {
            preventedFn = self.preventedFn;
            if (preventedFn) {
                preventedFn.apply(host, args);
            }
        } else {
            defaultFn = self.defaultFn;

            if (defaultFn && ((!self.defaultTargetOnly && !es.defaultTargetOnly) || host === ef.target)) {
                defaultFn.apply(host, args);
            }
        }

        // broadcast listeners are fired as discreet events on the
        // YUI instance and potentially the YUI global.
        if (self.broadcast) {
            self._broadcast(args);
        }

        if (afters && !self.prevented && self.stopped < 2) {

            // Queue the after
            afterQueue = es.afterQueue;

            if (es.id === self.id || self.type !== yuievt.bubbling) {

                self._procSubs(afters, args, ef);

                if (afterQueue) {
                    while ((next = afterQueue.last())) {
                        next();
                    }
                }
            } else {
                postponed = afters;

                if (es.execDefaultCnt) {
                    postponed = Y.merge(postponed);

                    Y.each(postponed, function(s) {
                        s.postponed = true;
                    });
                }

                if (!afterQueue) {
                    es.afterQueue = new Y.Queue();
                }

                es.afterQueue.add(function() {
                    self._procSubs(postponed, args, ef);
                });
            }

        }

        self.target = null;

        if (es.id === self.id) {

            queue = es.queue;

            if (queue) {
                while (queue.length) {
                    q = queue.pop();
                    ce = q[0];
                    // set up stack to allow the next item to be processed
                    es.next = ce;
                    ce._fire(q[1]);
                }
            }

            self.stack = null;
        }

        ret = !(self.stopped);

        if (self.type !== yuievt.bubbling) {
            es.stopped = 0;
            es.prevented = 0;
            self.stopped = 0;
            self.prevented = 0;
        }

    } else {
        defaultFn = self.defaultFn;

        if(defaultFn) {
            ef = self._getFacade(args);

            if ((!self.defaultTargetOnly) || (host === ef.target)) {
                defaultFn.apply(host, args);
            }
        }
    }

    // Kill the cached facade to free up memory.
    // Otherwise we have the facade from the last fire, sitting around forever.
    self._facade = null;

    return ret;
};

CEProto._getFacade = function(fireArgs) {

    var userArgs = this.details,
        firstArg = userArgs && userArgs[0],
        firstArgIsObj = (typeof firstArg === "object"),
        ef = this._facade;

    if (!ef) {
        ef = new Y.EventFacade(this, this.currentTarget);
    }

    if (firstArgIsObj) {
        // protect the event facade properties
        mixFacadeProps(ef, firstArg);

        // Allow the event type to be faked http://yuilibrary.com/projects/yui3/ticket/2528376
        if (firstArg.type) {
            ef.type = firstArg.type;
        }

        if (fireArgs) {
            fireArgs[0] = ef;
        }
    } else {
        if (fireArgs) {
            fireArgs.unshift(ef);
        }
    }

    // update the details field with the arguments
    ef.details = this.details;

    // use the original target when the event bubbled to this target
    ef.target = this.originalTarget || this.target;

    ef.currentTarget = this.currentTarget;
    ef.stopped = 0;
    ef.prevented = 0;

    this._facade = ef;

    return this._facade;
};

/**
 * Stop propagation to bubble targets
 * @for CustomEvent
 * @method stopPropagation
 */
CEProto.stopPropagation = function() {
    this.stopped = 1;
    if (this.stack) {
        this.stack.stopped = 1;
    }
    if (this.events) {
        this.events.fire('stopped', this);
    }
};

/**
 * Stops propagation to bubble targets, and prevents any remaining
 * subscribers on the current target from executing.
 * @method stopImmediatePropagation
 */
CEProto.stopImmediatePropagation = function() {
    this.stopped = 2;
    if (this.stack) {
        this.stack.stopped = 2;
    }
    if (this.events) {
        this.events.fire('stopped', this);
    }
};

/**
 * Prevents the execution of this event's defaultFn
 * @method preventDefault
 */
CEProto.preventDefault = function() {
    if (this.preventable) {
        this.prevented = 1;
        if (this.stack) {
            this.stack.prevented = 1;
        }
    }
};

/**
 * Stops the event propagation and prevents the default
 * event behavior.
 * @method halt
 * @param immediate {boolean} if true additional listeners
 * on the current target will not be executed
 */
CEProto.halt = function(immediate) {
    if (immediate) {
        this.stopImmediatePropagation();
    } else {
        this.stopPropagation();
    }
    this.preventDefault();
};

/**
 * Registers another EventTarget as a bubble target.  Bubble order
 * is determined by the order registered.  Multiple targets can
 * be specified.
 *
 * Events can only bubble if emitFacade is true.
 *
 * Included in the event-custom-complex submodule.
 *
 * @method addTarget
 * @param o {EventTarget} the target to add
 * @for EventTarget
 */
ETProto.addTarget = function(o) {
    var etState = this._yuievt;

    if (!etState.targets) {
        etState.targets = {};
    }

    etState.targets[Y.stamp(o)] = o;
    etState.hasTargets = true;
};

/**
 * Returns an array of bubble targets for this object.
 * @method getTargets
 * @return EventTarget[]
 */
ETProto.getTargets = function() {
    var targets = this._yuievt.targets;
    return targets ? YObject.values(targets) : [];
};

/**
 * Removes a bubble target
 * @method removeTarget
 * @param o {EventTarget} the target to remove
 * @for EventTarget
 */
ETProto.removeTarget = function(o) {
    var targets = this._yuievt.targets;

    if (targets) {
        delete targets[Y.stamp(o, true)];

        if (YObject.size(targets) === 0) {
            this._yuievt.hasTargets = false;
        }
    }
};

/**
 * Propagate an event.  Requires the event-custom-complex module.
 * @method bubble
 * @param evt {CustomEvent} the custom event to propagate
 * @return {boolean} the aggregated return value from Event.Custom.fire
 * @for EventTarget
 */
ETProto.bubble = function(evt, args, target, es) {

    var targs = this._yuievt.targets,
        ret = true,
        t,
        ce,
        i,
        bc,
        ce2,
        type = evt && evt.type,
        originalTarget = target || (evt && evt.target) || this,
        oldbubble;

    if (!evt || ((!evt.stopped) && targs)) {

        for (i in targs) {
            if (targs.hasOwnProperty(i)) {

                t = targs[i];

                ce = t._yuievt.events[type];

                if (t._hasSiblings) {
                    ce2 = t.getSibling(type, ce);
                }

                if (ce2 && !ce) {
                    ce = t.publish(type);
                }

                oldbubble = t._yuievt.bubbling;
                t._yuievt.bubbling = type;

                // if this event was not published on the bubble target,
                // continue propagating the event.
                if (!ce) {
                    if (t._yuievt.hasTargets) {
                        t.bubble(evt, args, originalTarget, es);
                    }
                } else {

                    if (ce2) {
                        ce.sibling = ce2;
                    }

                    // set the original target to that the target payload on the facade is correct.
                    ce.target = originalTarget;
                    ce.originalTarget = originalTarget;
                    ce.currentTarget = t;
                    bc = ce.broadcast;
                    ce.broadcast = false;

                    // default publish may not have emitFacade true -- that
                    // shouldn't be what the implementer meant to do
                    ce.emitFacade = true;

                    ce.stack = es;

                    // TODO: See what's getting in the way of changing this to use
                    // the more performant ce._fire(args || evt.details || []).

                    // Something in Widget Parent/Child tests is not happy if we
                    // change it - maybe evt.details related?
                    ret = ret && ce.fire.apply(ce, args || evt.details || []);

                    ce.broadcast = bc;
                    ce.originalTarget = null;

                    // stopPropagation() was called
                    if (ce.stopped) {
                        break;
                    }
                }

                t._yuievt.bubbling = oldbubble;
            }
        }
    }

    return ret;
};

FACADE = new Y.EventFacade();
FACADE_KEYS = {};

// Flatten whitelist
for (key in FACADE) {
    FACADE_KEYS[key] = true;
}


}, '3.10.1', {"requires": ["event-custom-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/follow-button.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-follow-button', function(Y) {
  Y.namespace('Squarespace.Widgets').FollowButton = Y.Base.create('followButton', Y.Widget, [], {
    renderUI: function() {
      console.log(this.get('username'));
      this.get('contentBox').setContent(
        '<a href="https://twitter.com/' + this.get('username') + '" class="twitter-follow-button" data-show-count="false">Follow @' + this.get('username') +'</a>'
      );
    },
    syncUI: function() {
      var logError = function() {
        console.warn('Twitter Follow Button JS failed to load');
      };
      var showWidget = function() {
        this.show();
      };

      Y.Get.script("//platform.twitter.com/widgets.js", {
        onSuccess: showWidget,
        onFailure: logError,
        onTimeout: logError,
        timeout: 10000,
        context: this
      });
    }
  }, {
    ATTRS: {
      username: {
        value: ""
      },

      visible: {
        value: false
      }
    },
    CSS_PREFIX: 'sqs-follow-button'
  });
}, '1.0', {
  requires: [
    'widget',
    'base-build',
    'squarespace-follow-button-css'
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/search.js
// ----------------------------------------------------------------------------------------

/**
 * search widget.
 *
 * @module squarespace-data-backed-widget
 */
YUI.add('squarespace-search', function(Y) {


  Y.namespace('Squarespace');


  /*
   * Search container base class. Contains logic to do:
   * - search
   * - pagination
   * - adding and removing filters
   * - lookup result data object from search result
   */
  var SearchContainer = Y.Base.create('searchContainer', Y.Squarespace.SSWidget, [], {
    initializer: function(config) {
    },
    renderUI: function() {
      SearchContainer.superclass.renderUI.call(this);
    },
    bindUI: function() {
      var searchInputBox = this.get("searchInputBox");
      searchInputBox.after(this.get('id') + "|queryStringChange", this._onSearchInputBoxChange, this);
      this.after(this.get('id') + "|searchFilterChange", this._onSearchFilterChange, this);
      this.after(this.get('id') + "|searchQueryChange", this._onSearchQueryChange, this);
      this.after(this.get('id') + "|resultItemsChange", this._onSearchResultChange, this);
      this.after(this.get('id') + "|loadingChange", this.syncUI, this);
      this.get("contentBox").on(this.get("id") + "|keyup", this._onKeyup, this);
      this.scrollTimer = Y.later(250, this, this._infiniteScroll, {}, true);
    },
    /*
     * Goes over existing filters and remove the filter that match
     * The change will trigger a searchFilterChange
     */
    removeFilter: function(filterName) {
      var filters = this.get("searchFilter");
      filters = Y.Array.filter(filters, function(item) {
        if (item.name === filterName) return false;
        return true;
      });
      this.set("searchFilter", filters);
    },
    /*
     *  Adds a new filter. newFilter is an object containing
     * name and value of the filter (also an optional displayName)
     * The change will trigger a searchFilterChange
     */
    addFilter: function(newFilter) {
      var filter = this.get("searchFilter");
      filter.push(newFilter);
      this.set("searchFilter", filter);
    },
    destructor: function() {
      if (this.scrollTimer) {
        this.scrollTimer.cancel();
      }
    },
    /*
     * Called when search query is changed
     * - clear previous result
     * - preform a new search
     */
    _onSearchQueryChange: function(e) {
      this._clearResult();
      this.set('loading', true);
      this._search();
    },
    /*
     * Called when the searchFilters is updated.
     * - clear previous result
     * - preform a new search
     */
    _onSearchFilterChange: function(e) {
      this._clearResult();
      this.set('loading', true);
      this._search();
    },
    /*
     * Called when the search result have been updated
     * - time to syncUI
     */
    _onSearchResultChange: function(e) {
      this.syncUI();
    },
    /*
     * Cleans up the result. Shold NOT clear filters
     */
    _clearResult: function() {
      this.set("resultItems", null);
      this.set("page", 0);
    },
    /*
     * Called when the searchInputBox query is changed
     */
    _onSearchInputBoxChange: function(e) {
      var value = e.newVal;
      this.set("searchQuery", e.newVal);
    },
    _onKeyup: function(e) {
      if (e.keyCode === 38 && !this.get("searchInputBox").isAutocompleteEnabled()) {
        // up arrow
        this._moveSelectedResultItem(-1);
      }
      else if (e.keyCode === 40 && !this.get("searchInputBox").isAutocompleteEnabled()) {
        // down arrow
        this._moveSelectedResultItem(1);
      }
      else if (e.keyCode === 13) {
        this._onEnter();
      }
    },
    _moveSelectedResultItem: function(pos) {
      var item = this.get("contentBox").one(".active");
      if (item) {
        item.removeClass("active");
        var items = this.get("contentBox").all(".sqs-search-ui-item");
        var index = items.indexOf(item);
        var nextNode = items.item(index + pos);
        if (nextNode) {
          nextNode.addClass("active");
          nextNode.scrollIntoView();
        }
      }
      else if (pos > 0) {
        var firstItem = this.get("contentBox").one(".sqs-search-ui-item");
        if (firstItem) {
          firstItem.addClass("active");
          firstItem.scrollIntoView();
        }
      }
    },
    _onEnter: function() {
      var active = this.get("contentBox").one(".active");
      if (active && !this.get("searchInputBox").isAutocompleteEnabled()) {
        active.simulate("click");
      }
    },


    /*
     * Performs the actuall search based on the ATTR stored
     */
    _search: function() {
      var queryString = this.get("searchQuery");
      var page = this.get("page");
      if (queryString.length === 0) { return; }
      var data = {
        q: queryString,
        p: page
      };
      Y.Array.each(this.get("searchFilter"), function(item) {
        data["f_" + item.name] = item.value;
      });
      Y.Data.get({
        url: "/api/search/GeneralSearch",
        data: data,
        success: this._searchResultCallback,
        error: this._searchResultCallbackError
      }, this);
    },
    /*
     * Success callback
     * If page > 0 it's the next search result page
     * - append the new search result to existing items
     * If not just set the searchResult data
     */
    _searchResultCallback: function(data) {
      this.set('loading', false);
      this.set('facets', data.facets);
      this.set('totalCount', data.totalCount);
      var oldResult = this.get("resultItems"),
          page = this.get("page");

      if (data.serviceError) {
        console.error("Search error: " + data.serviceError);
      } else if (page > 0 && oldResult) {
        oldResult = oldResult.concat(data.items);
        this.set("resultItems", oldResult);
      } else {
        this.set("resultItems", data.items);
      }
    },
    /*
     *  Error handler
     */
    _searchResultCallbackError: function() {
      this.set('loading', false);
      console.error("error data", data);
    },
    /*
     * Lookup function to look for an item in the searchResult that exist
     * Traversing an array is not the most efficient way of doing it but good enough for now.
     */
    _getSearchResultObject: function(id) {
      var searchResult = this.get("resultItems");
      return Y.Array.find(searchResult, function(item) {
        if (item.id === id) return true;
        return false;
      });
    },
    /*
     * For pagination
     * Increments the page count and coes a new search
     */
    _nextPage: function() {
      var newPage = this.get("page") + 1;
      this.set("page", newPage);
      this._search();
    },
    /*
     * This method is called on a timer to check where the scollPosition is
     * to decide if the next search result page should be requested
     */
    _infiniteScroll: function() {
      var node = this.get("contentBox").one(".sqs-search-ui-list");
      if (node) {
        var contentHeight = node.get("scrollHeight"),
            scrollPos = node.get("scrollTop"),
            viewPortHeight = node.get("offsetHeight"),
            scrollLeft = contentHeight - viewPortHeight - scrollPos,
            searchResult = this.get("resultItems"),
            totalCount = this.get('totalCount');
        if (!searchResult) return;
        if (scrollLeft < 100 && totalCount > searchResult.length) {
          this._nextPage();
        }
      }
    }
  },
  {
    ATTRS: {
      /*
       * The containers SearchInputBox widget, where you type
       */
      searchInputBox: {
        value: null
      },
      /*
       * Contains current filters
       * Contains object like {name: "collectionId", value:"4f5a8877036420e36853f4de"}
       */
      searchFilter: {
        value: []
      },
      /*
       * For Pagination, to keep track on what result page we are on
       */
      page: {
        value: 0
      },
      /*
       * The current search querie
       */
      searchQuery: {
        value: null
      },
      /*
       * The search result data object that have been fetched and is being displayed
       */
      resultItems: {
        validator: Y.Lang.isArray
      },
      totalCount: {
        value: 0,
        validator: Y.Lang.isNumber
      },
      facets: {
        value: [],
        validator: Y.Lang.isArray
      },
      errorNotice: {
        validator: Y.Lang.isString
      },
      notice: {
        validator: Y.Lang.isString
      },
      loading: {
        value: false,
        validator: Y.Lang.isBoolean
      }
    }
  });



  var SearchContainerFullScreen = Y.Base.create('searchContainerFullScreen', SearchContainer, [], {
    initializer: function(config) {
    },
    /*
     * The superclass takes care of rendering TEMPLATE
     * - creates and adds the searchInputBox widget
     * - it expects that the scrNode is a child of body
     */
    renderUI: function() {

      SearchContainerFullScreen.superclass.renderUI.call(this);

      this._open = true;
      var contentBox = this.get("contentBox");
      contentBox.addClass("sqs-search-ui");
      var queryString = this.get("searchQuery");

      var html = Y.Node.create(Y.Squarespace.UITemplates.render(SearchContainerFullScreen.TEMPLATE_NAME, this._getSearchDataModel()));
      contentBox.append(html);

      contentBox.plug(Y.Squarespace.Animations.Fadeable, { duration: 0.2, opacity: 0.99 });

      var searchInputBox = new SearchInputBox({
        queryString: queryString,
        srcNode: html.one("#searchInputBox"),
        inputType: "text",
        withSearchSuggest: true
      });
      this.set("searchInputBox", searchInputBox);
      searchInputBox.render();
      searchInputBox.focus();
      Y.one("body").addClass("no-scroll");
      Y.one("body").addClass("sqs-search-ui-fullscreen");

      contentBox.hide(true);
      contentBox.show();

      Y.Squarespace.EscManager.addTarget(this);
    },

    bindUI: function() {
      SearchContainerFullScreen.superclass.bindUI.call(this);

      var contentBox = this.get("contentBox");
      contentBox.one(".sqs-search-ui-close").on(this.get('id') + "|click", this._closeClick, this);
      contentBox.delegate(this.get('id') + "|click", this._toggleFilter, ".sqs-search-ui-filters-group li", this);
      contentBox.delegate(this.get('id') + "|click", this._clickResult, ".sqs-search-ui-list .search-result", this);
      this.get("boundingBox").on(this.get('id') + "|click", this._onClick, this);

    },
    /*
     * Called when the searchResult have been updated.
     * Contains logic to identify if this is a new search or just the
     * next search result page, if so it just appends the new items
     */
    syncUI: function() {

      var contentBox = this.get("contentBox"),
          page = this.get("page");

      var html = Y.Node.create(Y.Squarespace.UITemplates.render(SearchContainerFullScreen.TEMPLATE_NAME, this._getSearchDataModel()));

      if (page === 0) {
        contentBox.one('.sqs-search-ui-result').replace(html.one('.sqs-search-ui-result'));
      }
      else {
        var currentList = contentBox.one(".sqs-search-ui-list .search-results");
        var currentListLength = currentList.get("children").size();
        var newList = html.one(".sqs-search-ui-list .search-results").get("children");
        newList = newList.splice(currentListLength);
        currentList.append(newList);
      }

      if (this.get('loading')) {
        this._spinner = new Y.Squarespace.Spinner({ color: 'dark', size: 'large', render: contentBox.one(".spinner-wrapper") });
      }

    },

    _getSearchDataModel: function(id) {
      var items = this.get('resultItems');
      var facets = this.get('facets');
      var data = {
        loading: this.get('loading'),
        error: this.get('errorNotice'),
        items: items,
        facets: facets
      };

      if (items) {
        if (items.length === 0) {
          data.notice = 'Your search did not match any documents.';
        }
      } else {
        data.notice = 'Begin typing your search above and press return to search.  Press Esc to cancel.';
      }

      return data;
    },

    _closeClick: function(e) {
      e.stopPropagation();
      this._close();
    },

    isOpen: function() {
      return this._open;
    },

    /**
     * Called by the EscManager to close
     * @method close
     */
    close: function() {
      this._close();
    },

    /**
     * internal close method to actually close the down
     * @method _close
     * @private
     */
    _close: function(hard) {
      this._open = false;
      Y.one("body").removeClass("no-scroll");
      Y.one("body").removeClass("sqs-search-ui-fullscreen");
      if (hard) {
        this.destroy();
      }
      else {
        var contentBox = this.get("contentBox");
        contentBox.once("hidden", function() {
          this.destroy();
        }, this);
        contentBox.hide();
      }
    },

    destructor: function() {
      this.get("boundingBox").remove();
      this.get("searchInputBox").destroy();
      Y.Squarespace.EscManager.removeTarget(this);
    },

    /*
     * Called when a filter is clicked on
     * Identifies if you want to remove or add the filter
     */
    _toggleFilter: function(e) {
      e.preventDefault();
      var target = e.target.ancestor("li", true);
      if (!target) return;
      var value = target.getAttribute("filter");
      var displayName = target.getAttribute("displayname");
      var name = target.ancestor(".sqs-search-ui-filters-group").getAttribute("name");
      var active = target.hasClass("active");

      if (active) {
        this.removeFilter(name);
      }
      else {
        this.addFilter({
          displayName: displayName,
          value: value,
          name: name
        });
      }
    },

    _onClick: function(e) {
      e.stopPropagation();
      this.get("searchInputBox").focus();
    },

    /*
     * Handler for when a search result is clicked on and opens up the item
     */
    _clickResult: function(e) {

      e.halt();
      var resultEl = e.target.ancestor(".search-result", true);
      if (!resultEl) { return; }
      var itemId = resultEl.getAttribute("itemid");
      if (!itemId) { return; }

      var item = this._getSearchResultObject(itemId);
      this._close(true);

      if (e.target.ancestor(".edit", true)) {

        // edit the item

        if (item.recordType) {

          // it's an item

          var model = new Y.Squarespace.Models.ContentItem({
            id: item.id
          });

          model.load(function() {
            var editor = new (Y.Squarespace.ContentItemEditorFactory.getEditor(model))({
              model: model
            });

            editor.show();
          });

          // Y.Squarespace.ACTIVE_MANAGER.getHistory().replace({
          //   "module": "content",
          //   "collectionId": item.collectionId
          // });

        } else {

          // it's a collection

          if (Y.Squarespace.ACTIVE_MANAGER) { // we're on the backend

            Y.Squarespace.ACTIVE_MANAGER.getHistory().replace({
              "module": "content",
              "collectionId": item.collectionId
            });

          } else if (Y.Squarespace.Management) { // we're on the frontend

            Y.Squarespace.Management.manageSite({ module: "content", "collectionId": item.collectionId });

          }

        }

      } else {

        // visit the item

        document.location.href = item.itemUrl;

      }

    }

  },
  {
    /*
     * Handlebars template name. Name is the same as the HTML file that can be
     * found in src/main/webapp/template-v6/handlebars/
     * After Template has changed an ant script have to be run to put the template in
     * a JS file that will be loaded. # ant compile-handlebars-template
     * The last step should be automated like the LESS compilation so you just can
     * update the template and don't worry about anything else.
     */
    TEMPLATE_NAME: 'SearchContainerFullScreen.html',
    ATTRS: {

    }
  });

  /*
   * Search field widget, used YUI autocomplete plugin for the
   * autocomplete logic
   */
  var SearchInputBox = Y.Base.create('searchInputBox', Y.Widget, [], {
    initializer: function(config) {

    },

    renderUI: function() {
      var node = this._createSearchNode();
      this.get("contentBox").append(node);
      // this._enableAutoComplete();
    },

    bindUI: function() {
      this._enableAutoComplete();
      this.get("boundingBox").one("form").on(this.get('id') + "|submit", this._onSubmit, this);
      this.get("boundingBox").one("form").on(this.get('id') + "|keydown", this._onKeyDown, this);
      this.after(this.get("id") + "|queryStringChange", this._resetAutoComplete, this);
    },


    /*
     * Capture all except esc button and stop propagation
     */
    _onKeyDown: function(e) {
      if (e.keyCode !== 27) {
        e.stopPropagation();
      }
    },

    /*
     * Autocomplete gets unplugged when a search is done so we get
     * access to up/down arrows again. The later is here to let the
     * autocomplete finish it's logic before we unplug it.
     * The autocomplete plugin throws an exception without it
     */
    _autocompleteSelected: function(e) {
      Y.later(1, this, function(e) {
        this.set("queryString", e.result.text);
      }, e);
    },

    /*
     * On form submit we set the searchString value. Container
     * will typically listen to changes here and do a search
     */
    _onSubmit: function(e) {
      e.preventDefault();
      var value = this.get("contentBox").one("input").get("value");
      this.set("queryString", value);
    },

    /*
     * Plug in the YUI autocomplete plugin
     */
    _enableAutoComplete: function() {
      var inputNode = this.get("contentBox").one("input");
      if (this.get("withSearchSuggest") && !inputNode.ac) {
        inputNode.plug(Y.Plugin.AutoComplete, {
          source: '/api/search/SearchSuggest?q={query}',
          resultTextLocator: "suggestion"
        });
        var ac = this.get("boundingBox").one("input").ac;
          ac.on("select", this._autocompleteSelected, this);
      }
    },

    /*
     * A check to see if the autocomplete list is
     * shown or not. Could not find a better hook into the plugin...
     */
    isAutocompleteEnabled: function() {
      var nodes = this.get("contentBox").all(".yui3-aclist-item");
      if (nodes.size() > 0) return true;
      return false;
    },

    /**
     * Reloading the plugin to clear cache to avoid up/down arrow
     * trigger the flyout again. Wish .disable() would work :(
     * @method _resetAutoComplete
     * @private
     */
    _resetAutoComplete: function() {
      var inputNode = this.get("boundingBox").one("input");
      if (inputNode.ac) {
        inputNode.unplug("ac");
      }
      this._enableAutoComplete();
    },

    /**
     * Focus the input, and make it selectable if there is content
     * @method focus
     */
    focus: function() {
      var input = this.get("contentBox").one("input");
      input.focus();
      input.set("value", this.get("queryString"));
      if (this.get("queryString") !== "") {
        input.select();
      }
    },

    blur: function() {
      var input = this.get("contentBox").one("input");
      input.blur();
    },

    /**
     * Create the markup.
     * Consider move this to template
     * @method _createSearchNode
     * @private
     */
    _createSearchNode: function() {
      var form = Y.Node.create("<form/>");
      form.append(Y.DB.INPUT("field-input", {
        placeholder: "Type to search...",
        type: this.get("inputType"),
        spellcheck: false,
        value: this.get("queryString")
      }));
      if (this.get("queryString")) {
        this._lastQuery = this.get("queryString");
      }
      return form;
    }
  },
  {
    ATTRS: {
      queryString: {
        value: ""
      },
      inputType: {
        value: "search"
      },
      withSearchSuggest: {
        value: false
      }
    }
  });

  /*
   * Simple search singleton
   */

  Y.Squarespace.Search = new (Y.Base.create('searchSingleton', Y.Base, [], {

    initializer: function() {

      this.attached = false;

    },

    onButtonClick: function(e) {
      e.halt();
      Y.use(
            'widget',
            'autocomplete',
            'squarespace-search-ui-css',
            'squarespace-ui-templates',
            'squarespace-animations',
            Y.bind(function(Y) { this.show(); }, this)
      );
    },

    show: function() {

      if (this.containerWidget && this.containerWidget.isOpen()) {
        return;
      }

      var config = {
          searchQuery: ""
        };

      this.containerWidget = new SearchContainerFullScreen(config);
      this.containerWidget.render();

    },

    attach: function() {

      if (this.attached) { return; }

      // buttons

      Y.delegate("click", this.onButtonClick, "body", ".sqs-search-ui-button", this);

      // shortcuts

      Y.one(document.body).on("keydown", function(e) {
        if (e.ctrlKey && e.keyCode == 83) { // control+s
          Y.Squarespace.Search.show();
        }
      }, this);

      this.attached = true;

    }

  },
  {
    ATTRS: {}
  }))();


  // ------------------------------------------------------------------------------------------------
  // Initialize
  // ------------------------------------------------------------------------------------------------

  Squarespace.onInitialize(Y, function() {
    Y.Squarespace.Search.attach();
  });


}, '1.0', { requires: [
  'base',
  'event',
  'autocomplete-plugin',
  'squarespace-ss-widget',
  'squarespace-animations',
  'squarespace-SearchContainerFullScreen-template'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-simulate/event-simulate.js
// ----------------------------------------------------------------------------------------

YUI.add('event-simulate', function (Y, NAME) {

(function() {
/**
 * Simulate user interaction by generating native DOM events.
 *
 * @module event-simulate
 * @requires event
 */

//shortcuts
var L   = Y.Lang,
    isFunction  = L.isFunction,
    isString    = L.isString,
    isBoolean   = L.isBoolean,
    isObject    = L.isObject,
    isNumber    = L.isNumber,

    //mouse events supported
    mouseEvents = {
        click:      1,
        dblclick:   1,
        mouseover:  1,
        mouseout:   1,
        mousedown:  1,
        mouseup:    1,
        mousemove:  1,
        contextmenu:1
    },

    msPointerEvents = {
        MSPointerOver:  1,
        MSPointerOut:   1,
        MSPointerDown:  1,
        MSPointerUp:    1,
        MSPointerMove:  1
    },

    //key events supported
    keyEvents   = {
        keydown:    1,
        keyup:      1,
        keypress:   1
    },

    //HTML events supported
    uiEvents  = {
        submit:     1,
        blur:       1,
        change:     1,
        focus:      1,
        resize:     1,
        scroll:     1,
        select:     1
    },

    //events that bubble by default
    bubbleEvents = {
        scroll:     1,
        resize:     1,
        reset:      1,
        submit:     1,
        change:     1,
        select:     1,
        error:      1,
        abort:      1
    },

    //touch events supported
    touchEvents = {
        touchstart: 1,
        touchmove: 1,
        touchend: 1,
        touchcancel: 1
    },

    gestureEvents = {
        gesturestart: 1,
        gesturechange: 1,
        gestureend: 1
    };

//all key, mouse and touch events bubble
Y.mix(bubbleEvents, mouseEvents);
Y.mix(bubbleEvents, keyEvents);
Y.mix(bubbleEvents, touchEvents);

/*
 * Note: Intentionally not for YUIDoc generation.
 * Simulates a key event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks. Note: keydown causes Safari 2.x to
 * crash.
 * @method simulateKeyEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: keyup, keydown, and keypress.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 3 specifies that all key events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 3 specifies that all
 *      key events can be cancelled. The default
 *      is true.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} keyCode (Optional) The code for the key that is in use.
 *      The default is 0.
 * @param {int} charCode (Optional) The Unicode code for the character
 *      associated with the key being used. The default is 0.
 */
function simulateKeyEvent(target /*:HTMLElement*/, type /*:String*/,
                             bubbles /*:Boolean*/,  cancelable /*:Boolean*/,
                             view /*:Window*/,
                             ctrlKey /*:Boolean*/,    altKey /*:Boolean*/,
                             shiftKey /*:Boolean*/,   metaKey /*:Boolean*/,
                             keyCode /*:int*/,        charCode /*:int*/) /*:Void*/
{
    //check target
    if (!target){
        Y.error("simulateKeyEvent(): Invalid target.");
    }

    //check event type
    if (isString(type)){
        type = type.toLowerCase();
        switch(type){
            case "textevent": //DOM Level 3
                type = "keypress";
                break;
            case "keyup":
            case "keydown":
            case "keypress":
                break;
            default:
                Y.error("simulateKeyEvent(): Event type '" + type + "' not supported.");
        }
    } else {
        Y.error("simulateKeyEvent(): Event type must be a string.");
    }

    //setup default values
    if (!isBoolean(bubbles)){
        bubbles = true; //all key events bubble
    }
    if (!isBoolean(cancelable)){
        cancelable = true; //all key events can be cancelled
    }
    if (!isObject(view)){
        view = Y.config.win; //view is typically window
    }
    if (!isBoolean(ctrlKey)){
        ctrlKey = false;
    }
    if (!isBoolean(altKey)){
        altKey = false;
    }
    if (!isBoolean(shiftKey)){
        shiftKey = false;
    }
    if (!isBoolean(metaKey)){
        metaKey = false;
    }
    if (!isNumber(keyCode)){
        keyCode = 0;
    }
    if (!isNumber(charCode)){
        charCode = 0;
    }

    //try to create a mouse event
    var customEvent /*:MouseEvent*/ = null;

    //check for DOM-compliant browsers first
    if (isFunction(Y.config.doc.createEvent)){

        try {

            //try to create key event
            customEvent = Y.config.doc.createEvent("KeyEvents");

            /*
             * Interesting problem: Firefox implemented a non-standard
             * version of initKeyEvent() based on DOM Level 2 specs.
             * Key event was removed from DOM Level 2 and re-introduced
             * in DOM Level 3 with a different interface. Firefox is the
             * only browser with any implementation of Key Events, so for
             * now, assume it's Firefox if the above line doesn't error.
             */
            // @TODO: Decipher between Firefox's implementation and a correct one.
            customEvent.initKeyEvent(type, bubbles, cancelable, view, ctrlKey,
                altKey, shiftKey, metaKey, keyCode, charCode);

        } catch (ex /*:Error*/){

            /*
             * If it got here, that means key events aren't officially supported.
             * Safari/WebKit is a real problem now. WebKit 522 won't let you
             * set keyCode, charCode, or other properties if you use a
             * UIEvent, so we first must try to create a generic event. The
             * fun part is that this will throw an error on Safari 2.x. The
             * end result is that we need another try...catch statement just to
             * deal with this mess.
             */
            try {

                //try to create generic event - will fail in Safari 2.x
                customEvent = Y.config.doc.createEvent("Events");

            } catch (uierror /*:Error*/){

                //the above failed, so create a UIEvent for Safari 2.x
                customEvent = Y.config.doc.createEvent("UIEvents");

            } finally {

                customEvent.initEvent(type, bubbles, cancelable);

                //initialize
                customEvent.view = view;
                customEvent.altKey = altKey;
                customEvent.ctrlKey = ctrlKey;
                customEvent.shiftKey = shiftKey;
                customEvent.metaKey = metaKey;
                customEvent.keyCode = keyCode;
                customEvent.charCode = charCode;

            }

        }

        //fire the event
        target.dispatchEvent(customEvent);

    } else if (isObject(Y.config.doc.createEventObject)){ //IE

        //create an IE event object
        customEvent = Y.config.doc.createEventObject();

        //assign available properties
        customEvent.bubbles = bubbles;
        customEvent.cancelable = cancelable;
        customEvent.view = view;
        customEvent.ctrlKey = ctrlKey;
        customEvent.altKey = altKey;
        customEvent.shiftKey = shiftKey;
        customEvent.metaKey = metaKey;

        /*
         * IE doesn't support charCode explicitly. CharCode should
         * take precedence over any keyCode value for accurate
         * representation.
         */
        customEvent.keyCode = (charCode > 0) ? charCode : keyCode;

        //fire the event
        target.fireEvent("on" + type, customEvent);

    } else {
        Y.error("simulateKeyEvent(): No event simulation framework present.");
    }
}

/*
 * Note: Intentionally not for YUIDoc generation.
 * Simulates a mouse event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks.
 * @method simulateMouseEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      mouse events except mousemove can be cancelled. The default
 *      is true for all events except mousemove, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) The number of times the mouse button has
 *      been used. The default value is 1.
 * @param {int} screenX (Optional) The x-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} screenY (Optional) The y-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} clientX (Optional) The x-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {int} clientY (Optional) The y-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} button (Optional) The button being pressed while the event
 *      is executing. The value should be 0 for the primary mouse button
 *      (typically the left button), 1 for the terciary mouse button
 *      (typically the middle button), and 2 for the secondary mouse button
 *      (typically the right button). The default is 0.
 * @param {HTMLElement} relatedTarget (Optional) For mouseout events,
 *      this is the element that the mouse has moved to. For mouseover
 *      events, this is the element that the mouse has moved from. This
 *      argument is ignored for all other events. The default is null.
 */
function simulateMouseEvent(target /*:HTMLElement*/, type /*:String*/,
                               bubbles /*:Boolean*/,  cancelable /*:Boolean*/,
                               view /*:Window*/,        detail /*:int*/,
                               screenX /*:int*/,        screenY /*:int*/,
                               clientX /*:int*/,        clientY /*:int*/,
                               ctrlKey /*:Boolean*/,    altKey /*:Boolean*/,
                               shiftKey /*:Boolean*/,   metaKey /*:Boolean*/,
                               button /*:int*/,         relatedTarget /*:HTMLElement*/) /*:Void*/
{
    //check target
    if (!target){
        Y.error("simulateMouseEvent(): Invalid target.");
    }


    if (isString(type)){

        //make sure it's a supported mouse event or an msPointerEvent.
        if (!mouseEvents[type.toLowerCase()] && !msPointerEvents[type]){
            Y.error("simulateMouseEvent(): Event type '" + type + "' not supported.");
        }
    }
    else {
        Y.error("simulateMouseEvent(): Event type must be a string.");
    }

    //setup default values
    if (!isBoolean(bubbles)){
        bubbles = true; //all mouse events bubble
    }
    if (!isBoolean(cancelable)){
        cancelable = (type !== "mousemove"); //mousemove is the only one that can't be cancelled
    }
    if (!isObject(view)){
        view = Y.config.win; //view is typically window
    }
    if (!isNumber(detail)){
        detail = 1;  //number of mouse clicks must be at least one
    }
    if (!isNumber(screenX)){
        screenX = 0;
    }
    if (!isNumber(screenY)){
        screenY = 0;
    }
    if (!isNumber(clientX)){
        clientX = 0;
    }
    if (!isNumber(clientY)){
        clientY = 0;
    }
    if (!isBoolean(ctrlKey)){
        ctrlKey = false;
    }
    if (!isBoolean(altKey)){
        altKey = false;
    }
    if (!isBoolean(shiftKey)){
        shiftKey = false;
    }
    if (!isBoolean(metaKey)){
        metaKey = false;
    }
    if (!isNumber(button)){
        button = 0;
    }

    relatedTarget = relatedTarget || null;

    //try to create a mouse event
    var customEvent /*:MouseEvent*/ = null;

    //check for DOM-compliant browsers first
    if (isFunction(Y.config.doc.createEvent)){

        customEvent = Y.config.doc.createEvent("MouseEvents");

        //Safari 2.x (WebKit 418) still doesn't implement initMouseEvent()
        if (customEvent.initMouseEvent){
            customEvent.initMouseEvent(type, bubbles, cancelable, view, detail,
                                 screenX, screenY, clientX, clientY,
                                 ctrlKey, altKey, shiftKey, metaKey,
                                 button, relatedTarget);
        } else { //Safari

            //the closest thing available in Safari 2.x is UIEvents
            customEvent = Y.config.doc.createEvent("UIEvents");
            customEvent.initEvent(type, bubbles, cancelable);
            customEvent.view = view;
            customEvent.detail = detail;
            customEvent.screenX = screenX;
            customEvent.screenY = screenY;
            customEvent.clientX = clientX;
            customEvent.clientY = clientY;
            customEvent.ctrlKey = ctrlKey;
            customEvent.altKey = altKey;
            customEvent.metaKey = metaKey;
            customEvent.shiftKey = shiftKey;
            customEvent.button = button;
            customEvent.relatedTarget = relatedTarget;
        }

        /*
         * Check to see if relatedTarget has been assigned. Firefox
         * versions less than 2.0 don't allow it to be assigned via
         * initMouseEvent() and the property is readonly after event
         * creation, so in order to keep YAHOO.util.getRelatedTarget()
         * working, assign to the IE proprietary toElement property
         * for mouseout event and fromElement property for mouseover
         * event.
         */
        if (relatedTarget && !customEvent.relatedTarget){
            if (type === "mouseout"){
                customEvent.toElement = relatedTarget;
            } else if (type === "mouseover"){
                customEvent.fromElement = relatedTarget;
            }
        }

        //fire the event
        target.dispatchEvent(customEvent);

    } else if (isObject(Y.config.doc.createEventObject)){ //IE

        //create an IE event object
        customEvent = Y.config.doc.createEventObject();

        //assign available properties
        customEvent.bubbles = bubbles;
        customEvent.cancelable = cancelable;
        customEvent.view = view;
        customEvent.detail = detail;
        customEvent.screenX = screenX;
        customEvent.screenY = screenY;
        customEvent.clientX = clientX;
        customEvent.clientY = clientY;
        customEvent.ctrlKey = ctrlKey;
        customEvent.altKey = altKey;
        customEvent.metaKey = metaKey;
        customEvent.shiftKey = shiftKey;

        //fix button property for IE's wacky implementation
        switch(button){
            case 0:
                customEvent.button = 1;
                break;
            case 1:
                customEvent.button = 4;
                break;
            case 2:
                //leave as is
                break;
            default:
                customEvent.button = 0;
        }

        /*
         * Have to use relatedTarget because IE won't allow assignment
         * to toElement or fromElement on generic events. This keeps
         * YAHOO.util.customEvent.getRelatedTarget() functional.
         */
        customEvent.relatedTarget = relatedTarget;

        //fire the event
        target.fireEvent("on" + type, customEvent);

    } else {
        Y.error("simulateMouseEvent(): No event simulation framework present.");
    }
}

/*
 * Note: Intentionally not for YUIDoc generation.
 * Simulates a UI event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks.
 * @method simulateHTMLEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      mouse events except mousemove can be cancelled. The default
 *      is true for all events except mousemove, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) The number of times the mouse button has
 *      been used. The default value is 1.
 */
function simulateUIEvent(target /*:HTMLElement*/, type /*:String*/,
                               bubbles /*:Boolean*/,  cancelable /*:Boolean*/,
                               view /*:Window*/,        detail /*:int*/) /*:Void*/
{

    //check target
    if (!target){
        Y.error("simulateUIEvent(): Invalid target.");
    }

    //check event type
    if (isString(type)){
        type = type.toLowerCase();

        //make sure it's a supported mouse event
        if (!uiEvents[type]){
            Y.error("simulateUIEvent(): Event type '" + type + "' not supported.");
        }
    } else {
        Y.error("simulateUIEvent(): Event type must be a string.");
    }

    //try to create a mouse event
    var customEvent = null;


    //setup default values
    if (!isBoolean(bubbles)){
        bubbles = (type in bubbleEvents);  //not all events bubble
    }
    if (!isBoolean(cancelable)){
        cancelable = (type === "submit"); //submit is the only one that can be cancelled
    }
    if (!isObject(view)){
        view = Y.config.win; //view is typically window
    }
    if (!isNumber(detail)){
        detail = 1;  //usually not used but defaulted to this
    }

    //check for DOM-compliant browsers first
    if (isFunction(Y.config.doc.createEvent)){

        //just a generic UI Event object is needed
        customEvent = Y.config.doc.createEvent("UIEvents");
        customEvent.initUIEvent(type, bubbles, cancelable, view, detail);

        //fire the event
        target.dispatchEvent(customEvent);

    } else if (isObject(Y.config.doc.createEventObject)){ //IE

        //create an IE event object
        customEvent = Y.config.doc.createEventObject();

        //assign available properties
        customEvent.bubbles = bubbles;
        customEvent.cancelable = cancelable;
        customEvent.view = view;
        customEvent.detail = detail;

        //fire the event
        target.fireEvent("on" + type, customEvent);

    } else {
        Y.error("simulateUIEvent(): No event simulation framework present.");
    }
}

/*
 * (iOS only) This is for creating native DOM gesture events which only iOS
 * v2.0+ is supporting.
 *
 * @method simulateGestureEvent
 * @private
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: touchstart, touchmove, touchend, touchcancel.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      touch events except touchcancel can be cancelled. The default
 *      is true for all events except touchcancel, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) Specifies some detail information about
 *      the event depending on the type of event.
 * @param {int} screenX (Optional) The x-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} screenY (Optional) The y-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} clientX (Optional) The x-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {int} clientY (Optional) The y-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {float} scale (iOS v2+ only) The distance between two fingers
 *      since the start of an event as a multiplier of the initial distance.
 *      The default value is 1.0.
 * @param {float} rotation (iOS v2+ only) The delta rotation since the start
 *      of an event, in degrees, where clockwise is positive and
 *      counter-clockwise is negative. The default value is 0.0.
 */
function simulateGestureEvent(target, type,
    bubbles,            // boolean
    cancelable,         // boolean
    view,               // DOMWindow
    detail,             // long
    screenX, screenY,   // long
    clientX, clientY,   // long
    ctrlKey, altKey, shiftKey, metaKey, // boolean
    scale,              // float
    rotation            // float
) {
    var customEvent;

    if(!Y.UA.ios || Y.UA.ios<2.0) {
        Y.error("simulateGestureEvent(): Native gesture DOM eventframe is not available in this platform.");
    }

    // check taget
    if (!target){
        Y.error("simulateGestureEvent(): Invalid target.");
    }

    //check event type
    if (Y.Lang.isString(type)) {
        type = type.toLowerCase();

        //make sure it's a supported touch event
        if (!gestureEvents[type]){
            Y.error("simulateTouchEvent(): Event type '" + type + "' not supported.");
        }
    } else {
        Y.error("simulateGestureEvent(): Event type must be a string.");
    }

    // setup default values
    if (!Y.Lang.isBoolean(bubbles)) { bubbles = true; } // bubble by default
    if (!Y.Lang.isBoolean(cancelable)) { cancelable = true; }
    if (!Y.Lang.isObject(view))     { view = Y.config.win; }
    if (!Y.Lang.isNumber(detail))   { detail = 2; }     // usually not used.
    if (!Y.Lang.isNumber(screenX))  { screenX = 0; }
    if (!Y.Lang.isNumber(screenY))  { screenY = 0; }
    if (!Y.Lang.isNumber(clientX))  { clientX = 0; }
    if (!Y.Lang.isNumber(clientY))  { clientY = 0; }
    if (!Y.Lang.isBoolean(ctrlKey)) { ctrlKey = false; }
    if (!Y.Lang.isBoolean(altKey))  { altKey = false; }
    if (!Y.Lang.isBoolean(shiftKey)){ shiftKey = false; }
    if (!Y.Lang.isBoolean(metaKey)) { metaKey = false; }

    if (!Y.Lang.isNumber(scale)){ scale = 1.0; }
    if (!Y.Lang.isNumber(rotation)){ rotation = 0.0; }

    customEvent = Y.config.doc.createEvent("GestureEvent");

    customEvent.initGestureEvent(type, bubbles, cancelable, view, detail,
        screenX, screenY, clientX, clientY,
        ctrlKey, altKey, shiftKey, metaKey,
        target, scale, rotation);

    target.dispatchEvent(customEvent);
}


/*
 * @method simulateTouchEvent
 * @private
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: touchstart, touchmove, touchend, touchcancel.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      touch events except touchcancel can be cancelled. The default
 *      is true for all events except touchcancel, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) Specifies some detail information about
 *      the event depending on the type of event.
 * @param {int} screenX (Optional) The x-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} screenY (Optional) The y-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} clientX (Optional) The x-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {int} clientY (Optional) The y-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {TouchList} touches A collection of Touch objects representing
 *      all touches associated with this event.
 * @param {TouchList} targetTouches A collection of Touch objects
 *      representing all touches associated with this target.
 * @param {TouchList} changedTouches A collection of Touch objects
 *      representing all touches that changed in this event.
 * @param {float} scale (iOS v2+ only) The distance between two fingers
 *      since the start of an event as a multiplier of the initial distance.
 *      The default value is 1.0.
 * @param {float} rotation (iOS v2+ only) The delta rotation since the start
 *      of an event, in degrees, where clockwise is positive and
 *      counter-clockwise is negative. The default value is 0.0.
 */
function simulateTouchEvent(target, type,
    bubbles,            // boolean
    cancelable,         // boolean
    view,               // DOMWindow
    detail,             // long
    screenX, screenY,   // long
    clientX, clientY,   // long
    ctrlKey, altKey, shiftKey, metaKey, // boolean
    touches,            // TouchList
    targetTouches,      // TouchList
    changedTouches,     // TouchList
    scale,              // float
    rotation            // float
) {

    var customEvent;

    // check taget
    if (!target){
        Y.error("simulateTouchEvent(): Invalid target.");
    }

    //check event type
    if (Y.Lang.isString(type)) {
        type = type.toLowerCase();

        //make sure it's a supported touch event
        if (!touchEvents[type]){
            Y.error("simulateTouchEvent(): Event type '" + type + "' not supported.");
        }
    } else {
        Y.error("simulateTouchEvent(): Event type must be a string.");
    }

    // note that the caller is responsible to pass appropriate touch objects.
    // check touch objects
    // Android(even 4.0) doesn't define TouchList yet
    /*if(type === 'touchstart' || type === 'touchmove') {
        if(!touches instanceof TouchList) {
            Y.error('simulateTouchEvent(): Invalid touches. It must be a TouchList');
        } else {
            if(touches.length === 0) {
                Y.error('simulateTouchEvent(): No touch object found.');
            }
        }
    } else if(type === 'touchend') {
        if(!changedTouches instanceof TouchList) {
            Y.error('simulateTouchEvent(): Invalid touches. It must be a TouchList');
        } else {
            if(changedTouches.length === 0) {
                Y.error('simulateTouchEvent(): No touch object found.');
            }
        }
    }*/

    if(type === 'touchstart' || type === 'touchmove') {
        if(touches.length === 0) {
            Y.error('simulateTouchEvent(): No touch object in touches');
        }
    } else if(type === 'touchend') {
        if(changedTouches.length === 0) {
            Y.error('simulateTouchEvent(): No touch object in changedTouches');
        }
    }

    // setup default values
    if (!Y.Lang.isBoolean(bubbles)) { bubbles = true; } // bubble by default.
    if (!Y.Lang.isBoolean(cancelable)) {
        cancelable = (type !== "touchcancel"); // touchcancel is not cancelled
    }
    if (!Y.Lang.isObject(view))     { view = Y.config.win; }
    if (!Y.Lang.isNumber(detail))   { detail = 1; } // usually not used. defaulted to # of touch objects.
    if (!Y.Lang.isNumber(screenX))  { screenX = 0; }
    if (!Y.Lang.isNumber(screenY))  { screenY = 0; }
    if (!Y.Lang.isNumber(clientX))  { clientX = 0; }
    if (!Y.Lang.isNumber(clientY))  { clientY = 0; }
    if (!Y.Lang.isBoolean(ctrlKey)) { ctrlKey = false; }
    if (!Y.Lang.isBoolean(altKey))  { altKey = false; }
    if (!Y.Lang.isBoolean(shiftKey)){ shiftKey = false; }
    if (!Y.Lang.isBoolean(metaKey)) { metaKey = false; }
    if (!Y.Lang.isNumber(scale))    { scale = 1.0; }
    if (!Y.Lang.isNumber(rotation)) { rotation = 0.0; }


    //check for DOM-compliant browsers first
    if (Y.Lang.isFunction(Y.config.doc.createEvent)) {
        if (Y.UA.android) {
            /*
                * Couldn't find android start version that supports touch event.
                * Assumed supported(btw APIs broken till icecream sandwitch)
                * from the beginning.
            */
            if(Y.UA.android < 4.0) {
                /*
                    * Touch APIs are broken in androids older than 4.0. We will use
                    * simulated touch apis for these versions.
                    * App developer still can listen for touch events. This events
                    * will be dispatched with touch event types.
                    *
                    * (Note) Used target for the relatedTarget. Need to verify if
                    * it has a side effect.
                */
                customEvent = Y.config.doc.createEvent("MouseEvents");
                customEvent.initMouseEvent(type, bubbles, cancelable, view, detail,
                    screenX, screenY, clientX, clientY,
                    ctrlKey, altKey, shiftKey, metaKey,
                    0, target);

                customEvent.touches = touches;
                customEvent.targetTouches = targetTouches;
                customEvent.changedTouches = changedTouches;
            } else {
                customEvent = Y.config.doc.createEvent("TouchEvent");

                // Andoroid isn't compliant W3C initTouchEvent method signature.
                customEvent.initTouchEvent(touches, targetTouches, changedTouches,
                    type, view,
                    screenX, screenY, clientX, clientY,
                    ctrlKey, altKey, shiftKey, metaKey);
            }
        } else if (Y.UA.ios) {
            if(Y.UA.ios >= 2.0) {
                customEvent = Y.config.doc.createEvent("TouchEvent");

                // Available iOS 2.0 and later
                customEvent.initTouchEvent(type, bubbles, cancelable, view, detail,
                    screenX, screenY, clientX, clientY,
                    ctrlKey, altKey, shiftKey, metaKey,
                    touches, targetTouches, changedTouches,
                    scale, rotation);
            } else {
                Y.error('simulateTouchEvent(): No touch event simulation framework present for iOS, '+Y.UA.ios+'.');
            }
        } else {
            Y.error('simulateTouchEvent(): Not supported agent yet, '+Y.UA.userAgent);
        }

        //fire the event
        target.dispatchEvent(customEvent);
    //} else if (Y.Lang.isObject(doc.createEventObject)){ // Windows Mobile/IE, support later
    } else {
        Y.error('simulateTouchEvent(): No event simulation framework present.');
    }
}

/**
 * Simulates the event or gesture with the given name on a target.
 * @param {HTMLElement} target The DOM element that's the target of the event.
 * @param {String} type The type of event or name of the supported gesture to simulate
 *      (i.e., "click", "doubletap", "flick").
 * @param {Object} options (Optional) Extra options to copy onto the event object.
 *      For gestures, options are used to refine the gesture behavior.
 * @return {void}
 * @for Event
 * @method simulate
 * @static
 */
Y.Event.simulate = function(target, type, options){

    options = options || {};

    if (mouseEvents[type] || msPointerEvents[type]){
        simulateMouseEvent(target, type, options.bubbles,
            options.cancelable, options.view, options.detail, options.screenX,
            options.screenY, options.clientX, options.clientY, options.ctrlKey,
            options.altKey, options.shiftKey, options.metaKey, options.button,
            options.relatedTarget);
    } else if (keyEvents[type]){
        simulateKeyEvent(target, type, options.bubbles,
            options.cancelable, options.view, options.ctrlKey,
            options.altKey, options.shiftKey, options.metaKey,
            options.keyCode, options.charCode);
    } else if (uiEvents[type]){
        simulateUIEvent(target, type, options.bubbles,
            options.cancelable, options.view, options.detail);

    // touch low-level event simulation
    } else if (touchEvents[type]) {
        if((Y.config.win && ("ontouchstart" in Y.config.win)) && !(Y.UA.phantomjs) && !(Y.UA.chrome && Y.UA.chrome < 6)) {
            simulateTouchEvent(target, type,
                options.bubbles, options.cancelable, options.view, options.detail,
                options.screenX, options.screenY, options.clientX, options.clientY,
                options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
                options.touches, options.targetTouches, options.changedTouches,
                options.scale, options.rotation);
        } else {
            Y.error("simulate(): Event '" + type + "' can't be simulated. Use gesture-simulate module instead.");
        }

    // ios gesture low-level event simulation (iOS v2+ only)
    } else if(Y.UA.ios && Y.UA.ios >= 2.0 && gestureEvents[type]) {
        simulateGestureEvent(target, type,
            options.bubbles, options.cancelable, options.view, options.detail,
            options.screenX, options.screenY, options.clientX, options.clientY,
            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
            options.scale, options.rotation);

    // anything else
    } else {
        Y.error("simulate(): Event '" + type + "' can't be simulated.");
    }
};


})();



}, '3.10.1', {"requires": ["event-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/datatype-date-format/lang/datatype-date-format_en.js
// ----------------------------------------------------------------------------------------

YUI.add("lang/datatype-date-format_en",function(e){e.Intl.add("datatype-date-format","en",{a:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],A:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],b:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],B:["January","February","March","April","May","June","July","August","September","October","November","December"],c:"%a, %b %d, %Y %l:%M:%S %p %Z",p:["AM","PM"],P:["am","pm"],x:"%m/%d/%y",X:"%l:%M:%S %p"})},"3.10.1");



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-load/node-load.js
// ----------------------------------------------------------------------------------------

YUI.add('node-load', function (Y, NAME) {

/**
 * Extended Node interface with a basic IO API.
 * @module node
 * @submodule node-load
 */

/**
 * The default IO complete handler.
 * @method _ioComplete
 * @protected
 * @for Node
 * @param {String} code The response code.
 * @param {Object} response The response object.
 * @param {Array} args An array containing the callback and selector
 */

Y.Node.prototype._ioComplete = function(code, response, args) {
    var selector = args[0],
        callback = args[1],
        tmp,
        content;

    if (response && response.responseText) {
        content = response.responseText;
        if (selector) {
            tmp = Y.DOM.create(content);
            content = Y.Selector.query(selector, tmp);
        }
        this.setContent(content);
    }
    if (callback) {
        callback.call(this, code, response);
    }
};

/**
 * Loads content from the given url and replaces the Node's
 * existing content with the remote content.
 * @method load
 * @param {String} url The URL to load via XMLHttpRequest.
 * @param {String} selector An optional selector representing a subset of an HTML document to load.
 * @param {Function} callback An optional function to run after the content has been loaded.
 * @chainable
 */
Y.Node.prototype.load = function(url, selector, callback) {
    if (typeof selector == 'function') {
        callback = selector;
        selector = null;
    }
    var config = {
        context: this,
        on: {
            complete: this._ioComplete
        },
        arguments: [selector, callback]
    };

    Y.io(url, config);
    return this;
};


}, '3.10.1', {"requires": ["node-base", "io-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-node-plugin/anim-node-plugin.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-node-plugin', function (Y, NAME) {

/**
 *  Binds an Anim instance to a Node instance
 * @module anim
 * @class Plugin.NodeFX
 * @extends Anim
 * @submodule anim-node-plugin
 */

var NodeFX = function(config) {
    config = (config) ? Y.merge(config) : {};
    config.node = config.host;
    NodeFX.superclass.constructor.apply(this, arguments);
};

NodeFX.NAME = "nodefx";
NodeFX.NS = "fx";

Y.extend(NodeFX, Y.Anim);

Y.namespace('Plugin');
Y.Plugin.NodeFX = NodeFX;


}, '3.10.1', {"requires": ["node-pluginhost", "anim-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/querystring-stringify-simple/querystring-stringify-simple.js
// ----------------------------------------------------------------------------------------

YUI.add('querystring-stringify-simple', function (Y, NAME) {

/*global Y */
/**
 * <p>Provides Y.QueryString.stringify method for converting objects to Query Strings.
 * This is a subset implementation of the full querystring-stringify.</p>
 * <p>This module provides the bare minimum functionality (encoding a hash of simple values),
 * without the additional support for nested data structures.  Every key-value pair is
 * encoded by encodeURIComponent.</p>
 * <p>This module provides a minimalistic way for io to handle  single-level objects
 * as transaction data.</p>
 *
 * @module querystring
 * @submodule querystring-stringify-simple
 */

var QueryString = Y.namespace("QueryString"),
    EUC = encodeURIComponent;


QueryString.stringify = function (obj, c) {
    var qs = [],
        // Default behavior is false; standard key notation.
        s = c && c.arrayKey ? true : false,
        key, i, l;

    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (Y.Lang.isArray(obj[key])) {
                for (i = 0, l = obj[key].length; i < l; i++) {
                    qs.push(EUC(s ? key + '[]' : key) + '=' + EUC(obj[key][i]));
                }
            }
            else {
                qs.push(EUC(key) + '=' + EUC(obj[key]));
            }
        }
    }

    return qs.join('&');
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/calendar-base/calendar-base.js
// ----------------------------------------------------------------------------------------

YUI.add('calendar-base', function (Y, NAME) {

/**
 * The CalendarBase submodule is a basic UI calendar view that displays
 * a range of dates in a two-dimensional month grid, with one or more
 * months visible at a single time. CalendarBase supports custom date
 * rendering, multiple calendar panes, and selection.
 * @module calendar
 * @submodule calendar-base
 */

var getCN                 = Y.ClassNameManager.getClassName,
    CALENDAR              = 'calendar',
    CAL_GRID              = getCN(CALENDAR, 'grid'),
    CAL_LEFT_GRID         = getCN(CALENDAR, 'left-grid'),
    CAL_RIGHT_GRID        = getCN(CALENDAR, 'right-grid'),
    CAL_BODY              = getCN(CALENDAR, 'body'),
    CAL_HD                = getCN(CALENDAR, 'header'),
    CAL_HD_LABEL          = getCN(CALENDAR, 'header-label'),
    CAL_WDAYROW           = getCN(CALENDAR, 'weekdayrow'),
    CAL_WDAY              = getCN(CALENDAR, 'weekday'),
    CAL_COL_HIDDEN        = getCN(CALENDAR, 'column-hidden'),
    CAL_DAY_SELECTED      = getCN(CALENDAR, 'day-selected'),
    SELECTION_DISABLED    = getCN(CALENDAR, 'selection-disabled'),
    CAL_ROW               = getCN(CALENDAR, 'row'),
    CAL_DAY               = getCN(CALENDAR, 'day'),
    CAL_PREVMONTH_DAY     = getCN(CALENDAR, 'prevmonth-day'),
    CAL_NEXTMONTH_DAY     = getCN(CALENDAR, 'nextmonth-day'),
    CAL_ANCHOR            = getCN(CALENDAR, 'anchor'),
    CAL_PANE              = getCN(CALENDAR, 'pane'),
    CAL_STATUS            = getCN(CALENDAR, 'status'),
    L           = Y.Lang,
    substitute  = L.sub,
    arrayEach   = Y.Array.each,
    objEach     = Y.Object.each,
    iOf         = Y.Array.indexOf,
    hasKey      = Y.Object.hasKey,
    setVal      = Y.Object.setValue,
    isEmpty     = Y.Object.isEmpty,
    ydate       = Y.DataType.Date;

/** Create a calendar view to represent a single or multiple
    * month range of dates, rendered as a grid with date and
    * weekday labels.
    *
    * @class CalendarBase
    * @extends Widget
    * @param config {Object} Configuration object (see Configuration
    * attributes)
    * @constructor
    */
function CalendarBase() {
    CalendarBase.superclass.constructor.apply ( this, arguments );
}



Y.CalendarBase = Y.extend( CalendarBase, Y.Widget, {

    /**
     * A storage for various properties of individual month
     * panes.
     *
     * @property _paneProperties
     * @type Object
     * @private
     */
    _paneProperties : {},

    /**
     * The number of month panes in the calendar, deduced
     * from the CONTENT_TEMPLATE's number of {calendar_grid}
     * tokens.
     *
     * @property _paneNumber
     * @type Number
     * @private
     */
    _paneNumber : 1,

    /**
     * The unique id used to prefix various elements of this
     * calendar instance.
     *
     * @property _calendarId
     * @type String
     * @private
     */
    _calendarId : null,

    /**
     * The hash map of selected dates, populated with
     * selectDates() and deselectDates() methods
     *
     * @property _selectedDates
     * @type Object
     * @private
     */
    _selectedDates : {},

    /**
     * A private copy of the rules object, populated
     * by setting the customRenderer attribute.
     *
     * @property _rules
     * @type Object
     * @private
     */
    _rules : {},

    /**
     * A private copy of the filterFunction, populated
     * by setting the customRenderer attribute.
     *
     * @property _filterFunction
     * @type Function
     * @private
     */
    _filterFunction : null,

    /**
     * Storage for calendar cells modified by any custom
     * formatting. The storage is cleared, used to restore
     * cells to the original state, and repopulated accordingly
     * when the calendar is rerendered.
     *
     * @property _storedDateCells
     * @type Object
     * @private
     */
    _storedDateCells : {},

    /**
     * Designated initializer
     * Initializes instance-level properties of
     * calendar.
     *
     * @method initializer
     */
    initializer : function () {
        this._paneProperties = {};
        this._calendarId = Y.guid('calendar');
        this._selectedDates = {};
        if (isEmpty(this._rules)) {
             this._rules = {};
        }
        this._storedDateCells = {};
    },

    /**
     * renderUI implementation
     *
     * Creates a visual representation of the calendar based on existing parameters.
     * @method renderUI
     */
    renderUI : function () {

        var contentBox = this.get('contentBox');
        contentBox.appendChild(this._initCalendarHTML(this.get('date')));

        if (this.get('showPrevMonth')) {
                this._afterShowPrevMonthChange();
        }
        if (this.get('showNextMonth')) {
                this._afterShowNextMonthChange();
        }

        this._renderCustomRules();
        this._renderSelectedDates();

        this.get("boundingBox").setAttribute("aria-labelledby", this._calendarId + "_header");

    },

    /**
     * bindUI implementation
     *
     * Assigns listeners to relevant events that change the state
     * of the calendar.
     * @method bindUI
     */
    bindUI : function () {
        this.after('dateChange', this._afterDateChange);
        this.after('showPrevMonthChange', this._afterShowPrevMonthChange);
        this.after('showNextMonthChange', this._afterShowNextMonthChange);
        this.after('headerRendererChange', this._afterHeaderRendererChange);
        this.after('customRendererChange', this._afterCustomRendererChange);
        this.after('enabledDatesRuleChange', this._afterCustomRendererChange);
        this.after('disabledDatesRuleChange', this._afterCustomRendererChange);
        this.after('focusedChange', this._afterFocusedChange);
        this.after('selectionChange', this._renderSelectedDates);
        this._bindCalendarEvents();
    },


    /**
     * An internal utility method that generates a list of selected dates
     * from the hash storage.
     *
     * @method _getSelectedDatesList
     * @protected
     * @return {Array} The array of `Date`s that are currently selected.
     */
    _getSelectedDatesList : function () {
        var output = [];

        objEach (this._selectedDates, function (year) {
            objEach (year, function (month) {
                objEach (month, function (day) {
                    output.push (day);
                }, this);
            }, this);
        }, this);

        return output;
    },

    /**
     * A utility method that returns all dates selected in a specific month.
     *
     * @method _getSelectedDatesInMonth
     * @param {Date} oDate corresponding to the month for which selected dates
     * are requested.
     * @protected
     * @return {Array} The array of `Date`s in a given month that are currently selected.
     */
    _getSelectedDatesInMonth : function (oDate) {
        var year = oDate.getFullYear(),
            month = oDate.getMonth();

        if (hasKey(this._selectedDates, year) && hasKey(this._selectedDates[year], month)) {
            return Y.Object.values(this._selectedDates[year][month]);
        } else {
            return [];
        }
    },


    /**
     * An internal parsing method that receives a String list of numbers
     * and number ranges (of the form "1,2,3,4-6,7-9,10,11" etc.) and checks
     * whether a specific number is included in this list. Used for looking
     * up dates in the customRenderer rule set.
     *
     * @method _isNumInList
     * @param {Number} num The number to look for in a list.
     * @param {String} strList The list of numbers of the form "1,2,3,4-6,7-8,9", etc.
     * @private
     * @return {boolean} Returns true if the given number is in the given list.
     */
    _isNumInList : function (num, strList) {
        if (strList === "all") {
            return true;
        } else {
            var elements = strList.split(","),
                i = elements.length,
                range;

            while (i--) {
                range = elements[i].split("-");
                if (range.length === 2 && num >= parseInt(range[0], 10) && num <= parseInt(range[1], 10)) {
                    return true;
                }
                else if (range.length === 1 && (parseInt(elements[i], 10) === num)) {
                    return true;
                }
            }
            return false;
        }
    },

    /**
     * Given a specific date, returns an array of rules (from the customRenderer rule set)
     * that the given date matches.
     *
     * @method _getRulesForDate
     * @param {Date} oDate The date for which an array of rules is needed
     * @private
     * @return {Array} Returns an array of `String`s, each containg the name of
     * a rule that the given date matches.
     */
    _getRulesForDate : function (oDate) {
        var year = oDate.getFullYear(),
                month = oDate.getMonth(),
                date = oDate.getDate(),
                wday = oDate.getDay(),
                rules = this._rules,
                outputRules = [],
                years, months, dates, days;

        for (years in rules) {
            if (this._isNumInList(year, years)) {
                if (L.isString(rules[years])) {
                        outputRules.push(rules[years]);
                }
                else {
                    for (months in rules[years]) {
                        if (this._isNumInList(month, months)) {
                            if (L.isString(rules[years][months])) {
                                    outputRules.push(rules[years][months]);
                            }
                            else {
                                for (dates in rules[years][months]) {
                                    if (this._isNumInList(date, dates)) {
                                        if (L.isString(rules[years][months][dates])) {
                                                outputRules.push(rules[years][months][dates]);
                                        }
                                        else {
                                            for (days in rules[years][months][dates]) {
                                                if (this._isNumInList(wday, days)) {
                                                    if (L.isString(rules[years][months][dates][days])) {
                                                        outputRules.push(rules[years][months][dates][days]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return outputRules;
    },

    /**
     * A utility method which, given a specific date and a name of the rule,
     * checks whether the date matches the given rule.
     *
     * @method _matchesRule
     * @param {Date} oDate The date to check
     * @param {String} rule The name of the rule that the date should match.
     * @private
     * @return {boolean} Returns true if the date matches the given rule.
     *
     */
    _matchesRule : function (oDate, rule) {
        return (iOf(this._getRulesForDate(oDate), rule) >= 0);
    },

    /**
     * A utility method which checks whether a given date matches the `enabledDatesRule`
     * or does not match the `disabledDatesRule` and therefore whether it can be selected.
     * @method _canBeSelected
     * @param {Date} oDate The date to check
     * @private
     * @return {boolean} Returns true if the date can be selected; false otherwise.
     */
    _canBeSelected : function (oDate) {

        var enabledDatesRule = this.get("enabledDatesRule"),
            disabledDatesRule = this.get("disabledDatesRule");

        if (enabledDatesRule) {
            return this._matchesRule(oDate, enabledDatesRule);
        } else if (disabledDatesRule) {
            return !this._matchesRule(oDate, disabledDatesRule);
        } else {
            return true;
        }
    },

    /**
     * Selects a given date or array of dates.
     * @method selectDates
     * @param {Date|Array} dates A `Date` or `Array` of `Date`s.
     * @return {CalendarBase} A reference to this object
     * @chainable
     */
    selectDates : function (dates) {
        if (ydate.isValidDate(dates)) {
            this._addDateToSelection(dates);
        }
        else if (L.isArray(dates)) {
            this._addDatesToSelection(dates);
        }
        return this;
    },

    /**
     * Deselects a given date or array of dates, or deselects
     * all dates if no argument is specified.
     * @method deselectDates
     * @param {Date|Array} [dates] A `Date` or `Array` of `Date`s, or no
     * argument if all dates should be deselected.
     * @return {CalendarBase} A reference to this object
     * @chainable
     */
    deselectDates : function (dates) {
        if (!dates) {
            this._clearSelection();
        }
        else if (ydate.isValidDate(dates)) {
            this._removeDateFromSelection(dates);
        }
        else if (L.isArray(dates)) {
            this._removeDatesFromSelection(dates);
        }
        return this;
    },

    /**
     * A utility method that adds a given date to selection..
     * @method _addDateToSelection
     * @param {Date} oDate The date to add to selection.
     * @param {Number} [index] An optional parameter that is used
     * to differentiate between individual date selections and multiple
     * date selections.
     * @private
     */
    _addDateToSelection : function (oDate, index) {

        if (this._canBeSelected(oDate)) {

            var year = oDate.getFullYear(),
                month = oDate.getMonth(),
                day = oDate.getDate();

            if (hasKey(this._selectedDates, year)) {
                if (hasKey(this._selectedDates[year], month)) {
                    this._selectedDates[year][month][day] = oDate;
                } else {
                    this._selectedDates[year][month] = {};
                    this._selectedDates[year][month][day] = oDate;
                }
            } else {
                this._selectedDates[year] = {};
                this._selectedDates[year][month] = {};
                this._selectedDates[year][month][day] = oDate;
            }

            this._selectedDates = setVal(this._selectedDates, [year, month, day], oDate);

            if (!index) {
                this._fireSelectionChange();
            }
        }
    },

    /**
     * A utility method that adds a given list of dates to selection.
     * @method _addDatesToSelection
     * @param {Array} datesArray The list of dates to add to selection.
     * @private
     */
    _addDatesToSelection : function (datesArray) {
        arrayEach(datesArray, this._addDateToSelection, this);
        this._fireSelectionChange();
    },

    /**
     * A utility method that adds a given range of dates to selection.
     * @method _addDateRangeToSelection
     * @param {Date} startDate The first date of the given range.
     * @param {Date} endDate The last date of the given range.
     * @private
     */
    _addDateRangeToSelection : function (startDate, endDate) {

        var timezoneDifference = (endDate.getTimezoneOffset() - startDate.getTimezoneOffset())*60000,
            startTime = startDate.getTime(),
            endTime   = endDate.getTime(),
            tempTime,
            time,
            addedDate;

        if (startTime > endTime) {
            tempTime = startTime;
            startTime = endTime;
            endTime = tempTime + timezoneDifference;
        } else {
            endTime = endTime - timezoneDifference;
        }


        for (time = startTime; time <= endTime; time += 86400000) {
            addedDate = new Date(time);
            addedDate.setHours(12);
            this._addDateToSelection(addedDate, time);
        }
        this._fireSelectionChange();
    },

    /**
     * A utility method that removes a given date from selection..
     * @method _removeDateFromSelection
     * @param {Date} oDate The date to remove from selection.
     * @param {Number} [index] An optional parameter that is used
     * to differentiate between individual date selections and multiple
     * date selections.
     * @private
     */
    _removeDateFromSelection : function (oDate, index) {
        var year = oDate.getFullYear(),
            month = oDate.getMonth(),
            day = oDate.getDate();

        if (hasKey(this._selectedDates, year) &&
            hasKey(this._selectedDates[year], month) &&
            hasKey(this._selectedDates[year][month], day)
        ) {
            delete this._selectedDates[year][month][day];
            if (!index) {
                this._fireSelectionChange();
            }
        }
    },

    /**
     * A utility method that removes a given list of dates from selection.
     * @method _removeDatesFromSelection
     * @param {Array} datesArray The list of dates to remove from selection.
     * @private
     */
    _removeDatesFromSelection : function (datesArray) {
        arrayEach(datesArray, this._removeDateFromSelection, this);
        this._fireSelectionChange();
    },

    /**
     * A utility method that removes a given range of dates from selection.
     * @method _removeDateRangeFromSelection
     * @param {Date} startDate The first date of the given range.
     * @param {Date} endDate The last date of the given range.
     * @private
     */
    _removeDateRangeFromSelection : function (startDate, endDate) {
        var startTime = startDate.getTime(),
            endTime   = endDate.getTime(),
            time;

        for (time = startTime; time <= endTime; time += 86400000) {
            this._removeDateFromSelection(new Date(time), time);
        }

        this._fireSelectionChange();
    },

    /**
     * A utility method that removes all dates from selection.
     * @method _clearSelection
     * @param {boolean} noevent A Boolean specifying whether a selectionChange
     * event should be fired. If true, the event is not fired.
     * @private
     */
    _clearSelection : function (noevent) {
        this._selectedDates = {};
        this.get("contentBox").all("." + CAL_DAY_SELECTED).removeClass(CAL_DAY_SELECTED).setAttribute("aria-selected", false);
        if (!noevent) {
            this._fireSelectionChange();
        }
    },

    /**
     * A utility method that fires a selectionChange event.
     * @method _fireSelectionChange
     * @private
     */
    _fireSelectionChange : function () {

        /**
        * Fired when the set of selected dates changes. Contains a payload with
        * a `newSelection` property with an array of selected dates.
        *
        * @event selectionChange
        */
        this.fire("selectionChange", {newSelection: this._getSelectedDatesList()});
    },

    /**
     * A utility method that restores cells modified by custom formatting.
     * @method _restoreModifiedCells
     * @private
     */
    _restoreModifiedCells : function () {
        var contentbox = this.get("contentBox"),
            id;
        for (id in this._storedDateCells) {
            contentbox.one("#" + id).replace(this._storedDateCells[id]);
            delete this._storedDateCells[id];
        }
    },

    /**
     * A rendering assist method that renders all cells modified by the customRenderer
     * rules, as well as the enabledDatesRule and disabledDatesRule.
     * @method _renderCustomRules
     * @private
     */
    _renderCustomRules : function () {

        this.get("contentBox").all("." + CAL_DAY + ",." + CAL_NEXTMONTH_DAY).removeClass(SELECTION_DISABLED).setAttribute("aria-disabled", false);

        if (!isEmpty(this._rules)) {
            var paneNum,
                paneDate,
                dateArray;

            for (paneNum = 0; paneNum < this._paneNumber; paneNum++) {
                paneDate = ydate.addMonths(this.get("date"), paneNum);
                dateArray = ydate.listOfDatesInMonth(paneDate);
                arrayEach(dateArray, Y.bind(this._renderCustomRulesHelper, this));
            }
        }
    },

    /**
    * A handler for a date selection event (either a click or a keyboard
    *   selection) that adds the appropriate CSS class to a specific DOM
    *   node corresponding to the date and sets its aria-selected
    *   attribute to true.
    *
    * @method _renderCustomRulesHelper
    * @private
    */
    _renderCustomRulesHelper: function (date) {
        var enRule = this.get("enabledDatesRule"),
            disRule = this.get("disabledDatesRule"),
            matchingRules,
            dateNode;

        matchingRules = this._getRulesForDate(date);
        if (matchingRules.length > 0) {
            dateNode = this._dateToNode(date);
            if ((enRule && iOf(matchingRules, enRule) < 0) || (!enRule && disRule && iOf(matchingRules, disRule) >= 0)) {
                dateNode.addClass(SELECTION_DISABLED).setAttribute("aria-disabled", true);
            }

            if (L.isFunction(this._filterFunction)) {
                this._storedDateCells[dateNode.get("id")] = dateNode.cloneNode(true);
                this._filterFunction (date, dateNode, matchingRules);
            }
        } else if (enRule) {
             dateNode = this._dateToNode(date);
             dateNode.addClass(SELECTION_DISABLED).setAttribute("aria-disabled", true);
        }
    },

    /**
     * A rendering assist method that renders all cells that are currently selected.
     * @method _renderSelectedDates
     * @private
     */
    _renderSelectedDates : function () {
        this.get("contentBox").all("." + CAL_DAY_SELECTED).removeClass(CAL_DAY_SELECTED).setAttribute("aria-selected", false);

        var paneNum,
            paneDate,
            dateArray;

        for (paneNum = 0; paneNum < this._paneNumber; paneNum++) {
            paneDate = ydate.addMonths(this.get("date"), paneNum);
            dateArray = this._getSelectedDatesInMonth(paneDate);

            arrayEach(dateArray, Y.bind(this._renderSelectedDatesHelper, this));
        }
    },

    /**
    * Takes in a date and determines whether that date has any rules
    *   matching it in the customRenderer; then calls the specified
    *   filterFunction if that's the case and/or disables the date
    *   if the rule is specified as a disabledDatesRule.
    *
    * @method _renderSelectedDatesHelper
    * @private
    */
    _renderSelectedDatesHelper: function (date) {
        this._dateToNode(date).addClass(CAL_DAY_SELECTED).setAttribute("aria-selected", true);
    },

    /**
     * A utility method that converts a date to the node wrapping the calendar cell
     * the date corresponds to..
     * @method _dateToNode
     * @param {Date} oDate The date to convert to Node
     * @protected
     * @return {Node} The node wrapping the DOM element of the cell the date
     * corresponds to.
     */
    _dateToNode : function (oDate) {
        var day = oDate.getDate(),
            col = 0,
            daymod = day%7,
            paneNum = (12 + oDate.getMonth() - this.get("date").getMonth()) % 12,
            paneId = this._calendarId + "_pane_" + paneNum,
            cutoffCol = this._paneProperties[paneId].cutoffCol;

        switch (daymod) {
            case (0):
                if (cutoffCol >= 6) {
                    col = 12;
                } else {
                    col = 5;
                }
                break;
            case (1):
                    col = 6;
                break;
            case (2):
                if (cutoffCol > 0) {
                    col = 7;
                } else {
                    col = 0;
                }
                break;
            case (3):
                if (cutoffCol > 1) {
                    col = 8;
                } else {
                    col = 1;
                }
                break;
            case (4):
                if (cutoffCol > 2) {
                    col = 9;
                } else {
                    col = 2;
                }
                break;
            case (5):
                if (cutoffCol > 3) {
                    col = 10;
                } else {
                    col = 3;
                }
                break;
            case (6):
                if (cutoffCol > 4) {
                    col = 11;
                } else {
                    col = 4;
                }
                break;
        }
        return(this.get("contentBox").one("#" + this._calendarId + "_pane_" + paneNum + "_" + col + "_" + day));

    },

    /**
     * A utility method that converts a node corresponding to the DOM element of
     * the cell for a particular date to that date.
     * @method _nodeToDate
     * @param {Node} oNode The Node wrapping the DOM element of a particular date cell.
     * @protected
     * @return {Date} The date corresponding to the DOM element that the given node wraps.
     */
    _nodeToDate : function (oNode) {

        var idParts = oNode.get("id").split("_").reverse(),
            paneNum = parseInt(idParts[2], 10),
            day  = parseInt(idParts[0], 10),
            shiftedDate = ydate.addMonths(this.get("date"), paneNum),
            year = shiftedDate.getFullYear(),
            month = shiftedDate.getMonth();

        return new Date(year, month, day, 12, 0, 0, 0);
    },

    /**
     * A placeholder method, called from bindUI, to bind the Calendar events.
     * @method _bindCalendarEvents
     * @protected
     */
    _bindCalendarEvents : function () {},

    /**
     * A utility method that normalizes a given date by converting it to the 1st
     * day of the month the date is in, with the time set to noon.
     * @method _normalizeDate
     * @param {Date} oDate The date to normalize
     * @protected
     * @return {Date} The normalized date, set to the first of the month, with time
     * set to noon.
     */
    _normalizeDate : function (date) {
        if (date) {
            return new Date(date.getFullYear(), date.getMonth(), 1, 12, 0, 0, 0);
        } else {
            return null;
        }
    },


    /**
     * A render assist utility method that computes the cutoff column for the calendar
     * rendering mask.
     * @method _getCutoffColumn
     * @param {Date} date The date of the month grid to compute the cutoff column for.
     * @param {Number} firstday The first day of the week (modified by internationalized calendars)
     * @private
     * @return {Number} The number of the cutoff column.
     */
    _getCutoffColumn : function (date, firstday) {
        var distance = this._normalizeDate(date).getDay() - firstday,
            cutOffColumn = 6 - (distance + 7) % 7;
        return cutOffColumn;
    },

    /**
     * A render assist method that turns on the view of the previous month's dates
     * in a given calendar pane.
     * @method _turnPrevMonthOn
     * @param {Node} pane The calendar pane that needs its previous month's dates view
     * modified.
     * @protected
     */
    _turnPrevMonthOn : function (pane) {
        var pane_id = pane.get("id"),
            pane_date = this._paneProperties[pane_id].paneDate,
            daysInPrevMonth = ydate.daysInMonth(ydate.addMonths(pane_date, -1)),
            cell;

        if (!this._paneProperties[pane_id].hasOwnProperty("daysInPrevMonth")) {
            this._paneProperties[pane_id].daysInPrevMonth = 0;
        }

        if (daysInPrevMonth !== this._paneProperties[pane_id].daysInPrevMonth) {

            this._paneProperties[pane_id].daysInPrevMonth = daysInPrevMonth;

            for (cell = 5; cell >= 0; cell--) {
                pane.one("#" + pane_id + "_" + cell + "_" + (cell-5)).set('text', daysInPrevMonth--);
            }
        }
    },

    /**
     * A render assist method that turns off the view of the previous month's dates
     * in a given calendar pane.
     * @method _turnPrevMonthOff
     * @param {Node} pane The calendar pane that needs its previous month's dates view
     * modified.
     * @protected
     */
    _turnPrevMonthOff : function (pane) {
        var pane_id = pane.get("id"),
            cell;

        this._paneProperties[pane_id].daysInPrevMonth = 0;

        for (cell = 5; cell >= 0; cell--) {
            pane.one("#" + pane_id + "_" + cell + "_" + (cell-5)).setContent("&nbsp;");
        }
    },

    /**
     * A render assist method that cleans up the last few cells in the month grid
     * when the number of days in the month changes.
     * @method _cleanUpNextMonthCells
     * @param {Node} pane The calendar pane that needs the last date cells cleaned up.
     * @private
     */
    _cleanUpNextMonthCells : function (pane) {
        var pane_id = pane.get("id");
            pane.one("#" + pane_id + "_6_29").removeClass(CAL_NEXTMONTH_DAY);
            pane.one("#" + pane_id + "_7_30").removeClass(CAL_NEXTMONTH_DAY);
            pane.one("#" + pane_id + "_8_31").removeClass(CAL_NEXTMONTH_DAY);
            pane.one("#" + pane_id + "_0_30").removeClass(CAL_NEXTMONTH_DAY);
            pane.one("#" + pane_id + "_1_31").removeClass(CAL_NEXTMONTH_DAY);
    },

    /**
     * A render assist method that turns on the view of the next month's dates
     * in a given calendar pane.
     * @method _turnNextMonthOn
     * @param {Node} pane The calendar pane that needs its next month's dates view
     * modified.
     * @protected
     */
    _turnNextMonthOn : function (pane) {
        var dayCounter = 1,
            pane_id = pane.get("id"),
            daysInMonth = this._paneProperties[pane_id].daysInMonth,
            cutoffCol = this._paneProperties[pane_id].cutoffCol,
            cell,
            startingCell;

        for (cell = daysInMonth - 22; cell < cutoffCol + 7; cell++) {
            pane.one("#" + pane_id + "_" + cell + "_" + (cell+23)).set("text", dayCounter++).addClass(CAL_NEXTMONTH_DAY);
        }

        startingCell = cutoffCol;

        if (daysInMonth === 31 && (cutoffCol <= 1)) {
            startingCell = 2;
        } else if (daysInMonth === 30 && cutoffCol === 0) {
            startingCell = 1;
        }

        for (cell = startingCell ; cell < cutoffCol + 7; cell++) {
            pane.one("#" + pane_id + "_" + cell + "_" + (cell+30)).set("text", dayCounter++).addClass(CAL_NEXTMONTH_DAY);
        }
    },

    /**
     * A render assist method that turns off the view of the next month's dates
     * in a given calendar pane.
     * @method _turnNextMonthOff
     * @param {Node} pane The calendar pane that needs its next month's dates view
     * modified.
     * @protected
     */
    _turnNextMonthOff : function (pane) {
            var pane_id = pane.get("id"),
                daysInMonth = this._paneProperties[pane_id].daysInMonth,
                cutoffCol = this._paneProperties[pane_id].cutoffCol,
                cell,
                startingCell;

            for (cell = daysInMonth - 22; cell <= 12; cell++) {
                pane.one("#" + pane_id + "_" + cell + "_" + (cell+23)).setContent("&nbsp;").addClass(CAL_NEXTMONTH_DAY);
            }

            startingCell = 0;

            if (daysInMonth === 31 && (cutoffCol <= 1)) {
                startingCell = 2;
            } else if (daysInMonth === 30 && cutoffCol === 0) {
                startingCell = 1;
            }

            for (cell = startingCell ; cell <= 12; cell++) {
                pane.one("#" + pane_id + "_" + cell + "_" + (cell+30)).setContent("&nbsp;").addClass(CAL_NEXTMONTH_DAY);
            }
    },

    /**
     * The handler for the change in the showNextMonth attribute.
     * @method _afterShowNextMonthChange
     * @private
     */
    _afterShowNextMonthChange : function () {

        var contentBox = this.get('contentBox'),
            lastPane = contentBox.one("#" + this._calendarId + "_pane_" + (this._paneNumber - 1));

        this._cleanUpNextMonthCells(lastPane);

        if (this.get('showNextMonth')) {
            this._turnNextMonthOn(lastPane);
        } else {
            this._turnNextMonthOff(lastPane);
        }

    },

    /**
     * The handler for the change in the showPrevMonth attribute.
     * @method _afterShowPrevMonthChange
     * @private
     */
    _afterShowPrevMonthChange : function () {
        var contentBox = this.get('contentBox'),
            firstPane = contentBox.one("#" + this._calendarId + "_pane_" + 0);

        if (this.get('showPrevMonth')) {
            this._turnPrevMonthOn(firstPane);
        } else {
            this._turnPrevMonthOff(firstPane);
        }

    },

     /**
     * The handler for the change in the headerRenderer attribute.
     * @method _afterHeaderRendererChange
     * @private
     */
    _afterHeaderRendererChange : function () {
        var headerCell = this.get("contentBox").one("." + CAL_HD_LABEL);
        headerCell.setContent(this._updateCalendarHeader(this.get('date')));
    },

     /**
     * The handler for the change in the customRenderer attribute.
     * @method _afterCustomRendererChange
     * @private
     */
    _afterCustomRendererChange : function () {
        this._restoreModifiedCells();
        this._renderCustomRules();
    },

     /**
     * The handler for the change in the date attribute. Modifies the calendar
     * view by shifting the calendar grid mask and running custom rendering and
     * selection rendering as necessary.
     * @method _afterDateChange
     * @private
     */
    _afterDateChange : function () {

        var contentBox = this.get('contentBox'),
            headerCell = contentBox.one("." + CAL_HD).one("." + CAL_HD_LABEL),
            calendarPanes = contentBox.all("." + CAL_GRID),
            currentDate = this.get("date"),
            counter = 0;

        contentBox.setStyle("visibility", "hidden");
        headerCell.setContent(this._updateCalendarHeader(currentDate));

        this._restoreModifiedCells();

        calendarPanes.each(function (curNode) {
            this._rerenderCalendarPane(ydate.addMonths(currentDate, counter++), curNode);
        }, this);

        this._afterShowPrevMonthChange();
        this._afterShowNextMonthChange();

        this._renderCustomRules();
        this._renderSelectedDates();

        contentBox.setStyle("visibility", "visible");
    },


     /**
     * A rendering assist method that initializes the HTML for a single
     * calendar pane.
     * @method _initCalendarPane
     * @param {Date} baseDate The date corresponding to the month of the given
     * calendar pane.
     * @param {String} pane_id The id of the pane, to be used as a prefix for
     * element ids in the given pane.
     * @private
     */
    _initCalendarPane : function (baseDate, pane_id) {
        // Get a list of short weekdays from the internationalization package, or else use default English ones.
        var weekdays = this.get('strings.very_short_weekdays') || ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            fullweekdays = this.get('strings.weekdays') || ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            // Get the first day of the week from the internationalization package, or else use Sunday as default.
            firstday = this.get('strings.first_weekday') || 0,
            // Compute the cutoff column of the masked calendar table, based on the start date and the first day of week.
            cutoffCol = this._getCutoffColumn(baseDate, firstday),
            // Compute the number of days in the month based on starting date
            daysInMonth = ydate.daysInMonth(baseDate),
            // Initialize the array of individual row HTML strings
            row_array = ['','','','','',''],
            // Initialize the partial templates object
            partials = {},

            day,
            row,
            column,
            date,
            id_date,
            calendar_day_class,
            column_visibility,
            output;

            // Initialize the partial template for the weekday row cells.
            partials.weekday_row = '';

        // Populate the partial template for the weekday row cells with weekday names
        for (day = firstday; day <= firstday + 6; day++) {
            partials.weekday_row +=
                substitute(CalendarBase.WEEKDAY_TEMPLATE, {
                    weekdayname: weekdays[day%7],
                    full_weekdayname: fullweekdays[day%7]
                });
        }

        // Populate the partial template for the weekday row container with the weekday row cells
        partials.weekday_row_template = substitute(CalendarBase.WEEKDAY_ROW_TEMPLATE, partials);

        // Populate the array of individual row HTML strings
        for (row = 0; row <= 5; row++) {

            for (column = 0; column <= 12; column++) {

                // Compute the value of the date that needs to populate the cell
                date = 7*row - 5 + column;

                // Compose the value of the unique id of the current calendar cell
                id_date = pane_id + "_" + column + "_" + date;

                // Set the calendar day class to one of three possible values
                calendar_day_class = CAL_DAY;

                if (date < 1) {
                    calendar_day_class = CAL_PREVMONTH_DAY;
                } else if (date > daysInMonth) {
                    calendar_day_class = CAL_NEXTMONTH_DAY;
                }

                // Cut off dates that fall before the first and after the last date of the month
                if (date < 1 || date > daysInMonth) {
                    date = "&nbsp;";
                }

                // Decide on whether a column in the masked table is visible or not based on the value of the cutoff column.
                column_visibility = (column >= cutoffCol && column < (cutoffCol + 7)) ? '' : CAL_COL_HIDDEN;

                // Substitute the values into the partial calendar day template and add it to the current row HTML string
                row_array[row] += substitute (CalendarBase.CALDAY_TEMPLATE, {
                    day_content: date,
                    calendar_col_class: "calendar_col" + column,
                    calendar_col_visibility_class: column_visibility,
                    calendar_day_class: calendar_day_class,
                    calendar_day_id: id_date
                });
            }
        }

        // Instantiate the partial calendar pane body template
        partials.body_template = '';

        // Populate the body template with the rows templates
        arrayEach (row_array, function (v) {
             partials.body_template += substitute(CalendarBase.CALDAY_ROW_TEMPLATE, {calday_row: v});
        });

        // Populate the calendar grid id
        partials.calendar_pane_id = pane_id;

        // Populate the calendar pane tabindex
        partials.calendar_pane_tabindex = this.get("tabIndex");
        partials.pane_arialabel = ydate.format(baseDate, { format: "%B %Y" });


        // Generate final output by substituting class names.
        output = substitute(substitute (CalendarBase.CALENDAR_GRID_TEMPLATE, partials),
                                                        CalendarBase.CALENDAR_STRINGS);

        // Store the initialized pane information
        this._paneProperties[pane_id] = {cutoffCol: cutoffCol, daysInMonth: daysInMonth, paneDate: baseDate};

        return output;
    },

     /**
     * A rendering assist method that rerenders a specified calendar pane, based
     * on a new Date.
     * @method _rerenderCalendarPane
     * @param {Date} newDate The date corresponding to the month of the given
     * calendar pane.
     * @param {Node} pane The node corresponding to the calendar pane to be rerenders.
     * @private
     */
    _rerenderCalendarPane : function (newDate, pane) {

        // Get the first day of the week from the internationalization package, or else use Sunday as default.
        var firstday = this.get('strings.first_weekday') || 0,
            // Compute the cutoff column of the masked calendar table, based on the start date and the first day of week.
            cutoffCol = this._getCutoffColumn(newDate, firstday),
            // Compute the number of days in the month based on starting date
            daysInMonth = ydate.daysInMonth(newDate),
            // Get pane id for easier reference
            paneId = pane.get("id"),
            column,
            currentColumn,
            curCell;

        // Hide the pane before making DOM changes to speed them up
        pane.setStyle("visibility", "hidden");
        pane.setAttribute("aria-label", ydate.format(newDate, {format:"%B %Y"}));

        // Go through all columns, and flip their visibility setting based on whether they are within the unmasked range.
        for (column = 0; column <= 12; column++) {
            currentColumn = pane.all("." + "calendar_col" + column);
            currentColumn.removeClass(CAL_COL_HIDDEN);

            if (column < cutoffCol || column >= (cutoffCol + 7)) {
                currentColumn.addClass(CAL_COL_HIDDEN);
            } else {
                // Clean up dates in visible columns to account for the correct number of days in a month
                switch(column) {
                    case 0:
                        curCell = pane.one("#" + paneId + "_0_30");
                        if (daysInMonth >= 30) {
                            curCell.set("text", "30");
                            curCell.removeClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        } else {
                            curCell.setContent("&nbsp;");
                            curCell.addClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        }
                        break;
                    case 1:
                        curCell = pane.one("#" + paneId + "_1_31");
                        if (daysInMonth >= 31) {
                            curCell.set("text", "31");
                            curCell.removeClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        } else {
                            curCell.setContent("&nbsp;");
                            curCell.removeClass(CAL_DAY).addClass(CAL_NEXTMONTH_DAY);
                        }
                        break;
                    case 6:
                        curCell = pane.one("#" + paneId + "_6_29");
                        if (daysInMonth >= 29) {
                            curCell.set("text", "29");
                            curCell.removeClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        } else {
                            curCell.setContent("&nbsp;");
                            curCell.removeClass(CAL_DAY).addClass(CAL_NEXTMONTH_DAY);
                        }
                        break;
                    case 7:
                        curCell = pane.one("#" + paneId + "_7_30");
                        if (daysInMonth >= 30) {
                            curCell.set("text", "30");
                            curCell.removeClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        } else {
                            curCell.setContent("&nbsp;");
                            curCell.removeClass(CAL_DAY).addClass(CAL_NEXTMONTH_DAY);
                        }
                        break;
                    case 8:
                        curCell = pane.one("#" + paneId + "_8_31");
                        if (daysInMonth >= 31) {
                            curCell.set("text", "31");
                            curCell.removeClass(CAL_NEXTMONTH_DAY).addClass(CAL_DAY);
                        } else {
                            curCell.setContent("&nbsp;");
                            curCell.removeClass(CAL_DAY).addClass(CAL_NEXTMONTH_DAY);
                        }
                        break;
                }
            }
        }

        // Update stored pane properties
        this._paneProperties[paneId].cutoffCol = cutoffCol;
        this._paneProperties[paneId].daysInMonth = daysInMonth;
        this._paneProperties[paneId].paneDate = newDate;

        // Bring the pane visibility back after all DOM changes are done
        pane.setStyle("visibility", "visible");

    },

     /**
     * A rendering assist method that updates the calendar header based
     * on a given date and potentially the provided headerRenderer.
     * @method _updateCalendarHeader
     * @param {Date} baseDate The date with which to update the calendar header.
     * @private
     */
    _updateCalendarHeader : function (baseDate) {
        var headerString = "",
            headerRenderer = this.get("headerRenderer");

        if (Y.Lang.isString(headerRenderer)) {
            headerString = ydate.format(baseDate, {format:headerRenderer});
        } else if (headerRenderer instanceof Function) {
            headerString = headerRenderer.call(this, baseDate);
        }

        return headerString;
    },

     /**
     * A rendering assist method that initializes the calendar header HTML
     * based on a given date and potentially the provided headerRenderer.
     * @method _updateCalendarHeader
     * @param {Date} baseDate The date with which to initialize the calendar header.
     * @private
     */
    _initCalendarHeader : function (baseDate) {
        return substitute(substitute(CalendarBase.HEADER_TEMPLATE, {
                calheader: this._updateCalendarHeader(baseDate),
                calendar_id: this._calendarId
            }), CalendarBase.CALENDAR_STRINGS );
    },

     /**
     * A rendering assist method that initializes the calendar HTML
     * based on a given date.
     * @method _initCalendarHTML
     * @param {Date} baseDate The date with which to initialize the calendar.
     * @private
     */
    _initCalendarHTML : function (baseDate) {
        // Instantiate the partials holder
        var partials = {},
            // Counter for iterative template replacement.
            counter = 0,
            singlePane,
            output;

        // Generate the template for the header
        partials.header_template =  this._initCalendarHeader(baseDate);
        partials.calendar_id = this._calendarId;

        partials.body_template = substitute(substitute (CalendarBase.CONTENT_TEMPLATE, partials),
                                                                                 CalendarBase.CALENDAR_STRINGS);

        // Instantiate the iterative template replacer function
        function paneReplacer () {
            singlePane = this._initCalendarPane(ydate.addMonths(baseDate, counter), partials.calendar_id + "_pane_" + counter);
            counter++;
            return singlePane;
        }

        // Go through all occurrences of the calendar_grid_template token and replace it with an appropriate calendar grid.
        output = partials.body_template.replace(/\{calendar_grid_template\}/g, Y.bind(paneReplacer, this));

        // Update the paneNumber count
        this._paneNumber = counter;

        return output;
    }
}, {

     /**
        * The CSS classnames for the calendar templates.
        * @property CALENDAR_STRINGS
        * @type Object
        * @readOnly
        * @protected
        * @static
        */
    CALENDAR_STRINGS: {
        calendar_grid_class       : CAL_GRID,
        calendar_body_class       : CAL_BODY,
        calendar_hd_class         : CAL_HD,
        calendar_hd_label_class   : CAL_HD_LABEL,
        calendar_weekdayrow_class : CAL_WDAYROW,
        calendar_weekday_class    : CAL_WDAY,
        calendar_row_class        : CAL_ROW,
        calendar_day_class        : CAL_DAY,
        calendar_dayanchor_class  : CAL_ANCHOR,
        calendar_pane_class       : CAL_PANE,
        calendar_right_grid_class : CAL_RIGHT_GRID,
        calendar_left_grid_class  : CAL_LEFT_GRID,
        calendar_status_class     : CAL_STATUS
    },

    /*

    ARIA_STATUS_TEMPLATE: '<div role="status" aria-atomic="true" class="{calendar_status_class}"></div>',

    AriaStatus : null,

    updateStatus : function (statusString) {

        if (!CalendarBase.AriaStatus) {
            CalendarBase.AriaStatus = create(
                                                         substitute (CalendarBase.ARIA_STATUS_TEMPLATE,
                                                                                 CalendarBase.CALENDAR_STRINGS));
            Y.one("body").append(CalendarBase.AriaStatus);
        }

            CalendarBase.AriaStatus.set("text", statusString);
    },

    */

     /**
        * The main content template for calendar.
        * @property CONTENT_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    CONTENT_TEMPLATE:  '<div class="yui3-g {calendar_pane_class}" id="{calendar_id}">' +
                        '{header_template}' +
                        '<div class="yui3-u-1">' +
                        '{calendar_grid_template}' +
                        '</div>' +
                        '</div>',

     /**
        * A single pane template for calendar (same as default CONTENT_TEMPLATE)
        * @property ONE_PANE_TEMPLATE
        * @type String
        * @protected
        * @readOnly
        * @static
        */
    ONE_PANE_TEMPLATE: '<div class="yui3-g {calendar_pane_class}" id="{calendar_id}">' +
                            '{header_template}' +
                            '<div class="yui3-u-1">' +
                                '{calendar_grid_template}' +
                            '</div>' +
                        '</div>',

     /**
        * A two pane template for calendar.
        * @property TWO_PANE_TEMPLATE
        * @type String
        * @protected
        * @readOnly
        * @static
        */
    TWO_PANE_TEMPLATE: '<div class="yui3-g {calendar_pane_class}" id="{calendar_id}">' +
                            '{header_template}' +
                            '<div class="yui3-u-1-2">'+
                                '<div class = "{calendar_left_grid_class}">' +
                                    '{calendar_grid_template}' +
                                '</div>' +
                            '</div>' +
                            '<div class="yui3-u-1-2">' +
                                '<div class = "{calendar_right_grid_class}">' +
                                    '{calendar_grid_template}' +
                                '</div>' +
                            '</div>' +
                        '</div>',
     /**
        * A three pane template for calendar.
        * @property THREE_PANE_TEMPLATE
        * @type String
        * @protected
        * @readOnly
        * @static
        */
    THREE_PANE_TEMPLATE: '<div class="yui3-g {calendar_pane_class}" id="{calendar_id}">' +
                            '{header_template}' +
                            '<div class="yui3-u-1-3">' +
                                '<div class="{calendar_left_grid_class}">' +
                                    '{calendar_grid_template}' +
                                '</div>' +
                            '</div>' +
                            '<div class="yui3-u-1-3">' +
                                '{calendar_grid_template}' +
                            '</div>' +
                            '<div class="yui3-u-1-3">' +
                                '<div class="{calendar_right_grid_class}">' +
                                    '{calendar_grid_template}' +
                                '</div>' +
                            '</div>' +
                        '</div>',
     /**
        * A template for the calendar grid.
        * @property CALENDAR_GRID_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    CALENDAR_GRID_TEMPLATE: '<table class="{calendar_grid_class}" id="{calendar_pane_id}" role="grid" aria-readonly="true" ' +
                                'aria-label="{pane_arialabel}" tabindex="{calendar_pane_tabindex}">' +
                                '<thead>' +
                                    '{weekday_row_template}' +
                                '</thead>' +
                                '<tbody>' +
                                    '{body_template}' +
                                '</tbody>' +
                            '</table>',

     /**
        * A template for the calendar header.
        * @property HEADER_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    HEADER_TEMPLATE: '<div class="yui3-g {calendar_hd_class}">' +
                        '<div class="yui3-u {calendar_hd_label_class}" id="{calendar_id}_header" aria-role="heading">' +
                            '{calheader}' +
                        '</div>' +
                    '</div>',

     /**
        * A template for the row of weekday names.
        * @property WEEKDAY_ROW_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    WEEKDAY_ROW_TEMPLATE: '<tr class="{calendar_weekdayrow_class}" role="row">' +
                            '{weekday_row}' +
                        '</tr>',

     /**
        * A template for a single row of calendar days.
        * @property CALDAY_ROW_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    CALDAY_ROW_TEMPLATE: '<tr class="{calendar_row_class}" role="row">' +
                            '{calday_row}' +
                        '</tr>',

     /**
        * A template for a single cell with a weekday name.
        * @property CALDAY_ROW_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    WEEKDAY_TEMPLATE: '<th class="{calendar_weekday_class}" role="columnheader" aria-label="{full_weekdayname}">{weekdayname}</th>',

     /**
        * A template for a single cell with a calendar day.
        * @property CALDAY_TEMPLATE
        * @type String
        * @protected
        * @static
        */
    CALDAY_TEMPLATE: '<td class="{calendar_col_class} {calendar_day_class} {calendar_col_visibility_class}" id="{calendar_day_id}" ' +
                        'role="gridcell" tabindex="-1">' +
                        '{day_content}' +
                    '</td>',

     /**
        * The identity of the widget.
        *
        * @property NAME
        * @type String
        * @default 'calendarBase'
        * @readOnly
        * @protected
        * @static
        */
    NAME: 'calendarBase',

     /**
        * Static property used to define the default attribute configuration of
        * the Widget.
        *
        * @property ATTRS
        * @type {Object}
        * @protected
        * @static
        */
    ATTRS: {
        tabIndex: {
            value: 1
        },
        /**
         * The date corresponding to the current calendar view. Always
         * normalized to the first of the month that contains the date
         * at assignment time. Used as the first date visible in the
         * calendar.
         *
         * @attribute date
         * @type Date
         * @default The first of the month containing today's date, as
         * set on the end user's system.
         */
        date: {
            value: new Date(),
            setter: function (val) {
                var newDate = this._normalizeDate(val);
                if (ydate.areEqual(newDate, this.get('date'))) {
                        return this.get('date');
                } else {
                        return newDate;
                }
            }
        },

        /**
         * A setting specifying whether to shows days from the previous
         * month in the visible month's grid, if there are empty preceding
         * cells available.
         *
         * @attribute showPrevMonth
         * @type boolean
         * @default false
         */
        showPrevMonth: {
            value: false
        },

        /**
         * A setting specifying whether to shows days from the next
         * month in the visible month's grid, if there are empty
         * cells available at the end.
         *
         * @attribute showNextMonth
         * @type boolean
         * @default false
         */
        showNextMonth: {
            value: false
        },

        /**
         * Strings and properties derived from the internationalization packages
         * for the calendar.
         *
         * @attribute strings
         * @type Object
         * @protected
         */
        strings : {
            valueFn: function() { return Y.Intl.get("calendar-base"); }
        },

        /**
         * Custom header renderer for the calendar.
         *
         * @attribute headerRenderer
         * @type String | Function
         */
        headerRenderer: {
            value: "%B %Y"
        },

        /**
         * The name of the rule which all enabled dates should match.
         * Either disabledDatesRule or enabledDatesRule should be specified,
         * or neither, but not both.
         *
         * @attribute enabledDatesRule
         * @type String
         * @default null
         */
        enabledDatesRule: {
            value: null
        },

        /**
         * The name of the rule which all disabled dates should match.
         * Either disabledDatesRule or enabledDatesRule should be specified,
         * or neither, but not both.
         *
         * @attribute disabledDatesRule
         * @type String
         * @default null
         */
        disabledDatesRule: {
            value: null
        },

        /**
         * A read-only attribute providing a list of currently selected dates.
         *
         * @attribute selectedDates
         * @readOnly
         * @type Array
         */
        selectedDates : {
            readOnly: true,
            getter: function () {
                return (this._getSelectedDatesList());
            }
        },

        /**
         * An object of the form {rules:Object, filterFunction:Function},
         * providing  set of rules and a custom rendering function for
         * customizing specific calendar cells.
         *
         * @attribute customRenderer
         * @readOnly
         * @type Object
         * @default {}
         */
        customRenderer : {
            lazyAdd: false,
            value: {},
            setter: function (val) {
                this._rules = val.rules;
                this._filterFunction = val.filterFunction;
            }
        }
    }

});


}, '3.10.1', {
    "requires": [
        "widget",
        "datatype-date",
        "datatype-date-math",
        "cssgrids"
    ],
    "lang": [
        "de",
        "en",
        "es",
        "es-AR",
        "fr",
        "it",
        "ja",
        "nb-NO",
        "nl",
        "pt-BR",
        "ru",
        "zh-HANT-TW"
    ],
    "skinnable": true
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/io-queue/io-queue.js
// ----------------------------------------------------------------------------------------

YUI.add('io-queue', function (Y, NAME) {

/**
Extends IO to implement Queue for synchronous
transaction processing.
@module io
@submodule io-queue
@for IO
**/
var io = Y.io._map['io:0'] || new Y.IO();

Y.mix(Y.IO.prototype, {
   /**
    * Array of transactions queued for processing
    *
    * @property _q
    * @private
    * @static
    * @type {Object}
    */
    _q: new Y.Queue(),
    _qActiveId: null,
    _qInit: false,

   /**
    * Property to determine whether the queue is set to
    * 1 (active) or 0 (inactive).  When inactive, transactions
    * will be stored in the queue until the queue is set to active.
    *
    * @property _qState
    * @private
    * @static
    * @type {Number}
    */
    _qState: 1,

   /**
    * Method Process the first transaction from the
    * queue in FIFO order.
    *
    * @method _qShift
    * @private
    * @static
    */
    _qShift: function() {
        var io = this,
            o = io._q.next();

        io._qActiveId = o.id;
        io._qState = 0;
        io.send(o.uri, o.cfg, o.id);
    },

   /**
    * Method for queueing a transaction before the request is sent to the
    * resource, to ensure sequential processing.
    *
    * @method queue
    * @static
    * @return {Object}
    */
    queue: function(uri, c) {
        var io = this,
            o = { uri: uri, cfg:c, id: this._id++ };

        if(!io._qInit) {
            Y.on('io:complete', function(id, o) { io._qNext(id); }, io);
            io._qInit = true;
        }

        io._q.add(o);
        if (io._qState === 1) {
            io._qShift();
        }

        return o;
    },

    _qNext: function(id) {
        var io = this;
        io._qState = 1;
        if (io._qActiveId === id && io._q.size() > 0) {
            io._qShift();
        }
    },

   /**
    * Method for promoting a transaction to the top of the queue.
    *
    * @method promote
    * @static
    */
    qPromote: function(o) {
        this._q.promote(o);
    },

   /**
    * Method for removing a specific, pending transaction from
    * the queue.
    *
    * @method remove
    * @private
    * @static
    */
    qRemove: function(o) {
        this._q.remove(o);
    },

   /**
    * Method for cancel all pending transaction from
    * the queue.
    *
    * @method empty
    * @static
    * @since 3.7.3
    */
    qEmpty: function() {
        this._q = new Y.Queue();
    },

    qStart: function() {
        var io = this;
        io._qState = 1;

        if (io._q.size() > 0) {
            io._qShift();
        }
    },

   /**
    * Method for setting queue processing to inactive.
    * Transaction requests to YUI.io.queue() will be stored in the queue, but
    * not processed until the queue is reset to "active".
    *
    * @method _stop
    * @private
    * @static
    */
    qStop: function() {
        this._qState = 0;
    },

   /**
    * Method to query the current size of the queue.
    *
    * @method _size
    * @private
    * @static
    * @return {Number}
    */
    qSize: function() {
        return this._q.size();
    }

}, true);

function _queue(u, c) {
    return io.queue.apply(io, [u, c]);
}

_queue.start = function () { io.qStart(); };
_queue.stop = function () { io.qStop(); };
_queue.promote = function (o) { io.qPromote(o); };
_queue.remove = function (o) { io.qRemove(o); };
_queue.size = function () { io.qSize(); };
_queue.empty = function () { io.qEmpty(); };
Y.io.queue = _queue;


}, '3.10.1', {"requires": ["io-base", "queue-promote"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/base-core/base-core.js
// ----------------------------------------------------------------------------------------

YUI.add('base-core', function (Y, NAME) {

    /**
     * The base module provides the Base class, which objects requiring attribute and custom event support can extend.
     * The module also provides two ways to reuse code - It augments Base with the Plugin.Host interface which provides
     * plugin support and also provides the BaseCore.build method which provides a way to build custom classes using extensions.
     *
     * @module base
     */

    /**
     * <p>The base-core module provides the BaseCore class, the lightest version of Base,
     * which provides Base's basic lifecycle management and ATTRS construction support,
     * but doesn't fire init/destroy or attribute change events.</p>
     *
     * <p>It mixes in AttributeCore, which is the lightest version of Attribute</p>
     *
     * @module base
     * @submodule base-core
     */
    var O = Y.Object,
        L = Y.Lang,
        DOT = ".",
        INITIALIZED = "initialized",
        DESTROYED = "destroyed",
        INITIALIZER = "initializer",
        VALUE = "value",
        OBJECT_CONSTRUCTOR = Object.prototype.constructor,
        DEEP = "deep",
        SHALLOW = "shallow",
        DESTRUCTOR = "destructor",

        AttributeCore = Y.AttributeCore,

        _wlmix = function(r, s, wlhash) {
            var p;
            for (p in s) {
                if(wlhash[p]) {
                    r[p] = s[p];
                }
            }
            return r;
        };

    /**
     * The BaseCore class, is the lightest version of Base, and provides Base's
     * basic lifecycle management and ATTRS construction support, but doesn't
     * fire init/destroy or attribute change events.
     *
     * BaseCore also handles the chaining of initializer and destructor methods across
     * the hierarchy as part of object construction and destruction. Additionally, attributes
     * configured through the static <a href="#property_BaseCore.ATTRS">ATTRS</a>
     * property for each class in the hierarchy will be initialized by BaseCore.
     *
     * Classes which require attribute support, but don't intend to use/expose attribute
     * change events can extend BaseCore instead of Base for optimal kweight and
     * runtime performance.
     *
     * @class BaseCore
     * @constructor
     * @uses AttributeCore
     * @param {Object} cfg Object with configuration property name/value pairs.
     * The object can be used to provide initial values for the objects published
     * attributes.
     */
    function BaseCore(cfg) {
        if (!this._BaseInvoked) {
            this._BaseInvoked = true;

            this._initBase(cfg);
        }
    }

    /**
     * The list of properties which can be configured for each attribute
     * (e.g. setter, getter, writeOnce, readOnly etc.)
     *
     * @property _ATTR_CFG
     * @type Array
     * @static
     * @private
     */
    BaseCore._ATTR_CFG = AttributeCore._ATTR_CFG.concat("cloneDefaultValue");

    /**
     * The array of non-attribute configuration properties supported by this class.
     *
     * For example `BaseCore` defines a "plugins" configuration property which
     * should not be set up as an attribute. This property is primarily required so
     * that when <a href="#property__allowAdHocAttrs">`_allowAdHocAttrs`</a> is enabled by a class,
     * non-attribute configuration properties don't get added as ad-hoc attributes.
     *
     * @property _NON_ATTRS_CFG
     * @type Array
     * @static
     * @private
     */
    BaseCore._NON_ATTRS_CFG = ["plugins"];

    /**
     * This property controls whether or not instances of this class should
     * allow users to add ad-hoc attributes through the constructor configuration
     * hash.
     *
     * AdHoc attributes are attributes which are not defined by the class, and are
     * not handled by the MyClass._NON_ATTRS_CFG
     *
     * @property _allowAdHocAttrs
     * @type boolean
     * @default undefined (false)
     * @protected
     */

    /**
     * The string to be used to identify instances of this class.
     *
     * Classes extending BaseCore, should define their own
     * static NAME property, which should be camelCase by
     * convention (e.g. MyClass.NAME = "myClass";).
     *
     * @property NAME
     * @type String
     * @static
     */
    BaseCore.NAME = "baseCore";

    /**
     * The default set of attributes which will be available for instances of this class, and
     * their configuration. In addition to the configuration properties listed by
     * AttributeCore's <a href="AttributeCore.html#method_addAttr">addAttr</a> method,
     * the attribute can also be configured with a "cloneDefaultValue" property, which
     * defines how the statically defined value field should be protected
     * ("shallow", "deep" and false are supported values).
     *
     * By default if the value is an object literal or an array it will be "shallow"
     * cloned, to protect the default value.
     *
     * @property ATTRS
     * @type Object
     * @static
     */
    BaseCore.ATTRS = {
        /**
         * Flag indicating whether or not this object
         * has been through the init lifecycle phase.
         *
         * @attribute initialized
         * @readonly
         * @default false
         * @type boolean
         */
        initialized: {
            readOnly:true,
            value:false
        },

        /**
         * Flag indicating whether or not this object
         * has been through the destroy lifecycle phase.
         *
         * @attribute destroyed
         * @readonly
         * @default false
         * @type boolean
         */
        destroyed: {
            readOnly:true,
            value:false
        }
    };

    /**
    Provides a way to safely modify a `Y.BaseCore` subclass' static `ATTRS`
    after the class has been defined or created.

    BaseCore-based classes cache information about the class hierarchy in order
    to efficiently create instances. This cache includes includes the aggregated
    `ATTRS` configs. If the static `ATTRS` configs need to be modified after the
    class has been defined or create, then use this method which will make sure
    to clear any cached data before making any modifications.

    @method modifyAttrs
    @param {Function} [ctor] The constructor function whose `ATTRS` should be
        modified. If a `ctor` function is not specified, then `this` is assumed
        to be the constructor which hosts the `ATTRS`.
    @param {Object} configs The collection of `ATTRS` configs to mix with the
        existing attribute configurations.
    @static
    @since 3.10.0
    **/
    BaseCore.modifyAttrs = function (ctor, configs) {
        // When called without a constructor, assume `this` is the constructor.
        if (typeof ctor !== 'function') {
            configs = ctor;
            ctor    = this;
        }

        var attrs, attr, name;

        // Eagerly create the `ATTRS` object if it doesn't already exist.
        attrs = ctor.ATTRS || (ctor.ATTRS = {});

        if (configs) {
            // Clear cache because it has ATTRS aggregation data which is about
            // to be modified.
            ctor._CACHED_CLASS_DATA = null;

            for (name in configs) {
                if (configs.hasOwnProperty(name)) {
                    attr = attrs[name] || (attrs[name] = {});
                    Y.mix(attr, configs[name], true);
                }
            }
        }
    };

    BaseCore.prototype = {

        /**
         * Internal construction logic for BaseCore.
         *
         * @method _initBase
         * @param {Object} config The constructor configuration object
         * @private
         */
        _initBase : function(config) {

            Y.stamp(this);

            this._initAttribute(config);

            // If Plugin.Host has been augmented [ through base-pluginhost ], setup it's
            // initial state, but don't initialize Plugins yet. That's done after initialization.
            var PluginHost = Y.Plugin && Y.Plugin.Host;
            if (this._initPlugins && PluginHost) {
                PluginHost.call(this);
            }

            if (this._lazyAddAttrs !== false) { this._lazyAddAttrs = true; }

            /**
             * The string used to identify the class of this object.
             *
             * @deprecated Use this.constructor.NAME
             * @property name
             * @type String
             */
            this.name = this.constructor.NAME;

            this.init.apply(this, arguments);
        },

        /**
         * Initializes AttributeCore
         *
         * @method _initAttribute
         * @private
         */
        _initAttribute: function() {
            AttributeCore.call(this);
        },

        /**
         * Init lifecycle method, invoked during construction. Sets up attributes
         * and invokes initializers for the class hierarchy.
         *
         * @method init
         * @chainable
         * @param {Object} cfg Object with configuration property name/value pairs
         * @return {BaseCore} A reference to this object
         */
        init: function(cfg) {

            this._baseInit(cfg);

            return this;
        },

        /**
         * Internal initialization implementation for BaseCore
         *
         * @method _baseInit
         * @private
         */
        _baseInit: function(cfg) {
            this._initHierarchy(cfg);

            if (this._initPlugins) {
                // Need to initPlugins manually, to handle constructor parsing, static Plug parsing
                this._initPlugins(cfg);
            }
            this._set(INITIALIZED, true);
        },

        /**
         * Destroy lifecycle method. Invokes destructors for the class hierarchy.
         *
         * @method destroy
         * @return {BaseCore} A reference to this object
         * @chainable
         */
        destroy: function() {
            this._baseDestroy();
            return this;
        },

        /**
         * Internal destroy implementation for BaseCore
         *
         * @method _baseDestroy
         * @private
         */
        _baseDestroy : function() {
            if (this._destroyPlugins) {
                this._destroyPlugins();
            }
            this._destroyHierarchy();
            this._set(DESTROYED, true);
        },

        /**
         * Returns the class hierarchy for this object, with BaseCore being the last class in the array.
         *
         * @method _getClasses
         * @protected
         * @return {Function[]} An array of classes (constructor functions), making up the class hierarchy for this object.
         * This value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the
         * cached value.
         */
        _getClasses : function() {
            if (!this._classes) {
                this._initHierarchyData();
            }
            return this._classes;
        },

        /**
         * Returns an aggregated set of attribute configurations, by traversing
         * the class hierarchy.
         *
         * @method _getAttrCfgs
         * @protected
         * @return {Object} The hash of attribute configurations, aggregated across classes in the hierarchy
         * This value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return
         * the cached value.
         */
        _getAttrCfgs : function() {
            if (!this._attrs) {
                this._initHierarchyData();
            }
            return this._attrs;
        },

        /**
         * A helper method used when processing ATTRS across the class hierarchy during
         * initialization. Returns a disposable object with the attributes defined for
         * the provided class, extracted from the set of all attributes passed in.
         *
         * @method _filterAttrCfgs
         * @private
         *
         * @param {Function} clazz The class for which the desired attributes are required.
         * @param {Object} allCfgs The set of all attribute configurations for this instance.
         * Attributes will be removed from this set, if they belong to the filtered class, so
         * that by the time all classes are processed, allCfgs will be empty.
         *
         * @return {Object} The set of attributes belonging to the class passed in, in the form
         * of an object with attribute name/configuration pairs.
         */
        _filterAttrCfgs : function(clazz, allCfgs) {

            var cfgs = null,
                cfg,
                val,
                subAttr,
                subAttrs,
                subAttrPath,
                attr,
                attrCfg,
                filtered = this._filteredAttrs,
                attrs = clazz.ATTRS;

            if (attrs) {
                for (attr in attrs) {
                    attrCfg = allCfgs[attr];

                    // Using hasOwnProperty, since it's faster (for the 80% case where filtered doesn't have attr) for the majority
                    // of browsers, FF being the major outlier. http://jsperf.com/in-vs-hasownproperty/6. May revisit.
                    if (attrCfg && !filtered.hasOwnProperty(attr)) {

                        if (!cfgs) {
                            cfgs = {};
                        }

                        // PERF TODO:
                        // Revisit once all unit tests pass for further optimizations. See if we really need to isolate this.
                        cfg = cfgs[attr] = _wlmix({}, attrCfg, this._attrCfgHash());

                        filtered[attr] = true;

                        val = cfg.value;

                        if (val && (typeof val === "object")) {
                            this._cloneDefaultValue(attr, cfg);
                        }

                        if (allCfgs._subAttrs && allCfgs._subAttrs.hasOwnProperty(attr)) {
                            subAttrs = allCfgs._subAttrs[attr];

                            for (subAttrPath in subAttrs) {
                                subAttr = subAttrs[subAttrPath];

                                if (subAttr.path) {
                                    O.setValue(cfg.value, subAttr.path, subAttr.value);
                                }
                            }
                        }
                    }
                }
            }

            return cfgs;
        },

        /**
         * @method _filterAdHocAttrs
         * @private
         *
         * @param {Object} allAttrs The set of all attribute configurations for this instance.
         * Attributes will be removed from this set, if they belong to the filtered class, so
         * that by the time all classes are processed, allCfgs will be empty.
         * @param {Object} userVals The config object passed in by the user, from which adhoc attrs are to be filtered.
         * @return {Object} The set of adhoc attributes passed in, in the form
         * of an object with attribute name/configuration pairs.
         */
        _filterAdHocAttrs : function(allAttrs, userVals) {
            var adHocs,
                nonAttrs = this._nonAttrs,
                attr;

            if (userVals) {
                adHocs = {};
                for (attr in userVals) {
                    if (!allAttrs[attr] && !nonAttrs[attr] && userVals.hasOwnProperty(attr)) {
                        adHocs[attr] = {
                            value:userVals[attr]
                        };
                    }
                }
            }

            return adHocs;
        },

        /**
         * A helper method used by _getClasses and _getAttrCfgs, which determines both
         * the array of classes and aggregate set of attribute configurations
         * across the class hierarchy for the instance.
         *
         * @method _initHierarchyData
         * @private
         */
        _initHierarchyData : function() {

            var ctor = this.constructor,
                cachedClassData = ctor._CACHED_CLASS_DATA,
                c,
                i,
                l,
                attrCfg,
                attrCfgHash,
                needsAttrCfgHash = !ctor._ATTR_CFG_HASH,
                nonAttrsCfg,
                nonAttrs = {},
                classes = [],
                attrs = [];

            // Start with `this` instance's constructor.
            c = ctor;

            if (!cachedClassData) {

                while (c) {
                    // Add to classes
                    classes[classes.length] = c;

                    // Add to attributes
                    if (c.ATTRS) {
                        attrs[attrs.length] = c.ATTRS;
                    }

                    // Aggregate ATTR cfg whitelist.
                    if (needsAttrCfgHash) {
                        attrCfg     = c._ATTR_CFG;
                        attrCfgHash = attrCfgHash || {};

                        if (attrCfg) {
                            for (i = 0, l = attrCfg.length; i < l; i += 1) {
                                attrCfgHash[attrCfg[i]] = true;
                            }
                        }
                    }

                    // Commenting out the if. We always aggregate, since we don't
                    // know if we'll be needing this on the instance or not.
                    // if (this._allowAdHocAttrs) {
                        nonAttrsCfg = c._NON_ATTRS_CFG;
                        if (nonAttrsCfg) {
                            for (i = 0, l = nonAttrsCfg.length; i < l; i++) {
                                nonAttrs[nonAttrsCfg[i]] = true;
                            }
                        }
                    //}

                    c = c.superclass ? c.superclass.constructor : null;
                }

                // Cache computed `_ATTR_CFG_HASH` on the constructor.
                if (needsAttrCfgHash) {
                    ctor._ATTR_CFG_HASH = attrCfgHash;
                }

                cachedClassData = ctor._CACHED_CLASS_DATA = {
                    classes : classes,
                    nonAttrs : nonAttrs,
                    attrs : this._aggregateAttrs(attrs)
                };

            }

            this._classes = cachedClassData.classes;
            this._attrs = cachedClassData.attrs;
            this._nonAttrs = cachedClassData.nonAttrs;
        },

        /**
         * Utility method to define the attribute hash used to filter/whitelist property mixes for
         * this class for iteration performance reasons.
         *
         * @method _attrCfgHash
         * @private
         */
        _attrCfgHash: function() {
            return this.constructor._ATTR_CFG_HASH;
        },

        /**
         * This method assumes that the value has already been checked to be an object.
         * Since it's on a critical path, we don't want to re-do the check.
         *
         * @method _cloneDefaultValue
         * @param {Object} cfg
         * @private
         */
        _cloneDefaultValue : function(attr, cfg) {

            var val = cfg.value,
                clone = cfg.cloneDefaultValue;

            if (clone === DEEP || clone === true) {
                cfg.value = Y.clone(val);
            } else if (clone === SHALLOW) {
                cfg.value = Y.merge(val);
            } else if ((clone === undefined && (OBJECT_CONSTRUCTOR === val.constructor || L.isArray(val)))) {
                cfg.value = Y.clone(val);
            }
            // else if (clone === false), don't clone the static default value.
            // It's intended to be used by reference.
        },

        /**
         * A helper method, used by _initHierarchyData to aggregate
         * attribute configuration across the instances class hierarchy.
         *
         * The method will protect the attribute configuration value to protect the statically defined
         * default value in ATTRS if required (if the value is an object literal, array or the
         * attribute configuration has cloneDefaultValue set to shallow or deep).
         *
         * @method _aggregateAttrs
         * @private
         * @param {Array} allAttrs An array of ATTRS definitions across classes in the hierarchy
         * (subclass first, Base last)
         * @return {Object} The aggregate set of ATTRS definitions for the instance
         */
        _aggregateAttrs : function(allAttrs) {

            var attr,
                attrs,
                subAttrsHash,
                cfg,
                path,
                i,
                cfgPropsHash = this._attrCfgHash(),
                aggAttr,
                aggAttrs = {};

            if (allAttrs) {
                for (i = allAttrs.length-1; i >= 0; --i) {

                    attrs = allAttrs[i];

                    for (attr in attrs) {
                        if (attrs.hasOwnProperty(attr)) {

                            // PERF TODO: Do we need to merge here, since we're merging later in filterAttrCfg
                            // Should we move this down to only merge if we hit the path or valueFn ifs below?
                            cfg = _wlmix({}, attrs[attr], cfgPropsHash);

                            path = null;
                            if (attr.indexOf(DOT) !== -1) {
                                path = attr.split(DOT);
                                attr = path.shift();
                            }

                            aggAttr = aggAttrs[attr];

                            if (path && aggAttr && aggAttr.value) {

                                subAttrsHash = aggAttrs._subAttrs;

                                if (!subAttrsHash) {
                                    subAttrsHash = aggAttrs._subAttrs = {};
                                }

                                if (!subAttrsHash[attr]) {
                                    subAttrsHash[attr] = {};
                                }

                                subAttrsHash[attr][path.join(DOT)] = {
                                    value: cfg.value,
                                    path : path
                                };

                            } else if (!path) {

                                if (!aggAttr) {
                                    aggAttrs[attr] = cfg;
                                } else {
                                    if (aggAttr.valueFn && VALUE in cfg) {
                                        aggAttr.valueFn = null;
                                    }

                                    // Mix into existing config.
                                    _wlmix(aggAttr, cfg, cfgPropsHash);
                                }
                            }
                        }
                    }
                }
            }

            return aggAttrs;
        },

        /**
         * Initializes the class hierarchy for the instance, which includes
         * initializing attributes for each class defined in the class's
         * static <a href="#property_BaseCore.ATTRS">ATTRS</a> property and
         * invoking the initializer method on the prototype of each class in the hierarchy.
         *
         * @method _initHierarchy
         * @param {Object} userVals Object with configuration property name/value pairs
         * @private
         */
        _initHierarchy : function(userVals) {
            var lazy = this._lazyAddAttrs,
                constr,
                constrProto,
                ci,
                ei,
                el,
                extProto,
                exts,
                classes = this._getClasses(),
                attrCfgs = this._getAttrCfgs(),
                cl = classes.length - 1;

            this._filteredAttrs = {};

            for (ci = cl; ci >= 0; ci--) {

                constr = classes[ci];
                constrProto = constr.prototype;
                exts = constr._yuibuild && constr._yuibuild.exts;

                if (exts) {
                    for (ei = 0, el = exts.length; ei < el; ei++) {
                        exts[ei].apply(this, arguments);
                    }
                }

                this.addAttrs(this._filterAttrCfgs(constr, attrCfgs), userVals, lazy);

                if (this._allowAdHocAttrs && ci === cl) {
                    this.addAttrs(this._filterAdHocAttrs(attrCfgs, userVals), userVals, lazy);
                }

                // Using INITIALIZER in hasOwnProperty check, for performance reasons (helps IE6 avoid GC thresholds when
                // referencing string literals). Not using it in apply, again, for performance "." is faster.
                if (constrProto.hasOwnProperty(INITIALIZER)) {
                    constrProto.initializer.apply(this, arguments);
                }

                if (exts) {
                    for (ei = 0; ei < el; ei++) {
                        extProto = exts[ei].prototype;
                        if (extProto.hasOwnProperty(INITIALIZER)) {
                            extProto.initializer.apply(this, arguments);
                        }
                    }
                }
            }

            this._filteredAttrs = null;
        },

        /**
         * Destroys the class hierarchy for this instance by invoking
         * the destructor method on the prototype of each class in the hierarchy.
         *
         * @method _destroyHierarchy
         * @private
         */
        _destroyHierarchy : function() {
            var constr,
                constrProto,
                ci, cl, ei, el, exts, extProto,
                classes = this._getClasses();

            for (ci = 0, cl = classes.length; ci < cl; ci++) {
                constr = classes[ci];
                constrProto = constr.prototype;
                exts = constr._yuibuild && constr._yuibuild.exts;

                if (exts) {
                    for (ei = 0, el = exts.length; ei < el; ei++) {
                        extProto = exts[ei].prototype;
                        if (extProto.hasOwnProperty(DESTRUCTOR)) {
                            extProto.destructor.apply(this, arguments);
                        }
                    }
                }

                if (constrProto.hasOwnProperty(DESTRUCTOR)) {
                    constrProto.destructor.apply(this, arguments);
                }
            }
        },

        /**
         * Default toString implementation. Provides the constructor NAME
         * and the instance guid, if set.
         *
         * @method toString
         * @return {String} String representation for this object
         */
        toString: function() {
            return this.name + "[" + Y.stamp(this, true) + "]";
        }
    };

    // Straightup augment, no wrapper functions
    Y.mix(BaseCore, AttributeCore, false, null, 1);

    // Fix constructor
    BaseCore.prototype.constructor = BaseCore;

    Y.BaseCore = BaseCore;


}, '3.10.1', {"requires": ["attribute-core"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/oop/oop.js
// ----------------------------------------------------------------------------------------

YUI.add('oop', function (Y, NAME) {

/**
Adds object inheritance and manipulation utilities to the YUI instance. This
module is required by most YUI components.

@module oop
**/

var L            = Y.Lang,
    A            = Y.Array,
    OP           = Object.prototype,
    CLONE_MARKER = '_~yuim~_',

    hasOwn   = OP.hasOwnProperty,
    toString = OP.toString;

function dispatch(o, f, c, proto, action) {
    if (o && o[action] && o !== Y) {
        return o[action].call(o, f, c);
    } else {
        switch (A.test(o)) {
            case 1:
                return A[action](o, f, c);
            case 2:
                return A[action](Y.Array(o, 0, true), f, c);
            default:
                return Y.Object[action](o, f, c, proto);
        }
    }
}

/**
Augments the _receiver_ with prototype properties from the _supplier_. The
receiver may be a constructor function or an object. The supplier must be a
constructor function.

If the _receiver_ is an object, then the _supplier_ constructor will be called
immediately after _receiver_ is augmented, with _receiver_ as the `this` object.

If the _receiver_ is a constructor function, then all prototype methods of
_supplier_ that are copied to _receiver_ will be sequestered, and the
_supplier_ constructor will not be called immediately. The first time any
sequestered method is called on the _receiver_'s prototype, all sequestered
methods will be immediately copied to the _receiver_'s prototype, the
_supplier_'s constructor will be executed, and finally the newly unsequestered
method that was called will be executed.

This sequestering logic sounds like a bunch of complicated voodoo, but it makes
it cheap to perform frequent augmentation by ensuring that suppliers'
constructors are only called if a supplied method is actually used. If none of
the supplied methods is ever used, then there's no need to take the performance
hit of calling the _supplier_'s constructor.

@method augment
@param {Function|Object} receiver Object or function to be augmented.
@param {Function} supplier Function that supplies the prototype properties with
  which to augment the _receiver_.
@param {Boolean} [overwrite=false] If `true`, properties already on the receiver
  will be overwritten if found on the supplier's prototype.
@param {String[]} [whitelist] An array of property names. If specified,
  only the whitelisted prototype properties will be applied to the receiver, and
  all others will be ignored.
@param {Array|any} [args] Argument or array of arguments to pass to the
  supplier's constructor when initializing.
@return {Function} Augmented object.
@for YUI
**/
Y.augment = function (receiver, supplier, overwrite, whitelist, args) {
    var rProto    = receiver.prototype,
        sequester = rProto && supplier,
        sProto    = supplier.prototype,
        to        = rProto || receiver,

        copy,
        newPrototype,
        replacements,
        sequestered,
        unsequester;

    args = args ? Y.Array(args) : [];

    if (sequester) {
        newPrototype = {};
        replacements = {};
        sequestered  = {};

        copy = function (value, key) {
            if (overwrite || !(key in rProto)) {
                if (toString.call(value) === '[object Function]') {
                    sequestered[key] = value;

                    newPrototype[key] = replacements[key] = function () {
                        return unsequester(this, value, arguments);
                    };
                } else {
                    newPrototype[key] = value;
                }
            }
        };

        unsequester = function (instance, fn, fnArgs) {
            // Unsequester all sequestered functions.
            for (var key in sequestered) {
                if (hasOwn.call(sequestered, key)
                        && instance[key] === replacements[key]) {

                    instance[key] = sequestered[key];
                }
            }

            // Execute the supplier constructor.
            supplier.apply(instance, args);

            // Finally, execute the original sequestered function.
            return fn.apply(instance, fnArgs);
        };

        if (whitelist) {
            Y.Array.each(whitelist, function (name) {
                if (name in sProto) {
                    copy(sProto[name], name);
                }
            });
        } else {
            Y.Object.each(sProto, copy, null, true);
        }
    }

    Y.mix(to, newPrototype || sProto, overwrite, whitelist);

    if (!sequester) {
        supplier.apply(to, args);
    }

    return receiver;
};

/**
 * Copies object properties from the supplier to the receiver. If the target has
 * the property, and the property is an object, the target object will be
 * augmented with the supplier's value.
 *
 * @method aggregate
 * @param {Object} receiver Object to receive the augmentation.
 * @param {Object} supplier Object that supplies the properties with which to
 *     augment the receiver.
 * @param {Boolean} [overwrite=false] If `true`, properties already on the receiver
 *     will be overwritten if found on the supplier.
 * @param {String[]} [whitelist] Whitelist. If supplied, only properties in this
 *     list will be applied to the receiver.
 * @return {Object} Augmented object.
 */
Y.aggregate = function(r, s, ov, wl) {
    return Y.mix(r, s, ov, wl, 0, true);
};

/**
 * Utility to set up the prototype, constructor and superclass properties to
 * support an inheritance strategy that can chain constructors and methods.
 * Static members will not be inherited.
 *
 * @method extend
 * @param {function} r   the object to modify.
 * @param {function} s the object to inherit.
 * @param {object} px prototype properties to add/override.
 * @param {object} sx static properties to add/override.
 * @return {object} the extended object.
 */
Y.extend = function(r, s, px, sx) {
    if (!s || !r) {
        Y.error('extend failed, verify dependencies');
    }

    var sp = s.prototype, rp = Y.Object(sp);
    r.prototype = rp;

    rp.constructor = r;
    r.superclass = sp;

    // assign constructor property
    if (s != Object && sp.constructor == OP.constructor) {
        sp.constructor = s;
    }

    // add prototype overrides
    if (px) {
        Y.mix(rp, px, true);
    }

    // add object overrides
    if (sx) {
        Y.mix(r, sx, true);
    }

    return r;
};

/**
 * Executes the supplied function for each item in
 * a collection.  Supports arrays, objects, and
 * NodeLists
 * @method each
 * @param {object} o the object to iterate.
 * @param {function} f the function to execute.  This function
 * receives the value, key, and object as parameters.
 * @param {object} c the execution context for the function.
 * @param {boolean} proto if true, prototype properties are
 * iterated on objects.
 * @return {YUI} the YUI instance.
 */
Y.each = function(o, f, c, proto) {
    return dispatch(o, f, c, proto, 'each');
};

/**
 * Executes the supplied function for each item in
 * a collection.  The operation stops if the function
 * returns true. Supports arrays, objects, and
 * NodeLists.
 * @method some
 * @param {object} o the object to iterate.
 * @param {function} f the function to execute.  This function
 * receives the value, key, and object as parameters.
 * @param {object} c the execution context for the function.
 * @param {boolean} proto if true, prototype properties are
 * iterated on objects.
 * @return {boolean} true if the function ever returns true,
 * false otherwise.
 */
Y.some = function(o, f, c, proto) {
    return dispatch(o, f, c, proto, 'some');
};

/**
Deep object/array copy. Function clones are actually wrappers around the
original function. Array-like objects are treated as arrays. Primitives are
returned untouched. Optionally, a function can be provided to handle other data
types, filter keys, validate values, etc.

**Note:** Cloning a non-trivial object is a reasonably heavy operation, due to
the need to recursively iterate down non-primitive properties. Clone should be
used only when a deep clone down to leaf level properties is explicitly
required. This method will also

In many cases (for example, when trying to isolate objects used as hashes for
configuration properties), a shallow copy, using `Y.merge()` is normally
sufficient. If more than one level of isolation is required, `Y.merge()` can be
used selectively at each level which needs to be isolated from the original
without going all the way to leaf properties.

@method clone
@param {object} o what to clone.
@param {boolean} safe if true, objects will not have prototype items from the
    source. If false, they will. In this case, the original is initially
    protected, but the clone is not completely immune from changes to the source
    object prototype. Also, cloned prototype items that are deleted from the
    clone will result in the value of the source prototype being exposed. If
    operating on a non-safe clone, items should be nulled out rather than
    deleted.
@param {function} f optional function to apply to each item in a collection; it
    will be executed prior to applying the value to the new object.
    Return false to prevent the copy.
@param {object} c optional execution context for f.
@param {object} owner Owner object passed when clone is iterating an object.
    Used to set up context for cloned functions.
@param {object} cloned hash of previously cloned objects to avoid multiple
    clones.
@return {Array|Object} the cloned object.
**/
Y.clone = function(o, safe, f, c, owner, cloned) {
    var o2, marked, stamp;

    // Does not attempt to clone:
    //
    // * Non-typeof-object values, "primitive" values don't need cloning.
    //
    // * YUI instances, cloning complex object like YUI instances is not
    //   advised, this is like cloning the world.
    //
    // * DOM nodes (#2528250), common host objects like DOM nodes cannot be
    //   "subclassed" in Firefox and old versions of IE. Trying to use
    //   `Object.create()` or `Y.extend()` on a DOM node will throw an error in
    //   these browsers.
    //
    // Instad, the passed-in `o` will be return as-is when it matches one of the
    // above criteria.
    if (!L.isObject(o) ||
            Y.instanceOf(o, YUI) ||
            (o.addEventListener || o.attachEvent)) {

        return o;
    }

    marked = cloned || {};

    switch (L.type(o)) {
        case 'date':
            return new Date(o);
        case 'regexp':
            // if we do this we need to set the flags too
            // return new RegExp(o.source);
            return o;
        case 'function':
            // o2 = Y.bind(o, owner);
            // break;
            return o;
        case 'array':
            o2 = [];
            break;
        default:

            // #2528250 only one clone of a given object should be created.
            if (o[CLONE_MARKER]) {
                return marked[o[CLONE_MARKER]];
            }

            stamp = Y.guid();

            o2 = (safe) ? {} : Y.Object(o);

            o[CLONE_MARKER] = stamp;
            marked[stamp] = o;
    }

    Y.each(o, function(v, k) {
        if ((k || k === 0) && (!f || (f.call(c || this, v, k, this, o) !== false))) {
            if (k !== CLONE_MARKER) {
                if (k == 'prototype') {
                    // skip the prototype
                // } else if (o[k] === o) {
                //     this[k] = this;
                } else {
                    this[k] =
                        Y.clone(v, safe, f, c, owner || o, marked);
                }
            }
        }
    }, o2);

    if (!cloned) {
        Y.Object.each(marked, function(v, k) {
            if (v[CLONE_MARKER]) {
                try {
                    delete v[CLONE_MARKER];
                } catch (e) {
                    v[CLONE_MARKER] = null;
                }
            }
        }, this);
        marked = null;
    }

    return o2;
};

/**
 * Returns a function that will execute the supplied function in the
 * supplied object's context, optionally adding any additional
 * supplied parameters to the beginning of the arguments collection the
 * supplied to the function.
 *
 * @method bind
 * @param {Function|String} f the function to bind, or a function name
 * to execute on the context object.
 * @param {object} c the execution context.
 * @param {any} args* 0..n arguments to include before the arguments the
 * function is executed with.
 * @return {function} the wrapped function.
 */
Y.bind = function(f, c) {
    var xargs = arguments.length > 2 ?
            Y.Array(arguments, 2, true) : null;
    return function() {
        var fn = L.isString(f) ? c[f] : f,
            args = (xargs) ?
                xargs.concat(Y.Array(arguments, 0, true)) : arguments;
        return fn.apply(c || fn, args);
    };
};

/**
 * Returns a function that will execute the supplied function in the
 * supplied object's context, optionally adding any additional
 * supplied parameters to the end of the arguments the function
 * is executed with.
 *
 * @method rbind
 * @param {Function|String} f the function to bind, or a function name
 * to execute on the context object.
 * @param {object} c the execution context.
 * @param {any} args* 0..n arguments to append to the end of
 * arguments collection supplied to the function.
 * @return {function} the wrapped function.
 */
Y.rbind = function(f, c) {
    var xargs = arguments.length > 2 ? Y.Array(arguments, 2, true) : null;
    return function() {
        var fn = L.isString(f) ? c[f] : f,
            args = (xargs) ?
                Y.Array(arguments, 0, true).concat(xargs) : arguments;
        return fn.apply(c || fn, args);
    };
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/ui-templates.js
// ----------------------------------------------------------------------------------------

/**
  Holds the UITemplates class and some HB template formatters
  This file creates a singleton accessible through Y.Squarespace.UITemplates
  @module squarespace-ui-templates
*/
YUI.add('squarespace-ui-templates', function(Y) {

  /**
    A small, singleton utility class that wraps rendering of precompiled
    handlebars templates.
    @class UITemplates
    @singleton
    @namespace Squarespace
  */
  var UITemplates = Y.Base.create('UITemplates', Y.Base, [],
    // prototype
    {
      /**
        @method render
        @param name {String} The filename of the template in templates-v6/handlebars
        @param context {Object} The context (HB variable values) to render the
          template against
        @return {String} The rendered handlebars template as a string.
      */
      render: function(name, context) {
        var template = this.getCompiledTemplate(name);
        if (!template) {
          throw Error (this.name + ": Could not find UITemplate by the name of: " + name + ". Recompile templates?");
        }
        return template(context || {});
      },

      /**
        Renders a given template and returns it in a node or document fragment
        format
        @method renderAsNodeOrDocFrag
        @param name {String} The filename of the template in templates-v6/handlebars
        @param context {Object} The context (HB variable values) to render the
          template against
        @return {Node|DocumentFragment} A node or document fragment created from
          the rendered template string
      */
      renderAsNodeOrDocFrag: function(name, context) {
        return Y.Node.create(this.render(name, context));
      },

      // sugar methods
      /**
        A sugar method for retrieving the compiled template with a specific file
        name
        @method getCompiledTemplate
        @param name {String} The file name of the compiled template function you
          want
        @return {Function} The compiled template function by that filename or
          undefined if it doesn't exist.
      */
      getCompiledTemplate: function(name) {
        var template = this.get('compiledTemplates')[name];
        if (!template) {
          throw this.name + ': A template by the name ' + name + ' does not exist.';
        }
        return template;
      }
    },
    // static properties
    {
      ATTRS: {
        /**
          @attribute compiledTemplates
          @description An object mapping filenames to compiled template functions
          @type Object
          @default {}
          @readOnly
        */
        compiledTemplates: {
          readOnly: true,
          getter: function() {
            var templates = Y.Handlebars.templates;
            if (!Y.Lang.isObject(templates)) {
              throw this.name + ': No templates are available. Have you loaded your template module?';
            }
            return templates;
          }
        }
      }
    }
  );

  Y.namespace('Squarespace').UITemplates = new UITemplates();

  // TEMP:
  Y.Squarespace.TEMPLATE_FORMATTERS['date'] = function(context, value, format) {
    if (!Y.Lang.isNumber(value)) { return "Invalid date."; }
    return Y.DataType.Date.format(new Date(value), { format: format });
  };

  /*jshint loopfunc:true */
  for (var formatter in Y.Squarespace.TEMPLATE_FORMATTERS) {
    (function(formatter) {
      Y.Handlebars.registerHelper(formatter, function(args) {
        return Y.Squarespace.TEMPLATE_FORMATTERS[formatter].apply(this, [this].concat(Array.prototype.slice.call(arguments)));
      });
    })(formatter);
  }

  for (var predicate in Y.Squarespace.TEMPLATE_PREDICATES) {
    (function(predicate) {

      Y.Handlebars.registerHelper('if-' + predicate.replace('?',''), function(options) {
        return Y.Handlebars.helpers['if'].call(this, function() {
          return Y.Squarespace.TEMPLATE_PREDICATES[predicate](this);
        }, options);
      });
    })(predicate);
  }

  for (var helperName in Y.Squarespace.HANDLEBARS_HELPERS) {
    (function(helperName) {
      Y.Handlebars.registerHelper(helperName, Y.Squarespace.HANDLEBARS_HELPERS[helperName]);
    })(helperName);
  }

}, '1.0', {
  requires: [
    'base-build',
    'handlebars-base',
    'squarespace-template-helpers'
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/queue-promote/queue-promote.js
// ----------------------------------------------------------------------------------------

YUI.add('queue-promote', function (Y, NAME) {

/**
 * Adds methods promote, remove, and indexOf to Queue instances.
 *
 * @module queue-promote
 * @for Queue
 */

Y.mix(Y.Queue.prototype, {
    /**
     * Returns the current index in the queue of the specified item
     *
     * @method indexOf
     * @param needle {MIXED} the item to search for
     * @return {Number} the index of the item or -1 if not found
     */
    indexOf : function (callback) {
        return Y.Array.indexOf(this._q, callback);
    },

    /**
     * Moves the referenced item to the head of the queue
     *
     * @method promote
     * @param item {MIXED} an item in the queue
     */
    promote : function (callback) {
        var index = this.indexOf(callback);

        if (index > -1) {
            this._q.unshift(this._q.splice(index,1)[0]);
        }
    },

    /**
     * Removes the referenced item from the queue
     *
     * @method remove
     * @param item {MIXED} an item in the queue
     */
    remove : function (callback) {
        var index = this.indexOf(callback);

        if (index > -1) {
            this._q.splice(index,1);
        }
    }

});


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/features/features.js
// ----------------------------------------------------------------------------------------

YUI.add('features', function (Y, NAME) {

var feature_tests = {};

/**
Contains the core of YUI's feature test architecture.
@module features
*/

/**
* Feature detection
* @class Features
* @static
*/

Y.mix(Y.namespace('Features'), {

    /**
    * Object hash of all registered feature tests
    * @property tests
    * @type Object
    */
    tests: feature_tests,

    /**
    * Add a test to the system
    *
    *   ```
    *   Y.Features.add("load", "1", {});
    *   ```
    *
    * @method add
    * @param {String} cat The category, right now only 'load' is supported
    * @param {String} name The number sequence of the test, how it's reported in the URL or config: 1, 2, 3
    * @param {Object} o Object containing test properties
    * @param {String} o.name The name of the test
    * @param {Function} o.test The test function to execute, the only argument to the function is the `Y` instance
    * @param {String} o.trigger The module that triggers this test.
    */
    add: function(cat, name, o) {
        feature_tests[cat] = feature_tests[cat] || {};
        feature_tests[cat][name] = o;
    },
    /**
    * Execute all tests of a given category and return the serialized results
    *
    *   ```
    *   caps=1:1;2:1;3:0
    *   ```
    * @method all
    * @param {String} cat The category to execute
    * @param {Array} args The arguments to pass to the test function
    * @return {String} A semi-colon separated string of tests and their success/failure: 1:1;2:1;3:0
    */
    all: function(cat, args) {
        var cat_o = feature_tests[cat],
            // results = {};
            result = [];
        if (cat_o) {
            Y.Object.each(cat_o, function(v, k) {
                result.push(k + ':' + (Y.Features.test(cat, k, args) ? 1 : 0));
            });
        }

        return (result.length) ? result.join(';') : '';
    },
    /**
    * Run a sepecific test and return a Boolean response.
    *
    *   ```
    *   Y.Features.test("load", "1");
    *   ```
    *
    * @method test
    * @param {String} cat The category of the test to run
    * @param {String} name The name of the test to run
    * @param {Array} args The arguments to pass to the test function
    * @return {Boolean} True or false if the test passed/failed.
    */
    test: function(cat, name, args) {
        args = args || [];
        var result, ua, test,
            cat_o = feature_tests[cat],
            feature = cat_o && cat_o[name];

        if (!feature) {
        } else {

            result = feature.result;

            if (Y.Lang.isUndefined(result)) {

                ua = feature.ua;
                if (ua) {
                    result = (Y.UA[ua]);
                }

                test = feature.test;
                if (test && ((!ua) || result)) {
                    result = test.apply(Y, args);
                }

                feature.result = result;
            }
        }

        return result;
    }
});

// Y.Features.add("load", "1", {});
// Y.Features.test("load", "1");
// caps=1:1;2:0;3:1;

/* This file is auto-generated by (yogi loader --yes --mix --start ../) */
/*jshint maxlen:900, eqeqeq: false */
var add = Y.Features.add;
// app-transitions-native
add('load', '0', {
    "name": "app-transitions-native",
    "test": function (Y) {
    var doc  = Y.config.doc,
        node = doc ? doc.documentElement : null;

    if (node && node.style) {
        return ('MozTransition' in node.style || 'WebkitTransition' in node.style || 'transition' in node.style);
    }

    return false;
},
    "trigger": "app-transitions"
});
// autocomplete-list-keys
add('load', '1', {
    "name": "autocomplete-list-keys",
    "test": function (Y) {
    // Only add keyboard support to autocomplete-list if this doesn't appear to
    // be an iOS or Android-based mobile device.
    //
    // There's currently no feasible way to actually detect whether a device has
    // a hardware keyboard, so this sniff will have to do. It can easily be
    // overridden by manually loading the autocomplete-list-keys module.
    //
    // Worth noting: even though iOS supports bluetooth keyboards, Mobile Safari
    // doesn't fire the keyboard events used by AutoCompleteList, so there's
    // no point loading the -keys module even when a bluetooth keyboard may be
    // available.
    return !(Y.UA.ios || Y.UA.android);
},
    "trigger": "autocomplete-list"
});
// dd-gestures
add('load', '2', {
    "name": "dd-gestures",
    "trigger": "dd-drag",
    "ua": "touchEnabled"
});
// dom-style-ie
add('load', '3', {
    "name": "dom-style-ie",
    "test": function (Y) {

    var testFeature = Y.Features.test,
        addFeature = Y.Features.add,
        WINDOW = Y.config.win,
        DOCUMENT = Y.config.doc,
        DOCUMENT_ELEMENT = 'documentElement',
        ret = false;

    addFeature('style', 'computedStyle', {
        test: function() {
            return WINDOW && 'getComputedStyle' in WINDOW;
        }
    });

    addFeature('style', 'opacity', {
        test: function() {
            return DOCUMENT && 'opacity' in DOCUMENT[DOCUMENT_ELEMENT].style;
        }
    });

    ret =  (!testFeature('style', 'opacity') &&
            !testFeature('style', 'computedStyle'));

    return ret;
},
    "trigger": "dom-style"
});
// editor-para-ie
add('load', '4', {
    "name": "editor-para-ie",
    "trigger": "editor-para",
    "ua": "ie",
    "when": "instead"
});
// event-base-ie
add('load', '5', {
    "name": "event-base-ie",
    "test": function(Y) {
    var imp = Y.config.doc && Y.config.doc.implementation;
    return (imp && (!imp.hasFeature('Events', '2.0')));
},
    "trigger": "node-base"
});
// graphics-canvas
add('load', '6', {
    "name": "graphics-canvas",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useCanvas = Y.config.defaultGraphicEngine && Y.config.defaultGraphicEngine == "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
    return (!svg || useCanvas) && (canvas && canvas.getContext && canvas.getContext("2d"));
},
    "trigger": "graphics"
});
// graphics-canvas-default
add('load', '7', {
    "name": "graphics-canvas-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useCanvas = Y.config.defaultGraphicEngine && Y.config.defaultGraphicEngine == "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));
    return (!svg || useCanvas) && (canvas && canvas.getContext && canvas.getContext("2d"));
},
    "trigger": "graphics"
});
// graphics-svg
add('load', '8', {
    "name": "graphics-svg",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useSVG = !Y.config.defaultGraphicEngine || Y.config.defaultGraphicEngine != "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));

    return svg && (useSVG || !canvas);
},
    "trigger": "graphics"
});
// graphics-svg-default
add('load', '9', {
    "name": "graphics-svg-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        useSVG = !Y.config.defaultGraphicEngine || Y.config.defaultGraphicEngine != "canvas",
        canvas = DOCUMENT && DOCUMENT.createElement("canvas"),
        svg = (DOCUMENT && DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"));

    return svg && (useSVG || !canvas);
},
    "trigger": "graphics"
});
// graphics-vml
add('load', '10', {
    "name": "graphics-vml",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        canvas = DOCUMENT && DOCUMENT.createElement("canvas");
    return (DOCUMENT && !DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") && (!canvas || !canvas.getContext || !canvas.getContext("2d")));
},
    "trigger": "graphics"
});
// graphics-vml-default
add('load', '11', {
    "name": "graphics-vml-default",
    "test": function(Y) {
    var DOCUMENT = Y.config.doc,
        canvas = DOCUMENT && DOCUMENT.createElement("canvas");
    return (DOCUMENT && !DOCUMENT.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") && (!canvas || !canvas.getContext || !canvas.getContext("2d")));
},
    "trigger": "graphics"
});
// history-hash-ie
add('load', '12', {
    "name": "history-hash-ie",
    "test": function (Y) {
    var docMode = Y.config.doc && Y.config.doc.documentMode;

    return Y.UA.ie && (!('onhashchange' in Y.config.win) ||
            !docMode || docMode < 8);
},
    "trigger": "history-hash"
});
// io-nodejs
add('load', '13', {
    "name": "io-nodejs",
    "trigger": "io-base",
    "ua": "nodejs"
});
// json-parse-shim
add('load', '14', {
    "name": "json-parse-shim",
    "test": function (Y) {
    var _JSON = Y.config.global.JSON,
        Native = Object.prototype.toString.call(_JSON) === '[object JSON]' && _JSON,
        nativeSupport = Y.config.useNativeJSONParse !== false && !!Native;

    function workingNative( k, v ) {
        return k === "ok" ? true : v;
    }

    // Double check basic functionality.  This is mainly to catch early broken
    // implementations of the JSON API in Firefox 3.1 beta1 and beta2
    if ( nativeSupport ) {
        try {
            nativeSupport = ( Native.parse( '{"ok":false}', workingNative ) ).ok;
        }
        catch ( e ) {
            nativeSupport = false;
        }
    }

    return !nativeSupport;
},
    "trigger": "json-parse"
});
// json-stringify-shim
add('load', '15', {
    "name": "json-stringify-shim",
    "test": function (Y) {
    var _JSON = Y.config.global.JSON,
        Native = Object.prototype.toString.call(_JSON) === '[object JSON]' && _JSON,
        nativeSupport = Y.config.useNativeJSONStringify !== false && !!Native;

    // Double check basic native functionality.  This is primarily to catch broken
    // early JSON API implementations in Firefox 3.1 beta1 and beta2.
    if ( nativeSupport ) {
        try {
            nativeSupport = ( '0' === Native.stringify(0) );
        } catch ( e ) {
            nativeSupport = false;
        }
    }


    return !nativeSupport;
},
    "trigger": "json-stringify"
});
// scrollview-base-ie
add('load', '16', {
    "name": "scrollview-base-ie",
    "trigger": "scrollview-base",
    "ua": "ie"
});
// selector-css2
add('load', '17', {
    "name": "selector-css2",
    "test": function (Y) {
    var DOCUMENT = Y.config.doc,
        ret = DOCUMENT && !('querySelectorAll' in DOCUMENT);

    return ret;
},
    "trigger": "selector"
});
// transition-timer
add('load', '18', {
    "name": "transition-timer",
    "test": function (Y) {
    var DOCUMENT = Y.config.doc,
        node = (DOCUMENT) ? DOCUMENT.documentElement: null,
        ret = true;

    if (node && node.style) {
        ret = !('MozTransition' in node.style || 'WebkitTransition' in node.style || 'transition' in node.style);
    }

    return ret;
},
    "trigger": "transition"
});
// widget-base-ie
add('load', '19', {
    "name": "widget-base-ie",
    "trigger": "widget-base",
    "ua": "ie"
});
// yql-jsonp
add('load', '20', {
    "name": "yql-jsonp",
    "test": function (Y) {
    /* Only load the JSONP module when not in nodejs or winjs
    TODO Make the winjs module a CORS module
    */
    return (!Y.UA.nodejs && !Y.UA.winjs);
},
    "trigger": "yql",
    "when": "after"
});
// yql-nodejs
add('load', '21', {
    "name": "yql-nodejs",
    "trigger": "yql",
    "ua": "nodejs",
    "when": "after"
});
// yql-winjs
add('load', '22', {
    "name": "yql-winjs",
    "trigger": "yql",
    "ua": "winjs",
    "when": "after"
});

}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/datatype-date-parse/datatype-date-parse.js
// ----------------------------------------------------------------------------------------

YUI.add('datatype-date-parse', function (Y, NAME) {

/**
 * Parse number submodule.
 *
 * @module datatype-date
 * @submodule datatype-date-parse
 * @for Date
 */
Y.mix(Y.namespace("Date"), {
    /**
     * Converts data to type Date.
     *
     * @method parse
     * @param data {Date|Number|String} date object, timestamp (string or number), or string parsable by Date.parse
     * @return {Date} a Date object or null if unable to parse
     */
    parse: function(data) {
        var val = new Date(+data || data);
        if (Y.Lang.isDate(val)) {
            return val;
        } else {
            return null;
        }
    }
});

// Add Parsers shortcut
Y.namespace("Parsers").date = Y.Date.parse;

Y.namespace("DataType");
Y.DataType.Date = Y.Date;


}, '3.10.1');



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-position-align/widget-position-align.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-position-align', function (Y, NAME) {

/**
Provides extended/advanced XY positioning support for Widgets, through an
extension.

It builds on top of the `widget-position` module, to provide alignment and
centering support. Future releases aim to add constrained and fixed positioning
support.

@module widget-position-align
**/
var Lang = Y.Lang,

    ALIGN        = 'align',
    ALIGN_ON     = 'alignOn',

    VISIBLE      = 'visible',
    BOUNDING_BOX = 'boundingBox',

    OFFSET_WIDTH    = 'offsetWidth',
    OFFSET_HEIGHT   = 'offsetHeight',
    REGION          = 'region',
    VIEWPORT_REGION = 'viewportRegion';

/**
Widget extension, which can be used to add extended XY positioning support to
the base Widget class, through the `Base.create` method.

**Note:** This extension requires that the `WidgetPosition` extension be added
to the Widget (before `WidgetPositionAlign`, if part of the same extension list
passed to `Base.build`).

@class WidgetPositionAlign
@param {Object} config User configuration object.
@constructor
**/
function PositionAlign (config) {
    if ( ! this._posNode) {
        Y.error('WidgetPosition needs to be added to the Widget, ' +
            'before WidgetPositionAlign is added');
    }

    Y.after(this._bindUIPosAlign, this, 'bindUI');
    Y.after(this._syncUIPosAlign, this, 'syncUI');
}

PositionAlign.ATTRS = {

    /**
    The alignment configuration for this widget.

    The `align` attribute is used to align a reference point on the widget, with
    the reference point on another `Node`, or the viewport. The object which
    `align` expects has the following properties:

      * __`node`__: The `Node` to which the widget is to be aligned. If set to
        `null`, or not provided, the widget is aligned to the viewport.

      * __`points`__: A two element Array, defining the two points on the widget
        and `Node`/viewport which are to be aligned. The first element is the
        point on the widget, and the second element is the point on the
        `Node`/viewport. Supported alignment points are defined as static
        properties on `WidgetPositionAlign`.

    @example Aligns the top-right corner of the widget with the top-left corner
    of the viewport:

        myWidget.set('align', {
            points: [Y.WidgetPositionAlign.TR, Y.WidgetPositionAlign.TL]
        });

    @attribute align
    @type Object
    @default null
    **/
    align: {
        value: null
    },

    /**
    A convenience Attribute, which can be used as a shortcut for the `align`
    Attribute.

    If set to `true`, the widget is centered in the viewport. If set to a `Node`
    reference or valid selector String, the widget will be centered within the
    `Node`. If set to `false`, no center positioning is applied.

    @attribute centered
    @type Boolean|Node
    @default false
    **/
    centered: {
        setter : '_setAlignCenter',
        lazyAdd:false,
        value  :false
    },

    /**
    An Array of Objects corresponding to the `Node`s and events that will cause
    the alignment of this widget to be synced to the DOM.

    The `alignOn` Attribute is expected to be an Array of Objects with the
    following properties:

      * __`eventName`__: The String event name to listen for.

      * __`node`__: The optional `Node` that will fire the event, it can be a
        `Node` reference or a selector String. This will default to the widget's
        `boundingBox`.

    @example Sync this widget's alignment on window resize:

        myWidget.set('alignOn', [
            {
                node     : Y.one('win'),
                eventName: 'resize'
            }
        ]);

    @attribute alignOn
    @type Array
    @default []
    **/
    alignOn: {
        value    : [],
        validator: Y.Lang.isArray
    }
};

/**
Constant used to specify the top-left corner for alignment

@property TL
@type String
@value 'tl'
@static
**/
PositionAlign.TL = 'tl';

/**
Constant used to specify the top-right corner for alignment

@property TR
@type String
@value 'tr'
@static
**/
PositionAlign.TR = 'tr';

/**
Constant used to specify the bottom-left corner for alignment

@property BL
@type String
@value 'bl'
@static
**/
PositionAlign.BL = 'bl';

/**
Constant used to specify the bottom-right corner for alignment

@property BR
@type String
@value 'br'
@static
**/
PositionAlign.BR = 'br';

/**
Constant used to specify the top edge-center point for alignment

@property TC
@type String
@value 'tc'
@static
**/
PositionAlign.TC = 'tc';

/**
Constant used to specify the right edge, center point for alignment

@property RC
@type String
@value 'rc'
@static
**/
PositionAlign.RC = 'rc';

/**
Constant used to specify the bottom edge, center point for alignment

@property BC
@type String
@value 'bc'
@static
**/
PositionAlign.BC = 'bc';

/**
Constant used to specify the left edge, center point for alignment

@property LC
@type String
@value 'lc'
@static
**/
PositionAlign.LC = 'lc';

/**
Constant used to specify the center of widget/node/viewport for alignment

@property CC
@type String
@value 'cc'
@static
*/
PositionAlign.CC = 'cc';

PositionAlign.prototype = {
    // -- Protected Properties -------------------------------------------------

    /**
    Holds the alignment-syncing event handles.

    @property _posAlignUIHandles
    @type Array
    @default null
    @protected
    **/
    _posAlignUIHandles: null,

    // -- Lifecycle Methods ----------------------------------------------------

    destructor: function () {
        this._detachPosAlignUIHandles();
    },

    /**
    Bind event listeners responsible for updating the UI state in response to
    the widget's position-align related state changes.

    This method is invoked after `bindUI` has been invoked for the `Widget`
    class using the AOP infrastructure.

    @method _bindUIPosAlign
    @protected
    **/
    _bindUIPosAlign: function () {
        this.after('alignChange', this._afterAlignChange);
        this.after('alignOnChange', this._afterAlignOnChange);
        this.after('visibleChange', this._syncUIPosAlign);
    },

    /**
    Synchronizes the current `align` Attribute value to the DOM.

    This method is invoked after `syncUI` has been invoked for the `Widget`
    class using the AOP infrastructure.

    @method _syncUIPosAlign
    @protected
    **/
    _syncUIPosAlign: function () {
        var align = this.get(ALIGN);

        this._uiSetVisiblePosAlign(this.get(VISIBLE));

        if (align) {
            this._uiSetAlign(align.node, align.points);
        }
    },

    // -- Public Methods -------------------------------------------------------

    /**
    Aligns this widget to the provided `Node` (or viewport) using the provided
    points. This method can be invoked with no arguments which will cause the
    widget's current `align` Attribute value to be synced to the DOM.

    @example Aligning to the top-left corner of the `<body>`:

        myWidget.align('body',
            [Y.WidgetPositionAlign.TL, Y.WidgetPositionAlign.TR]);

    @method align
    @param {Node|String|null} [node] A reference (or selector String) for the
      `Node` which with the widget is to be aligned. If null is passed in, the
      widget will be aligned with the viewport.
    @param {Array[2]} [points] A two item array specifying the points on the
      widget and `Node`/viewport which will to be aligned. The first entry is
      the point on the widget, and the second entry is the point on the
      `Node`/viewport. Valid point references are defined as static constants on
      the `WidgetPositionAlign` extension.
    @chainable
    **/
    align: function (node, points) {
        if (arguments.length) {
            // Set the `align` Attribute.
            this.set(ALIGN, {
                node  : node,
                points: points
            });
        } else {
            // Sync the current `align` Attribute value to the DOM.
            this._syncUIPosAlign();
        }

        return this;
    },

    /**
    Centers the widget in the viewport, or if a `Node` is passed in, it will
    be centered to that `Node`.

    @method centered
    @param {Node|String} [node] A `Node` reference or selector String defining
      the `Node` which the widget should be centered. If a `Node` is not  passed
      in, then the widget will be centered to the viewport.
    @chainable
    **/
    centered: function (node) {
        return this.align(node, [PositionAlign.CC, PositionAlign.CC]);
    },

    // -- Protected Methods ----------------------------------------------------

    /**
    Default setter for `center` Attribute changes. Sets up the appropriate
    value, and passes it through the to the align attribute.

    @method _setAlignCenter
    @param {Boolean|Node} val The Attribute value being set.
    @return {Boolean|Node} the value passed in.
    @protected
    **/
    _setAlignCenter: function (val) {
        if (val) {
            this.set(ALIGN, {
                node  : val === true ? null : val,
                points: [PositionAlign.CC, PositionAlign.CC]
            });
        }

        return val;
    },

    /**
    Updates the UI to reflect the `align` value passed in.

    **Note:** See the `align` Attribute documentation, for the Object structure
    expected.

    @method _uiSetAlign
    @param {Node|String|null} [node] The node to align to, or null to indicate
      the viewport.
    @param {Array} points The alignment points.
    @protected
    **/
    _uiSetAlign: function (node, points) {
        if ( ! Lang.isArray(points) || points.length !== 2) {
            Y.error('align: Invalid Points Arguments');
            return;
        }

        var nodeRegion = this._getRegion(node),
            widgetPoint, nodePoint, xy;

        if ( ! nodeRegion) {
            // No-op, nothing to align to.
            return;
        }

        widgetPoint = points[0];
        nodePoint   = points[1];

        // TODO: Optimize KWeight - Would lookup table help?
        switch (nodePoint) {
        case PositionAlign.TL:
            xy = [nodeRegion.left, nodeRegion.top];
            break;

        case PositionAlign.TR:
            xy = [nodeRegion.right, nodeRegion.top];
            break;

        case PositionAlign.BL:
            xy = [nodeRegion.left, nodeRegion.bottom];
            break;

        case PositionAlign.BR:
            xy = [nodeRegion.right, nodeRegion.bottom];
            break;

        case PositionAlign.TC:
            xy = [
                nodeRegion.left + Math.floor(nodeRegion.width / 2),
                nodeRegion.top
            ];
            break;

        case PositionAlign.BC:
            xy = [
                nodeRegion.left + Math.floor(nodeRegion.width / 2),
                nodeRegion.bottom
            ];
            break;

        case PositionAlign.LC:
            xy = [
                nodeRegion.left,
                nodeRegion.top + Math.floor(nodeRegion.height / 2)
            ];
            break;

        case PositionAlign.RC:
            xy = [
                nodeRegion.right,
                nodeRegion.top + Math.floor(nodeRegion.height / 2)
            ];
            break;

        case PositionAlign.CC:
            xy = [
                nodeRegion.left + Math.floor(nodeRegion.width / 2),
                nodeRegion.top + Math.floor(nodeRegion.height / 2)
            ];
            break;

        default:
            break;

        }

        if (xy) {
            this._doAlign(widgetPoint, xy[0], xy[1]);
        }
    },

    /**
    Attaches or detaches alignment-syncing event handlers based on the widget's
    `visible` Attribute state.

    @method _uiSetVisiblePosAlign
    @param {Boolean} visible The current value of the widget's `visible`
      Attribute.
    @protected
    **/
    _uiSetVisiblePosAlign: function (visible) {
        if (visible) {
            this._attachPosAlignUIHandles();
        } else {
            this._detachPosAlignUIHandles();
        }
    },

    /**
    Attaches the alignment-syncing event handlers.

    @method _attachPosAlignUIHandles
    @protected
    **/
    _attachPosAlignUIHandles: function () {
        if (this._posAlignUIHandles) {
            // No-op if we have already setup the event handlers.
            return;
        }

        var bb        = this.get(BOUNDING_BOX),
            syncAlign = Y.bind(this._syncUIPosAlign, this),
            handles   = [];

        Y.Array.each(this.get(ALIGN_ON), function (o) {
            var event = o.eventName,
                node  = Y.one(o.node) || bb;

            if (event) {
                handles.push(node.on(event, syncAlign));
            }
        });

        this._posAlignUIHandles = handles;
    },

    /**
    Detaches the alignment-syncing event handlers.

    @method _detachPosAlignUIHandles
    @protected
    **/
    _detachPosAlignUIHandles: function () {
        var handles = this._posAlignUIHandles;
        if (handles) {
            new Y.EventHandle(handles).detach();
            this._posAlignUIHandles = null;
        }
    },

    // -- Private Methods ------------------------------------------------------

    /**
    Helper method, used to align the given point on the widget, with the XY page
    coordinates provided.

    @method _doAlign
    @param {String} widgetPoint Supported point constant
      (e.g. WidgetPositionAlign.TL)
    @param {Number} x X page coordinate to align to.
    @param {Number} y Y page coordinate to align to.
    @private
    **/
    _doAlign: function (widgetPoint, x, y) {
        var widgetNode = this._posNode,
            xy;

        switch (widgetPoint) {
        case PositionAlign.TL:
            xy = [x, y];
            break;

        case PositionAlign.TR:
            xy = [
                x - widgetNode.get(OFFSET_WIDTH),
                y
            ];
            break;

        case PositionAlign.BL:
            xy = [
                x,
                y - widgetNode.get(OFFSET_HEIGHT)
            ];
            break;

        case PositionAlign.BR:
            xy = [
                x - widgetNode.get(OFFSET_WIDTH),
                y - widgetNode.get(OFFSET_HEIGHT)
            ];
            break;

        case PositionAlign.TC:
            xy = [
                x - (widgetNode.get(OFFSET_WIDTH) / 2),
                y
            ];
            break;

        case PositionAlign.BC:
            xy = [
                x - (widgetNode.get(OFFSET_WIDTH) / 2),
                y - widgetNode.get(OFFSET_HEIGHT)
            ];
            break;

        case PositionAlign.LC:
            xy = [
                x,
                y - (widgetNode.get(OFFSET_HEIGHT) / 2)
            ];
            break;

        case PositionAlign.RC:
            xy = [
                x - widgetNode.get(OFFSET_WIDTH),
                y - (widgetNode.get(OFFSET_HEIGHT) / 2)
            ];
            break;

        case PositionAlign.CC:
            xy = [
                x - (widgetNode.get(OFFSET_WIDTH) / 2),
                y - (widgetNode.get(OFFSET_HEIGHT) / 2)
            ];
            break;

        default:
            break;

        }

        if (xy) {
            this.move(xy);
        }
    },

    /**
    Returns the region of the passed-in `Node`, or the viewport region if
    calling with passing in a `Node`.

    @method _getRegion
    @param {Node} [node] The node to get the region of.
    @return {Object} The node's region.
    @private
    **/
    _getRegion: function (node) {
        var nodeRegion;

        if ( ! node) {
            nodeRegion = this._posNode.get(VIEWPORT_REGION);
        } else {
            node = Y.Node.one(node);
            if (node) {
                nodeRegion = node.get(REGION);
            }
        }

        return nodeRegion;
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
    Handles `alignChange` events by updating the UI in response to `align`
    Attribute changes.

    @method _afterAlignChange
    @param {EventFacade} e
    @protected
    **/
    _afterAlignChange: function (e) {
        var align = e.newVal;
        if (align) {
            this._uiSetAlign(align.node, align.points);
        }
    },

    /**
    Handles `alignOnChange` events by updating the alignment-syncing event
    handlers.

    @method _afterAlignOnChange
    @param {EventFacade} e
    @protected
    **/
    _afterAlignOnChange: function(e) {
        this._detachPosAlignUIHandles();

        if (this.get(VISIBLE)) {
            this._attachPosAlignUIHandles();
        }
    }
};

Y.WidgetPositionAlign = PositionAlign;


}, '3.10.1', {"requires": ["widget-position"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/anims.js
// ----------------------------------------------------------------------------------------

/**
  Home of Anim, a tiny utility class for auto animation cleanup
  @module squarespace-anims
*/
YUI.add('squarespace-anims', function(Y) {

  /**
    A class for simple animation management. It stores a group of animations,
    automatically stopping them when this gets destroyed
    @class Anims
    @extends Y.ArrayList
    @namespace Squarespace
    @constructor
  */
  function Anims(config) {
    Anims.superclass.constructor.apply(this, arguments);
  }

  Y.namespace('Squarespace').Anims = Y.extend(Anims, Y.Base, {

    initializer: function() {
      this._items = [];
    },

    destructor: function() {
      // shallow copy of the _items
      var toRemove = [];
      this.each(function(anim) {
        toRemove.push(anim);
      });
      // stop all animations
      Y.Array.each(toRemove, function(anim) {
        if (anim.get("running")) {
          anim.stop(false); // don't complete the animation, doing that causes flicker
        }
        anim.destroy();
      });
      Y.detach(this.get('id') + '|*');
    },


    /**
      Adds like an array list normally would, except it first checks if the node
      you're animating is valid
      @method add
      @param anim {Y.Anim} An animation instance
    */
    add: function(anim) {
      // Warn you of your terrible code
      if (!anim.get("node")) {
        throw this.name + ": Animation doesn't specify a node";
      }
      if (!anim.get("node").ancestor("body")) { // node not in the dom
        console.warn(this.name + ": Animation with a YUI node not in the DOM added");
      } else if (!anim.get("node")._node) { // yui node isn't pointing to an actual DOM node
        console.warn(this.name + ": Animation with a _node = null added");
      }

      anim.on(this.get('id') + '|end', function(e) {
        this.remove(anim);
      }, this);

      this._items.push(anim);
    },

    /**
      Removes an item form this array list
      @method remove
      @param item {Y.Anim|Number} An animation instance or the index of the item
        to remove
      @return {Y.Anim} The removed instance
    */
    remove: function(item) {
      if (Y.Lang.isNumber(item)) {
        return this._items.splice(item, 1);
      }
      else {
        var i = this._items.indexOf(item);
        if (i !== -1) {
          return this._items.splice(this._items.indexOf(item), 1);
        }
      }
    }

  }, {
    NAME: 'anims'
  });
  Y.augment(Anims, Y.ArrayList);

}, '1.0', { requires: [
  'base',
  'base-build',
  'arraylist'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/animations.js
// ----------------------------------------------------------------------------------------

/**
* Holds the set of beautiful, Squarespace default animations,
* available as node plugins. Just plug one in and call show/hide
*
* @module squarespace-animations
*/
YUI.add('squarespace-animations', function(Y) {

  Y.namespace('Squarespace.Animations');

  var STATUS_CLASS_PREFIX  = 'display-status-',
      PLUGGED_CLASS_SUFFIX = '-plugged',

      SHOWN_EVENT          = 'shown',
      HIDDEN_EVENT         = 'hidden';

  // ------------------------------------------------------------------------------------------------------------
  // Expandable
  // ------------------------------------------------------------------------------------------------------------
  Y.Squarespace.Animations.Expandable =  Y.Base.create('expandable', Y.Plugin.Base, [], {
    initializer: function(config) {
      this.doBefore('show', this.open);
      this.doBefore('hide', this.close);
      this._running = false;
    },

    close: function(hard) {
      var host = this.get('host'),
          easing = this.get('easing'),
          duration = this.get('duration'),
          anim,
          wrapper;

      // In the special case where the node to be animated
      // is not in the DOM, do not animate, just perform
      // a hard close.
      hard = (host.inDoc() ? hard : true);

      host.fire('close');
      if (hard) {
        this._hardClose();
      } else {
        if (!this._running) {
          this._running = true;
          host.wrap('<div class="expandable-plugin-wrapper"></div>');

          wrapper = host.ancestor('.expandable-plugin-wrapper');
          wrapper.setStyles({
            'overflow': 'hidden',
            'height': host.get('offsetHeight')
          });

          this._closeWrapper = wrapper;

          anim = new Y.Anim({
            node: wrapper,
            to: {
              height: 0
            },
            easing: easing,
            duration: duration
          });

          anim.on('end', function() {

            if(host.inDoc()) {
              host.setStyles({
                'height': 0,
                'overflow': 'hidden',
                'display': 'none'
              });
              host.unwrap();
              host.addClass('expandable-hidden');
            }
            this._running = false;
            host.fire('closed');
          }, this);

          this._closeAnim = anim;
          anim.run();

        }
      }

      return new Y.Do.Prevent('Expandable prevented default hide.');
    },

    _hardClose: function() {
      var host = this.get('host');

      host.setStyles({
        'height': 0,
        'overflow': 'hidden',
        'display': 'none'
      });

      host.addClass('expandable-hidden');

      host.fire('closed');
    },


    _hardOpen: function() {
      var host = this.get('host');

      host.setStyles({
        'height': null,
        'display': null
      });

      host.removeClass('expandable-hidden');

      host.fire('opened');
    },

    open: function(hard) {
      var host = this.get('host'),
          easing = this.get('easing'),
          duration = this.get('duration'),
          anim,
          hostHeight,
          proxy,
          wrapper;


      // In the special case where the node to be animated
      // is not in the DOM, do not animate, just perform
      // a hard open.
      hard = (host.inDoc() ? hard : true);

      host.fire('open');
      if (hard) {
        this._hardOpen();
      } else if (!this._running) {
        this._running = true;
        if (host.getComputedStyle('display') === 'none') {
          host.setStyle('display', null);
        }

        proxy = host.cloneNode(true);
        proxy.setStyles({
          'height': 'auto',
          'visibility': 'hidden',
          'display': null,
          'position': 'absolute',
          'width' : host.get('offsetWidth')
        });
        host.insert(proxy, 'before');
        hostHeight = proxy.get('offsetHeight') + parseInt(proxy.getComputedStyle('marginTop'), 10) +
                                                 parseInt(proxy.getComputedStyle('marginBottom'), 10);
        proxy.remove(true);

        host.wrap('<div class="expandable-plugin-wrapper"></div>');

        wrapper = host.ancestor('.expandable-plugin-wrapper');
        wrapper.setStyles({
          'overflow': 'hidden',
          'height': 0
        });

        host.setStyles({
          'height': null,
          'overflow': null
        });

        this._openWrapper = wrapper;

        anim = new Y.Anim({
          node: wrapper,
          to: {
            height: hostHeight
          },
          easing: easing,
          duration: duration
        });

        anim.on('end', function() {
          var host = this.get('host');
          if (host) {
            this._running = false;
            host.unwrap();
            host.removeClass('expandable-hidden');
            host.fire('opened');
          }
        }, this);

        this._openAnim = anim;
        anim.run();
      }

      return new Y.Do.Prevent('Expandable prevented default show.');
    },

    destructor: function() {

      if (this._closeWrapper) {
        this._closeWrapper.remove(true);
      }

      if (this._openWrapper) {
        this._openWrapper.remove(true);
      }

      if (this._openAnim) {
        this._openAnim.stop().destroy();
      }

      if (this._closeAnim) {
        this._closeAnim.stop().destroy();
      }
    }
  },
  {
    NS: 'expandablePlugin',
    ATTRS: {
      duration: {
        value: 0.3,
        validator: Y.Lang.isNumber
      },

      easing: {
        value: Y.Easing.easeOutStrong
      }
    }
  });


  // ------------------------------------------------------------------------------------------------------------
  // Fadeable
  // ------------------------------------------------------------------------------------------------------------
  Y.Squarespace.Animations.Fadeable = Y.Base.create('fadeable', Y.Plugin.Base, [], {

    initializer: function(config) {
      this.beforeHostMethod('show', this.show);
      this.beforeHostMethod('hide', this.hide);
      this.get('host').addClass(this.name + PLUGGED_CLASS_SUFFIX);
      this._onlyUseOpacity = (config.onlyUseOpacity === undefined) ? false : config.onlyUseOpacity;
      this._running = false;
    },

    destructor: function() {
      if (this._anim) {
        this._anim.stop().destroy();
      }
      this.get('host').removeClass(this.name + PLUGGED_CLASS_SUFFIX);
    },

    show: function(hard) {
      return this._changeVisibility(true, hard);
    },

    hide: function(hard) {
      return this._changeVisibility(false, hard);
    },

    _changeVisibility: function(showing, hard) {

      var host = this.get('host');

      hard = (host.inDoc() ? hard : true);

      if (showing) {
        host.removeClass(STATUS_CLASS_PREFIX + 'hidden');
      }

      if (hard) {

        this._hardChangeVisibility(showing);

      } else {

        if (this._anim) {
          this._anim.stop().destroy();
          this._anim = null;
        }

        // remove conflicting inline style
        if (showing && host.getComputedStyle('display') === 'none') {
          host.setStyle('display', null);
        }

        this._anim = new Y.Anim({
          node: host,
          to: {
            opacity: (showing ? this.get('opacity') : 0)
          },
          easing: this.get('easing'),
          duration: this.get('duration')
        });

        this._anim.onceAfter('end', function() {
          this._hardChangeVisibility(showing);

          this._running = false;
          if (!showing && !this._onlyUseOpacity && host.getDOMNode()) {
            host.setStyle('display', 'none');
          }
          host.fire(showing ? 'shown' : 'hidden');
          delete this._anim;

        }, this);

        this._anim.run();
      }

      return new Y.Do.Prevent('Fadeable prevented default ' + (showing ? 'show' : 'hide') + ' and used its own.');

    },

    _hardChangeVisibility: function(showing) {
      var host = this.get('host');

      if (!showing) {
        host.addClass(STATUS_CLASS_PREFIX + 'hidden');
      }

      host.setStyles({
        'opacity': (showing ? this.get('opacity') : 0)
      });

      this._anim = null;

      host.fire(showing ? SHOWN_EVENT : HIDDEN_EVENT);
    }

  },
  {
    NS: 'fadeablePlugin',
    ATTRS: {
      duration: {
        value: 0.3,
        validator: Y.Lang.isNumber
      },

      easing: {
        value: Y.Easing.easeOutStrong
      },

      opacity: {
        value: 1
      }
    }
  });


  // ------------------------------------------------------------------------------------------------------------
  // Scalable
  // ------------------------------------------------------------------------------------------------------------
  Y.Squarespace.Animations.Scalable = Y.Base.create('scalable', Y.Plugin.Base, [], {

    initializer: function(config) {
      this.doBefore('show', this.show);
      this.doBefore('hide', this.hide);
      this._running = false;
    },

    show: function(hard) {
      return this._changeVisibility(true, hard);
    },

    hide: function(hard) {
      return this._changeVisibility(false, hard);
    },

    _changeVisibility: function(showing, hard) {
      var host     = this.get('host'),
          easing   = this.get('easing'),
          duration = this.get('duration'),
          transformOkay = !!(this.get('host').getDOMNode().style.transitionDuration || Y.DOM.CUSTOM_STYLES.transitionDuration);


      this.fire(showing ? 'show' : 'hide');
      host.fire(showing ? 'show' : 'hide');

      if (showing) {
        host.removeClass('sqs-scalable-hidden');
      }

      hard = (host.inDoc() ? hard : true);

      if (hard) {

        this._hardChangeVisibility(showing);

        if (!showing) {
          host.addClass('sqs-scalable-hidden');
        }

      } else if (!this._running) {

        this._running = true;

        var eventFired = false;

        var eventFn = Y.bind(function() {
          if (eventFired) { return; }

          eventFired = true;

          if (!host.getDOMNode()) { return; }

          this._running = false;

          if (!showing) {
            host.addClass('sqs-scalable-hidden');
          }

          this.fire(showing ? SHOWN_EVENT : HIDDEN_EVENT);
          host.fire(showing ? SHOWN_EVENT : HIDDEN_EVENT);
        }, this);

        var opacityOptions = {
          start: showing ? 0 : 1,
          stop: (showing ? 1 : 0) * 100,
          time: 0,
          duration: duration,
          effect: 'easeOut'
        };

        if (showing) {
          host.setStyle('visibility', 'visible');

          opacityOptions.onStop = Y.bind(function() {
            if (!this.get('destroyed')) {
              eventFn();
            }
          }, this);
        } else {
          opacityOptions.onStop = Y.bind(function() {
            if (!this.get('destroyed')) {
              host.setStyle('visibility', 'hidden');
              eventFn();
            }
          }, this);
        }

        var jsTweenOptions = {
          opacity: opacityOptions
        };

        if (transformOkay) {
          jsTweenOptions.transform = {
            start: 'scale(' + (showing ? '0.94' : '1') + ')',
            stop: 'scale(' + (showing ? '1' : '0.94') + ')',
            time: 0,
            duration: duration,
            effect: 'easeOut',
            onStop: Y.bind(function() {
              if (!this.get('destroyed')) {
                host.setStyle('transform', null);
              }
            }, this)
          };
        }

        JSTween.tween(host.getDOMNode(), jsTweenOptions);
        JSTween.play();
      }

      return new Y.Do.Prevent('Scalable prevented default ' + (showing ? 'show' : 'hide') + ' and used its own.');
    },

    _hardChangeVisibility: function(showing) {
      var host = this.get('host');
      var transformOkay = !!(this.get('host').getDOMNode().style.transitionDuration || Y.DOM.CUSTOM_STYLES.transitionDuration);
      var duration = this.get('duration');

      if (transformOkay) {
        host.setStyles({
          'visibility': (showing ? 'visible' : 'hidden'),
          'opacity': (showing ? 1 : 0),
          'transform': 'scale(' + (showing ? '1' : '0.94') + ')'
        });
      } else {
        host.setStyles({
          'visibility': (showing ? 'visible' : 'hidden'),
          'opacity': (showing ? 1 : 0)
        });
      }

      host.fire(showing ? SHOWN_EVENT : HIDDEN_EVENT);
    }

  },
  {
    NS: 'scalablePlugin',
    ATTRS: {
      duration: {
        value: 0.3,
        validator: Y.Lang.isNumber
      },

      easing: {
        value: Y.Easing.easeOutStrong
      },

      opacity: {
        value: 1
      }
    }
  });


  // ------------------------------------------------------------------------------------------------------------
  // Slideable
  // ------------------------------------------------------------------------------------------------------------
  Y.Squarespace.Animations.Slideable = Y.Base.create('slideable', Y.Plugin.Base, [], {
    initializer: function(config) {
      this.doBefore('show', this.show);
      this.doBefore('hide', this.hide);
      this._running = false;
    },

    show: function(hard) {
      return this._changeVisibility(true, hard);
    },

    hide: function(hard) {
      return this._changeVisibility(false, hard);
    },

    _changeVisibility: function(showing, hard) {
      var host     = this.get('host'),
          easing   = this.get('easing'),
          duration = this.get('duration'),
          direction = this.get('direction');

      host.fire(showing ? 'show' : 'hide');

      hard = (host.inDoc() ? hard : true);

      if (hard) {
        this._hardChangeVisibility(showing);
      } else {
        var offset;
        if (showing) { // showing

          host.setStyles({
            display: 'block',
            visibility: 'hidden'
          });

          var fromLeft = (direction == 'left' ? 1 : -1) * host.get('offsetWidth');
          host.setStyles({
            visibility: null
          });

          console.log('showing node (fromLeft: ' + fromLeft + ', toLeft: 0)');

          host.anim({
            left: 0
          }, {
            from: {
              left: fromLeft
            },
            duration: duration,
            easing: easing
          }).run();

        } else { // hiding.

          if (host.activeAnim) {
            host.activeAnim.stop(true);
          }

          host.setStyles({
            display: 'block',
            left: 0
          });

          var toLeft = (direction == 'left' ? -1 : 1) * host.get('offsetWidth');

          console.log('hiding node (fromLeft: 0, toLeft: ' + toLeft + ')');

          host.anim({
            left: toLeft
          }, {
            from: {
              left: 0
            },
            duration: duration,
            easing: easing,
            end: function() {
              host.setStyles({
                display: 'none',
                left: 0
              });
            }
          }).run();
        }

      }

      return new Y.Do.Prevent('Slideable prevented default ' + (showing ? 'show' : 'hide') + ' and used its own.');
    },

    _hardChangeVisibility: function(showing) {
      var host = this.get('host');

      host.setStyles({
        'display': showing ? 'block' : 'none'
      });

      host.fire(showing ? SHOWN_EVENT : HIDDEN_EVENT);
    }
  },
  {
    NS: 'slideablePlugin',
    ATTRS: {
      duration: {
        value: 0.2,
        validator: Y.Lang.isNumber
      },

      easing: {
        value: Y.Easing.easeOutStrong
      },

      opacity: {
        value: 1
      }
    }
  });
}, '1.0', { requires: [
  'base',
  'plugin',
  'anim',
  'anim-easing',
  'animations-css',
  'transition',
  'thirdparty-jstween'
]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/selector-native/selector-native.js
// ----------------------------------------------------------------------------------------

YUI.add('selector-native', function (Y, NAME) {

(function(Y) {
/**
 * The selector-native module provides support for native querySelector
 * @module dom
 * @submodule selector-native
 * @for Selector
 */

/**
 * Provides support for using CSS selectors to query the DOM
 * @class Selector
 * @static
 * @for Selector
 */

Y.namespace('Selector'); // allow native module to standalone

var COMPARE_DOCUMENT_POSITION = 'compareDocumentPosition',
    OWNER_DOCUMENT = 'ownerDocument';

var Selector = {
    _types: {
        esc: {
            token: '\uE000',
            re: /\\[:\[\]\(\)#\.\'\>+~"]/gi
        },

        attr: {
            token: '\uE001',
            re: /(\[[^\]]*\])/g
        },

        pseudo: {
            token: '\uE002',
            re: /(\([^\)]*\))/g
        }
    },

    useNative: true,

    _escapeId: function(id) {
        if (id) {
            id = id.replace(/([:\[\]\(\)#\.'<>+~"])/g,'\\$1');
        }
        return id;
    },

    _compare: ('sourceIndex' in Y.config.doc.documentElement) ?
        function(nodeA, nodeB) {
            var a = nodeA.sourceIndex,
                b = nodeB.sourceIndex;

            if (a === b) {
                return 0;
            } else if (a > b) {
                return 1;
            }

            return -1;

        } : (Y.config.doc.documentElement[COMPARE_DOCUMENT_POSITION] ?
        function(nodeA, nodeB) {
            if (nodeA[COMPARE_DOCUMENT_POSITION](nodeB) & 4) {
                return -1;
            } else {
                return 1;
            }
        } :
        function(nodeA, nodeB) {
            var rangeA, rangeB, compare;
            if (nodeA && nodeB) {
                rangeA = nodeA[OWNER_DOCUMENT].createRange();
                rangeA.setStart(nodeA, 0);
                rangeB = nodeB[OWNER_DOCUMENT].createRange();
                rangeB.setStart(nodeB, 0);
                compare = rangeA.compareBoundaryPoints(1, rangeB); // 1 === Range.START_TO_END
            }

            return compare;

    }),

    _sort: function(nodes) {
        if (nodes) {
            nodes = Y.Array(nodes, 0, true);
            if (nodes.sort) {
                nodes.sort(Selector._compare);
            }
        }

        return nodes;
    },

    _deDupe: function(nodes) {
        var ret = [],
            i, node;

        for (i = 0; (node = nodes[i++]);) {
            if (!node._found) {
                ret[ret.length] = node;
                node._found = true;
            }
        }

        for (i = 0; (node = ret[i++]);) {
            node._found = null;
            node.removeAttribute('_found');
        }

        return ret;
    },

    /**
     * Retrieves a set of nodes based on a given CSS selector.
     * @method query
     *
     * @param {string} selector The CSS Selector to test the node against.
     * @param {HTMLElement} root optional An HTMLElement to start the query from. Defaults to Y.config.doc
     * @param {Boolean} firstOnly optional Whether or not to return only the first match.
     * @return {Array} An array of nodes that match the given selector.
     * @static
     */
    query: function(selector, root, firstOnly, skipNative) {
        root = root || Y.config.doc;
        var ret = [],
            useNative = (Y.Selector.useNative && Y.config.doc.querySelector && !skipNative),
            queries = [[selector, root]],
            query,
            result,
            i,
            fn = (useNative) ? Y.Selector._nativeQuery : Y.Selector._bruteQuery;

        if (selector && fn) {
            // split group into seperate queries
            if (!skipNative && // already done if skipping
                    (!useNative || root.tagName)) { // split native when element scoping is needed
                queries = Selector._splitQueries(selector, root);
            }

            for (i = 0; (query = queries[i++]);) {
                result = fn(query[0], query[1], firstOnly);
                if (!firstOnly) { // coerce DOM Collection to Array
                    result = Y.Array(result, 0, true);
                }
                if (result) {
                    ret = ret.concat(result);
                }
            }

            if (queries.length > 1) { // remove dupes and sort by doc order
                ret = Selector._sort(Selector._deDupe(ret));
            }
        }

        return (firstOnly) ? (ret[0] || null) : ret;

    },

    _replaceSelector: function(selector) {
        var esc = Y.Selector._parse('esc', selector), // pull escaped colon, brackets, etc.
            attrs,
            pseudos;

        // first replace escaped chars, which could be present in attrs or pseudos
        selector = Y.Selector._replace('esc', selector);

        // then replace pseudos before attrs to avoid replacing :not([foo])
        pseudos = Y.Selector._parse('pseudo', selector);
        selector = Selector._replace('pseudo', selector);

        attrs = Y.Selector._parse('attr', selector);
        selector = Y.Selector._replace('attr', selector);

        return {
            esc: esc,
            attrs: attrs,
            pseudos: pseudos,
            selector: selector
        };
    },

    _restoreSelector: function(replaced) {
        var selector = replaced.selector;
        selector = Y.Selector._restore('attr', selector, replaced.attrs);
        selector = Y.Selector._restore('pseudo', selector, replaced.pseudos);
        selector = Y.Selector._restore('esc', selector, replaced.esc);
        return selector;
    },

    _replaceCommas: function(selector) {
        var replaced = Y.Selector._replaceSelector(selector),
            selector = replaced.selector;

        if (selector) {
            selector = selector.replace(/,/g, '\uE007');
            replaced.selector = selector;
            selector = Y.Selector._restoreSelector(replaced);
        }
        return selector;
    },

    // allows element scoped queries to begin with combinator
    // e.g. query('> p', document.body) === query('body > p')
    _splitQueries: function(selector, node) {
        if (selector.indexOf(',') > -1) {
            selector = Y.Selector._replaceCommas(selector);
        }

        var groups = selector.split('\uE007'), // split on replaced comma token
            queries = [],
            prefix = '',
            id,
            i,
            len;

        if (node) {
            // enforce for element scoping
            if (node.nodeType === 1) { // Elements only
                id = Y.Selector._escapeId(Y.DOM.getId(node));

                if (!id) {
                    id = Y.guid();
                    Y.DOM.setId(node, id);
                }

                prefix = '[id="' + id + '"] ';
            }

            for (i = 0, len = groups.length; i < len; ++i) {
                selector =  prefix + groups[i];
                queries.push([selector, node]);
            }
        }

        return queries;
    },

    _nativeQuery: function(selector, root, one) {
        if (Y.UA.webkit && selector.indexOf(':checked') > -1 &&
                (Y.Selector.pseudos && Y.Selector.pseudos.checked)) { // webkit (chrome, safari) fails to pick up "selected"  with "checked"
            return Y.Selector.query(selector, root, one, true); // redo with skipNative true to try brute query
        }
        try {
            return root['querySelector' + (one ? '' : 'All')](selector);
        } catch(e) { // fallback to brute if available
            return Y.Selector.query(selector, root, one, true); // redo with skipNative true
        }
    },

    filter: function(nodes, selector) {
        var ret = [],
            i, node;

        if (nodes && selector) {
            for (i = 0; (node = nodes[i++]);) {
                if (Y.Selector.test(node, selector)) {
                    ret[ret.length] = node;
                }
            }
        } else {
        }

        return ret;
    },

    test: function(node, selector, root) {
        var ret = false,
            useFrag = false,
            groups,
            parent,
            item,
            items,
            frag,
            id,
            i, j, group;

        if (node && node.tagName) { // only test HTMLElements

            if (typeof selector == 'function') { // test with function
                ret = selector.call(node, node);
            } else { // test with query
                // we need a root if off-doc
                groups = selector.split(',');
                if (!root && !Y.DOM.inDoc(node)) {
                    parent = node.parentNode;
                    if (parent) {
                        root = parent;
                    } else { // only use frag when no parent to query
                        frag = node[OWNER_DOCUMENT].createDocumentFragment();
                        frag.appendChild(node);
                        root = frag;
                        useFrag = true;
                    }
                }
                root = root || node[OWNER_DOCUMENT];

                id = Y.Selector._escapeId(Y.DOM.getId(node));
                if (!id) {
                    id = Y.guid();
                    Y.DOM.setId(node, id);
                }

                for (i = 0; (group = groups[i++]);) { // TODO: off-dom test
                    group += '[id="' + id + '"]';
                    items = Y.Selector.query(group, root);

                    for (j = 0; item = items[j++];) {
                        if (item === node) {
                            ret = true;
                            break;
                        }
                    }
                    if (ret) {
                        break;
                    }
                }

                if (useFrag) { // cleanup
                    frag.removeChild(node);
                }
            };
        }

        return ret;
    },

    /**
     * A convenience function to emulate Y.Node's aNode.ancestor(selector).
     * @param {HTMLElement} element An HTMLElement to start the query from.
     * @param {String} selector The CSS selector to test the node against.
     * @return {HTMLElement} The ancestor node matching the selector, or null.
     * @param {Boolean} testSelf optional Whether or not to include the element in the scan
     * @static
     * @method ancestor
     */
    ancestor: function (element, selector, testSelf) {
        return Y.DOM.ancestor(element, function(n) {
            return Y.Selector.test(n, selector);
        }, testSelf);
    },

    _parse: function(name, selector) {
        return selector.match(Y.Selector._types[name].re);
    },

    _replace: function(name, selector) {
        var o = Y.Selector._types[name];
        return selector.replace(o.re, o.token);
    },

    _restore: function(name, selector, items) {
        if (items) {
            var token = Y.Selector._types[name].token,
                i, len;
            for (i = 0, len = items.length; i < len; ++i) {
                selector = selector.replace(token, items[i]);
            }
        }
        return selector;
    }
};

Y.mix(Y.Selector, Selector, true);

})(Y);


}, '3.10.1', {"requires": ["dom-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/transition/transition.js
// ----------------------------------------------------------------------------------------

YUI.add('transition', function (Y, NAME) {

/**
* Provides the transition method for Node.
* Transition has no API of its own, but adds the transition method to Node.
*
* @module transition
* @requires node-style
*/

var CAMEL_VENDOR_PREFIX = '',
    VENDOR_PREFIX = '',
    DOCUMENT = Y.config.doc,
    DOCUMENT_ELEMENT = 'documentElement',
    DOCUMENT_STYLE = DOCUMENT[DOCUMENT_ELEMENT].style,
    TRANSITION_CAMEL = 'transition',
    TRANSITION_PROPERTY_CAMEL = 'transitionProperty',
    TRANSITION_PROPERTY,
    TRANSITION_DURATION,
    TRANSITION_TIMING_FUNCTION,
    TRANSITION_DELAY,
    TRANSITION_END,
    ON_TRANSITION_END,

    EMPTY_OBJ = {},

    VENDORS = [
        'Webkit',
        'Moz'
    ],

    VENDOR_TRANSITION_END = {
        Webkit: 'webkitTransitionEnd'
    },

/**
 * A class for constructing transition instances.
 * Adds the "transition" method to Node.
 * @class Transition
 * @constructor
 */

Transition = function() {
    this.init.apply(this, arguments);
};

// One off handling of transform-prefixing.
Transition._TRANSFORM = 'transform';

Transition._toCamel = function(property) {
    property = property.replace(/-([a-z])/gi, function(m0, m1) {
        return m1.toUpperCase();
    });

    return property;
};

Transition._toHyphen = function(property) {
    property = property.replace(/([A-Z]?)([a-z]+)([A-Z]?)/g, function(m0, m1, m2, m3) {
        var str = ((m1) ? '-' + m1.toLowerCase() : '') + m2;

        if (m3) {
            str += '-' + m3.toLowerCase();
        }

        return str;
    });

    return property;
};

Transition.SHOW_TRANSITION = 'fadeIn';
Transition.HIDE_TRANSITION = 'fadeOut';

Transition.useNative = false;

// Map transition properties to vendor-specific versions.
if ('transition' in DOCUMENT_STYLE
    && 'transitionProperty' in DOCUMENT_STYLE
    && 'transitionDuration' in DOCUMENT_STYLE
    && 'transitionTimingFunction' in DOCUMENT_STYLE
    && 'transitionDelay' in DOCUMENT_STYLE) {
    Transition.useNative = true;
    Transition.supported = true; // TODO: remove
} else {
    Y.Array.each(VENDORS, function(val) { // then vendor specific
        var property = val + 'Transition';
        if (property in DOCUMENT[DOCUMENT_ELEMENT].style) {
            CAMEL_VENDOR_PREFIX = val;
            VENDOR_PREFIX       = Transition._toHyphen(val) + '-';

            Transition.useNative = true;
            Transition.supported = true; // TODO: remove
            Transition._VENDOR_PREFIX = val;
        }
    });
}

// Map transform property to vendor-specific versions.
// One-off required for cssText injection.
if (typeof DOCUMENT_STYLE.transform === 'undefined') {
    Y.Array.each(VENDORS, function(val) { // then vendor specific
        var property = val + 'Transform';
        if (typeof DOCUMENT_STYLE[property] !== 'undefined') {
            Transition._TRANSFORM = property;
        }
    });
}

if (CAMEL_VENDOR_PREFIX) {
    TRANSITION_CAMEL          = CAMEL_VENDOR_PREFIX + 'Transition';
    TRANSITION_PROPERTY_CAMEL = CAMEL_VENDOR_PREFIX + 'TransitionProperty';
}

TRANSITION_PROPERTY        = VENDOR_PREFIX + 'transition-property';
TRANSITION_DURATION        = VENDOR_PREFIX + 'transition-duration';
TRANSITION_TIMING_FUNCTION = VENDOR_PREFIX + 'transition-timing-function';
TRANSITION_DELAY           = VENDOR_PREFIX + 'transition-delay';

TRANSITION_END    = 'transitionend';
ON_TRANSITION_END = 'on' + CAMEL_VENDOR_PREFIX.toLowerCase() + 'transitionend';
TRANSITION_END    = VENDOR_TRANSITION_END[CAMEL_VENDOR_PREFIX] || TRANSITION_END;

Transition.fx = {};
Transition.toggles = {};

Transition._hasEnd = {};

Transition._reKeywords = /^(?:node|duration|iterations|easing|delay|on|onstart|onend)$/i;

Y.Node.DOM_EVENTS[TRANSITION_END] = 1;

Transition.NAME = 'transition';

Transition.DEFAULT_EASING = 'ease';
Transition.DEFAULT_DURATION = 0.5;
Transition.DEFAULT_DELAY = 0;

Transition._nodeAttrs = {};

Transition.prototype = {
    constructor: Transition,
    init: function(node, config) {
        var anim = this;
        anim._node = node;
        if (!anim._running && config) {
            anim._config = config;
            node._transition = anim; // cache for reuse

            anim._duration = ('duration' in config) ?
                config.duration: anim.constructor.DEFAULT_DURATION;

            anim._delay = ('delay' in config) ?
                config.delay: anim.constructor.DEFAULT_DELAY;

            anim._easing = config.easing || anim.constructor.DEFAULT_EASING;
            anim._count = 0; // track number of animated properties
            anim._running = false;

        }

        return anim;
    },

    addProperty: function(prop, config) {
        var anim = this,
            node = this._node,
            uid = Y.stamp(node),
            nodeInstance = Y.one(node),
            attrs = Transition._nodeAttrs[uid],
            computed,
            compareVal,
            dur,
            attr,
            val;

        if (!attrs) {
            attrs = Transition._nodeAttrs[uid] = {};
        }

        attr = attrs[prop];

        // might just be a value
        if (config && config.value !== undefined) {
            val = config.value;
        } else if (config !== undefined) {
            val = config;
            config = EMPTY_OBJ;
        }

        if (typeof val === 'function') {
            val = val.call(nodeInstance, nodeInstance);
        }

        if (attr && attr.transition) {
            // take control if another transition owns this property
            if (attr.transition !== anim) {
                attr.transition._count--; // remapping attr to this transition
            }
        }

        anim._count++; // properties per transition

        // make 0 async and fire events
        dur = ((typeof config.duration !== 'undefined') ? config.duration :
                    anim._duration) || 0.0001;

        attrs[prop] = {
            value: val,
            duration: dur,
            delay: (typeof config.delay !== 'undefined') ? config.delay :
                    anim._delay,

            easing: config.easing || anim._easing,

            transition: anim
        };

        // native end event doesnt fire when setting to same value
        // supplementing with timer
        // val may be a string or number (height: 0, etc), but computedStyle is always string
        computed = Y.DOM.getComputedStyle(node, prop);
        compareVal = (typeof val === 'string') ? computed : parseFloat(computed);

        if (Transition.useNative && compareVal === val) {
            setTimeout(function() {
                anim._onNativeEnd.call(node, {
                    propertyName: prop,
                    elapsedTime: dur
                });
            }, dur * 1000);
        }
    },

    removeProperty: function(prop) {
        var anim = this,
            attrs = Transition._nodeAttrs[Y.stamp(anim._node)];

        if (attrs && attrs[prop]) {
            delete attrs[prop];
            anim._count--;
        }

    },

    initAttrs: function(config) {
        var attr,
            node = this._node;

        if (config.transform && !config[Transition._TRANSFORM]) {
            config[Transition._TRANSFORM] = config.transform;
            delete config.transform; // TODO: copy
        }

        for (attr in config) {
            if (config.hasOwnProperty(attr) && !Transition._reKeywords.test(attr)) {
                this.addProperty(attr, config[attr]);

                // when size is auto or % webkit starts from zero instead of computed
                // (https://bugs.webkit.org/show_bug.cgi?id=16020)
                // TODO: selective set
                if (node.style[attr] === '') {
                    Y.DOM.setStyle(node, attr, Y.DOM.getComputedStyle(node, attr));
                }
            }
        }
    },

    /**
     * Starts or an animation.
     * @method run
     * @chainable
     * @private
     */
    run: function(callback) {
        var anim = this,
            node = anim._node,
            config = anim._config,
            data = {
                type: 'transition:start',
                config: config
            };


        if (!anim._running) {
            anim._running = true;

            if (config.on && config.on.start) {
                config.on.start.call(Y.one(node), data);
            }

            anim.initAttrs(anim._config);

            anim._callback = callback;
            anim._start();
        }


        return anim;
    },

    _start: function() {
        this._runNative();
    },

    _prepDur: function(dur) {
        dur = parseFloat(dur) * 1000;

        return dur + 'ms';
    },

    _runNative: function() {
        var anim = this,
            node = anim._node,
            uid = Y.stamp(node),
            style = node.style,
            computed = node.ownerDocument.defaultView.getComputedStyle(node),
            attrs = Transition._nodeAttrs[uid],
            cssText = '',
            cssTransition = computed[Transition._toCamel(TRANSITION_PROPERTY)],

            transitionText = TRANSITION_PROPERTY + ': ',
            duration = TRANSITION_DURATION + ': ',
            easing = TRANSITION_TIMING_FUNCTION + ': ',
            delay = TRANSITION_DELAY + ': ',
            hyphy,
            attr,
            name;

        // preserve existing transitions
        if (cssTransition !== 'all') {
            transitionText += cssTransition + ',';
            duration += computed[Transition._toCamel(TRANSITION_DURATION)] + ',';
            easing += computed[Transition._toCamel(TRANSITION_TIMING_FUNCTION)] + ',';
            delay += computed[Transition._toCamel(TRANSITION_DELAY)] + ',';

        }

        // run transitions mapped to this instance
        for (name in attrs) {
            hyphy = Transition._toHyphen(name);
            attr = attrs[name];
            if ((attr = attrs[name]) && attr.transition === anim) {
                if (name in node.style) { // only native styles allowed
                    duration += anim._prepDur(attr.duration) + ',';
                    delay += anim._prepDur(attr.delay) + ',';
                    easing += (attr.easing) + ',';

                    transitionText += hyphy + ',';
                    cssText += hyphy + ': ' + attr.value + '; ';
                } else {
                    this.removeProperty(name);
                }
            }
        }

        transitionText = transitionText.replace(/,$/, ';');
        duration = duration.replace(/,$/, ';');
        easing = easing.replace(/,$/, ';');
        delay = delay.replace(/,$/, ';');

        // only one native end event per node
        if (!Transition._hasEnd[uid]) {
            node.addEventListener(TRANSITION_END, anim._onNativeEnd, '');
            Transition._hasEnd[uid] = true;

        }

        style.cssText += transitionText + duration + easing + delay + cssText;

    },

    _end: function(elapsed) {
        var anim = this,
            node = anim._node,
            callback = anim._callback,
            config = anim._config,
            data = {
                type: 'transition:end',
                config: config,
                elapsedTime: elapsed
            },

            nodeInstance = Y.one(node);

        anim._running = false;
        anim._callback = null;

        if (node) {
            if (config.on && config.on.end) {
                setTimeout(function() { // IE: allow previous update to finish
                    config.on.end.call(nodeInstance, data);

                    // nested to ensure proper fire order
                    if (callback) {
                        callback.call(nodeInstance, data);
                    }

                }, 1);
            } else if (callback) {
                setTimeout(function() { // IE: allow previous update to finish
                    callback.call(nodeInstance, data);
                }, 1);
            }
        }

    },

    _endNative: function(name) {
        var node = this._node,
            value = node.ownerDocument.defaultView.getComputedStyle(node, '')[Transition._toCamel(TRANSITION_PROPERTY)];

        name = Transition._toHyphen(name);
        if (typeof value === 'string') {
            value = value.replace(new RegExp('(?:^|,\\s)' + name + ',?'), ',');
            value = value.replace(/^,|,$/, '');
            node.style[TRANSITION_CAMEL] = value;
        }
    },

    _onNativeEnd: function(e) {
        var node = this,
            uid = Y.stamp(node),
            event = e,//e._event,
            name = Transition._toCamel(event.propertyName),
            elapsed = event.elapsedTime,
            attrs = Transition._nodeAttrs[uid],
            attr = attrs[name],
            anim = (attr) ? attr.transition : null,
            data,
            config;

        if (anim) {
            anim.removeProperty(name);
            anim._endNative(name);
            config = anim._config[name];

            data = {
                type: 'propertyEnd',
                propertyName: name,
                elapsedTime: elapsed,
                config: config
            };

            if (config && config.on && config.on.end) {
                config.on.end.call(Y.one(node), data);
            }

            if (anim._count <= 0)  { // after propertyEnd fires
                anim._end(elapsed);
                node.style[TRANSITION_PROPERTY_CAMEL] = ''; // clean up style
            }
        }
    },

    destroy: function() {
        var anim = this,
            node = anim._node;

        if (node) {
            node.removeEventListener(TRANSITION_END, anim._onNativeEnd, false);
            anim._node = null;
        }
    }
};

Y.Transition = Transition;
Y.TransitionNative = Transition; // TODO: remove

/**
 *   Animate one or more css properties to a given value. Requires the "transition" module.
 *   <pre>example usage:
 *       Y.one('#demo').transition({
 *           duration: 1, // in seconds, default is 0.5
 *           easing: 'ease-out', // default is 'ease'
 *           delay: '1', // delay start for 1 second, default is 0
 *
 *           height: '10px',
 *           width: '10px',
 *
 *           opacity: { // per property
 *               value: 0,
 *               duration: 2,
 *               delay: 2,
 *               easing: 'ease-in'
 *           }
 *       });
 *   </pre>
 *   @for Node
 *   @method transition
 *   @param {Object} config An object containing one or more style properties, a duration and an easing.
 *   @param {Function} callback A function to run after the transition has completed.
 *   @chainable
*/
Y.Node.prototype.transition = function(name, config, callback) {
    var
        transitionAttrs = Transition._nodeAttrs[Y.stamp(this._node)],
        anim = (transitionAttrs) ? transitionAttrs.transition || null : null,
        fxConfig,
        prop;

    if (typeof name === 'string') { // named effect, pull config from registry
        if (typeof config === 'function') {
            callback = config;
            config = null;
        }

        fxConfig = Transition.fx[name];

        if (config && typeof config !== 'boolean') {
            config = Y.clone(config);

            for (prop in fxConfig) {
                if (fxConfig.hasOwnProperty(prop)) {
                    if (! (prop in config)) {
                        config[prop] = fxConfig[prop];
                    }
                }
            }
        } else {
            config = fxConfig;
        }

    } else { // name is a config, config is a callback or undefined
        callback = config;
        config = name;
    }

    if (anim && !anim._running) {
        anim.init(this, config);
    } else {
        anim = new Transition(this._node, config);
    }

    anim.run(callback);
    return this;
};

Y.Node.prototype.show = function(name, config, callback) {
    this._show(); // show prior to transition
    if (name && Y.Transition) {
        if (typeof name !== 'string' && !name.push) { // named effect or array of effects supercedes default
            if (typeof config === 'function') {
                callback = config;
                config = name;
            }
            name = Transition.SHOW_TRANSITION;
        }
        this.transition(name, config, callback);
    }
    return this;
};

Y.NodeList.prototype.show = function(name, config, callback) {
    var nodes = this._nodes,
        i = 0,
        node;

    while ((node = nodes[i++])) {
        Y.one(node).show(name, config, callback);
    }

    return this;
};



var _wrapCallBack = function(anim, fn, callback) {
    return function() {
        if (fn) {
            fn.call(anim);
        }
        if (callback && typeof callback === 'function') {
            callback.apply(anim._node, arguments);
        }
    };
};

Y.Node.prototype.hide = function(name, config, callback) {
    if (name && Y.Transition) {
        if (typeof config === 'function') {
            callback = config;
            config = null;
        }

        callback = _wrapCallBack(this, this._hide, callback); // wrap with existing callback
        if (typeof name !== 'string' && !name.push) { // named effect or array of effects supercedes default
            if (typeof config === 'function') {
                callback = config;
                config = name;
            }
            name = Transition.HIDE_TRANSITION;
        }
        this.transition(name, config, callback);
    } else {
        this._hide();
    }
    return this;
};

Y.NodeList.prototype.hide = function(name, config, callback) {
    var nodes = this._nodes,
        i = 0,
        node;

    while ((node = nodes[i++])) {
        Y.one(node).hide(name, config, callback);
    }

    return this;
};

/**
 *   Animate one or more css properties to a given value. Requires the "transition" module.
 *   <pre>example usage:
 *       Y.all('.demo').transition({
 *           duration: 1, // in seconds, default is 0.5
 *           easing: 'ease-out', // default is 'ease'
 *           delay: '1', // delay start for 1 second, default is 0
 *
 *           height: '10px',
 *           width: '10px',
 *
 *           opacity: { // per property
 *               value: 0,
 *               duration: 2,
 *               delay: 2,
 *               easing: 'ease-in'
 *           }
 *       });
 *   </pre>
 *   @for NodeList
 *   @method transition
 *   @param {Object} config An object containing one or more style properties, a duration and an easing.
 *   @param {Function} callback A function to run after the transition has completed. The callback fires
 *       once per item in the NodeList.
 *   @chainable
*/
Y.NodeList.prototype.transition = function(config, callback) {
    var nodes = this._nodes,
        i = 0,
        node;

    while ((node = nodes[i++])) {
        Y.one(node).transition(config, callback);
    }

    return this;
};

Y.Node.prototype.toggleView = function(name, on, callback) {
    this._toggles = this._toggles || [];
    callback = arguments[arguments.length - 1];

    if (typeof name !== 'string') { // no transition, just toggle
        on = name;
        this._toggleView(on, callback); // call original _toggleView in Y.Node
        return;
    }

    if (typeof on === 'function') { // Ignore "on" if used for callback argument.
        on = undefined;
    }

    if (typeof on === 'undefined' && name in this._toggles) { // reverse current toggle
        on = ! this._toggles[name];
    }

    on = (on) ? 1 : 0;
    if (on) {
        this._show();
    }  else {
        callback = _wrapCallBack(this, this._hide, callback);
    }

    this._toggles[name] = on;
    this.transition(Y.Transition.toggles[name][on], callback);

    return this;
};

Y.NodeList.prototype.toggleView = function(name, on, callback) {
    var nodes = this._nodes,
        i = 0,
        node;

    while ((node = nodes[i++])) {
        node = Y.one(node);
        node.toggleView.apply(node, arguments);
    }

    return this;
};

Y.mix(Transition.fx, {
    fadeOut: {
        opacity: 0,
        duration: 0.5,
        easing: 'ease-out'
    },

    fadeIn: {
        opacity: 1,
        duration: 0.5,
        easing: 'ease-in'
    },

    sizeOut: {
        height: 0,
        width: 0,
        duration: 0.75,
        easing: 'ease-out'
    },

    sizeIn: {
        height: function(node) {
            return node.get('scrollHeight') + 'px';
        },
        width: function(node) {
            return node.get('scrollWidth') + 'px';
        },
        duration: 0.5,
        easing: 'ease-in',

        on: {
            start: function() {
                var overflow = this.getStyle('overflow');
                if (overflow !== 'hidden') { // enable scrollHeight/Width
                    this.setStyle('overflow', 'hidden');
                    this._transitionOverflow = overflow;
                }
            },

            end: function() {
                if (this._transitionOverflow) { // revert overridden value
                    this.setStyle('overflow', this._transitionOverflow);
                    delete this._transitionOverflow;
                }
            }
        }
    }
});

Y.mix(Transition.toggles, {
    size: ['sizeOut', 'sizeIn'],
    fade: ['fadeOut', 'fadeIn']
});


}, '3.10.1', {"requires": ["node-style"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/attribute-core/attribute-core.js
// ----------------------------------------------------------------------------------------

YUI.add('attribute-core', function (Y, NAME) {

    /**
     * The State class maintains state for a collection of named items, with
     * a varying number of properties defined.
     *
     * It avoids the need to create a separate class for the item, and separate instances
     * of these classes for each item, by storing the state in a 2 level hash table,
     * improving performance when the number of items is likely to be large.
     *
     * @constructor
     * @class State
     */
    Y.State = function() {
        /**
         * Hash of attributes
         * @property data
         */
        this.data = {};
    };

    Y.State.prototype = {

        /**
         * Adds a property to an item.
         *
         * @method add
         * @param name {String} The name of the item.
         * @param key {String} The name of the property.
         * @param val {Any} The value of the property.
         */
        add: function(name, key, val) {
            var item = this.data[name];

            if (!item) {
                item = this.data[name] = {};
            }

            item[key] = val;
        },

        /**
         * Adds multiple properties to an item.
         *
         * @method addAll
         * @param name {String} The name of the item.
         * @param obj {Object} A hash of property/value pairs.
         */
        addAll: function(name, obj) {
            var item = this.data[name],
                key;

            if (!item) {
                item = this.data[name] = {};
            }

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    item[key] = obj[key];
                }
            }
        },

        /**
         * Removes a property from an item.
         *
         * @method remove
         * @param name {String} The name of the item.
         * @param key {String} The property to remove.
         */
        remove: function(name, key) {
            var item = this.data[name];

            if (item) {
                delete item[key];
            }
        },

        /**
         * Removes multiple properties from an item, or removes the item completely.
         *
         * @method removeAll
         * @param name {String} The name of the item.
         * @param obj {Object|Array} Collection of properties to delete. If not provided, the entire item is removed.
         */
        removeAll: function(name, obj) {
            var data;

            if (!obj) {
                data = this.data;

                if (name in data) {
                    delete data[name];
                }
            } else {
                Y.each(obj, function(value, key) {
                    this.remove(name, typeof key === 'string' ? key : value);
                }, this);
            }
        },

        /**
         * For a given item, returns the value of the property requested, or undefined if not found.
         *
         * @method get
         * @param name {String} The name of the item
         * @param key {String} Optional. The property value to retrieve.
         * @return {Any} The value of the supplied property.
         */
        get: function(name, key) {
            var item = this.data[name];

            if (item) {
                return item[key];
            }
        },

        /**
         * For the given item, returns an object with all of the
         * item's property/value pairs. By default the object returned
         * is a shallow copy of the stored data, but passing in true
         * as the second parameter will return a reference to the stored
         * data.
         *
         * @method getAll
         * @param name {String} The name of the item
         * @param reference {boolean} true, if you want a reference to the stored
         * object
         * @return {Object} An object with property/value pairs for the item.
         */
        getAll : function(name, reference) {
            var item = this.data[name],
                key, obj;

            if (reference) {
                obj = item;
            } else if (item) {
                obj = {};

                for (key in item) {
                    if (item.hasOwnProperty(key)) {
                        obj[key] = item[key];
                    }
                }
            }

            return obj;
        }
    };
    /*For log lines*/
    /*jshint maxlen:200*/

    /**
     * The attribute module provides an augmentable Attribute implementation, which
     * adds configurable attributes and attribute change events to the class being
     * augmented. It also provides a State class, which is used internally by Attribute,
     * but can also be used independently to provide a name/property/value data structure to
     * store state.
     *
     * @module attribute
     */

    /**
     * The attribute-core submodule provides the lightest level of attribute handling support
     * without Attribute change events, or lesser used methods such as reset(), modifyAttrs(),
     * and removeAttr().
     *
     * @module attribute
     * @submodule attribute-core
     */
    var O = Y.Object,
        Lang = Y.Lang,

        DOT = ".",

        // Externally configurable props
        GETTER = "getter",
        SETTER = "setter",
        READ_ONLY = "readOnly",
        WRITE_ONCE = "writeOnce",
        INIT_ONLY = "initOnly",
        VALIDATOR = "validator",
        VALUE = "value",
        VALUE_FN = "valueFn",
        LAZY_ADD = "lazyAdd",

        // Used for internal state management
        ADDED = "added",
        BYPASS_PROXY = "_bypassProxy",
        INIT_VALUE = "initValue",
        LAZY = "lazy",

        INVALID_VALUE;

    /**
     * <p>
     * AttributeCore provides the lightest level of configurable attribute support. It is designed to be
     * augmented on to a host class, and provides the host with the ability to configure
     * attributes to store and retrieve state, <strong>but without support for attribute change events</strong>.
     * </p>
     * <p>For example, attributes added to the host can be configured:</p>
     * <ul>
     *     <li>As read only.</li>
     *     <li>As write once.</li>
     *     <li>With a setter function, which can be used to manipulate
     *     values passed to Attribute's <a href="#method_set">set</a> method, before they are stored.</li>
     *     <li>With a getter function, which can be used to manipulate stored values,
     *     before they are returned by Attribute's <a href="#method_get">get</a> method.</li>
     *     <li>With a validator function, to validate values before they are stored.</li>
     * </ul>
     *
     * <p>See the <a href="#method_addAttr">addAttr</a> method, for the complete set of configuration
     * options available for attributes.</p>
     *
     * <p>Object/Classes based on AttributeCore can augment <a href="AttributeObservable.html">AttributeObservable</a>
     * (with true for overwrite) and <a href="AttributeExtras.html">AttributeExtras</a> to add attribute event and
     * additional, less commonly used attribute methods, such as `modifyAttr`, `removeAttr` and `reset`.</p>
     *
     * @class AttributeCore
     * @param attrs {Object} The attributes to add during construction (passed through to <a href="#method_addAttrs">addAttrs</a>).
     *        These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.
     * @param values {Object} The initial attribute values to apply (passed through to <a href="#method_addAttrs">addAttrs</a>).
     *        These are not merged/cloned. The caller is responsible for isolating user provided values if required.
     * @param lazy {boolean} Whether or not to add attributes lazily (passed through to <a href="#method_addAttrs">addAttrs</a>).
     */
    function AttributeCore(attrs, values, lazy) {
        // HACK: Fix #2531929
        // Complete hack, to make sure the first clone of a node value in IE doesn't doesn't hurt state - maintains 3.4.1 behavior.
        // Too late in the release cycle to do anything about the core problem.
        // The root issue is that cloning a Y.Node instance results in an object which barfs in IE, when you access it's properties (since 3.3.0).
        this._yuievt = null;

        this._initAttrHost(attrs, values, lazy);
    }

    /**
     * <p>The value to return from an attribute setter in order to prevent the set from going through.</p>
     *
     * <p>You can return this value from your setter if you wish to combine validator and setter
     * functionality into a single setter function, which either returns the massaged value to be stored or
     * AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>
     *
     * @property INVALID_VALUE
     * @type Object
     * @static
     * @final
     */
    AttributeCore.INVALID_VALUE = {};
    INVALID_VALUE = AttributeCore.INVALID_VALUE;

    /**
     * The list of properties which can be configured for
     * each attribute (e.g. setter, getter, writeOnce etc.).
     *
     * This property is used internally as a whitelist for faster
     * Y.mix operations.
     *
     * @property _ATTR_CFG
     * @type Array
     * @static
     * @protected
     */
    AttributeCore._ATTR_CFG = [SETTER, GETTER, VALIDATOR, VALUE, VALUE_FN, WRITE_ONCE, READ_ONLY, LAZY_ADD, BYPASS_PROXY];

    /**
     * Utility method to protect an attribute configuration hash, by merging the
     * entire object and the individual attr config objects.
     *
     * @method protectAttrs
     * @static
     * @param {Object} attrs A hash of attribute to configuration object pairs.
     * @return {Object} A protected version of the `attrs` argument.
     */
    AttributeCore.protectAttrs = function (attrs) {
        if (attrs) {
            attrs = Y.merge(attrs);
            for (var attr in attrs) {
                if (attrs.hasOwnProperty(attr)) {
                    attrs[attr] = Y.merge(attrs[attr]);
                }
            }
        }

        return attrs;
    };

    AttributeCore.prototype = {

        /**
         * Constructor logic for attributes. Initializes the host state, and sets up the inital attributes passed to the
         * constructor.
         *
         * @method _initAttrHost
         * @param attrs {Object} The attributes to add during construction (passed through to <a href="#method_addAttrs">addAttrs</a>).
         *        These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.
         * @param values {Object} The initial attribute values to apply (passed through to <a href="#method_addAttrs">addAttrs</a>).
         *        These are not merged/cloned. The caller is responsible for isolating user provided values if required.
         * @param lazy {boolean} Whether or not to add attributes lazily (passed through to <a href="#method_addAttrs">addAttrs</a>).
         * @private
         */
        _initAttrHost : function(attrs, values, lazy) {
            this._state = new Y.State();
            this._initAttrs(attrs, values, lazy);
        },

        /**
         * <p>
         * Adds an attribute with the provided configuration to the host object.
         * </p>
         * <p>
         * The config argument object supports the following properties:
         * </p>
         *
         * <dl>
         *    <dt>value &#60;Any&#62;</dt>
         *    <dd>The initial value to set on the attribute</dd>
         *
         *    <dt>valueFn &#60;Function | String&#62;</dt>
         *    <dd>
         *    <p>A function, which will return the initial value to set on the attribute. This is useful
         *    for cases where the attribute configuration is defined statically, but needs to
         *    reference the host instance ("this") to obtain an initial value. If both the value and valueFn properties are defined,
         *    the value returned by the valueFn has precedence over the value property, unless it returns undefined, in which
         *    case the value property is used.</p>
         *
         *    <p>valueFn can also be set to a string, representing the name of the instance method to be used to retrieve the value.</p>
         *    </dd>
         *
         *    <dt>readOnly &#60;boolean&#62;</dt>
         *    <dd>Whether or not the attribute is read only. Attributes having readOnly set to true
         *        cannot be modified by invoking the set method.</dd>
         *
         *    <dt>writeOnce &#60;boolean&#62; or &#60;string&#62;</dt>
         *    <dd>
         *        Whether or not the attribute is "write once". Attributes having writeOnce set to true,
         *        can only have their values set once, be it through the default configuration,
         *        constructor configuration arguments, or by invoking set.
         *        <p>The writeOnce attribute can also be set to the string "initOnly",
         *         in which case the attribute can only be set during initialization
         *        (when used with Base, this means it can only be set during construction)</p>
         *    </dd>
         *
         *    <dt>setter &#60;Function | String&#62;</dt>
         *    <dd>
         *    <p>The setter function used to massage or normalize the value passed to the set method for the attribute.
         *    The value returned by the setter will be the final stored value. Returning
         *    <a href="#property_Attribute.INVALID_VALUE">Attribute.INVALID_VALUE</a>, from the setter will prevent
         *    the value from being stored.
         *    </p>
         *
         *    <p>setter can also be set to a string, representing the name of the instance method to be used as the setter function.</p>
         *    </dd>
         *
         *    <dt>getter &#60;Function | String&#62;</dt>
         *    <dd>
         *    <p>
         *    The getter function used to massage or normalize the value returned by the get method for the attribute.
         *    The value returned by the getter function is the value which will be returned to the user when they
         *    invoke get.
         *    </p>
         *
         *    <p>getter can also be set to a string, representing the name of the instance method to be used as the getter function.</p>
         *    </dd>
         *
         *    <dt>validator &#60;Function | String&#62;</dt>
         *    <dd>
         *    <p>
         *    The validator function invoked prior to setting the stored value. Returning
         *    false from the validator function will prevent the value from being stored.
         *    </p>
         *
         *    <p>validator can also be set to a string, representing the name of the instance method to be used as the validator function.</p>
         *    </dd>
         *
         *    <dt>lazyAdd &#60;boolean&#62;</dt>
         *    <dd>Whether or not to delay initialization of the attribute until the first call to get/set it.
         *    This flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through
         *    the <a href="#method_addAttrs">addAttrs</a> method.</dd>
         *
         * </dl>
         *
         * <p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with
         * the context ("this") set to the host object.</p>
         *
         * <p>Configuration properties outside of the list mentioned above are considered private properties used internally by attribute,
         * and are not intended for public use.</p>
         *
         * @method addAttr
         *
         * @param {String} name The name of the attribute.
         * @param {Object} config An object with attribute configuration property/value pairs, specifying the configuration for the attribute.
         *
         * <p>
         * <strong>NOTE:</strong> The configuration object is modified when adding an attribute, so if you need
         * to protect the original values, you will need to merge the object.
         * </p>
         *
         * @param {boolean} lazy (optional) Whether or not to add this attribute lazily (on the first call to get/set).
         *
         * @return {Object} A reference to the host object.
         *
         * @chainable
         */
        addAttr : function(name, config, lazy) {


            var host = this, // help compression
                state = host._state,
                data = state.data,
                storedCfg = data[name],
                value,
                added,
                hasValue;

            config = config || {};

            if (LAZY_ADD in config) {
                lazy = config[LAZY_ADD];
            }

            added = state.get(name, ADDED);

            if (lazy && !added) {

                // LAST MINUTE PRE 3.10.0 RELEASE WORKAROUND.

                // Revisit for 3.11.0 with the planned change to add all attributes
                // at once, instead of filtering for each class which is the root
                // of the issue.

                // This is to account for the case when an attribute value gets set,
                // before it's actual config is added formally. We end up blowing away
                // the previously set value in that case, with the config. Prior to
                // the performance fixes, we just used to merge, so we didn't see the
                // issue.

                if (!storedCfg) {
                    storedCfg = data[name] = {};
                }

                storedCfg.lazy = config;
                storedCfg.added = true;

            } else {


                if (!added || config.isLazyAdd) {

                    hasValue = (VALUE in config);


                    if (hasValue) {

                        // We'll go through set, don't want to set value in config directly

                        // PERF TODO: VALIDATE: See if setting this to undefined is sufficient. We use to delete before.
                        // In certain code paths/use cases, undefined may not be the same as not present.
                        // If not, we can set it to some known fixed value (like INVALID_VALUE, say INITIALIZING_VALUE) for performance,
                        // to avoid a delete which seems to help a lot.

                        value = config.value;
                        config.value = undefined;
                    } else {
                        // LAST MINUTE PRE 3.10.0 RELEASE WORKAROUND.
                        if (storedCfg && (VALUE in storedCfg)) {
                            config.value = storedCfg.value;
                        }
                    }

                    config.added = true;
                    config.initializing = true;

                    data[name] = config;

                    if (hasValue) {
                        // Go through set, so that raw values get normalized/validated
                        host.set(name, value);
                    }

                    config.initializing = false;
                }
            }

            return host;
        },

        /**
         * Checks if the given attribute has been added to the host
         *
         * @method attrAdded
         * @param {String} name The name of the attribute to check.
         * @return {boolean} true if an attribute with the given name has been added, false if it hasn't.
         *         This method will return true for lazily added attributes.
         */
        attrAdded: function(name) {
            return !!(this._state.get(name, ADDED));
        },

        /**
         * Returns the current value of the attribute. If the attribute
         * has been configured with a 'getter' function, this method will delegate
         * to the 'getter' to obtain the value of the attribute.
         *
         * @method get
         *
         * @param {String} name The name of the attribute. If the value of the attribute is an Object,
         * dot notation can be used to obtain the value of a property of the object (e.g. <code>get("x.y.z")</code>)
         *
         * @return {Any} The value of the attribute
         */
        get : function(name) {
            return this._getAttr(name);
        },

        /**
         * Checks whether or not the attribute is one which has been
         * added lazily and still requires initialization.
         *
         * @method _isLazyAttr
         * @private
         * @param {String} name The name of the attribute
         * @return {boolean} true if it's a lazily added attribute, false otherwise.
         */
        _isLazyAttr: function(name) {
            return this._state.get(name, LAZY);
        },

        /**
         * Finishes initializing an attribute which has been lazily added.
         *
         * @method _addLazyAttr
         * @private
         * @param {Object} name The name of the attribute
         * @param {Object} [lazyCfg] Optional config hash for the attribute. This is added for performance
         * along the critical path, where the calling method has already obtained lazy config from state.
         */
        _addLazyAttr: function(name, lazyCfg) {
            var state = this._state;

            lazyCfg = lazyCfg || state.get(name, LAZY);

            if (lazyCfg) {

                // PERF TODO: For App's id override, otherwise wouldn't be
                // needed. It expects to find it in the cfg for it's
                // addAttr override. Would like to remove, once App override is
                // removed.
                state.data[name].lazy = undefined;

                lazyCfg.isLazyAdd = true;

                this.addAttr(name, lazyCfg);
            }
        },

        /**
         * Sets the value of an attribute.
         *
         * @method set
         * @chainable
         *
         * @param {String} name The name of the attribute. If the
         * current value of the attribute is an Object, dot notation can be used
         * to set the value of a property within the object (e.g. <code>set("x.y.z", 5)</code>).
         * @param {Any} value The value to set the attribute to.
         * @param {Object} [opts] Optional data providing the circumstances for the change.
         * @return {Object} A reference to the host object.
         */
        set : function(name, val, opts) {
            return this._setAttr(name, val, opts);
        },

        /**
         * Allows setting of readOnly/writeOnce attributes. See <a href="#method_set">set</a> for argument details.
         *
         * @method _set
         * @protected
         * @chainable
         *
         * @param {String} name The name of the attribute.
         * @param {Any} val The value to set the attribute to.
         * @param {Object} [opts] Optional data providing the circumstances for the change.
         * @return {Object} A reference to the host object.
         */
        _set : function(name, val, opts) {
            return this._setAttr(name, val, opts, true);
        },

        /**
         * Provides the common implementation for the public set and protected _set methods.
         *
         * See <a href="#method_set">set</a> for argument details.
         *
         * @method _setAttr
         * @protected
         * @chainable
         *
         * @param {String} name The name of the attribute.
         * @param {Any} value The value to set the attribute to.
         * @param {Object} [opts] Optional data providing the circumstances for the change.
         * @param {boolean} force If true, allows the caller to set values for
         * readOnly or writeOnce attributes which have already been set.
         *
         * @return {Object} A reference to the host object.
         */
        _setAttr : function(name, val, opts, force)  {
            var allowSet = true,
                state = this._state,
                stateProxy = this._stateProxy,
                cfg,
                initialSet,
                strPath,
                path,
                currVal,
                writeOnce,
                initializing;

            if (name.indexOf(DOT) !== -1) {
                strPath = name;

                path = name.split(DOT);
                name = path.shift();
            }

            cfg = state.data[name] || {};

            if (cfg.lazy) {
                cfg = cfg.lazy;
                this._addLazyAttr(name, cfg);
            }

            initialSet = (cfg.value === undefined);

            if (stateProxy && name in stateProxy && !cfg._bypassProxy) {
                // TODO: Value is always set for proxy. Can we do any better? Maybe take a snapshot as the initial value for the first call to set?
                initialSet = false;
            }

            writeOnce = cfg.writeOnce;
            initializing = cfg.initializing;

            if (!initialSet && !force) {

                if (writeOnce) {
                    allowSet = false;
                }

                if (cfg.readOnly) {
                    allowSet = false;
                }
            }

            if (!initializing && !force && writeOnce === INIT_ONLY) {
                allowSet = false;
            }

            if (allowSet) {
                // Don't need currVal if initialSet (might fail in custom getter if it always expects a non-undefined/non-null value)
                if (!initialSet) {
                    currVal =  this.get(name);
                }

                if (path) {
                   val = O.setValue(Y.clone(currVal), path, val);

                   if (val === undefined) {
                       allowSet = false;
                   }
                }

                if (allowSet) {
                    if (!this._fireAttrChange || initializing) {
                        this._setAttrVal(name, strPath, currVal, val, opts, cfg);
                    } else {
                        // HACK - no real reason core needs to know about _fireAttrChange, but
                        // it adds fn hops if we want to break it out. Not sure it's worth it for this critical path
                        this._fireAttrChange(name, strPath, currVal, val, opts, cfg);
                    }
                }
            }

            return this;
        },

        /**
         * Provides the common implementation for the public get method,
         * allowing Attribute hosts to over-ride either method.
         *
         * See <a href="#method_get">get</a> for argument details.
         *
         * @method _getAttr
         * @protected
         * @chainable
         *
         * @param {String} name The name of the attribute.
         * @return {Any} The value of the attribute.
         */
        _getAttr : function(name) {
            var fullName = name,
                tCfgs    = this._tCfgs,
                path,
                getter,
                val,
                attrCfg,
                cfg;

            if (name.indexOf(DOT) !== -1) {
                path = name.split(DOT);
                name = path.shift();
            }

            // On Demand - Should be rare - handles out of order valueFn references
            if (tCfgs && tCfgs[name]) {
                cfg = {};
                cfg[name] = tCfgs[name];
                delete tCfgs[name];
                this._addAttrs(cfg, this._tVals);
            }

            attrCfg = this._state.data[name] || {};

            // Lazy Init
            if (attrCfg.lazy) {
                attrCfg = attrCfg.lazy;
                this._addLazyAttr(name, attrCfg);
            }

            val = this._getStateVal(name, attrCfg);

            getter = attrCfg.getter;

            if (getter && !getter.call) {
                getter = this[getter];
            }

            val = (getter) ? getter.call(this, val, fullName) : val;
            val = (path) ? O.getValue(val, path) : val;

            return val;
        },

        /**
         * Gets the stored value for the attribute, from either the
         * internal state object, or the state proxy if it exits
         *
         * @method _getStateVal
         * @private
         * @param {String} name The name of the attribute
         * @param {Object} [cfg] Optional config hash for the attribute. This is added for performance along the critical path,
         * where the calling method has already obtained the config from state.
         *
         * @return {Any} The stored value of the attribute
         */
        _getStateVal : function(name, cfg) {
            var stateProxy = this._stateProxy;

            if (!cfg) {
                cfg = this._state.getAll(name) || {};
            }

            return (stateProxy && (name in stateProxy) && !(cfg._bypassProxy)) ? stateProxy[name] : cfg.value;
        },

        /**
         * Sets the stored value for the attribute, in either the
         * internal state object, or the state proxy if it exits
         *
         * @method _setStateVal
         * @private
         * @param {String} name The name of the attribute
         * @param {Any} value The value of the attribute
         */
        _setStateVal : function(name, value) {
            var stateProxy = this._stateProxy;
            if (stateProxy && (name in stateProxy) && !this._state.get(name, BYPASS_PROXY)) {
                stateProxy[name] = value;
            } else {
                this._state.add(name, VALUE, value);
            }
        },

        /**
         * Updates the stored value of the attribute in the privately held State object,
         * if validation and setter passes.
         *
         * @method _setAttrVal
         * @private
         * @param {String} attrName The attribute name.
         * @param {String} subAttrName The sub-attribute name, if setting a sub-attribute property ("x.y.z").
         * @param {Any} prevVal The currently stored value of the attribute.
         * @param {Any} newVal The value which is going to be stored.
         * @param {Object} [opts] Optional data providing the circumstances for the change.
         * @param {Object} [attrCfg] Optional config hash for the attribute. This is added for performance along the critical path,
         * where the calling method has already obtained the config from state.
         *
         * @return {booolean} true if the new attribute value was stored, false if not.
         */
        _setAttrVal : function(attrName, subAttrName, prevVal, newVal, opts, attrCfg) {

            var host = this,
                allowSet = true,
                cfg = attrCfg || this._state.data[attrName] || {},
                validator = cfg.validator,
                setter = cfg.setter,
                initializing = cfg.initializing,
                prevRawVal = this._getStateVal(attrName, cfg),
                name = subAttrName || attrName,
                retVal,
                valid;

            if (validator) {
                if (!validator.call) {
                    // Assume string - trying to keep critical path tight, so avoiding Lang check
                    validator = this[validator];
                }
                if (validator) {
                    valid = validator.call(host, newVal, name, opts);

                    if (!valid && initializing) {
                        newVal = cfg.defaultValue;
                        valid = true; // Assume it's valid, for perf.
                    }
                }
            }

            if (!validator || valid) {
                if (setter) {
                    if (!setter.call) {
                        // Assume string - trying to keep critical path tight, so avoiding Lang check
                        setter = this[setter];
                    }
                    if (setter) {
                        retVal = setter.call(host, newVal, name, opts);

                        if (retVal === INVALID_VALUE) {
                            if (initializing) {
                                newVal = cfg.defaultValue;
                            } else {
                                allowSet = false;
                            }
                        } else if (retVal !== undefined){
                            newVal = retVal;
                        }
                    }
                }

                if (allowSet) {
                    if(!subAttrName && (newVal === prevRawVal) && !Lang.isObject(newVal)) {
                        allowSet = false;
                    } else {
                        // Store value
                        if (!(INIT_VALUE in cfg)) {
                            cfg.initValue = newVal;
                        }
                        host._setStateVal(attrName, newVal);
                    }
                }

            } else {
                allowSet = false;
            }

            return allowSet;
        },

        /**
         * Sets multiple attribute values.
         *
         * @method setAttrs
         * @param {Object} attrs  An object with attributes name/value pairs.
         * @param {Object} [opts] Optional data providing the circumstances for the change.
         * @return {Object} A reference to the host object.
         * @chainable
         */
        setAttrs : function(attrs, opts) {
            return this._setAttrs(attrs, opts);
        },

        /**
         * Implementation behind the public setAttrs method, to set multiple attribute values.
         *
         * @method _setAttrs
         * @protected
         * @param {Object} attrs  An object with attributes name/value pairs.
         * @param {Object} [opts] Optional data providing the circumstances for the change
         * @return {Object} A reference to the host object.
         * @chainable
         */
        _setAttrs : function(attrs, opts) {
            var attr;
            for (attr in attrs) {
                if ( attrs.hasOwnProperty(attr) ) {
                    this.set(attr, attrs[attr], opts);
                }
            }
            return this;
        },

        /**
         * Gets multiple attribute values.
         *
         * @method getAttrs
         * @param {Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are
         * returned. If set to true, all attributes modified from their initial values are returned.
         * @return {Object} An object with attribute name/value pairs.
         */
        getAttrs : function(attrs) {
            return this._getAttrs(attrs);
        },

        /**
         * Implementation behind the public getAttrs method, to get multiple attribute values.
         *
         * @method _getAttrs
         * @protected
         * @param {Array | boolean} attrs Optional. An array of attribute names. If omitted, all attribute values are
         * returned. If set to true, all attributes modified from their initial values are returned.
         * @return {Object} An object with attribute name/value pairs.
         */
        _getAttrs : function(attrs) {
            var obj = {},
                attr, i, len,
                modifiedOnly = (attrs === true);

            // TODO - figure out how to get all "added"
            if (!attrs || modifiedOnly) {
                attrs = O.keys(this._state.data);
            }

            for (i = 0, len = attrs.length; i < len; i++) {
                attr = attrs[i];

                if (!modifiedOnly || this._getStateVal(attr) != this._state.get(attr, INIT_VALUE)) {
                    // Go through get, to honor cloning/normalization
                    obj[attr] = this.get(attr);
                }
            }

            return obj;
        },

        /**
         * Configures a group of attributes, and sets initial values.
         *
         * <p>
         * <strong>NOTE:</strong> This method does not isolate the configuration object by merging/cloning.
         * The caller is responsible for merging/cloning the configuration object if required.
         * </p>
         *
         * @method addAttrs
         * @chainable
         *
         * @param {Object} cfgs An object with attribute name/configuration pairs.
         * @param {Object} values An object with attribute name/value pairs, defining the initial values to apply.
         * Values defined in the cfgs argument will be over-written by values in this argument unless defined as read only.
         * @param {boolean} lazy Whether or not to delay the intialization of these attributes until the first call to get/set.
         * Individual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.
         * See <a href="#method_addAttr">addAttr</a>.
         *
         * @return {Object} A reference to the host object.
         */
        addAttrs : function(cfgs, values, lazy) {
            if (cfgs) {
                this._tCfgs = cfgs;
                this._tVals = (values) ? this._normAttrVals(values) : null;
                this._addAttrs(cfgs, this._tVals, lazy);
                this._tCfgs = this._tVals = null;
            }

            return this;
        },

        /**
         * Implementation behind the public addAttrs method.
         *
         * This method is invoked directly by get if it encounters a scenario
         * in which an attribute's valueFn attempts to obtain the
         * value an attribute in the same group of attributes, which has not yet
         * been added (on demand initialization).
         *
         * @method _addAttrs
         * @private
         * @param {Object} cfgs An object with attribute name/configuration pairs.
         * @param {Object} values An object with attribute name/value pairs, defining the initial values to apply.
         * Values defined in the cfgs argument will be over-written by values in this argument unless defined as read only.
         * @param {boolean} lazy Whether or not to delay the intialization of these attributes until the first call to get/set.
         * Individual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.
         * See <a href="#method_addAttr">addAttr</a>.
         */
        _addAttrs : function(cfgs, values, lazy) {
            var tCfgs = this._tCfgs,
                tVals = this._tVals,
                attr,
                attrCfg,
                value;

            for (attr in cfgs) {
                if (cfgs.hasOwnProperty(attr)) {

                    // Not Merging. Caller is responsible for isolating configs
                    attrCfg = cfgs[attr];
                    attrCfg.defaultValue = attrCfg.value;

                    // Handle simple, complex and user values, accounting for read-only
                    value = this._getAttrInitVal(attr, attrCfg, tVals);

                    if (value !== undefined) {
                        attrCfg.value = value;
                    }

                    if (tCfgs[attr]) {
                        tCfgs[attr] = undefined;
                    }

                    this.addAttr(attr, attrCfg, lazy);
                }
            }
        },

        /**
         * Utility method to protect an attribute configuration
         * hash, by merging the entire object and the individual
         * attr config objects.
         *
         * @method _protectAttrs
         * @protected
         * @param {Object} attrs A hash of attribute to configuration object pairs.
         * @return {Object} A protected version of the attrs argument.
         * @deprecated Use `AttributeCore.protectAttrs()` or
         *   `Attribute.protectAttrs()` which are the same static utility method.
         */
        _protectAttrs : AttributeCore.protectAttrs,

        /**
         * Utility method to normalize attribute values. The base implementation
         * simply merges the hash to protect the original.
         *
         * @method _normAttrVals
         * @param {Object} valueHash An object with attribute name/value pairs
         *
         * @return {Object} An object literal with 2 properties - "simple" and "complex",
         * containing simple and complex attribute values respectively keyed
         * by the top level attribute name, or null, if valueHash is falsey.
         *
         * @private
         */
        _normAttrVals : function(valueHash) {
            var vals,
                subvals,
                path,
                attr,
                v, k;

            if (!valueHash) {
                return null;
            }

            vals = {};

            for (k in valueHash) {
                if (valueHash.hasOwnProperty(k)) {
                    if (k.indexOf(DOT) !== -1) {
                        path = k.split(DOT);
                        attr = path.shift();

                        subvals = subvals || {};

                        v = subvals[attr] = subvals[attr] || [];
                        v[v.length] = {
                            path : path,
                            value: valueHash[k]
                        };
                    } else {
                        vals[k] = valueHash[k];
                    }
                }
            }

            return { simple:vals, complex:subvals };
        },

        /**
         * Returns the initial value of the given attribute from
         * either the default configuration provided, or the
         * over-ridden value if it exists in the set of initValues
         * provided and the attribute is not read-only.
         *
         * @param {String} attr The name of the attribute
         * @param {Object} cfg The attribute configuration object
         * @param {Object} initValues The object with simple and complex attribute name/value pairs returned from _normAttrVals
         *
         * @return {Any} The initial value of the attribute.
         *
         * @method _getAttrInitVal
         * @private
         */
        _getAttrInitVal : function(attr, cfg, initValues) {
            var val = cfg.value,
                valFn = cfg.valueFn,
                tmpVal,
                initValSet = false,
                readOnly = cfg.readOnly,
                simple,
                complex,
                i,
                l,
                path,
                subval,
                subvals;

            if (!readOnly && initValues) {
                // Simple Attributes
                simple = initValues.simple;
                if (simple && simple.hasOwnProperty(attr)) {
                    val = simple[attr];
                    initValSet = true;
                }
            }

            if (valFn && !initValSet) {
                if (!valFn.call) {
                    valFn = this[valFn];
                }
                if (valFn) {
                    tmpVal = valFn.call(this, attr);
                    val = tmpVal;
                }
            }

            if (!readOnly && initValues) {

                // Complex Attributes (complex values applied, after simple, in case both are set)
                complex = initValues.complex;

                if (complex && complex.hasOwnProperty(attr) && (val !== undefined) && (val !== null)) {
                    subvals = complex[attr];
                    for (i = 0, l = subvals.length; i < l; ++i) {
                        path = subvals[i].path;
                        subval = subvals[i].value;
                        O.setValue(val, path, subval);
                    }
                }
            }

            return val;
        },

        /**
         * Utility method to set up initial attributes defined during construction,
         * either through the constructor.ATTRS property, or explicitly passed in.
         *
         * @method _initAttrs
         * @protected
         * @param attrs {Object} The attributes to add during construction (passed through to <a href="#method_addAttrs">addAttrs</a>).
         *        These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.
         * @param values {Object} The initial attribute values to apply (passed through to <a href="#method_addAttrs">addAttrs</a>).
         *        These are not merged/cloned. The caller is responsible for isolating user provided values if required.
         * @param lazy {boolean} Whether or not to add attributes lazily (passed through to <a href="#method_addAttrs">addAttrs</a>).
         */
        _initAttrs : function(attrs, values, lazy) {
            // ATTRS support for Node, which is not Base based
            attrs = attrs || this.constructor.ATTRS;

            var Base = Y.Base,
                BaseCore = Y.BaseCore,
                baseInst = (Base && Y.instanceOf(this, Base)),
                baseCoreInst = (!baseInst && BaseCore && Y.instanceOf(this, BaseCore));

            if (attrs && !baseInst && !baseCoreInst) {
                this.addAttrs(Y.AttributeCore.protectAttrs(attrs), values, lazy);
            }
        }
    };

    Y.AttributeCore = AttributeCore;


}, '3.10.1', {"requires": ["oop"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-thirdparty/jstween/1.1/jstween-1.1.js
// ----------------------------------------------------------------------------------------

/*!
* JSTween JavaScript Library v1.1
* http://www.jstween.org/
*
* Copyright 2011, Marco Wolfsheimer
* JSTween by Marco Wolfsheimer is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License.
*
* Date: Sun Mar 13 12:46:40 2011 -0000
*/

/*
TERMS OF USE - EASING EQUATIONS

Open source under the BSD License.

Copyright © 2001 Robert Penner
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of the author nor the names of contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

var JSTween = ( function ( that ) {

    var __prop = /[\-]{0,1}[0-9\.]{1,}|#[0-9\.abcdef]{3,6}/gi,
        __unit = /[pxemtcin%]{1,2}|deg/gi,
        __value = /[0-9\.\-]{1,}/gi,
        __hexValue = /[0-9a-f]{3,6}/gi,
        __hasHash = /^#/,
        __singleValue = /^[0-9\.\-]{1,}([pxemtcin%]{1,2}|deg)$/,
        __letters = /[a-z]{1,}/,
        __hasRGB = /^rgb\(/,
        __hasScroll = /^scroll/,
        __cssHyphen = /-([a-z])/ig,
        __cssMSHyphen = /^-ms/ig,
        __cssSuportLookup = {
            opacity:[ 'opacity', '-moz-opacity', 'filter' ],
            shadow: [ 'box-shadow', '-moz-box-shadow', '-o-box-shadow', '-ms-box-shadow', '-webkit-box-shadow' ],
            transform: [ '-moz-transform', 'transform', '-o-transform', '-ms-transform','-webkit-transform' ],
            transformOrigin: [ '-moz-transform-origin', 'transform-origin', '-o-transform-origin', '-ms-transform-origin', '-webkit-transform-origin' ],
            borderRadius:[ '-moz-border-radius', 'border-radius', '-webkit-border-radius' ],
            borderRadiusTopLeft:[ '-moz-border-radius-topleft', 'border-top-left-radius', '-webkit-border-top-left-radius' ],
            borderRadiusTopRight:[ '-moz-border-radius-topright', 'border-top-right-radius', '-webkit-border-top-right-radius' ],
            borderRadiusBottomLeft:[ '-moz-border-radius-bottomleft', 'border-bottom-left-radius', '-webkit-border-bottom-left-radius' ],
            borderRadiusBottomRight:[ '-moz-border-radius-bottomright', 'border-bottom-right-radius', '-webkit-border-bottom-right-radius' ],
            backgroundSize: [ 'background-size', '-moz-background-size', '-o-background-size', '-webkit-background-size' ]
        },
        __timeline = {},
        __elements = [],
        __frame = 0,
        __runTime = 0,
        __playing = false,
        __playCallback = false,
        __frameTime = false,
        __playTime = 0,
        __config = {},
        __mobile = ( /iPad/i.test( navigator.userAgent ) || /iPhone OS/i.test( navigator.userAgent ) );

        var init = function () {

            framerate( __mobile ? 30 : 45 );
            cssSupport();

            // Fail nicely if jQuery does not exist
            try{ attach();  } catch(e){ return; }
        };

        var attach = function() {

            var fn = jQuery.fn;

            jQuery.JSTween = that;

            fn.tween = function (options) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    tween(this[i], options);
                }

                return this;
            };

            jQuery.framerate = function (options) {
                framerate(options);
            };

            jQuery.play = function ( callback ) {
                play( callback );
            };

            jQuery.clear = function ( elem, prop ) {
                clear( elem, prop );
            };

            fn.play = function ( callback ) {
                play( callback );
                return this;
            };

            fn.clear = function (prop) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    clear(this[i], prop);
                }

                return this;
            };

            fn.property = function (name) {

                var prop = [], i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    prop.push( getProperty( this[i], name) );
                }

                return prop.length === 1 ? prop[0] : prop;
            };

            fn.opacity = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    opacity(this[i], value);
                }

                return this;
            };

            fn.alpha = fn.opacity;
            fn.transparency = fn.opacity;

            fn.rotate = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    rotate(this[i], value);
                }

                return this;
            };

            fn.action = function (type, value, units, callback) {

                var elementID,
                    prop,
                    i,
                    length = this.length,
                    parsedType = {};

                if( typeof type === 'object' ) {

                    for( prop in type ) {
                        if( type.hasOwnProperty( prop ) && typeof type[prop] === 'string' ) {
                            if( __singleValue.test( type[prop] ) ) {
                                parsedType[prop] = { value: parseFloat( type[prop].match( __value )[0], 10 ), units: type[prop].match( __unit )[0] };
                            } else {
                                parsedType[prop] = { value: type[prop], units: undefined };
                            }
                        }
                    }

                    for( i = 0; i < length; i++ ) {

                        elementID = jQuery.JSTween.register(this[i]);

                        for( prop in parsedType ) {

                            if( parsedType.hasOwnProperty( prop ) ) {

                                jQuery.JSTween.action( elementID, prop, parsedType[prop].value,  parsedType[prop].units, undefined, true);
                            }
                        }
                    }

                } else {

                    for( i = 0; i < length; i++ ) {
                        action( register(this[i]), type, value, units, callback, true);
                    }

                }
                return this;
            };

            fn.state = function (type) {

                if (this.length > 0 ) {

                    if( this[0].__animate !== undefined ) {

                        if( type !== undefined && this[0].__animate.state[type] !== undefined  ) {
                            return this[0].__animate.state[type];
                        } else if( type === undefined ) {
                            return this[0].__animate.state;
                        }
                    }
                }
            };

            fn.transform = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    transform(this[i], value);
                }

                return this;
            };

            fn.transformOrigin = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    transformOrigin(this[i], value);
                }

                return this;
            };

            fn.backgroundSize = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    backgroundSize(this[i], value);
                }

                return this;
            };

            fn.shadow = function (value) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    shadow(this[i], value);
                }

                return this;
            };

            fn.borderRadius = function (value, units) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    borderRadius(this[i], value, units );
                }

                return this;
            };

            fn.borderRadiusTopRight = function (value, units) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    borderRadiusCorner(this[i], 'top', 'right', value, units);
                }

                return this;
            };

            fn.borderRadiusTopLeft = function (value, units) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    borderRadiusCorner(this[i], 'top', 'left', value, units);
                }

                return this;
            };

            fn.borderRadiusBottomRight = function (value, units) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    borderRadiusCorner(this[i], 'bottom', 'right', value, units);
                }

                return this;
            };

            fn.borderRadiusBottomLeft = function (value, units) {

                var i, length = this.length;

                for( i = 0; i < length; i++ ) {
                    borderRadiusCorner(this[i], 'bottom', 'left', value, units);
                }
                return this;
            };

            fn.borderRadiusCorner = function (top, right, value, units) {

                var i, length = this.length;

                for( i = 0; i < this.length; i++ ) {
                    borderRadiusCorner(this[i], top, right, value, units);
                }
                return this;
            };
        };

        var upperCase = function( all, letter ) {
            return letter.toUpperCase();
        };

        var camelCase = function( string ){
            return string.replace( __cssMSHyphen, 'ms' ).replace( __cssHyphen, upperCase );
        };

        var framerate = function (fps) {

            if( !fps ) { return __config.frameRate; }

            __config.frameRate = fps || 45;
            __config.frameDelay = Math.round(1000 / __config.frameRate);
            __config.frameLength = (1 / __config.frameRate);

            return __config.frameRate;
        };

        var cssSupport = function(){

            var htmlTag = document.getElementsByTagName('html'),
                htmlStyle, propType;

            if( htmlTag[0] !== undefined ) {

                htmlStyle = htmlTag[0].style;

                for( propType in __cssSuportLookup ) {

                    if ( __cssSuportLookup.hasOwnProperty( propType ) ) {

                        for( i = 0; i < __cssSuportLookup[ propType ].length; i++ ) {
                            if( htmlStyle[ __cssSuportLookup[propType][i] ] !== undefined ) {
                                __cssSuportLookup[propType] = __cssSuportLookup[propType][i];
                                break;
                            } else if ( htmlStyle[ camelCase( __cssSuportLookup[propType][i] ) ] !== undefined ) {
                                __cssSuportLookup[propType] = camelCase( __cssSuportLookup[propType][i] );
                                break;
                            }
                        }
                    }
                }
            }
        };

        var getProperty = function (element, name) {

            if( element.__animate !== undefined ) {

                if( name === undefined ) {

                    return element.__animate.state;

                } else if ( element.__animate.state[name] ) {

                    return element.__animate.state[name];

                } else {
                    return false;
                }
            } else {
                return false;
            }
        };

        var getScroll = function (element, property, stop) {
            if (element.tagName === undefined && ( element.scroll !== undefined || element.scrollTo !== undefined ) ) {
                return $( element ).scrollLeft() + 'px ' + $( element ).scrollTop() + 'px';
            } else {
                return element.scrollLeft + 'px ' + element.scrollTop + 'px';
            }
        };

        var getComputedStyle = function (element, property, stop) {

            var foundValue = getProperty(element, property),
                computedStyle, value, units, scroll;

            // First, see if we have an animation state value for this property already.. much quicker than attacking the DOM
            if (foundValue !== false && !__hasScroll.test(property)) {

                return {
                    value: foundValue.value,
                    units: element.__animate.state[property].units
                };

            } else {

                // Yes I know.. switch isn't wonderfull.. but a necessary way to keep the coad bloat down and performance up in JSTween.
                switch (property) {

                    case 'transform':
                    case 'transformOrigin':
                    case 'shadow':
                    case 'boxShadow':
                    case 'backgroundSize':
                        value = stop;
                        break;

                    case 'opacity':
                    case 'transparency':
                    case 'alpha':
                        value = 100;
                        break;

                    case 'scrollLeft':
                    case 'scrollTop':
                    case 'scroll':
                    case 'scrollTo':
                        value = getScroll(element, property, stop);
                        break;

                    default:

                        if (window.getComputedStyle !== undefined) {

                            computedStyle = window.getComputedStyle(element, null)[property];

                        } else if (element.currentStyle !== undefined) {

                            computedStyle = element.currentStyle[property];
                        }

                        if (computedStyle === 'auto' || computedStyle === undefined || computedStyle === '') {

                            value = 0;
                            units = 'px';

                        } else if( __hasRGB.test( computedStyle ) ) {

                            value = convertRGBToHex( computedStyle );

                        } else {

                            value = parseFloat(computedStyle.match( __value ), 10);
                            units = computedStyle.match( __unit );
                        }

                        break;
                }

                return {
                    value: value,
                    units: units
                };

            }
        };

        var parseOptions = function (element, options) {

            var newOptions = {},
                property, computedStyle;

            for (property in options) {

                if (options.hasOwnProperty(property) && property !== 'onStart' && property !== 'onStop' && property !== 'onFrame') {

                    newOptions[property] = {};

                    // Find missing start values if needed
                    if (options[property].start === undefined) {
                        computedStyle = getComputedStyle(element, property, options[property].stop);
                        newOptions[property].start = computedStyle.value;
                    } else {
                        newOptions[property].start = parseProperty(options[property].start);
                    }

                    newOptions[property].stop = parseProperty(options[property].stop, 1);
                    newOptions[property].duration = parseProperty(options[property].duration || newOptions[property].dur, 1);
                    newOptions[property].time = parseProperty(options[property].time, 0);
                    newOptions[property].merge = parseProperty(options[property].merge, false);
                    newOptions[property].effect = parseProperty(options[property].effect, 'linear');
                    newOptions[property].framerate = parseProperty(options[property].framerate, __config.frameRate);
                    newOptions[property].units = parseProperty(options[property].units, computedStyle ? computedStyle.units : 'px');
                    newOptions[property].end = parseProperty(options[property].end, (newOptions[property].time + newOptions[property].duration));

                    // Clean up scolling metrics and turn them into paired strings
                    if ( __hasScroll.test( property ) ) {
                        if (typeof newOptions[property].start === 'number') {
                            newOptions[property].start = newOptions[property].start + 'px ' + newOptions[property].start + 'px';
                        }
                        if (typeof newOptions[property].stop === 'number') {
                            newOptions[property].stop = newOptions[property].stop + 'px ' + newOptions[property].stop + 'px';
                        }
                    }

                    newOptions[property].callback = {
                        onStart: options[property].onStart,
                        onFrame: options[property].onFrame,
                        onStop: options[property].onStop
                    };
                }
            }

            return newOptions;
        };

        var parseProperty = function (property, defaultValue) {
            if (typeof property === 'function') {
                return property();
            } else if (property !== undefined) {
                return property;
            } else {
                return defaultValue;
            }
        };

        var convertRGBToHex = function (color) {

            var colours = color.match(__value), red, green, blue;

            red = parseInt( colours[0], 10 ).toString(16);
                if (red.length === 1) { red = "0" + red; }

            green = parseInt( colours[1], 10 ).toString(16);
                if (green.length === 1) { green = "0" + green; }

            blue = parseInt( colours[2], 10 ).toString(16);
                if (blue.length === 1) { blue = "0" + blue; }

            return '#' + red + green + blue;
        };

        var parseColor = function (color) {
            if (color.length === 3) {
                return [parseInt(color.substr(0, 1), 16) * 16, parseInt(color.substr(1, 1), 16) * 16, parseInt(color.substr(2, 1), 16) * 16];
            } else {
                return [parseInt(color.substr(0, 2), 16), parseInt(color.substr(2, 2), 16), parseInt(color.substr(4, 2), 16)];
            }
        };

        var parseCSSProperty = function (str) {

            var values = str.match( __prop ),
                delimiters = str.split( __prop ),
                units = [],
                id,
                length = values.length;

            for (id = 0; id < length; id++) {
                if (__hasHash.test( values[id])) {
                    values[id] = parseColor(values[id].match( __hexValue )[0]);
                } else {
                    values[id] = parseFloat(values[id].match(__value)[0], 10);
                }
            }

            return {
                value: values,
                delimiter: delimiters
            };
        };

        var mergeStringProperty = function (start, stop, property, options, time, end) {

            var frameProperty = "",
                color = "",
                i, n,
                length = start.value.length,
                startLength = 0;

            for (i = 0; i < length; i++) {

                if (typeof start.value[i] === 'object' && start.value[i].length !== undefined) {

                    frameProperty += start.delimiter[i] + "#";

                    startLength = start.value[i].length;

                    for (n = 0; n < startLength; n++) {

                        color = Math.round(effects[options.effect]((time - options.time), start.value[i][n], (stop.value[i][n] - start.value[i][n]), (end - options.time)), 10).toString(16);

                        if (color.length === 1) {
                            color = "0" + color;
                        }
                        frameProperty += color;
                    }

                } else {
                    frameProperty += start.delimiter[i] + effects[options.effect]((time - options.time), start.value[i], (stop.value[i] - start.value[i]), (end - options.time));
                }
            }

            return frameProperty + start.delimiter[start.delimiter.length - 1];
        };

        var loopStringFrames = function( elementID, property, propertyOptions ){

            var frameCounter,
                startParsed = parseCSSProperty(propertyOptions.start),
                stopParsed = parseCSSProperty(propertyOptions.stop),
                time,
                offset,
                frameValue,
                frameSkip,
                frameLength = __config.frameLength,
                end = propertyOptions.end;


            frameCounter = frameSkip = Math.round(__config.frameRate / propertyOptions.framerate - 1);

            for ( time = propertyOptions.time; time < end; time += frameLength) {

                offset = __frame + Math.round(time * __config.frameRate);

                if (frameCounter === 0) {

                    frameValue = mergeStringProperty(startParsed, stopParsed, property, propertyOptions, time, propertyOptions.end);
                    makeFrame(offset, elementID, property, frameValue, propertyOptions.units, false, false);
                    frameCounter = frameSkip;

                } else {

                    makeFrame(offset, elementID, property);
                    frameCounter--;
                }
            }

            // Final frame, make sure the element lands in the correct place
            offset = __frame + (Math.round(propertyOptions.end * __config.frameRate));
            makeFrame(offset, elementID, property, propertyOptions.stop, propertyOptions.units, false, true);
        };

        var loopFrames = function( elementID, property, propertyOptions ){

            var frameCounter,
                time,
                offset,
                frameValue,
                frameSkip,
                frameLength = __config.frameLength,
                end = propertyOptions.end;

            frameCounter = frameSkip = Math.round(__config.frameRate / propertyOptions.framerate - 1);

            for ( time = propertyOptions.time; time < end; time += frameLength) {

                offset = __frame + (Math.round(time * __config.frameRate));

                if (frameCounter === 0) {

                    frameValue = effects[propertyOptions.effect]((time - propertyOptions.time), propertyOptions.start, (propertyOptions.stop - propertyOptions.start), (propertyOptions.end - propertyOptions.time));
                    makeFrame(offset, elementID, property, frameValue, propertyOptions.units, false, false);
                    frameCounter = frameSkip;

                } else {

                    makeFrame(offset, elementID, property);
                    frameCounter--;
                }
            }

            // Final frame, make sure the element lands in the correct place
            offset = __frame + (Math.round(propertyOptions.end * __config.frameRate));
            makeFrame(offset, elementID, property, propertyOptions.stop, propertyOptions.units, false, true);
        };

        var getTimeBounds = function( options ) {

            var bounds = { start:0, stop:0 }, property;

            for (property in options) {
                if (options.hasOwnProperty(property)) {
                    if( options[property].end > bounds.stop ) { bounds.stop = options[property].end; }
                }
            }

            bounds.start = bounds.stop;

            for (property in options) {
                if (options.hasOwnProperty(property)) {
                    if( options[property].time < bounds.start ) { bounds.start = options[property].time; }
                }
            }

            return bounds;
        };

        var tween = function (element, config) {

            var elementID = register(element),
                offset = 0,
                time = 0,
                startParsed, stopParsed, frameSkip = 0,
                options = parseOptions(element, config),
                property,
                bounds = getTimeBounds( options );

            for (property in options) {

                if (options.hasOwnProperty(property)) {

                    // Make property frames
                    if (typeof options[property].start === 'string') {
                        loopStringFrames( elementID, property, options[property] );
                    } else {
                        loopFrames( elementID, property, options[property] );
                    }

                    // PROPERTY CALLBACKS

                    // onStart
                    if (typeof options[property].callback.onStart === 'function') {
                        addCallback(__frame + (Math.round(options[property].time * __config.frameRate)), elementID, property, options[property].callback.onStart);
                    }

                    // onFrame
                    if (typeof options[property].callback.onFrame === 'function') {
                        for (time = options[property].time; time < options[property].end; time += __config.frameLength) {
                            offset = __frame + (Math.round(time * __config.frameRate));
                            addCallback(offset, elementID, property, options[property].callback.onFrame);
                        }
                    }

                    // onStop
                    if (typeof options[property].callback.onStop === 'function') {
                        addCallback(__frame + (Math.round(options[property].end * __config.frameRate)), elementID, property, options[property].callback.onStop);
                    }

                    // CLEANUP

                    // Get the offset and increase the current runtime if needed
                    offset = __frame + (Math.round(options[property].end * __config.frameRate));

                    // Clean up
                    if (offset > __runTime) {
                        __runTime = offset;
                    }

                }
            }

            if (typeof config.onStart === 'function') {
                addCallback(__frame + (Math.round(bounds.start * __config.frameRate)), elementID, 'callback', config.onStart);
            }

            if (typeof config.onFrame === 'function') {
                for (frame = __frame + Math.round(bounds.start * __config.frameRate); frame <= __frame + Math.round(bounds.stop * __config.frameRate); frame++) {
                    addCallback(frame, elementID, 'callback', config.onFrame);
                }
            }

            if (typeof config.onStop === 'function') {
                addCallback(__frame + (Math.round(bounds.stop * __config.frameRate)), elementID, 'callback', config.onStop);
            }
        };

        var makeFrame = function (offset, elementID, type, value, units, callback, skip) {

            /// Wow this is long winded.. but we need to check for existing frames, properties and elements. IT COULD be abstracted out into smaller methods but that would have a performance hit
            if (elementID !== undefined) {

                if (__timeline[offset] === undefined) {

                    __timeline[offset] = {};
                    __timeline[offset][elementID] = {};
                    __timeline[offset][elementID][type] = {
                        value: value,
                        units: units,
                        callback: [],
                        skip: skip
                    };

                } else if (__timeline[offset][elementID] === undefined) {

                    __timeline[offset][elementID] = {};
                    __timeline[offset][elementID][type] = {
                        value: value,
                        units: units,
                        callback: [],
                        skip: skip
                    };

                } else if (__timeline[offset][elementID][type] === undefined) {

                    __timeline[offset][elementID][type] = {
                        value: value,
                        units: units,
                        callback: [],
                        skip: skip
                    };

                } else {

                    if (value !== false) {
                        __timeline[offset][elementID][type].value = value;
                    }

                    if (units !== false) {
                        __timeline[offset][elementID][type].units = units;
                    }

                    __timeline[offset][elementID][type].skip = skip;

                }

                if (typeof callback === 'function') {
                    __timeline[offset][elementID][type].callback.push(callback);
                }

            } else if (__timeline[offset] === undefined) {
                __timeline[offset] = {};
            }

        };

        var addCallback = function (offset, elementID, type, callback) {
            makeFrame(offset, elementID, type, false, false, callback, true);
        };

        var play = function ( callback ) {

            if (__playing === false) {
                __frameTime = false;
                __playing = true;
                __playTime = timestamp();
                __playCallback = callback;
                playHead();
            }
        };

        var clear = function (element, property) {

            var time;

            if( element !== undefined && property !== undefined && element.__animate !== undefined ) {

                for (time in __timeline) {
                    if (__timeline.hasOwnProperty(time) && __timeline[time][element.__animate.id] !== undefined && __timeline[time][element.__animate.id][property] !== undefined) {
                        delete __timeline[time][element.__animate.id][property];
                    }
                }

            } else if( element !== undefined && element.__animate !== undefined ) {

                for (time in __timeline) {
                    if (__timeline.hasOwnProperty(time) && __timeline[time][element.__animate.id] !== undefined) {
                        delete __timeline[time][element.__animate.id];
                    }
                }

            } else {

                for (time in __timeline) {
                    if (__timeline.hasOwnProperty(time)) {
                        delete __timeline[time];
                    }
                }
            }
        };

        var timestamp = function () {
            var now = new Date();
            return now.getTime();
        };

        var playHead = function () {

            var current, elementID, type, delay;

            if (__frame <= __runTime ) {

                delay = (__config.frameDelay - ((timestamp() - __playTime) - ( __frame * __config.frameDelay)));
                if (delay < 0) {
                    delay = 0;
                } else if (delay > __config.frameDelay) {
                    delay = __config.frameDelay;
                }

                setTimeout(function () {
                    playHead(delay ? true : false);
                }, delay);

                for (elementID in __timeline[__frame]) {

                    if (__timeline[__frame].hasOwnProperty(elementID)) {

                        current = __timeline[__frame][elementID];

                        for (type in current) {

                            if (current.hasOwnProperty(type)) {

                                action(elementID, type, current[type].value, current[type].units, current[type].callback, ( current[type].skip === true ? true : ( delay ? true : false ) ) );
                            }
                        }
                    }
                }

                delete __timeline[__frame];
                __frame++;
                __frameTime = timestamp();

            } else {
                __frameTime = __playing = false;
                __frame = 0;

                if( typeof __playCallback === 'function' ) {
                    __playCallback();
                    __playCallback = false;
                }
            }
        };

        var action = function (elementID, type, value, units, callback, updateDOM ) {

            // Always render the last frame / property for this element
            var prop = __elements[elementID].__animate.state[type];

            if (updateDOM === true && value !== false && ( prop === undefined || ( prop.value != value ||prop.units != units ) ) ) {

                // Again.. the switch of the century.. I don't like this pattern but the altenative is even nastier
                switch (type) {

                case "zIndex":
                    __elements[elementID].style.zIndex = value;
                    break;

                case "alpha":
                case "transparency":
                case "opacity":
                    opacity(__elements[elementID], value);
                    break;

                case "scroll":
                case "scrollTop":
                case "scrollLeft":
                case 'scrollTo':
                    scroll(__elements[elementID], type, value);
                    break;

                case 'shadow':
                case 'boxShadow':
                    shadow(__elements[elementID], value);
                    break;

                case 'rotate':
                    rotate(__elements[elementID], value);
                    break;

                case 'transformOrigin':
                    transformOrigin(__elements[elementID], value);
                    break;

                case 'transform':
                    transform(__elements[elementID], value);
                    break;

                case 'backgroundSize':
                    backgroundSize(__elements[elementID], value);
                    break;

                case 'borderRadius':
                    borderRadius(__elements[elementID], value, units);
                    break;

                case 'borderRadiusTopRight':
                    borderRadiusCorner(__elements[elementID], 'top', 'right', value, units);
                    break;

                case 'borderRadiusTopLeft':
                    borderRadiusCorner(__elements[elementID], 'top', 'left', value, units);
                    break;

                case 'borderRadiusBottomRight':
                    borderRadiusCorner(__elements[elementID], 'bottom', 'right', value, units);
                    break;

                case 'borderRadiusBottomLeft':
                    borderRadiusCorner(__elements[elementID], 'bottom', 'left', value, units);
                    break;

                default:
                    if (typeof value === 'string') {
                        __elements[elementID].style[type] = value;
                    } else {
                        __elements[elementID].style[type] = value + units;
                    }
                    break;
                }
            }

            __elements[elementID].__animate.state[type] = {
                value: value,
                units: units
            };

            if (callback !== undefined && callback.length > 0) {
                for (i = 0; i < callback.length; i++) {
                    if (typeof callback[i] === 'function') {
                        callback[i](__elements[elementID], {
                            type: type,
                            value: value,
                            units: units,
                            id: elementID
                        });
                    }
                }
            }
        };

        var scroll = function (element, property, value) {

            var parsedValue;

            if (element.tagName === undefined && ( typeof element.scroll === 'function' || typeof element.scrollTo === 'function' ) && typeof value === 'string') {

                parsedValue = value.match(__value);

                if (parsedValue) {

                    if (self.pageYOffset) {
                        window.scroll(parseInt(parsedValue[0], 10), parseInt(parsedValue[1], 10));
                    } else if (document.documentElement && document.documentElement.scrollTop) {
                        window.scrollTo(parseInt(parsedValue[0], 10), parseInt(parsedValue[1], 10));
                    } else if (document.body) {
                        window.scrollTo(parseInt(parsedValue[0], 10), parseInt(parsedValue[1], 10));
                    }
                }

            } else {

                if (typeof value === 'string') {
                    parsedValue = value.match(__value);
                } else {
                    parsedValue = [value, value];
                }

                if (property === 'scrollTop') {

                    element.scrollTop = parseInt(parsedValue[1], 10);

                } else if (property === 'scrollLeft') {

                    element.scrollLeft = parseInt(parsedValue[0], 10);

                } else {

                    element.scrollLeft = parseInt(parsedValue[0], 10);
                    element.scrollTop = parseInt(parsedValue[1], 10);
                }
            }
        };

        var setProperty = function( element, prop, value, units ) {
            element.style[prop] = value + ( units ? units : '');
        };

        var opacity = function (element, value) {
            if( __cssSuportLookup.opacity === 'filter' ) {
                setProperty(element, 'filter', 'alpha(opacity=' + value + ')');
            } else {
                setProperty(element, __cssSuportLookup.opacity,  (value / 100) );
            }
        };

        var shadow = function (element, value) {
            setProperty(element, __cssSuportLookup.shadow, value);
        };

        var rotate = function (element, value) {
            setProperty(element, __cssSuportLookup.transform, 'rotate(' + value + 'deg)');
        };

        var transform = function (element, value) {
            setProperty(element, __cssSuportLookup.transform, value);
        };

        var backgroundSize = function (element, value) {
            setProperty(element, __cssSuportLookup.backgroundSize, value);
        };

        var transformOrigin = function (element, value) {
            setProperty(element, __cssSuportLookup.transformOrigin, value);
        };

        var borderRadius = function (element, value, units) {
            setProperty(element, __cssSuportLookup.borderRadius, value, units);
        };

        var borderRadiusCorner = function (element, upDown, leftRight, value, units) {

            if( upDown === 'top' ) {

                if( leftRight === 'left' ) {
                    setProperty(element, __cssSuportLookup.borderRadiusTopLeft, value, units);
                } else {
                    setProperty(element, __cssSuportLookup.borderRadiusTopRight, value, units);
                }

            } else {

                if( leftRight === 'left' ) {
                    setProperty(element, __cssSuportLookup.borderRadiusBottomLeft, value, units);
                } else {
                    setProperty(element, __cssSuportLookup.borderRadiusBottomRight, value, units);
                }
            }
        };

        var register = function (element) {

            if (element.__animate === undefined) {

                var elementID = __elements.length;

                element.__animate = {
                    id: elementID,
                    state: {},
                    callback: {},
                    dragging: false
                };

                __elements.push(element);
                return elementID;

            } else {
                return element.__animate.id;
            }
        };

        var effects = {
            linear: function (t, b, c, d) {
                return c * t / d + b;
            },
            quadIn: function (t, b, c, d) {

                return c * (t /= d) * t + b;
            },
            quadOut: function (t, b, c, d) {

                return -c * (t /= d) * (t - 2) + b;
            },
            quadInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {

                    return c / 2 * t * t + b;
                }

                return -c / 2 * ((--t) * (t - 2) - 1) + b;
            },
            cubicIn: function (t, b, c, d) {

                return c * (t /= d) * t * t + b;
            },
            cubicOut: function (t, b, c, d) {

                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            cubicInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {

                    return c / 2 * t * t * t + b;
                }

                return c / 2 * ((t -= 2) * t * t + 2) + b;
            },

            // Copy of cubic
            easeIn: function (t, b, c, d) {

                return c * (t /= d) * t * t + b;
            },
            easeOut: function (t, b, c, d) {

                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            easeInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {

                    return c / 2 * t * t * t + b;
                }

                return c / 2 * ((t -= 2) * t * t + 2) + b;
            },
            // End copy
            quartIn: function (t, b, c, d) {

                return c * (t /= d) * t * t * t + b;
            },
            quartOut: function (t, b, c, d) {

                return -c * ((t = t / d - 1) * t * t * t - 1) + b;
            },
            quartInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {

                    return c / 2 * t * t * t * t + b;
                }

                return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
            },
            quintIn: function (t, b, c, d) {

                return c * (t /= d) * t * t * t * t + b;
            },
            quintOut: function (t, b, c, d) {

                return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
            },
            quintInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {
                    return c / 2 * t * t * t * t * t + b;
                }

                return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
            },
            sineIn: function (t, b, c, d) {
                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
            },
            sineOut: function (t, b, c, d) {
                return c * Math.sin(t / d * (Math.PI / 2)) + b;
            },
            sineInOut: function (t, b, c, d) {

                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
            },
            expoIn: function (t, b, c, d) {

                return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
            },
            expoOut: function (t, b, c, d) {

                return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
            },
            expoInOut: function (t, b, c, d) {

                if (t === 0) { return b; }
                if (t === d) { return b + c; }

                if ((t /= d / 2) < 1) {
                    return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                }

                return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
            },
            circIn: function (t, b, c, d) {

                return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
            },
            circOut: function (t, b, c, d) {

                return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
            },
            circInOut: function (t, b, c, d) {

                if ((t /= d / 2) < 1) {

                    return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
                }

                return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
            },
            bounceIn: function (t, b, c, d) {

                return c - effects.bounceOut(d - t, 0, c, d) + b;
            },
            bounceOut: function (t, b, c, d) {

                if ((t /= d) < (1 / 2.75)) {
                    return c * (7.5625 * t * t) + b;
                } else

                if (t < (2 / 2.75)) {
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
                } else

                if (t < (2.5 / 2.75)) {
                    return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
                } else {
                    return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
                }
            },
            bounceInOut: function (t, b, c, d) {

                if (t < d / 2) {
                    return effects.bounceIn(t * 2, 0, c, d) * 0.5 + b;
                }

                return effects.bounceOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
            },
            elasticIn: function (t, b, c, d, a, p) {

                if (t === 0) { return b; }

                if ((t /= d) === 1) {
                    return b + c;
                }

                if (!p) {
                    p = d * 0.3;
                }

                if (!a) {
                    a = 1;
                }
                var s = 0;

                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else {
                    s = p / (2 * Math.PI) * Math.asin(c / a);
                }

                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            },
            elasticOut: function (t, b, c, d, a, p) {

                if (t === 0) {
                    return b;
                }

                if ((t /= d) === 1) {
                    return b + c;
                }

                if (!p) {
                    p = d * 0.3;
                }

                if (!a) {
                    a = 1;
                }
                var s = 0;

                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else {
                    s = p / (2 * Math.PI) * Math.asin(c / a);
                }

                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
            },
            elasticInOut: function (t, b, c, d, a, p) {

                if (t === 0) {
                    return b;
                }

                if ((t /= d / 2) === 2) {
                    return b + c;
                }

                if (!p) {
                    p = d * (0.3 * 1.5);
                }

                if (!a) {
                    a = 1;
                }
                var s = 0;

                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else {
                    s = p / (2 * Math.PI) * Math.asin(c / a);
                }

                if (t < 1) {

                    return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                }

                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
            }
        };

    that.tween = tween;
    that.action = action;
    that.register = register;
    that.shadow = shadow;
    that.opacity = opacity;
    that.borderRadius = borderRadius;
    that.borderRadiusCorner = borderRadiusCorner;
    that.backgroundSize = backgroundSize;
    that.transformOrigin = transformOrigin;
    that.rotate = rotate;
    that.transform = transform;
    that.clear = clear;
    that.play = play;
    that.property = getProperty;
    that.getScroll = getScroll;
    that.scroll = scroll;
    that.framerate = framerate;

    init();

    return that;

}( JSTween || {} ) );

YUI.add('thirdparty-jstween', function (Y) {}, "1.0", { });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/history-hash-ie/history-hash-ie.js
// ----------------------------------------------------------------------------------------

YUI.add('history-hash-ie', function (Y, NAME) {

/**
 * Improves IE6/7 support in history-hash by using a hidden iframe to create
 * entries in IE's browser history. This module is only needed if IE6/7 support
 * is necessary; it's not needed for any other browser.
 *
 * @module history
 * @submodule history-hash-ie
 * @since 3.2.0
 */

// Combination of a UA sniff to ensure this is IE (or a browser that wants us to
// treat it like IE) and feature detection for native hashchange support (false
// for IE < 8 or IE8/9 in IE7 mode).
if (Y.UA.ie && !Y.HistoryBase.nativeHashChange) {
    var Do          = Y.Do,
        GlobalEnv   = YUI.namespace('Env.HistoryHash'),
        HistoryHash = Y.HistoryHash,

        iframe = GlobalEnv._iframe,
        win    = Y.config.win;

    /**
     * Gets the raw (not decoded) current location hash from the IE iframe,
     * minus the preceding '#' character and the hashPrefix (if one is set).
     *
     * @method getIframeHash
     * @return {String} current iframe hash
     * @static
     */
    HistoryHash.getIframeHash = function () {
        if (!iframe || !iframe.contentWindow) {
            return '';
        }

        var prefix = HistoryHash.hashPrefix,
            hash   = iframe.contentWindow.location.hash.substr(1);

        return prefix && hash.indexOf(prefix) === 0 ?
                    hash.replace(prefix, '') : hash;
    };

    /**
     * Updates the history iframe with the specified hash.
     *
     * @method _updateIframe
     * @param {String} hash location hash
     * @param {Boolean} replace (optional) if <code>true</code>, the current
     *   history state will be replaced without adding a new history entry
     * @protected
     * @static
     * @for HistoryHash
     */
    HistoryHash._updateIframe = function (hash, replace) {
        var iframeDoc      = iframe && iframe.contentWindow && iframe.contentWindow.document,
            iframeLocation = iframeDoc && iframeDoc.location;

        if (!iframeDoc || !iframeLocation) {
            return;
        }


        if (replace) {
            iframeLocation.replace(hash.charAt(0) === '#' ? hash : '#' + hash);
        } else {
            iframeDoc.open().close();
            iframeLocation.hash = hash;
        }
    };

    Do.before(HistoryHash._updateIframe, HistoryHash, 'replaceHash', HistoryHash, true);

    if (!iframe) {
        Y.on('domready', function () {
            var lastUrlHash = HistoryHash.getHash();

            // Create a hidden iframe to store history state, following the
            // iframe-hiding recommendations from
            // http://www.paciellogroup.com/blog/?p=604.
            //
            // This iframe will allow history navigation within the current page
            // context. After navigating to another page, all but the most
            // recent history state will be lost.
            //
            // Earlier versions of the YUI History Utility attempted to work
            // around this limitation by having the iframe load a static
            // resource. This workaround was extremely fragile and tended to
            // break frequently (and silently) since it was entirely dependent
            // on IE's inconsistent handling of iframe history.
            //
            // Since this workaround didn't work much of the time anyway and
            // added significant complexity, it has been removed, and IE6 and 7
            // now get slightly degraded history support.

            iframe = GlobalEnv._iframe = Y.Node.getDOMNode(Y.Node.create(
                '<iframe src="javascript:0" style="display:none" height="0" width="0" tabindex="-1" title="empty"/>'
            ));

            // Append the iframe to the documentElement rather than the body.
            // Keeping it outside the body prevents scrolling on the initial
            // page load (hat tip to Ben Alman and jQuery BBQ for this
            // technique).
            Y.config.doc.documentElement.appendChild(iframe);

            // Update the iframe with the initial location hash, if any. This
            // will create an initial history entry that the user can return to
            // after the state has changed.
            HistoryHash._updateIframe(lastUrlHash || '#');

            // Listen for hashchange events and keep the iframe's hash in sync
            // with the parent frame's hash.
            Y.on('hashchange', function (e) {
                lastUrlHash = e.newHash;

                if (HistoryHash.getIframeHash() !== lastUrlHash) {
                    HistoryHash._updateIframe(lastUrlHash);
                }
            }, win);

            // Watch the iframe hash in order to detect back/forward navigation.
            Y.later(50, null, function () {
                var iframeHash = HistoryHash.getIframeHash();

                if (iframeHash !== lastUrlHash) {
                    HistoryHash.setHash(iframeHash);
                }
            }, null, true);
        });
    }
}


}, '3.10.1', {"requires": ["history-hash", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/base-build/base-build.js
// ----------------------------------------------------------------------------------------

YUI.add('base-build', function (Y, NAME) {

    /**
     * The base-build submodule provides Base.build functionality, which
     * can be used to create custom classes, by aggregating extensions onto
     * a main class.
     *
     * @module base
     * @submodule base-build
     * @for Base
     */
    var BaseCore = Y.BaseCore,
        Base     = Y.Base,
        L        = Y.Lang,

        INITIALIZER = "initializer",
        DESTRUCTOR  = "destructor",
        AGGREGATES  = ["_PLUG", "_UNPLUG"],

        build;

    // Utility function used in `_buildCfg` to aggregate array values into a new
    // array from the sender constructor to the receiver constructor.
    function arrayAggregator(prop, r, s) {
        if (s[prop]) {
            r[prop] = (r[prop] || []).concat(s[prop]);
        }
    }

    // Utility function used in `_buildCfg` to aggregate `_ATTR_CFG` array
    // values from the sender constructor into a new array on receiver's
    // constructor, and clear the cached hash.
    function attrCfgAggregator(prop, r, s) {
        if (s._ATTR_CFG) {
            // Clear cached hash.
            r._ATTR_CFG_HASH = null;

            arrayAggregator.apply(null, arguments);
        }
    }

    // Utility function used in `_buildCfg` to aggregate ATTRS configs from one
    // the sender constructor to the receiver constructor.
    function attrsAggregator(prop, r, s) {
        BaseCore.modifyAttrs(r, s.ATTRS);
    }

    Base._build = function(name, main, extensions, px, sx, cfg) {

        var build = Base._build,

            builtClass = build._ctor(main, cfg),
            buildCfg = build._cfg(main, cfg, extensions),

            _mixCust = build._mixCust,

            dynamic = builtClass._yuibuild.dynamic,

            i, l, extClass, extProto,
            initializer,
            destructor;

        // Augment/Aggregate
        for (i = 0, l = extensions.length; i < l; i++) {
            extClass = extensions[i];

            extProto = extClass.prototype;

            initializer = extProto[INITIALIZER];
            destructor = extProto[DESTRUCTOR];
            delete extProto[INITIALIZER];
            delete extProto[DESTRUCTOR];

            // Prototype, old non-displacing augment
            Y.mix(builtClass, extClass, true, null, 1);

            // Custom Statics
            _mixCust(builtClass, extClass, buildCfg);

            if (initializer) {
                extProto[INITIALIZER] = initializer;
            }

            if (destructor) {
                extProto[DESTRUCTOR] = destructor;
            }

            builtClass._yuibuild.exts.push(extClass);
        }

        if (px) {
            Y.mix(builtClass.prototype, px, true);
        }

        if (sx) {
            Y.mix(builtClass, build._clean(sx, buildCfg), true);
            _mixCust(builtClass, sx, buildCfg);
        }

        builtClass.prototype.hasImpl = build._impl;

        if (dynamic) {
            builtClass.NAME = name;
            builtClass.prototype.constructor = builtClass;

            // Carry along the reference to `modifyAttrs()` from `main`.
            builtClass.modifyAttrs = main.modifyAttrs;
        }

        return builtClass;
    };

    build = Base._build;

    Y.mix(build, {

        _mixCust: function(r, s, cfg) {

            var aggregates,
                custom,
                statics,
                aggr,
                l,
                i;

            if (cfg) {
                aggregates = cfg.aggregates;
                custom = cfg.custom;
                statics = cfg.statics;
            }

            if (statics) {
                Y.mix(r, s, true, statics);
            }

            if (aggregates) {
                for (i = 0, l = aggregates.length; i < l; i++) {
                    aggr = aggregates[i];
                    if (!r.hasOwnProperty(aggr) && s.hasOwnProperty(aggr)) {
                        r[aggr] = L.isArray(s[aggr]) ? [] : {};
                    }
                    Y.aggregate(r, s, true, [aggr]);
                }
            }

            if (custom) {
                for (i in custom) {
                    if (custom.hasOwnProperty(i)) {
                        custom[i](i, r, s);
                    }
                }
            }

        },

        _tmpl: function(main) {

            function BuiltClass() {
                BuiltClass.superclass.constructor.apply(this, arguments);
            }
            Y.extend(BuiltClass, main);

            return BuiltClass;
        },

        _impl : function(extClass) {
            var classes = this._getClasses(), i, l, cls, exts, ll, j;
            for (i = 0, l = classes.length; i < l; i++) {
                cls = classes[i];
                if (cls._yuibuild) {
                    exts = cls._yuibuild.exts;
                    ll = exts.length;

                    for (j = 0; j < ll; j++) {
                        if (exts[j] === extClass) {
                            return true;
                        }
                    }
                }
            }
            return false;
        },

        _ctor : function(main, cfg) {

           var dynamic = (cfg && false === cfg.dynamic) ? false : true,
               builtClass = (dynamic) ? build._tmpl(main) : main,
               buildCfg = builtClass._yuibuild;

            if (!buildCfg) {
                buildCfg = builtClass._yuibuild = {};
            }

            buildCfg.id = buildCfg.id || null;
            buildCfg.exts = buildCfg.exts || [];
            buildCfg.dynamic = dynamic;

            return builtClass;
        },

        _cfg : function(main, cfg, exts) {
            var aggr = [],
                cust = {},
                statics = [],
                buildCfg,
                cfgAggr = (cfg && cfg.aggregates),
                cfgCustBuild = (cfg && cfg.custom),
                cfgStatics = (cfg && cfg.statics),
                c = main,
                i,
                l;

            // Prototype Chain
            while (c && c.prototype) {
                buildCfg = c._buildCfg;
                if (buildCfg) {
                    if (buildCfg.aggregates) {
                        aggr = aggr.concat(buildCfg.aggregates);
                    }
                    if (buildCfg.custom) {
                        Y.mix(cust, buildCfg.custom, true);
                    }
                    if (buildCfg.statics) {
                        statics = statics.concat(buildCfg.statics);
                    }
                }
                c = c.superclass ? c.superclass.constructor : null;
            }

            // Exts
            if (exts) {
                for (i = 0, l = exts.length; i < l; i++) {
                    c = exts[i];
                    buildCfg = c._buildCfg;
                    if (buildCfg) {
                        if (buildCfg.aggregates) {
                            aggr = aggr.concat(buildCfg.aggregates);
                        }
                        if (buildCfg.custom) {
                            Y.mix(cust, buildCfg.custom, true);
                        }
                        if (buildCfg.statics) {
                            statics = statics.concat(buildCfg.statics);
                        }
                    }
                }
            }

            if (cfgAggr) {
                aggr = aggr.concat(cfgAggr);
            }

            if (cfgCustBuild) {
                Y.mix(cust, cfg.cfgBuild, true);
            }

            if (cfgStatics) {
                statics = statics.concat(cfgStatics);
            }

            return {
                aggregates: aggr,
                custom: cust,
                statics: statics
            };
        },

        _clean : function(sx, cfg) {
            var prop, i, l, sxclone = Y.merge(sx),
                aggregates = cfg.aggregates,
                custom = cfg.custom;

            for (prop in custom) {
                if (sxclone.hasOwnProperty(prop)) {
                    delete sxclone[prop];
                }
            }

            for (i = 0, l = aggregates.length; i < l; i++) {
                prop = aggregates[i];
                if (sxclone.hasOwnProperty(prop)) {
                    delete sxclone[prop];
                }
            }

            return sxclone;
        }
    });

    /**
     * <p>
     * Builds a custom constructor function (class) from the
     * main function, and array of extension functions (classes)
     * provided. The NAME field for the constructor function is
     * defined by the first argument passed in.
     * </p>
     * <p>
     * The cfg object supports the following properties
     * </p>
     * <dl>
     *    <dt>dynamic &#60;boolean&#62;</dt>
     *    <dd>
     *    <p>If true (default), a completely new class
     *    is created which extends the main class, and acts as the
     *    host on which the extension classes are augmented.</p>
     *    <p>If false, the extensions classes are augmented directly to
     *    the main class, modifying the main class' prototype.</p>
     *    </dd>
     *    <dt>aggregates &#60;String[]&#62;</dt>
     *    <dd>An array of static property names, which will get aggregated
     *    on to the built class, in addition to the default properties build
     *    will always aggregate as defined by the main class' static _buildCfg
     *    property.
     *    </dd>
     * </dl>
     *
     * @method build
     * @deprecated Use the more convenient Base.create and Base.mix methods instead
     * @static
     * @param {Function} name The name of the new class. Used to define the NAME property for the new class.
     * @param {Function} main The main class on which to base the built class
     * @param {Function[]} extensions The set of extension classes which will be
     * augmented/aggregated to the built class.
     * @param {Object} cfg Optional. Build configuration for the class (see description).
     * @return {Function} A custom class, created from the provided main and extension classes
     */
    Base.build = function(name, main, extensions, cfg) {
        return build(name, main, extensions, null, null, cfg);
    };

    /**
     * Creates a new class (constructor function) which extends the base class passed in as the second argument,
     * and mixes in the array of extensions provided.
     *
     * Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).
     *
     * Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).
     *
     * **NOTE FOR COMPONENT DEVELOPERS**: Both the `base` class, and `extensions` can define static a `_buildCfg`
     * property, which acts as class creation meta-data, and drives how special static properties from the base
     * class, or extensions should be copied, aggregated or (custom) mixed into the newly created class.
     *
     * The `_buildCfg` property is a hash with 3 supported properties: `statics`, `aggregates` and `custom`, e.g:
     *
     *     // If the Base/Main class is the thing introducing the property:
     *
     *     MyBaseClass._buildCfg = {
     *
     *        // Static properties/methods to copy (Alias) to the built class.
     *        statics: ["CopyThisMethod", "CopyThisProperty"],
     *
     *        // Static props to aggregate onto the built class.
     *        aggregates: ["AggregateThisProperty"],
     *
     *        // Static properties which need custom handling (e.g. deep merge etc.)
     *        custom: {
     *           "CustomProperty" : function(property, Receiver, Supplier) {
     *              ...
     *              var triggers = Receiver.CustomProperty.triggers;
     *              Receiver.CustomProperty.triggers = triggers.concat(Supplier.CustomProperty.triggers);
     *              ...
     *           }
     *        }
     *     };
     *
     *     MyBaseClass.CopyThisMethod = function() {...};
     *     MyBaseClass.CopyThisProperty = "foo";
     *     MyBaseClass.AggregateThisProperty = {...};
     *     MyBaseClass.CustomProperty = {
     *        triggers: [...]
     *     }
     *
     *     // Or, if the Extension is the thing introducing the property:
     *
     *     MyExtension._buildCfg = {
     *         statics : ...
     *         aggregates : ...
     *         custom : ...
     *     }
     *
     * This way, when users pass your base or extension class to `Y.Base.create` or `Y.Base.mix`, they don't need to
     * know which properties need special handling. `Y.Base` has a buildCfg which defines `ATTRS` for custom mix handling
     * (to protect the static config objects), and `Y.Widget` has a buildCfg which specifies `HTML_PARSER` for
     * straight up aggregation.
     *
     * @method create
     * @static
     * @param {String} name The name of the newly created class. Used to define the NAME property for the new class.
     * @param {Function} main The base class which the new class should extend.
     * This class needs to be Base or a class derived from base (e.g. Widget).
     * @param {Function[]} extensions The list of extensions which will be mixed into the built class.
     * @param {Object} px The set of prototype properties/methods to add to the built class.
     * @param {Object} sx The set of static properties/methods to add to the built class.
     * @return {Function} The newly created class.
     */
    Base.create = function(name, base, extensions, px, sx) {
        return build(name, base, extensions, px, sx);
    };

    /**
     * <p>Mixes in a list of extensions to an existing class.</p>
     * @method mix
     * @static
     * @param {Function} main The existing class into which the extensions should be mixed.
     * The class needs to be Base or a class derived from Base (e.g. Widget)
     * @param {Function[]} extensions The set of extension classes which will mixed into the existing main class.
     * @return {Function} The modified main class, with extensions mixed in.
     */
    Base.mix = function(main, extensions) {

        if (main._CACHED_CLASS_DATA) {
            main._CACHED_CLASS_DATA = null;
        }

        return build(null, main, extensions, null, null, {dynamic:false});
    };

    /**
     * The build configuration for the Base class.
     *
     * Defines the static fields which need to be aggregated when the Base class
     * is used as the main class passed to the
     * <a href="#method_Base.build">Base.build</a> method.
     *
     * @property _buildCfg
     * @type Object
     * @static
     * @final
     * @private
     */
    BaseCore._buildCfg = {
        aggregates: AGGREGATES.concat(),

        custom: {
            ATTRS         : attrsAggregator,
            _ATTR_CFG     : attrCfgAggregator,
            _NON_ATTRS_CFG: arrayAggregator
        }
    };

    // Makes sure Base and BaseCore use separate `_buildCfg` objects.
    Base._buildCfg = {
        aggregates: AGGREGATES.concat(),

        custom: {
            ATTRS         : attrsAggregator,
            _ATTR_CFG     : attrCfgAggregator,
            _NON_ATTRS_CFG: arrayAggregator
        }
    };


}, '3.10.1', {"requires": ["base-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-screen/node-screen.js
// ----------------------------------------------------------------------------------------

YUI.add('node-screen', function (Y, NAME) {

/**
 * Extended Node interface for managing regions and screen positioning.
 * Adds support for positioning elements and normalizes window size and scroll detection.
 * @module node
 * @submodule node-screen
 */

// these are all "safe" returns, no wrapping required
Y.each([
    /**
     * Returns the inner width of the viewport (exludes scrollbar).
     * @config winWidth
     * @for Node
     * @type {Int}
     */
    'winWidth',

    /**
     * Returns the inner height of the viewport (exludes scrollbar).
     * @config winHeight
     * @type {Int}
     */
    'winHeight',

    /**
     * Document width
     * @config docWidth
     * @type {Int}
     */
    'docWidth',

    /**
     * Document height
     * @config docHeight
     * @type {Int}
     */
    'docHeight',

    /**
     * Pixel distance the page has been scrolled horizontally
     * @config docScrollX
     * @type {Int}
     */
    'docScrollX',

    /**
     * Pixel distance the page has been scrolled vertically
     * @config docScrollY
     * @type {Int}
     */
    'docScrollY'
    ],
    function(name) {
        Y.Node.ATTRS[name] = {
            getter: function() {
                var args = Array.prototype.slice.call(arguments);
                args.unshift(Y.Node.getDOMNode(this));

                return Y.DOM[name].apply(this, args);
            }
        };
    }
);

Y.Node.ATTRS.scrollLeft = {
    getter: function() {
        var node = Y.Node.getDOMNode(this);
        return ('scrollLeft' in node) ? node.scrollLeft : Y.DOM.docScrollX(node);
    },

    setter: function(val) {
        var node = Y.Node.getDOMNode(this);
        if (node) {
            if ('scrollLeft' in node) {
                node.scrollLeft = val;
            } else if (node.document || node.nodeType === 9) {
                Y.DOM._getWin(node).scrollTo(val, Y.DOM.docScrollY(node)); // scroll window if win or doc
            }
        } else {
        }
    }
};

Y.Node.ATTRS.scrollTop = {
    getter: function() {
        var node = Y.Node.getDOMNode(this);
        return ('scrollTop' in node) ? node.scrollTop : Y.DOM.docScrollY(node);
    },

    setter: function(val) {
        var node = Y.Node.getDOMNode(this);
        if (node) {
            if ('scrollTop' in node) {
                node.scrollTop = val;
            } else if (node.document || node.nodeType === 9) {
                Y.DOM._getWin(node).scrollTo(Y.DOM.docScrollX(node), val); // scroll window if win or doc
            }
        } else {
        }
    }
};

Y.Node.importMethod(Y.DOM, [
/**
 * Gets the current position of the node in page coordinates.
 * @method getXY
 * @for Node
 * @return {Array} The XY position of the node
*/
    'getXY',

/**
 * Set the position of the node in page coordinates, regardless of how the node is positioned.
 * @method setXY
 * @param {Array} xy Contains X & Y values for new position (coordinates are page-based)
 * @chainable
 */
    'setXY',

/**
 * Gets the current position of the node in page coordinates.
 * @method getX
 * @return {Int} The X position of the node
*/
    'getX',

/**
 * Set the position of the node in page coordinates, regardless of how the node is positioned.
 * @method setX
 * @param {Int} x X value for new position (coordinates are page-based)
 * @chainable
 */
    'setX',

/**
 * Gets the current position of the node in page coordinates.
 * @method getY
 * @return {Int} The Y position of the node
*/
    'getY',

/**
 * Set the position of the node in page coordinates, regardless of how the node is positioned.
 * @method setY
 * @param {Int} y Y value for new position (coordinates are page-based)
 * @chainable
 */
    'setY',

/**
 * Swaps the XY position of this node with another node.
 * @method swapXY
 * @param {Node | HTMLElement} otherNode The node to swap with.
 * @chainable
 */
    'swapXY'
]);

/**
 * @module node
 * @submodule node-screen
 */

/**
 * Returns a region object for the node
 * @config region
 * @for Node
 * @type Node
 */
Y.Node.ATTRS.region = {
    getter: function() {
        var node = this.getDOMNode(),
            region;

        if (node && !node.tagName) {
            if (node.nodeType === 9) { // document
                node = node.documentElement;
            }
        }
        if (Y.DOM.isWindow(node)) {
            region = Y.DOM.viewportRegion(node);
        } else {
            region = Y.DOM.region(node);
        }
        return region;
    }
};

/**
 * Returns a region object for the node's viewport
 * @config viewportRegion
 * @type Node
 */
Y.Node.ATTRS.viewportRegion = {
    getter: function() {
        return Y.DOM.viewportRegion(Y.Node.getDOMNode(this));
    }
};

Y.Node.importMethod(Y.DOM, 'inViewportRegion');

// these need special treatment to extract 2nd node arg
/**
 * Compares the intersection of the node with another node or region
 * @method intersect
 * @for Node
 * @param {Node|Object} node2 The node or region to compare with.
 * @param {Object} altRegion An alternate region to use (rather than this node's).
 * @return {Object} An object representing the intersection of the regions.
 */
Y.Node.prototype.intersect = function(node2, altRegion) {
    var node1 = Y.Node.getDOMNode(this);
    if (Y.instanceOf(node2, Y.Node)) { // might be a region object
        node2 = Y.Node.getDOMNode(node2);
    }
    return Y.DOM.intersect(node1, node2, altRegion);
};

/**
 * Determines whether or not the node is within the giving region.
 * @method inRegion
 * @param {Node|Object} node2 The node or region to compare with.
 * @param {Boolean} all Whether or not all of the node must be in the region.
 * @param {Object} altRegion An alternate region to use (rather than this node's).
 * @return {Boolean} True if in region, false if not.
 */
Y.Node.prototype.inRegion = function(node2, all, altRegion) {
    var node1 = Y.Node.getDOMNode(this);
    if (Y.instanceOf(node2, Y.Node)) { // might be a region object
        node2 = Y.Node.getDOMNode(node2);
    }
    return Y.DOM.inRegion(node1, node2, all, altRegion);
};


}, '3.10.1', {"requires": ["dom-screen", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-color/anim-color.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-color', function (Y, NAME) {

/**
 * Adds support for color properties in <code>to</code>
 * and <code>from</code> attributes.
 * @module anim
 * @submodule anim-color
 */

var NUM = Number;

Y.Anim.getUpdatedColorValue = function(fromColor, toColor, elapsed, duration,  fn)
{
    fromColor = Y.Color.re_RGB.exec(Y.Color.toRGB(fromColor));
    toColor = Y.Color.re_RGB.exec(Y.Color.toRGB(toColor));

    if (!fromColor || fromColor.length < 3 || !toColor || toColor.length < 3) {
        Y.error('invalid from or to passed to color behavior');
    }

    return 'rgb(' + [
        Math.floor(fn(elapsed, NUM(fromColor[1]), NUM(toColor[1]) - NUM(fromColor[1]), duration)),
        Math.floor(fn(elapsed, NUM(fromColor[2]), NUM(toColor[2]) - NUM(fromColor[2]), duration)),
        Math.floor(fn(elapsed, NUM(fromColor[3]), NUM(toColor[3]) - NUM(fromColor[3]), duration))
    ].join(', ') + ')';
};

Y.Anim.behaviors.color = {
    set: function(anim, att, from, to, elapsed, duration, fn) {
        anim._node.setStyle(att, Y.Anim.getUpdatedColorValue(from, to, elapsed, duration, fn));
    },

    // TODO: default bgcolor const
    get: function(anim, att) {
        var val = anim._node.getComputedStyle(att);
        val = (val === 'transparent') ? 'rgb(255, 255, 255)' : val;
        return val;
    }
};

Y.each(['backgroundColor',
        'borderColor',
        'borderTopColor',
        'borderRightColor',
        'borderBottomColor',
        'borderLeftColor'],
        function(v) {
            Y.Anim.behaviors[v] = Y.Anim.behaviors.color;
        }
);


}, '3.10.1', {"requires": ["anim-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/logger.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-logger', function (Y) {

    var logQueue = [],
    logTimer = null;

    var Logger = Y.Base.create('logger', Y.Base, [], {
initializer: function (cfg) {
Y.one(window).on('beforeunload', this.flush, this);
},

enqueue: function (logEntry) {
logQueue.push(logEntry);
this.wait();
},

flush: function (sync) {
try {
clearTimeout(logTimer);
} catch (err) {}
logTimer = null;

if (logQueue.length > 0) {
Y.Data.post({
url: '/api/events/Trace',
data: {
data: JSON.stringify(logQueue)
},
failure: function() {} // do nothing.
});
}

logQueue = [];
},

wait: function () {
        if (logTimer === null) {
          logTimer = setTimeout(Y.bind(this.flush, this), this.get('timerLength'));
        }
      },

log: function (type, data) {
       if (Y.Lang.isValue(type)) {
         this.enqueue({
sessionKey  : this.get('sessionKey'),
pageUrl     : document.location.href,
type        : type,
data        : JSON.stringify(Y.Lang.isValue(data) ? data : {})
});
}
// console.log.apply(console, ['[' +type + ']', data]);
},

debug: function(debugData) {
         // KEEP THIS HERE. ITS REALLY GOOD FOR DEBUGGING.
         // -naz

         var node = Y.one('#logger-debug') || Y.one('body').appendChild(Y.Node.create('<div id="logger-debug"></div>'));
         node.setStyles({
position: 'fixed',
right: 50,
top: 50,
background: 'rgba(150,100,100,0.9)',
border: 'solid 1px white',
color: 'white',
borderRadius: '3px',
padding: 20,
zIndex: 10000000
});


function getDebugData(data) {
  return Y.Array.map(data, function(item) {
      if (item.items && item.items.length) {
      return getDebugData(item.items);
      } else {
      return item.title;
      }
      });
}

      node.setContent('<xmp style="margin:0">' + JSON.stringify(debugData, null, 2) + '</xmp>');
    }
  }, {
    ATTRS: {
      timerLength : {
        value : 30 * 1000
      },
      sessionKey : {
        value : Y.Cookie.get("JSESSIONID")
      }
    }
  });


/* ***** ***** ***** ***** *****
   PUBLIC INSTANCE OF Logger API
 ***** ***** ***** ***** ***** */

Y.namespace("Squarespace").Logger = new Logger();

}, '1.0', {
requires: [
            'node',
            'io-base',
            'cookie',
            'event',
            'base'
              ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/datatype-date-format/datatype-date-format.js
// ----------------------------------------------------------------------------------------

YUI.add('datatype-date-format', function (Y, NAME) {

/**
 * The `datatype` module is an alias for three utilities, Y.Date,
 * Y.Number and Y.XML, that provide type-conversion and string-formatting
 * convenience methods for various JavaScript object types.
 *
 * @module datatype
 * @main datatype
 */

/**
 * The Date Utility provides type-conversion and string-formatting
 * convenience methods for Dates.
 *
 * @module datatype-date
 * @main datatype-date
 */

/**
 * Date module.
 *
 * @module datatype-date
 */

/**
 * Format date module implements strftime formatters for javascript based on the
 * Open Group specification defined at
 * http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html
 * This implementation does not include modified conversion specifiers (i.e., Ex and Ox)
 *
 * @module datatype-date
 * @submodule datatype-date-format
 */

/**
 * Date provides a set of utility functions to operate against Date objects.
 *
 * @class Date
 * @static
 */

/**
 * Pad a number with leading spaces, zeroes or something else
 * @method xPad
 * @param x {Number}    The number to be padded
 * @param pad {String}  The character to pad the number with
 * @param r {Number}    (optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits.
 * @private
 */
var xPad=function (x, pad, r)
{
    if(typeof r === "undefined")
    {
        r=10;
    }
    pad = pad + "";
    for( ; parseInt(x, 10)<r && r>1; r/=10) {
        x = pad + x;
    }
    return x.toString();
};

var Dt = {
    formats: {
        a: function (d, l) { return l.a[d.getDay()]; },
        A: function (d, l) { return l.A[d.getDay()]; },
        b: function (d, l) { return l.b[d.getMonth()]; },
        B: function (d, l) { return l.B[d.getMonth()]; },
        C: function (d) { return xPad(parseInt(d.getFullYear()/100, 10), 0); },
        d: ["getDate", "0"],
        e: ["getDate", " "],
        g: function (d) { return xPad(parseInt(Dt.formats.G(d)%100, 10), 0); },
        G: function (d) {
                var y = d.getFullYear();
                var V = parseInt(Dt.formats.V(d), 10);
                var W = parseInt(Dt.formats.W(d), 10);

                if(W > V) {
                    y++;
                } else if(W===0 && V>=52) {
                    y--;
                }

                return y;
            },
        H: ["getHours", "0"],
        I: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, 0); },
        j: function (d) {
                var gmd_1 = new Date("" + d.getFullYear() + "/1/1 GMT");
                var gmdate = new Date("" + d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate() + " GMT");
                var ms = gmdate - gmd_1;
                var doy = parseInt(ms/60000/60/24, 10)+1;
                return xPad(doy, 0, 100);
            },
        k: ["getHours", " "],
        l: function (d) { var I=d.getHours()%12; return xPad(I===0?12:I, " "); },
        m: function (d) { return xPad(d.getMonth()+1, 0); },
        M: ["getMinutes", "0"],
        p: function (d, l) { return l.p[d.getHours() >= 12 ? 1 : 0 ]; },
        P: function (d, l) { return l.P[d.getHours() >= 12 ? 1 : 0 ]; },
        s: function (d, l) { return parseInt(d.getTime()/1000, 10); },
        S: ["getSeconds", "0"],
        u: function (d) { var dow = d.getDay(); return dow===0?7:dow; },
        U: function (d) {
                var doy = parseInt(Dt.formats.j(d), 10);
                var rdow = 6-d.getDay();
                var woy = parseInt((doy+rdow)/7, 10);
                return xPad(woy, 0);
            },
        V: function (d) {
                var woy = parseInt(Dt.formats.W(d), 10);
                var dow1_1 = (new Date("" + d.getFullYear() + "/1/1")).getDay();
                // First week is 01 and not 00 as in the case of %U and %W,
                // so we add 1 to the final result except if day 1 of the year
                // is a Monday (then %W returns 01).
                // We also need to subtract 1 if the day 1 of the year is
                // Friday-Sunday, so the resulting equation becomes:
                var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);
                if(idow === 53 && (new Date("" + d.getFullYear() + "/12/31")).getDay() < 4)
                {
                    idow = 1;
                }
                else if(idow === 0)
                {
                    idow = Dt.formats.V(new Date("" + (d.getFullYear()-1) + "/12/31"));
                }

                return xPad(idow, 0);
            },
        w: "getDay",
        W: function (d) {
                var doy = parseInt(Dt.formats.j(d), 10);
                var rdow = 7-Dt.formats.u(d);
                var woy = parseInt((doy+rdow)/7, 10);
                return xPad(woy, 0, 10);
            },
        y: function (d) { return xPad(d.getFullYear()%100, 0); },
        Y: "getFullYear",
        z: function (d) {
                var o = d.getTimezoneOffset();
                var H = xPad(parseInt(Math.abs(o/60), 10), 0);
                var M = xPad(Math.abs(o%60), 0);
                return (o>0?"-":"+") + H + M;
            },
        Z: function (d) {
            var tz = d.toString().replace(/^.*:\d\d( GMT[+-]\d+)? \(?([A-Za-z ]+)\)?\d*$/, "$2").replace(/[a-z ]/g, "");
            if(tz.length > 4) {
                tz = Dt.formats.z(d);
            }
            return tz;
        },
        "%": function (d) { return "%"; }
    },

    aggregates: {
        c: "locale",
        D: "%m/%d/%y",
        F: "%Y-%m-%d",
        h: "%b",
        n: "\n",
        r: "%I:%M:%S %p",
        R: "%H:%M",
        t: "\t",
        T: "%H:%M:%S",
        x: "locale",
        X: "locale"
        //"+": "%a %b %e %T %Z %Y"
    },

     /**
     * Takes a native JavaScript Date and formats it as a string for display to user.
     *
     * @for Date
     * @method format
     * @param oDate {Date} Date.
     * @param oConfig {Object} (Optional) Object literal of configuration values:
     *  <dl>
     *   <dt>format {HTML} (Optional)</dt>
     *   <dd>
     *   <p>
     *   Any strftime string is supported, such as "%I:%M:%S %p". strftime has several format specifiers defined by the Open group at
     *   <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>
     *   PHP added a few of its own, defined at <a href="http://www.php.net/strftime">http://www.php.net/strftime</a>
     *   </p>
     *   <p>
     *   This javascript implementation supports all the PHP specifiers and a few more.  The full list is below.
     *   </p>
     *   <p>
     *   If not specified, it defaults to the ISO 8601 standard date format: %Y-%m-%d.
     *   </p>
     *   <dl>
     *  <dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>
     *  <dt>%A</dt> <dd>full weekday name according to the current locale</dd>
     *  <dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>
     *  <dt>%B</dt> <dd>full month name according to the current locale</dd>
     *  <dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>
     *  <dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>
     *  <dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>
     *  <dt>%D</dt> <dd>same as %m/%d/%y</dd>
     *  <dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range " 1" to "31")</dd>
     *  <dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>
     *  <dt>%g</dt> <dd>like %G, but without the century</dd>
     *  <dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>
     *  <dt>%h</dt> <dd>same as %b</dd>
     *  <dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>
     *  <dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>
     *  <dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>
     *  <dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>
     *  <dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>
     *  <dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>
     *  <dt>%M</dt> <dd>minute as a decimal number</dd>
     *  <dt>%n</dt> <dd>newline character</dd>
     *  <dt>%p</dt> <dd>either "AM" or "PM" according to the given time value, or the corresponding strings for the current locale</dd>
     *  <dt>%P</dt> <dd>like %p, but lower case</dd>
     *  <dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>
     *  <dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>
     *  <dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>
     *  <dt>%S</dt> <dd>second as a decimal number</dd>
     *  <dt>%t</dt> <dd>tab character</dd>
     *  <dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>
     *  <dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>
     *  <dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the
     *          first Sunday as the first day of the first week</dd>
     *  <dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,
     *          range 01 to 53, where week 1 is the first week that has at least 4 days
     *          in the current year, and with Monday as the first day of the week.</dd>
     *  <dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>
     *  <dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the
     *          first Monday as the first day of the first week</dd>
     *  <dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>
     *  <dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>
     *  <dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>
     *  <dt>%Y</dt> <dd>year as a decimal number including the century</dd>
     *  <dt>%z</dt> <dd>numerical time zone representation</dd>
     *  <dt>%Z</dt> <dd>time zone name or abbreviation</dd>
     *  <dt>%%</dt> <dd>a literal "%" character</dd>
     *   </dl>
     *  </dd>
     * </dl>
     * @return {HTML} Formatted date for display.
     */
    format : function (oDate, oConfig) {
        oConfig = oConfig || {};

        if(!Y.Lang.isDate(oDate)) {
            return Y.Lang.isValue(oDate) ? oDate : "";
        }

        var format, resources, compatMode, sLocale, LOCALE;

        format = oConfig.format || "%Y-%m-%d";

        resources = Y.Intl.get('datatype-date-format');

        var replace_aggs = function (m0, m1) {
            if (compatMode && m1 === "r") {
                return resources[m1];
            }
            var f = Dt.aggregates[m1];
            return (f === "locale" ? resources[m1] : f);
        };

        var replace_formats = function (m0, m1) {
            var f = Dt.formats[m1];
            switch(Y.Lang.type(f)) {
                case "string":                  // string => built in date function
                    return oDate[f]();
                case "function":                // function => our own function
                    return f.call(oDate, oDate, resources);
                case "array":                   // built in function with padding
                    if(Y.Lang.type(f[0]) === "string") {
                        return xPad(oDate[f[0]](), f[1]);
                    } // no break; (fall through to default:)
                default:
                    return m1;
            }
        };

        // First replace aggregates (run in a loop because an agg may be made up of other aggs)
        while(format.match(/%[cDFhnrRtTxX]/)) {
            format = format.replace(/%([cDFhnrRtTxX])/g, replace_aggs);
        }

        // Now replace formats (do not run in a loop otherwise %%a will be replace with the value of %a)
        var str = format.replace(/%([aAbBCdegGHIjklmMpPsSuUVwWyYzZ%])/g, replace_formats);

        replace_aggs = replace_formats = undefined;

        return str;
    }
};

Y.mix(Y.namespace("Date"), Dt);


Y.namespace("DataType");
Y.DataType.Date = Y.Date;


}, '3.10.1', {
    "lang": [
        "ar",
        "ar-JO",
        "ca",
        "ca-ES",
        "da",
        "da-DK",
        "de",
        "de-AT",
        "de-DE",
        "el",
        "el-GR",
        "en",
        "en-AU",
        "en-CA",
        "en-GB",
        "en-IE",
        "en-IN",
        "en-JO",
        "en-MY",
        "en-NZ",
        "en-PH",
        "en-SG",
        "en-US",
        "es",
        "es-AR",
        "es-BO",
        "es-CL",
        "es-CO",
        "es-EC",
        "es-ES",
        "es-MX",
        "es-PE",
        "es-PY",
        "es-US",
        "es-UY",
        "es-VE",
        "fi",
        "fi-FI",
        "fr",
        "fr-BE",
        "fr-CA",
        "fr-FR",
        "hi",
        "hi-IN",
        "id",
        "id-ID",
        "it",
        "it-IT",
        "ja",
        "ja-JP",
        "ko",
        "ko-KR",
        "ms",
        "ms-MY",
        "nb",
        "nb-NO",
        "nl",
        "nl-BE",
        "nl-NL",
        "pl",
        "pl-PL",
        "pt",
        "pt-BR",
        "ro",
        "ro-RO",
        "ru",
        "ru-RU",
        "sv",
        "sv-SE",
        "th",
        "th-TH",
        "tr",
        "tr-TR",
        "vi",
        "vi-VN",
        "zh-Hans",
        "zh-Hans-CN",
        "zh-Hant",
        "zh-Hant-HK",
        "zh-Hant-TW"
    ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-scroll/anim-scroll.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-scroll', function (Y, NAME) {

/**
 * Adds support for the <code>scroll</code> property in <code>to</code>
 * and <code>from</code> attributes.
 * @module anim
 * @submodule anim-scroll
 */

var NUM = Number;

//TODO: deprecate for scrollTop/Left properties?
Y.Anim.behaviors.scroll = {
    set: function(anim, att, from, to, elapsed, duration, fn) {
        var
            node = anim._node,
            val = ([
            fn(elapsed, NUM(from[0]), NUM(to[0]) - NUM(from[0]), duration),
            fn(elapsed, NUM(from[1]), NUM(to[1]) - NUM(from[1]), duration)
        ]);

        if (val[0]) {
            node.set('scrollLeft', val[0]);
        }

        if (val[1]) {
            node.set('scrollTop', val[1]);
        }
    },
    get: function(anim) {
        var node = anim._node;
        return [node.get('scrollLeft'), node.get('scrollTop')];
    }
};



}, '3.10.1', {"requires": ["anim-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/base-observable/base-observable.js
// ----------------------------------------------------------------------------------------

YUI.add('base-observable', function (Y, NAME) {

    /**
    The `base-observable` submodule adds observability to Base's lifecycle and
    attributes, and also make it an `EventTarget`.

    @module base
    @submodule base-observable
    **/
    var L = Y.Lang,

        DESTROY = "destroy",
        INIT = "init",

        BUBBLETARGETS = "bubbleTargets",
        _BUBBLETARGETS = "_bubbleTargets",

        AttributeObservable = Y.AttributeObservable,
        BaseCore            = Y.BaseCore;

    /**
    Provides an augmentable implementation of lifecycle and attribute events for
    `BaseCore`.

    @class BaseObservable
    @extensionfor BaseCore
    @uses AttributeObservable
    @uses EventTarget
    @since 3.8.0
    **/
    function BaseObservable() {}

    BaseObservable._ATTR_CFG      = AttributeObservable._ATTR_CFG.concat();
    BaseObservable._NON_ATTRS_CFG = ["on", "after", "bubbleTargets"];

    BaseObservable.prototype = {

        /**
         * Initializes Attribute
         *
         * @method _initAttribute
         * @private
         */
        _initAttribute: function() {
            BaseCore.prototype._initAttribute.apply(this, arguments);
            AttributeObservable.call(this);

            this._eventPrefix = this.constructor.EVENT_PREFIX || this.constructor.NAME;
            this._yuievt.config.prefix = this._eventPrefix;
        },

        /**
         * Init lifecycle method, invoked during construction.
         * Fires the init event prior to setting up attributes and
         * invoking initializers for the class hierarchy.
         *
         * @method init
         * @chainable
         * @param {Object} config Object with configuration property name/value pairs
         * @return {Base} A reference to this object
         */
        init: function(config) {

            /**
             * <p>
             * Lifecycle event for the init phase, fired prior to initialization.
             * Invoking the preventDefault() method on the event object provided
             * to subscribers will prevent initialization from occuring.
             * </p>
             * <p>
             * Subscribers to the "after" momemt of this event, will be notified
             * after initialization of the object is complete (and therefore
             * cannot prevent initialization).
             * </p>
             *
             * @event init
             * @preventable _defInitFn
             * @param {EventFacade} e Event object, with a cfg property which
             * refers to the configuration object passed to the constructor.
             */

            // PERF: Using lower level _publish() for
            // critical path performance

            var type = this._getFullType(INIT),
                e = this._publish(type);

            e.emitFacade = true;
            e.fireOnce = true;
            e.defaultTargetOnly = true;
            e.defaultFn = this._defInitFn;

            this._preInitEventCfg(config);

            this.fire(type, {cfg: config});

            return this;
        },

        /**
         * Handles the special on, after and target properties which allow the user to
         * easily configure on and after listeners as well as bubble targets during
         * construction, prior to init.
         *
         * @private
         * @method _preInitEventCfg
         * @param {Object} config The user configuration object
         */
        _preInitEventCfg : function(config) {
            if (config) {
                if (config.on) {
                    this.on(config.on);
                }
                if (config.after) {
                    this.after(config.after);
                }
            }

            var i, l, target,
                userTargets = (config && BUBBLETARGETS in config);

            if (userTargets || _BUBBLETARGETS in this) {
                target = userTargets ? (config && config.bubbleTargets) : this._bubbleTargets;

                if (L.isArray(target)) {
                    for (i = 0, l = target.length; i < l; i++) {
                        this.addTarget(target[i]);
                    }
                } else if (target) {
                    this.addTarget(target);
                }
            }
        },

        /**
         * <p>
         * Destroy lifecycle method. Fires the destroy
         * event, prior to invoking destructors for the
         * class hierarchy.
         * </p>
         * <p>
         * Subscribers to the destroy
         * event can invoke preventDefault on the event object, to prevent destruction
         * from proceeding.
         * </p>
         * @method destroy
         * @return {Base} A reference to this object
         * @chainable
         */
        destroy: function() {

            /**
             * <p>
             * Lifecycle event for the destroy phase,
             * fired prior to destruction. Invoking the preventDefault
             * method on the event object provided to subscribers will
             * prevent destruction from proceeding.
             * </p>
             * <p>
             * Subscribers to the "after" moment of this event, will be notified
             * after destruction is complete (and as a result cannot prevent
             * destruction).
             * </p>
             * @event destroy
             * @preventable _defDestroyFn
             * @param {EventFacade} e Event object
             */
            this.publish(DESTROY, {
                fireOnce:true,
                defaultTargetOnly:true,
                defaultFn: this._defDestroyFn
            });
            this.fire(DESTROY);

            this.detachAll();
            return this;
        },

        /**
         * Default init event handler
         *
         * @method _defInitFn
         * @param {EventFacade} e Event object, with a cfg property which
         * refers to the configuration object passed to the constructor.
         * @protected
         */
        _defInitFn : function(e) {
            this._baseInit(e.cfg);
        },

        /**
         * Default destroy event handler
         *
         * @method _defDestroyFn
         * @param {EventFacade} e Event object
         * @protected
         */
        _defDestroyFn : function(e) {
            this._baseDestroy(e.cfg);
        }
    };

    Y.mix(BaseObservable, AttributeObservable, false, null, 1);

    Y.BaseObservable = BaseObservable;


}, '3.10.1', {"requires": ["attribute-observable"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/io-base/io-base.js
// ----------------------------------------------------------------------------------------

YUI.add('io-base', function (Y, NAME) {

/**
Base IO functionality. Provides basic XHR transport support.

@module io
@submodule io-base
@for IO
**/

var // List of events that comprise the IO event lifecycle.
    EVENTS = ['start', 'complete', 'end', 'success', 'failure', 'progress'],

    // Whitelist of used XHR response object properties.
    XHR_PROPS = ['status', 'statusText', 'responseText', 'responseXML'],

    win = Y.config.win,
    uid = 0;

/**
The IO class is a utility that brokers HTTP requests through a simplified
interface.  Specifically, it allows JavaScript to make HTTP requests to
a resource without a page reload.  The underlying transport for making
same-domain requests is the XMLHttpRequest object.  IO can also use
Flash, if specified as a transport, for cross-domain requests.

@class IO
@constructor
@param {Object} config Object of EventTarget's publish method configurations
                    used to configure IO's events.
**/
function IO (config) {
    var io = this;

    io._uid = 'io:' + uid++;
    io._init(config);
    Y.io._map[io._uid] = io;
}

IO.prototype = {
    //--------------------------------------
    //  Properties
    //--------------------------------------

   /**
    * A counter that increments for each transaction.
    *
    * @property _id
    * @private
    * @type {Number}
    */
    _id: 0,

   /**
    * Object of IO HTTP headers sent with each transaction.
    *
    * @property _headers
    * @private
    * @type {Object}
    */
    _headers: {
        'X-Requested-With' : 'XMLHttpRequest'
    },

   /**
    * Object that stores timeout values for any transaction with a defined
    * "timeout" configuration property.
    *
    * @property _timeout
    * @private
    * @type {Object}
    */
    _timeout: {},

    //--------------------------------------
    //  Methods
    //--------------------------------------

    _init: function(config) {
        var io = this, i, len;

        io.cfg = config || {};

        Y.augment(io, Y.EventTarget);
        for (i = 0, len = EVENTS.length; i < len; ++i) {
            // Publish IO global events with configurations, if any.
            // IO global events are set to broadcast by default.
            // These events use the "io:" namespace.
            io.publish('io:' + EVENTS[i], Y.merge({ broadcast: 1 }, config));
            // Publish IO transaction events with configurations, if
            // any.  These events use the "io-trn:" namespace.
            io.publish('io-trn:' + EVENTS[i], config);
        }
    },

   /**
    * Method that creates a unique transaction object for each request.
    *
    * @method _create
    * @private
    * @param {Object} cfg Configuration object subset to determine if
    *                 the transaction is an XDR or file upload,
    *                 requiring an alternate transport.
    * @param {Number} id Transaction id
    * @return {Object} The transaction object
    */
    _create: function(config, id) {
        var io = this,
            transaction = {
                id : Y.Lang.isNumber(id) ? id : io._id++,
                uid: io._uid
            },
            alt = config.xdr ? config.xdr.use : null,
            form = config.form && config.form.upload ? 'iframe' : null,
            use;

        if (alt === 'native') {
            // Non-IE and IE >= 10  can use XHR level 2 and not rely on an
            // external transport.
            alt = Y.UA.ie && !SUPPORTS_CORS ? 'xdr' : null;

            // Prevent "pre-flight" OPTIONS request by removing the
            // `X-Requested-With` HTTP header from CORS requests. This header
            // can be added back on a per-request basis, if desired.
            io.setHeader('X-Requested-With');
        }

        use = alt || form;
        transaction = use ? Y.merge(Y.IO.customTransport(use), transaction) :
                            Y.merge(Y.IO.defaultTransport(), transaction);

        if (transaction.notify) {
            config.notify = function (e, t, c) { io.notify(e, t, c); };
        }

        if (!use) {
            if (win && win.FormData && config.data instanceof win.FormData) {
                transaction.c.upload.onprogress = function (e) {
                    io.progress(transaction, e, config);
                };
                transaction.c.onload = function (e) {
                    io.load(transaction, e, config);
                };
                transaction.c.onerror = function (e) {
                    io.error(transaction, e, config);
                };
                transaction.upload = true;
            }
        }

        return transaction;
    },

    _destroy: function(transaction) {
        if (win && !transaction.notify && !transaction.xdr) {
            if (XHR && !transaction.upload) {
                transaction.c.onreadystatechange = null;
            } else if (transaction.upload) {
                transaction.c.upload.onprogress = null;
                transaction.c.onload = null;
                transaction.c.onerror = null;
            } else if (Y.UA.ie && !transaction.e) {
                // IE, when using XMLHttpRequest as an ActiveX Object, will throw
                // a "Type Mismatch" error if the event handler is set to "null".
                transaction.c.abort();
            }
        }

        transaction = transaction.c = null;
    },

   /**
    * Method for creating and firing events.
    *
    * @method _evt
    * @private
    * @param {String} eventName Event to be published.
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration data subset for event subscription.
    */
    _evt: function(eventName, transaction, config) {
        var io          = this, params,
            args        = config['arguments'],
            emitFacade  = io.cfg.emitFacade,
            globalEvent = "io:" + eventName,
            trnEvent    = "io-trn:" + eventName;

        // Workaround for #2532107
        this.detach(trnEvent);

        if (transaction.e) {
            transaction.c = { status: 0, statusText: transaction.e };
        }

        // Fire event with parameters or an Event Facade.
        params = [ emitFacade ?
            {
                id: transaction.id,
                data: transaction.c,
                cfg: config,
                'arguments': args
            } :
            transaction.id
        ];

        if (!emitFacade) {
            if (eventName === EVENTS[0] || eventName === EVENTS[2]) {
                if (args) {
                    params.push(args);
                }
            } else {
                if (transaction.evt) {
                    params.push(transaction.evt);
                } else {
                    params.push(transaction.c);
                }
                if (args) {
                    params.push(args);
                }
            }
        }

        params.unshift(globalEvent);
        // Fire global events.
        io.fire.apply(io, params);
        // Fire transaction events, if receivers are defined.
        if (config.on) {
            params[0] = trnEvent;
            io.once(trnEvent, config.on[eventName], config.context || Y);
            io.fire.apply(io, params);
        }
    },

   /**
    * Fires event "io:start" and creates, fires a transaction-specific
    * start event, if `config.on.start` is defined.
    *
    * @method start
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration object for the transaction.
    */
    start: function(transaction, config) {
       /**
        * Signals the start of an IO request.
        * @event io:start
        */
        this._evt(EVENTS[0], transaction, config);
    },

   /**
    * Fires event "io:complete" and creates, fires a
    * transaction-specific "complete" event, if config.on.complete is
    * defined.
    *
    * @method complete
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration object for the transaction.
    */
    complete: function(transaction, config) {
       /**
        * Signals the completion of the request-response phase of a
        * transaction. Response status and data are accessible, if
        * available, in this event.
        * @event io:complete
        */
        this._evt(EVENTS[1], transaction, config);
    },

   /**
    * Fires event "io:end" and creates, fires a transaction-specific "end"
    * event, if config.on.end is defined.
    *
    * @method end
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration object for the transaction.
    */
    end: function(transaction, config) {
       /**
        * Signals the end of the transaction lifecycle.
        * @event io:end
        */
        this._evt(EVENTS[2], transaction, config);
        this._destroy(transaction);
    },

   /**
    * Fires event "io:success" and creates, fires a transaction-specific
    * "success" event, if config.on.success is defined.
    *
    * @method success
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration object for the transaction.
    */
    success: function(transaction, config) {
       /**
        * Signals an HTTP response with status in the 2xx range.
        * Fires after io:complete.
        * @event io:success
        */
        this._evt(EVENTS[3], transaction, config);
        this.end(transaction, config);
    },

   /**
    * Fires event "io:failure" and creates, fires a transaction-specific
    * "failure" event, if config.on.failure is defined.
    *
    * @method failure
    * @param {Object} transaction Transaction object.
    * @param {Object} config Configuration object for the transaction.
    */
    failure: function(transaction, config) {
       /**
        * Signals an HTTP response with status outside of the 2xx range.
        * Fires after io:complete.
        * @event io:failure
        */
        this._evt(EVENTS[4], transaction, config);
        this.end(transaction, config);
    },

   /**
    * Fires event "io:progress" and creates, fires a transaction-specific
    * "progress" event -- for XMLHttpRequest file upload -- if
    * config.on.progress is defined.
    *
    * @method progress
    * @param {Object} transaction Transaction object.
    * @param {Object} progress event.
    * @param {Object} config Configuration object for the transaction.
    */
    progress: function(transaction, e, config) {
       /**
        * Signals the interactive state during a file upload transaction.
        * This event fires after io:start and before io:complete.
        * @event io:progress
        */
        transaction.evt = e;
        this._evt(EVENTS[5], transaction, config);
    },

   /**
    * Fires event "io:complete" and creates, fires a transaction-specific
    * "complete" event -- for XMLHttpRequest file upload -- if
    * config.on.complete is defined.
    *
    * @method load
    * @param {Object} transaction Transaction object.
    * @param {Object} load event.
    * @param {Object} config Configuration object for the transaction.
    */
    load: function (transaction, e, config) {
        transaction.evt = e.target;
        this._evt(EVENTS[1], transaction, config);
    },

   /**
    * Fires event "io:failure" and creates, fires a transaction-specific
    * "failure" event -- for XMLHttpRequest file upload -- if
    * config.on.failure is defined.
    *
    * @method error
    * @param {Object} transaction Transaction object.
    * @param {Object} error event.
    * @param {Object} config Configuration object for the transaction.
    */
    error: function (transaction, e, config) {
        transaction.evt = e;
        this._evt(EVENTS[4], transaction, config);
    },

   /**
    * Retry an XDR transaction, using the Flash tranport, if the native
    * transport fails.
    *
    * @method _retry
    * @private
    * @param {Object} transaction Transaction object.
    * @param {String} uri Qualified path to transaction resource.
    * @param {Object} config Configuration object for the transaction.
    */
    _retry: function(transaction, uri, config) {
        this._destroy(transaction);
        config.xdr.use = 'flash';
        return this.send(uri, config, transaction.id);
    },

   /**
    * Method that concatenates string data for HTTP GET transactions.
    *
    * @method _concat
    * @private
    * @param {String} uri URI or root data.
    * @param {String} data Data to be concatenated onto URI.
    * @return {String}
    */
    _concat: function(uri, data) {
        uri += (uri.indexOf('?') === -1 ? '?' : '&') + data;
        return uri;
    },

   /**
    * Stores default client headers for all transactions. If a label is
    * passed with no value argument, the header will be deleted.
    *
    * @method setHeader
    * @param {String} name HTTP header
    * @param {String} value HTTP header value
    */
    setHeader: function(name, value) {
        if (value) {
            this._headers[name] = value;
        } else {
            delete this._headers[name];
        }
    },

   /**
    * Method that sets all HTTP headers to be sent in a transaction.
    *
    * @method _setHeaders
    * @private
    * @param {Object} transaction - XHR instance for the specific transaction.
    * @param {Object} headers - HTTP headers for the specific transaction, as
    *                    defined in the configuration object passed to YUI.io().
    */
    _setHeaders: function(transaction, headers) {
        headers = Y.merge(this._headers, headers);
        Y.Object.each(headers, function(value, name) {
            if (value !== 'disable') {
                transaction.setRequestHeader(name, headers[name]);
            }
        });
    },

   /**
    * Starts timeout count if the configuration object has a defined
    * timeout property.
    *
    * @method _startTimeout
    * @private
    * @param {Object} transaction Transaction object generated by _create().
    * @param {Object} timeout Timeout in milliseconds.
    */
    _startTimeout: function(transaction, timeout) {
        var io = this;

        io._timeout[transaction.id] = setTimeout(function() {
            io._abort(transaction, 'timeout');
        }, timeout);
    },

   /**
    * Clears the timeout interval started by _startTimeout().
    *
    * @method _clearTimeout
    * @private
    * @param {Number} id - Transaction id.
    */
    _clearTimeout: function(id) {
        clearTimeout(this._timeout[id]);
        delete this._timeout[id];
    },

   /**
    * Method that determines if a transaction response qualifies as success
    * or failure, based on the response HTTP status code, and fires the
    * appropriate success or failure events.
    *
    * @method _result
    * @private
    * @static
    * @param {Object} transaction Transaction object generated by _create().
    * @param {Object} config Configuration object passed to io().
    */
    _result: function(transaction, config) {
        var status;
        // Firefox will throw an exception if attempting to access
        // an XHR object's status property, after a request is aborted.
        try {
            status = transaction.c.status;
        } catch(e) {
            status = 0;
        }

        // IE reports HTTP 204 as HTTP 1223.
        if (status >= 200 && status < 300 || status === 304 || status === 1223) {
            this.success(transaction, config);
        } else {
            this.failure(transaction, config);
        }
    },

   /**
    * Event handler bound to onreadystatechange.
    *
    * @method _rS
    * @private
    * @param {Object} transaction Transaction object generated by _create().
    * @param {Object} config Configuration object passed to YUI.io().
    */
    _rS: function(transaction, config) {
        var io = this;

        if (transaction.c.readyState === 4) {
            if (config.timeout) {
                io._clearTimeout(transaction.id);
            }

            // Yield in the event of request timeout or abort.
            setTimeout(function() {
                io.complete(transaction, config);
                io._result(transaction, config);
            }, 0);
        }
    },

   /**
    * Terminates a transaction due to an explicit abort or timeout.
    *
    * @method _abort
    * @private
    * @param {Object} transaction Transaction object generated by _create().
    * @param {String} type Identifies timed out or aborted transaction.
    */
    _abort: function(transaction, type) {
        if (transaction && transaction.c) {
            transaction.e = type;
            transaction.c.abort();
        }
    },

   /**
    * Requests a transaction. `send()` is implemented as `Y.io()`.  Each
    * transaction may include a configuration object.  Its properties are:
    *
    * <dl>
    *   <dt>method</dt>
    *     <dd>HTTP method verb (e.g., GET or POST). If this property is not
    *         not defined, the default value will be GET.</dd>
    *
    *   <dt>data</dt>
    *     <dd>This is the name-value string that will be sent as the
    *     transaction data. If the request is HTTP GET, the data become
    *     part of querystring. If HTTP POST, the data are sent in the
    *     message body.</dd>
    *
    *   <dt>xdr</dt>
    *     <dd>Defines the transport to be used for cross-domain requests.
    *     By setting this property, the transaction will use the specified
    *     transport instead of XMLHttpRequest. The properties of the
    *     transport object are:
    *     <dl>
    *       <dt>use</dt>
    *         <dd>The transport to be used: 'flash' or 'native'</dd>
    *       <dt>dataType</dt>
    *         <dd>Set the value to 'XML' if that is the expected response
    *         content type.</dd>
    *       <dt>credentials</dt>
    *         <dd>Set the value to 'true' to set XHR.withCredentials property to true.</dd>
    *     </dl></dd>
    *
    *   <dt>form</dt>
    *     <dd>Form serialization configuration object.  Its properties are:
    *     <dl>
    *       <dt>id</dt>
    *         <dd>Node object or id of HTML form</dd>
    *       <dt>useDisabled</dt>
    *         <dd>`true` to also serialize disabled form field values
    *         (defaults to `false`)</dd>
    *     </dl></dd>
    *
    *   <dt>on</dt>
    *     <dd>Assigns transaction event subscriptions. Available events are:
    *     <dl>
    *       <dt>start</dt>
    *         <dd>Fires when a request is sent to a resource.</dd>
    *       <dt>complete</dt>
    *         <dd>Fires when the transaction is complete.</dd>
    *       <dt>success</dt>
    *         <dd>Fires when the HTTP response status is within the 2xx
    *         range.</dd>
    *       <dt>failure</dt>
    *         <dd>Fires when the HTTP response status is outside the 2xx
    *         range, if an exception occurs, if the transation is aborted,
    *         or if the transaction exceeds a configured `timeout`.</dd>
    *       <dt>end</dt>
    *         <dd>Fires at the conclusion of the transaction
    *            lifecycle, after `success` or `failure`.</dd>
    *     </dl>
    *
    *     <p>Callback functions for `start` and `end` receive the id of the
    *     transaction as a first argument. For `complete`, `success`, and
    *     `failure`, callbacks receive the id and the response object
    *     (usually the XMLHttpRequest instance).  If the `arguments`
    *     property was included in the configuration object passed to
    *     `Y.io()`, the configured data will be passed to all callbacks as
    *     the last argument.</p>
    *     </dd>
    *
    *   <dt>sync</dt>
    *     <dd>Pass `true` to make a same-domain transaction synchronous.
    *     <strong>CAVEAT</strong>: This will negatively impact the user
    *     experience. Have a <em>very</em> good reason if you intend to use
    *     this.</dd>
    *
    *   <dt>context</dt>
    *     <dd>The "`this'" object for all configured event handlers. If a
    *     specific context is needed for individual callbacks, bind the
    *     callback to a context using `Y.bind()`.</dd>
    *
    *   <dt>headers</dt>
    *     <dd>Object map of transaction headers to send to the server. The
    *     object keys are the header names and the values are the header
    *     values.</dd>
    *
    *   <dt>timeout</dt>
    *     <dd>Millisecond threshold for the transaction before being
    *     automatically aborted.</dd>
    *
    *   <dt>arguments</dt>
    *     <dd>User-defined data passed to all registered event handlers.
    *     This value is available as the second argument in the "start" and
    *     "end" event handlers. It is the third argument in the "complete",
    *     "success", and "failure" event handlers. <strong>Be sure to quote
    *     this property name in the transaction configuration as
    *     "arguments" is a reserved word in JavaScript</strong> (e.g.
    *     `Y.io({ ..., "arguments": stuff })`).</dd>
    * </dl>
    *
    * @method send
    * @public
    * @param {String} uri Qualified path to transaction resource.
    * @param {Object} config Configuration object for the transaction.
    * @param {Number} id Transaction id, if already set.
    * @return {Object}
    */
    send: function(uri, config, id) {
        var transaction, method, i, len, sync, data,
            io = this,
            u = uri,
            response = {};

        config = config ? Y.Object(config) : {};
        transaction = io._create(config, id);
        method = config.method ? config.method.toUpperCase() : 'GET';
        sync = config.sync;
        data = config.data;

        // Serialize a map object into a key-value string using
        // querystring-stringify-simple.
        if ((Y.Lang.isObject(data) && !data.nodeType) && !transaction.upload) {
            if (Y.QueryString && Y.QueryString.stringify) {
                config.data = data = Y.QueryString.stringify(data);
            } else {
            }
        }

        if (config.form) {
            if (config.form.upload) {
                // This is a file upload transaction, calling
                // upload() in io-upload-iframe.
                return io.upload(transaction, uri, config);
            } else {
                // Serialize HTML form data into a key-value string.
                data = io._serialize(config.form, data);
            }
        }

        // Convert falsy values to an empty string. This way IE can't be
        // rediculous and translate `undefined` to "undefined".
        data || (data = '');

        if (data) {
            switch (method) {
                case 'GET':
                case 'HEAD':
                case 'DELETE':
                    u = io._concat(u, data);
                    data = '';
                    break;
                case 'POST':
                case 'PUT':
                    // If Content-Type is defined in the configuration object, or
                    // or as a default header, it will be used instead of
                    // 'application/x-www-form-urlencoded; charset=UTF-8'
                    config.headers = Y.merge({
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                    }, config.headers);
                    break;
            }
        }

        if (transaction.xdr) {
            // Route data to io-xdr module for flash and XDomainRequest.
            return io.xdr(u, transaction, config);
        }
        else if (transaction.notify) {
            // Route data to custom transport
            return transaction.c.send(transaction, uri, config);
        }

        if (!sync && !transaction.upload) {
            transaction.c.onreadystatechange = function() {
                io._rS(transaction, config);
            };
        }

        try {
            // Determine if request is to be set as
            // synchronous or asynchronous.
            transaction.c.open(method, u, !sync, config.username || null, config.password || null);
            io._setHeaders(transaction.c, config.headers || {});
            io.start(transaction, config);

            // Will work only in browsers that implement the
            // Cross-Origin Resource Sharing draft.
            if (config.xdr && config.xdr.credentials && SUPPORTS_CORS) {
                transaction.c.withCredentials = true;
            }

            // Using "null" with HTTP POST will result in a request
            // with no Content-Length header defined.
            transaction.c.send(data);

            if (sync) {
                // Create a response object for synchronous transactions,
                // mixing id and arguments properties with the xhr
                // properties whitelist.
                for (i = 0, len = XHR_PROPS.length; i < len; ++i) {
                    response[XHR_PROPS[i]] = transaction.c[XHR_PROPS[i]];
                }

                response.getAllResponseHeaders = function() {
                    return transaction.c.getAllResponseHeaders();
                };

                response.getResponseHeader = function(name) {
                    return transaction.c.getResponseHeader(name);
                };

                io.complete(transaction, config);
                io._result(transaction, config);

                return response;
            }
        } catch(e) {
            if (transaction.xdr) {
                // This exception is usually thrown by browsers
                // that do not support XMLHttpRequest Level 2.
                // Retry the request with the XDR transport set
                // to 'flash'.  If the Flash transport is not
                // initialized or available, the transaction
                // will resolve to a transport error.
                return io._retry(transaction, uri, config);
            } else {
                io.complete(transaction, config);
                io._result(transaction, config);
            }
        }

        // If config.timeout is defined, and the request is standard XHR,
        // initialize timeout polling.
        if (config.timeout) {
            io._startTimeout(transaction, config.timeout);
        }

        return {
            id: transaction.id,
            abort: function() {
                return transaction.c ? io._abort(transaction, 'abort') : false;
            },
            isInProgress: function() {
                return transaction.c ? (transaction.c.readyState % 4) : false;
            },
            io: io
        };
    }
};

/**
Method for initiating an ajax call.  The first argument is the url end
point for the call.  The second argument is an object to configure the
transaction and attach event subscriptions.  The configuration object
supports the following properties:

<dl>
  <dt>method</dt>
    <dd>HTTP method verb (e.g., GET or POST). If this property is not
        not defined, the default value will be GET.</dd>

  <dt>data</dt>
    <dd>This is the name-value string that will be sent as the
    transaction data. If the request is HTTP GET, the data become
    part of querystring. If HTTP POST, the data are sent in the
    message body.</dd>

  <dt>xdr</dt>
    <dd>Defines the transport to be used for cross-domain requests.
    By setting this property, the transaction will use the specified
    transport instead of XMLHttpRequest. The properties of the
    transport object are:
    <dl>
      <dt>use</dt>
        <dd>The transport to be used: 'flash' or 'native'</dd>
      <dt>dataType</dt>
        <dd>Set the value to 'XML' if that is the expected response
        content type.</dd>
    </dl></dd>

  <dt>form</dt>
    <dd>Form serialization configuration object.  Its properties are:
    <dl>
      <dt>id</dt>
        <dd>Node object or id of HTML form</dd>
      <dt>useDisabled</dt>
        <dd>`true` to also serialize disabled form field values
        (defaults to `false`)</dd>
    </dl></dd>

  <dt>on</dt>
    <dd>Assigns transaction event subscriptions. Available events are:
    <dl>
      <dt>start</dt>
        <dd>Fires when a request is sent to a resource.</dd>
      <dt>complete</dt>
        <dd>Fires when the transaction is complete.</dd>
      <dt>success</dt>
        <dd>Fires when the HTTP response status is within the 2xx
        range.</dd>
      <dt>failure</dt>
        <dd>Fires when the HTTP response status is outside the 2xx
        range, if an exception occurs, if the transation is aborted,
        or if the transaction exceeds a configured `timeout`.</dd>
      <dt>end</dt>
        <dd>Fires at the conclusion of the transaction
           lifecycle, after `success` or `failure`.</dd>
    </dl>

    <p>Callback functions for `start` and `end` receive the id of the
    transaction as a first argument. For `complete`, `success`, and
    `failure`, callbacks receive the id and the response object
    (usually the XMLHttpRequest instance).  If the `arguments`
    property was included in the configuration object passed to
    `Y.io()`, the configured data will be passed to all callbacks as
    the last argument.</p>
    </dd>

  <dt>sync</dt>
    <dd>Pass `true` to make a same-domain transaction synchronous.
    <strong>CAVEAT</strong>: This will negatively impact the user
    experience. Have a <em>very</em> good reason if you intend to use
    this.</dd>

  <dt>context</dt>
    <dd>The "`this'" object for all configured event handlers. If a
    specific context is needed for individual callbacks, bind the
    callback to a context using `Y.bind()`.</dd>

  <dt>headers</dt>
    <dd>Object map of transaction headers to send to the server. The
    object keys are the header names and the values are the header
    values.</dd>

  <dt>timeout</dt>
    <dd>Millisecond threshold for the transaction before being
    automatically aborted.</dd>

  <dt>arguments</dt>
    <dd>User-defined data passed to all registered event handlers.
    This value is available as the second argument in the "start" and
    "end" event handlers. It is the third argument in the "complete",
    "success", and "failure" event handlers. <strong>Be sure to quote
    this property name in the transaction configuration as
    "arguments" is a reserved word in JavaScript</strong> (e.g.
    `Y.io({ ..., "arguments": stuff })`).</dd>
</dl>

@method io
@static
@param {String} url qualified path to transaction resource.
@param {Object} config configuration object for the transaction.
@return {Object}
@for YUI
**/
Y.io = function(url, config) {
    // Calling IO through the static interface will use and reuse
    // an instance of IO.
    var transaction = Y.io._map['io:0'] || new IO();
    return transaction.send.apply(transaction, [url, config]);
};

/**
Method for setting and deleting IO HTTP headers to be sent with every
request.

Hosted as a property on the `io` function (e.g. `Y.io.header`).

@method header
@param {String} name HTTP header
@param {String} value HTTP header value
@static
**/
Y.io.header = function(name, value) {
    // Calling IO through the static interface will use and reuse
    // an instance of IO.
    var transaction = Y.io._map['io:0'] || new IO();
    transaction.setHeader(name, value);
};

Y.IO = IO;
// Map of all IO instances created.
Y.io._map = {};
var XHR = win && win.XMLHttpRequest,
    XDR = win && win.XDomainRequest,
    AX = win && win.ActiveXObject,

    // Checks for the presence of the `withCredentials` in an XHR instance
    // object, which will be present if the environment supports CORS.
    SUPPORTS_CORS = XHR && 'withCredentials' in (new XMLHttpRequest());


Y.mix(Y.IO, {
    /**
    * The ID of the default IO transport, defaults to `xhr`
    * @property _default
    * @type {String}
    * @static
    */
    _default: 'xhr',
    /**
    *
    * @method defaultTransport
    * @static
    * @param {String} [id] The transport to set as the default, if empty a new transport is created.
    * @return {Object} The transport object with a `send` method
    */
    defaultTransport: function(id) {
        if (id) {
            Y.IO._default = id;
        } else {
            var o = {
                c: Y.IO.transports[Y.IO._default](),
                notify: Y.IO._default === 'xhr' ? false : true
            };
            return o;
        }
    },
    /**
    * An object hash of custom transports available to IO
    * @property transports
    * @type {Object}
    * @static
    */
    transports: {
        xhr: function () {
            return XHR ? new XMLHttpRequest() :
                AX ? new ActiveXObject('Microsoft.XMLHTTP') : null;
        },
        xdr: function () {
            return XDR ? new XDomainRequest() : null;
        },
        iframe: function () { return {}; },
        flash: null,
        nodejs: null
    },
    /**
    * Create a custom transport of type and return it's object
    * @method customTransport
    * @param {String} id The id of the transport to create.
    * @static
    */
    customTransport: function(id) {
        var o = { c: Y.IO.transports[id]() };

        o[(id === 'xdr' || id === 'flash') ? 'xdr' : 'notify'] = true;
        return o;
    }
});

Y.mix(Y.IO.prototype, {
    /**
    * Fired from the notify method of the transport which in turn fires
    * the event on the IO object.
    * @method notify
    * @param {String} event The name of the event
    * @param {Object} transaction The transaction object
    * @param {Object} config The configuration object for this transaction
    */
    notify: function(event, transaction, config) {
        var io = this;

        switch (event) {
            case 'timeout':
            case 'abort':
            case 'transport error':
                transaction.c = { status: 0, statusText: event };
                event = 'failure';
            default:
                io[event].apply(io, [transaction, config]);
        }
    }
});




}, '3.10.1', {"requires": ["event-custom-base", "querystring-stringify-simple"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-focus/event-focus.js
// ----------------------------------------------------------------------------------------

YUI.add('event-focus', function (Y, NAME) {

/**
 * Adds bubbling and delegation support to DOM events focus and blur.
 *
 * @module event
 * @submodule event-focus
 */
var Event    = Y.Event,

    YLang    = Y.Lang,

    isString = YLang.isString,

    arrayIndex = Y.Array.indexOf,

    useActivate = (function() {

        // Changing the structure of this test, so that it doesn't use inline JS in HTML,
        // which throws an exception in Win8 packaged apps, due to additional security restrictions:
        // http://msdn.microsoft.com/en-us/library/windows/apps/hh465380.aspx#differences

        var supported = false,
            doc = Y.config.doc,
            p;

        if (doc) {

            p = doc.createElement("p");
            p.setAttribute("onbeforeactivate", ";");

            // onbeforeactivate is a function in IE8+.
            // onbeforeactivate is a string in IE6,7 (unfortunate, otherwise we could have just checked for function below).
            // onbeforeactivate is a function in IE10, in a Win8 App environment (no exception running the test).

            // onbeforeactivate is undefined in Webkit/Gecko.
            // onbeforeactivate is a function in Webkit/Gecko if it's a supported event (e.g. onclick).

            supported = (p.onbeforeactivate !== undefined);
        }

        return supported;
    }());

function define(type, proxy, directEvent) {
    var nodeDataKey = '_' + type + 'Notifiers';

    Y.Event.define(type, {

        _useActivate : useActivate,

        _attach: function (el, notifier, delegate) {
            if (Y.DOM.isWindow(el)) {
                return Event._attach([type, function (e) {
                    notifier.fire(e);
                }, el]);
            } else {
                return Event._attach(
                    [proxy, this._proxy, el, this, notifier, delegate],
                    { capture: true });
            }
        },

        _proxy: function (e, notifier, delegate) {
            var target        = e.target,
                currentTarget = e.currentTarget,
                notifiers     = target.getData(nodeDataKey),
                yuid          = Y.stamp(currentTarget._node),
                defer         = (useActivate || target !== currentTarget),
                directSub;

            notifier.currentTarget = (delegate) ? target : currentTarget;
            notifier.container     = (delegate) ? currentTarget : null;

            // Maintain a list to handle subscriptions from nested
            // containers div#a>div#b>input #a.on(focus..) #b.on(focus..),
            // use one focus or blur subscription that fires notifiers from
            // #b then #a to emulate bubble sequence.
            if (!notifiers) {
                notifiers = {};
                target.setData(nodeDataKey, notifiers);

                // only subscribe to the element's focus if the target is
                // not the current target (
                if (defer) {
                    directSub = Event._attach(
                        [directEvent, this._notify, target._node]).sub;
                    directSub.once = true;
                }
            } else {
                // In old IE, defer is always true.  In capture-phase browsers,
                // The delegate subscriptions will be encountered first, which
                // will establish the notifiers data and direct subscription
                // on the node.  If there is also a direct subscription to the
                // node's focus/blur, it should not call _notify because the
                // direct subscription from the delegate sub(s) exists, which
                // will call _notify.  So this avoids _notify being called
                // twice, unnecessarily.
                defer = true;
            }

            if (!notifiers[yuid]) {
                notifiers[yuid] = [];
            }

            notifiers[yuid].push(notifier);

            if (!defer) {
                this._notify(e);
            }
        },

        _notify: function (e, container) {
            var currentTarget = e.currentTarget,
                notifierData  = currentTarget.getData(nodeDataKey),
                axisNodes     = currentTarget.ancestors(),
                doc           = currentTarget.get('ownerDocument'),
                delegates     = [],
                                // Used to escape loops when there are no more
                                // notifiers to consider
                count         = notifierData ?
                                    Y.Object.keys(notifierData).length :
                                    0,
                target, notifiers, notifier, yuid, match, tmp, i, len, sub, ret;

            // clear the notifications list (mainly for delegation)
            currentTarget.clearData(nodeDataKey);

            // Order the delegate subs by their placement in the parent axis
            axisNodes.push(currentTarget);
            // document.get('ownerDocument') returns null
            // which we'll use to prevent having duplicate Nodes in the list
            if (doc) {
                axisNodes.unshift(doc);
            }

            // ancestors() returns the Nodes from top to bottom
            axisNodes._nodes.reverse();

            if (count) {
                // Store the count for step 2
                tmp = count;
                axisNodes.some(function (node) {
                    var yuid      = Y.stamp(node),
                        notifiers = notifierData[yuid],
                        i, len;

                    if (notifiers) {
                        count--;
                        for (i = 0, len = notifiers.length; i < len; ++i) {
                            if (notifiers[i].handle.sub.filter) {
                                delegates.push(notifiers[i]);
                            }
                        }
                    }

                    return !count;
                });
                count = tmp;
            }

            // Walk up the parent axis, notifying direct subscriptions and
            // testing delegate filters.
            while (count && (target = axisNodes.shift())) {
                yuid = Y.stamp(target);

                notifiers = notifierData[yuid];

                if (notifiers) {
                    for (i = 0, len = notifiers.length; i < len; ++i) {
                        notifier = notifiers[i];
                        sub      = notifier.handle.sub;
                        match    = true;

                        e.currentTarget = target;

                        if (sub.filter) {
                            match = sub.filter.apply(target,
                                [target, e].concat(sub.args || []));

                            // No longer necessary to test against this
                            // delegate subscription for the nodes along
                            // the parent axis.
                            delegates.splice(
                                arrayIndex(delegates, notifier), 1);
                        }

                        if (match) {
                            // undefined for direct subs
                            e.container = notifier.container;
                            ret = notifier.fire(e);
                        }

                        if (ret === false || e.stopped === 2) {
                            break;
                        }
                    }

                    delete notifiers[yuid];
                    count--;
                }

                if (e.stopped !== 2) {
                    // delegates come after subs targeting this specific node
                    // because they would not normally report until they'd
                    // bubbled to the container node.
                    for (i = 0, len = delegates.length; i < len; ++i) {
                        notifier = delegates[i];
                        sub = notifier.handle.sub;

                        if (sub.filter.apply(target,
                            [target, e].concat(sub.args || []))) {

                            e.container = notifier.container;
                            e.currentTarget = target;
                            ret = notifier.fire(e);
                        }

                        if (ret === false || e.stopped === 2) {
                            break;
                        }
                    }
                }

                if (e.stopped) {
                    break;
                }
            }
        },

        on: function (node, sub, notifier) {
            sub.handle = this._attach(node._node, notifier);
        },

        detach: function (node, sub) {
            sub.handle.detach();
        },

        delegate: function (node, sub, notifier, filter) {
            if (isString(filter)) {
                sub.filter = function (target) {
                    return Y.Selector.test(target._node, filter,
                        node === target ? null : node._node);
                };
            }

            sub.handle = this._attach(node._node, notifier, true);
        },

        detachDelegate: function (node, sub) {
            sub.handle.detach();
        }
    }, true);
}

// For IE, we need to defer to focusin rather than focus because
// `el.focus(); doSomething();` executes el.onbeforeactivate, el.onactivate,
// el.onfocusin, doSomething, then el.onfocus.  All others support capture
// phase focus, which executes before doSomething.  To guarantee consistent
// behavior for this use case, IE's direct subscriptions are made against
// focusin so subscribers will be notified before js following el.focus() is
// executed.
if (useActivate) {
    //     name     capture phase       direct subscription
    define("focus", "beforeactivate",   "focusin");
    define("blur",  "beforedeactivate", "focusout");
} else {
    define("focus", "focus", "focus");
    define("blur",  "blur",  "blur");
}


}, '3.10.1', {"requires": ["event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/follow-buttons.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-follow-buttons', function(Y) {
  Y.namespace('Squarespace');

  Y.Squarespace.FollowButtonUtils = (function() {
    var destroyExistingButton = function(btn) {
      var existingWidgetBB = btn.one('.sqs-follow-button');
      if(existingWidgetBB) {
        var existingWidget = Y.Widget.getByNode(existingWidgetBB);
        if(existingWidget) {
          existingWidget.destroy();
        }
      }
    };

    var render = function(btn) {
      destroyExistingButton(btn);

      var userName = btn.getAttribute('data-username');
      if(userName && userName.length) {
        new Y.Squarespace.Widgets.FollowButton({
          username: userName
        }).render(btn);
      }
    };

    return {
      renderAll: function() {
        Y.all('.squarespace-follow-button').each(function(btn) {
          render(btn);
        });
      }
    };
  })();

  Y.on('domready', function() {
    Y.Squarespace.FollowButtonUtils.renderAll();
  });
}, '1.0', {
  requires: [
    'squarespace-follow-button'
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-base/node-base.js
// ----------------------------------------------------------------------------------------

YUI.add('node-base', function (Y, NAME) {

/**
 * @module node
 * @submodule node-base
 */

var methods = [
/**
 * Determines whether each node has the given className.
 * @method hasClass
 * @for Node
 * @param {String} className the class name to search for
 * @return {Boolean} Whether or not the element has the specified class
 */
 'hasClass',

/**
 * Adds a class name to each node.
 * @method addClass
 * @param {String} className the class name to add to the node's class attribute
 * @chainable
 */
 'addClass',

/**
 * Removes a class name from each node.
 * @method removeClass
 * @param {String} className the class name to remove from the node's class attribute
 * @chainable
 */
 'removeClass',

/**
 * Replace a class with another class for each node.
 * If no oldClassName is present, the newClassName is simply added.
 * @method replaceClass
 * @param {String} oldClassName the class name to be replaced
 * @param {String} newClassName the class name that will be replacing the old class name
 * @chainable
 */
 'replaceClass',

/**
 * If the className exists on the node it is removed, if it doesn't exist it is added.
 * @method toggleClass
 * @param {String} className the class name to be toggled
 * @param {Boolean} force Option to force adding or removing the class.
 * @chainable
 */
 'toggleClass'
];

Y.Node.importMethod(Y.DOM, methods);
/**
 * Determines whether each node has the given className.
 * @method hasClass
 * @see Node.hasClass
 * @for NodeList
 * @param {String} className the class name to search for
 * @return {Array} An array of booleans for each node bound to the NodeList.
 */

/**
 * Adds a class name to each node.
 * @method addClass
 * @see Node.addClass
 * @param {String} className the class name to add to the node's class attribute
 * @chainable
 */

/**
 * Removes a class name from each node.
 * @method removeClass
 * @see Node.removeClass
 * @param {String} className the class name to remove from the node's class attribute
 * @chainable
 */

/**
 * Replace a class with another class for each node.
 * If no oldClassName is present, the newClassName is simply added.
 * @method replaceClass
 * @see Node.replaceClass
 * @param {String} oldClassName the class name to be replaced
 * @param {String} newClassName the class name that will be replacing the old class name
 * @chainable
 */

/**
 * If the className exists on the node it is removed, if it doesn't exist it is added.
 * @method toggleClass
 * @see Node.toggleClass
 * @param {String} className the class name to be toggled
 * @chainable
 */
Y.NodeList.importMethod(Y.Node.prototype, methods);
/**
 * @module node
 * @submodule node-base
 */

var Y_Node = Y.Node,
    Y_DOM = Y.DOM;

/**
 * Returns a new dom node using the provided markup string.
 * @method create
 * @static
 * @param {String} html The markup used to create the element
 * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
 * to escape html content.
 * @param {HTMLDocument} doc An optional document context
 * @return {Node} A Node instance bound to a DOM node or fragment
 * @for Node
 */
Y_Node.create = function(html, doc) {
    if (doc && doc._node) {
        doc = doc._node;
    }
    return Y.one(Y_DOM.create(html, doc));
};

Y.mix(Y_Node.prototype, {
    /**
     * Creates a new Node using the provided markup string.
     * @method create
     * @param {String} html The markup used to create the element.
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @param {HTMLDocument} doc An optional document context
     * @return {Node} A Node instance bound to a DOM node or fragment
     */
    create: Y_Node.create,

    /**
     * Inserts the content before the reference node.
     * @method insert
     * @param {String | Node | HTMLElement | NodeList | HTMLCollection} content The content to insert
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @param {Int | Node | HTMLElement | String} where The position to insert at.
     * Possible "where" arguments
     * <dl>
     * <dt>Y.Node</dt>
     * <dd>The Node to insert before</dd>
     * <dt>HTMLElement</dt>
     * <dd>The element to insert before</dd>
     * <dt>Int</dt>
     * <dd>The index of the child element to insert before</dd>
     * <dt>"replace"</dt>
     * <dd>Replaces the existing HTML</dd>
     * <dt>"before"</dt>
     * <dd>Inserts before the existing HTML</dd>
     * <dt>"before"</dt>
     * <dd>Inserts content before the node</dd>
     * <dt>"after"</dt>
     * <dd>Inserts content after the node</dd>
     * </dl>
     * @chainable
     */
    insert: function(content, where) {
        this._insert(content, where);
        return this;
    },

    _insert: function(content, where) {
        var node = this._node,
            ret = null;

        if (typeof where == 'number') { // allow index
            where = this._node.childNodes[where];
        } else if (where && where._node) { // Node
            where = where._node;
        }

        if (content && typeof content != 'string') { // allow Node or NodeList/Array instances
            content = content._node || content._nodes || content;
        }
        ret = Y_DOM.addHTML(node, content, where);

        return ret;
    },

    /**
     * Inserts the content as the firstChild of the node.
     * @method prepend
     * @param {String | Node | HTMLElement} content The content to insert
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @chainable
     */
    prepend: function(content) {
        return this.insert(content, 0);
    },

    /**
     * Inserts the content as the lastChild of the node.
     * @method append
     * @param {String | Node | HTMLElement} content The content to insert
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @chainable
     */
    append: function(content) {
        return this.insert(content, null);
    },

    /**
     * @method appendChild
     * @param {String | HTMLElement | Node} node Node to be appended
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @return {Node} The appended node
     */
    appendChild: function(node) {
        return Y_Node.scrubVal(this._insert(node));
    },

    /**
     * @method insertBefore
     * @param {String | HTMLElement | Node} newNode Node to be appended
     * @param {HTMLElement | Node} refNode Node to be inserted before
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content.
     * @return {Node} The inserted node
     */
    insertBefore: function(newNode, refNode) {
        return Y.Node.scrubVal(this._insert(newNode, refNode));
    },

    /**
     * Appends the node to the given node.
     * @method appendTo
     * @param {Node | HTMLElement} node The node to append to
     * @chainable
     */
    appendTo: function(node) {
        Y.one(node).append(this);
        return this;
    },

    /**
     * Replaces the node's current content with the content.
     * Note that this passes to innerHTML and is not escaped.
     * Use <a href="../classes/Escape.html#method_html">`Y.Escape.html()`</a>
     * to escape html content or `set('text')` to add as text.
     * @method setContent
     * @deprecated Use setHTML
     * @param {String | Node | HTMLElement | NodeList | HTMLCollection} content The content to insert
     * @chainable
     */
    setContent: function(content) {
        this._insert(content, 'replace');
        return this;
    },

    /**
     * Returns the node's current content (e.g. innerHTML)
     * @method getContent
     * @deprecated Use getHTML
     * @return {String} The current content
     */
    getContent: function(content) {
        return this.get('innerHTML');
    }
});

/**
 * Replaces the node's current html content with the content provided.
 * Note that this passes to innerHTML and is not escaped.
 * Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
 * @method setHTML
 * @param {String | HTML | Node | HTMLElement | NodeList | HTMLCollection} content The content to insert
 * @chainable
 */
Y.Node.prototype.setHTML = Y.Node.prototype.setContent;

/**
 * Returns the node's current html content (e.g. innerHTML)
 * @method getHTML
 * @return {String} The html content
 */
Y.Node.prototype.getHTML = Y.Node.prototype.getContent;

Y.NodeList.importMethod(Y.Node.prototype, [
    /**
     * Called on each Node instance
     * @for NodeList
     * @method append
     * @see Node.append
     */
    'append',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method insert
     * @see Node.insert
     */
    'insert',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method appendChild
     * @see Node.appendChild
     */
    'appendChild',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method insertBefore
     * @see Node.insertBefore
     */
    'insertBefore',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method prepend
     * @see Node.prepend
     */
    'prepend',

    /**
     * Called on each Node instance
     * Note that this passes to innerHTML and is not escaped.
     * Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
     * @for NodeList
     * @method setContent
     * @deprecated Use setHTML
     */
    'setContent',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method getContent
     * @deprecated Use getHTML
     */
    'getContent',

    /**
     * Called on each Node instance
     * Note that this passes to innerHTML and is not escaped.
     * Use `Y.Escape.html()` to escape HTML, or `set('text')` to add as text.
     * @for NodeList
     * @method setHTML
     * @see Node.setHTML
     */
    'setHTML',

    /**
     * Called on each Node instance
     * @for NodeList
     * @method getHTML
     * @see Node.getHTML
     */
    'getHTML'
]);
/**
 * @module node
 * @submodule node-base
 */

var Y_Node = Y.Node,
    Y_DOM = Y.DOM;

/**
 * Static collection of configuration attributes for special handling
 * @property ATTRS
 * @static
 * @type object
 */
Y_Node.ATTRS = {
    /**
     * Allows for getting and setting the text of an element.
     * Formatting is preserved and special characters are treated literally.
     * @config text
     * @type String
     */
    text: {
        getter: function() {
            return Y_DOM.getText(this._node);
        },

        setter: function(content) {
            Y_DOM.setText(this._node, content);
            return content;
        }
    },

    /**
     * Allows for getting and setting the text of an element.
     * Formatting is preserved and special characters are treated literally.
     * @config for
     * @type String
     */
    'for': {
        getter: function() {
            return Y_DOM.getAttribute(this._node, 'for');
        },

        setter: function(val) {
            Y_DOM.setAttribute(this._node, 'for', val);
            return val;
        }
    },

    'options': {
        getter: function() {
            return this._node.getElementsByTagName('option');
        }
    },

    /**
     * Returns a NodeList instance of all HTMLElement children.
     * @readOnly
     * @config children
     * @type NodeList
     */
    'children': {
        getter: function() {
            var node = this._node,
                children = node.children,
                childNodes, i, len;

            if (!children) {
                childNodes = node.childNodes;
                children = [];

                for (i = 0, len = childNodes.length; i < len; ++i) {
                    if (childNodes[i].tagName) {
                        children[children.length] = childNodes[i];
                    }
                }
            }
            return Y.all(children);
        }
    },

    value: {
        getter: function() {
            return Y_DOM.getValue(this._node);
        },

        setter: function(val) {
            Y_DOM.setValue(this._node, val);
            return val;
        }
    }
};

Y.Node.importMethod(Y.DOM, [
    /**
     * Allows setting attributes on DOM nodes, normalizing in some cases.
     * This passes through to the DOM node, allowing for custom attributes.
     * @method setAttribute
     * @for Node
     * @for NodeList
     * @chainable
     * @param {string} name The attribute name
     * @param {string} value The value to set
     */
    'setAttribute',
    /**
     * Allows getting attributes on DOM nodes, normalizing in some cases.
     * This passes through to the DOM node, allowing for custom attributes.
     * @method getAttribute
     * @for Node
     * @for NodeList
     * @param {string} name The attribute name
     * @return {string} The attribute value
     */
    'getAttribute'

]);
/**
 * @module node
 * @submodule node-base
 */

var Y_Node = Y.Node;
var Y_NodeList = Y.NodeList;
/**
 * List of events that route to DOM events
 * @static
 * @property DOM_EVENTS
 * @for Node
 */

Y_Node.DOM_EVENTS = {
    abort: 1,
    beforeunload: 1,
    blur: 1,
    change: 1,
    click: 1,
    close: 1,
    command: 1,
    contextmenu: 1,
    dblclick: 1,
    DOMMouseScroll: 1,
    drag: 1,
    dragstart: 1,
    dragenter: 1,
    dragover: 1,
    dragleave: 1,
    dragend: 1,
    drop: 1,
    error: 1,
    focus: 1,
    key: 1,
    keydown: 1,
    keypress: 1,
    keyup: 1,
    load: 1,
    message: 1,
    mousedown: 1,
    mouseenter: 1,
    mouseleave: 1,
    mousemove: 1,
    mousemultiwheel: 1,
    mouseout: 1,
    mouseover: 1,
    mouseup: 1,
    mousewheel: 1,
    orientationchange: 1,
    reset: 1,
    resize: 1,
    select: 1,
    selectstart: 1,
    submit: 1,
    scroll: 1,
    textInput: 1,
    unload: 1
};

// Add custom event adaptors to this list.  This will make it so
// that delegate, key, available, contentready, etc all will
// be available through Node.on
Y.mix(Y_Node.DOM_EVENTS, Y.Env.evt.plugins);

Y.augment(Y_Node, Y.EventTarget);

Y.mix(Y_Node.prototype, {
    /**
     * Removes event listeners from the node and (optionally) its subtree
     * @method purge
     * @param {Boolean} recurse (optional) Whether or not to remove listeners from the
     * node's subtree
     * @param {String} type (optional) Only remove listeners of the specified type
     * @chainable
     *
     */
    purge: function(recurse, type) {
        Y.Event.purgeElement(this._node, recurse, type);
        return this;
    }

});

Y.mix(Y.NodeList.prototype, {
    _prepEvtArgs: function(type, fn, context) {
        // map to Y.on/after signature (type, fn, nodes, context, arg1, arg2, etc)
        var args = Y.Array(arguments, 0, true);

        if (args.length < 2) { // type only (event hash) just add nodes
            args[2] = this._nodes;
        } else {
            args.splice(2, 0, this._nodes);
        }

        args[3] = context || this; // default to NodeList instance as context

        return args;
    },

    /**
    Subscribe a callback function for each `Node` in the collection to execute
    in response to a DOM event.

    NOTE: Generally, the `on()` method should be avoided on `NodeLists`, in
    favor of using event delegation from a parent Node.  See the Event user
    guide for details.

    Most DOM events are associated with a preventable default behavior, such as
    link clicks navigating to a new page.  Callbacks are passed a
    `DOMEventFacade` object as their first argument (usually called `e`) that
    can be used to prevent this default behavior with `e.preventDefault()`. See
    the `DOMEventFacade` API for all available properties and methods on the
    object.

    By default, the `this` object will be the `NodeList` that the subscription
    came from, <em>not the `Node` that received the event</em>.  Use
    `e.currentTarget` to refer to the `Node`.

    Returning `false` from a callback is supported as an alternative to calling
    `e.preventDefault(); e.stopPropagation();`.  However, it is recommended to
    use the event methods.

    @example

        Y.all(".sku").on("keydown", function (e) {
            if (e.keyCode === 13) {
                e.preventDefault();

                // Use e.currentTarget to refer to the individual Node
                var item = Y.MyApp.searchInventory( e.currentTarget.get('value') );
                // etc ...
            }
        });

    @method on
    @param {String} type The name of the event
    @param {Function} fn The callback to execute in response to the event
    @param {Object} [context] Override `this` object in callback
    @param {Any} [arg*] 0..n additional arguments to supply to the subscriber
    @return {EventHandle} A subscription handle capable of detaching that
                          subscription
    @for NodeList
    **/
    on: function(type, fn, context) {
        return Y.on.apply(Y, this._prepEvtArgs.apply(this, arguments));
    },

    /**
     * Applies an one-time event listener to each Node bound to the NodeList.
     * @method once
     * @param {String} type The event being listened for
     * @param {Function} fn The handler to call when the event fires
     * @param {Object} context The context to call the handler with.
     * Default is the NodeList instance.
     * @return {EventHandle} A subscription handle capable of detaching that
     *                    subscription
     * @for NodeList
     */
    once: function(type, fn, context) {
        return Y.once.apply(Y, this._prepEvtArgs.apply(this, arguments));
    },

    /**
     * Applies an event listener to each Node bound to the NodeList.
     * The handler is called only after all on() handlers are called
     * and the event is not prevented.
     * @method after
     * @param {String} type The event being listened for
     * @param {Function} fn The handler to call when the event fires
     * @param {Object} context The context to call the handler with.
     * Default is the NodeList instance.
     * @return {EventHandle} A subscription handle capable of detaching that
     *                    subscription
     * @for NodeList
     */
    after: function(type, fn, context) {
        return Y.after.apply(Y, this._prepEvtArgs.apply(this, arguments));
    },

    /**
     * Applies an one-time event listener to each Node bound to the NodeList
     * that will be called only after all on() handlers are called and the
     * event is not prevented.
     *
     * @method onceAfter
     * @param {String} type The event being listened for
     * @param {Function} fn The handler to call when the event fires
     * @param {Object} context The context to call the handler with.
     * Default is the NodeList instance.
     * @return {EventHandle} A subscription handle capable of detaching that
     *                    subscription
     * @for NodeList
     */
    onceAfter: function(type, fn, context) {
        return Y.onceAfter.apply(Y, this._prepEvtArgs.apply(this, arguments));
    }
});

Y_NodeList.importMethod(Y.Node.prototype, [
    /**
      * Called on each Node instance
      * @method detach
      * @see Node.detach
      * @for NodeList
      */
    'detach',

    /** Called on each Node instance
      * @method detachAll
      * @see Node.detachAll
      * @for NodeList
      */
    'detachAll'
]);

/**
Subscribe a callback function to execute in response to a DOM event or custom
event.

Most DOM events are associated with a preventable default behavior such as
link clicks navigating to a new page.  Callbacks are passed a `DOMEventFacade`
object as their first argument (usually called `e`) that can be used to
prevent this default behavior with `e.preventDefault()`. See the
`DOMEventFacade` API for all available properties and methods on the object.

If the event name passed as the first parameter is not a whitelisted DOM event,
it will be treated as a custom event subscriptions, allowing
`node.fire('customEventName')` later in the code.  Refer to the Event user guide
for the full DOM event whitelist.

By default, the `this` object in the callback will refer to the subscribed
`Node`.

Returning `false` from a callback is supported as an alternative to calling
`e.preventDefault(); e.stopPropagation();`.  However, it is recommended to use
the event methods.

@example

    Y.one("#my-form").on("submit", function (e) {
        e.preventDefault();

        // proceed with ajax form submission instead...
    });

@method on
@param {String} type The name of the event
@param {Function} fn The callback to execute in response to the event
@param {Object} [context] Override `this` object in callback
@param {Any} [arg*] 0..n additional arguments to supply to the subscriber
@return {EventHandle} A subscription handle capable of detaching that
                      subscription
@for Node
**/

Y.mix(Y.Node.ATTRS, {
    offsetHeight: {
        setter: function(h) {
            Y.DOM.setHeight(this._node, h);
            return h;
        },

        getter: function() {
            return this._node.offsetHeight;
        }
    },

    offsetWidth: {
        setter: function(w) {
            Y.DOM.setWidth(this._node, w);
            return w;
        },

        getter: function() {
            return this._node.offsetWidth;
        }
    }
});

Y.mix(Y.Node.prototype, {
    sizeTo: function(w, h) {
        var node;
        if (arguments.length < 2) {
            node = Y.one(w);
            w = node.get('offsetWidth');
            h = node.get('offsetHeight');
        }

        this.setAttrs({
            offsetWidth: w,
            offsetHeight: h
        });
    }
});
/**
 * @module node
 * @submodule node-base
 */

var Y_Node = Y.Node;

Y.mix(Y_Node.prototype, {
    /**
     * Makes the node visible.
     * If the "transition" module is loaded, show optionally
     * animates the showing of the node using either the default
     * transition effect ('fadeIn'), or the given named effect.
     * @method show
     * @for Node
     * @param {String} name A named Transition effect to use as the show effect.
     * @param {Object} config Options to use with the transition.
     * @param {Function} callback An optional function to run after the transition completes.
     * @chainable
     */
    show: function(callback) {
        callback = arguments[arguments.length - 1];
        this.toggleView(true, callback);
        return this;
    },

    /**
     * The implementation for showing nodes.
     * Default is to toggle the style.display property.
     * @method _show
     * @protected
     * @chainable
     */
    _show: function() {
        this.setStyle('display', '');

    },

    _isHidden: function() {
        return Y.DOM.getStyle(this._node, 'display') === 'none';
    },

    /**
     * Displays or hides the node.
     * If the "transition" module is loaded, toggleView optionally
     * animates the toggling of the node using given named effect.
     * @method toggleView
     * @for Node
     * @param {String} [name] An optional string value to use as transition effect.
     * @param {Boolean} [on] An optional boolean value to force the node to be shown or hidden
     * @param {Function} [callback] An optional function to run after the transition completes.
     * @chainable
     */
    toggleView: function(on, callback) {
        this._toggleView.apply(this, arguments);
        return this;
    },

    _toggleView: function(on, callback) {
        callback = arguments[arguments.length - 1];

        // base on current state if not forcing
        if (typeof on != 'boolean') {
            on = (this._isHidden()) ? 1 : 0;
        }

        if (on) {
            this._show();
        }  else {
            this._hide();
        }

        if (typeof callback == 'function') {
            callback.call(this);
        }

        return this;
    },

    /**
     * Hides the node.
     * If the "transition" module is loaded, hide optionally
     * animates the hiding of the node using either the default
     * transition effect ('fadeOut'), or the given named effect.
     * @method hide
     * @param {String} name A named Transition effect to use as the show effect.
     * @param {Object} config Options to use with the transition.
     * @param {Function} callback An optional function to run after the transition completes.
     * @chainable
     */
    hide: function(callback) {
        callback = arguments[arguments.length - 1];
        this.toggleView(false, callback);
        return this;
    },

    /**
     * The implementation for hiding nodes.
     * Default is to toggle the style.display property.
     * @method _hide
     * @protected
     * @chainable
     */
    _hide: function() {
        this.setStyle('display', 'none');
    }
});

Y.NodeList.importMethod(Y.Node.prototype, [
    /**
     * Makes each node visible.
     * If the "transition" module is loaded, show optionally
     * animates the showing of the node using either the default
     * transition effect ('fadeIn'), or the given named effect.
     * @method show
     * @param {String} name A named Transition effect to use as the show effect.
     * @param {Object} config Options to use with the transition.
     * @param {Function} callback An optional function to run after the transition completes.
     * @for NodeList
     * @chainable
     */
    'show',

    /**
     * Hides each node.
     * If the "transition" module is loaded, hide optionally
     * animates the hiding of the node using either the default
     * transition effect ('fadeOut'), or the given named effect.
     * @method hide
     * @param {String} name A named Transition effect to use as the show effect.
     * @param {Object} config Options to use with the transition.
     * @param {Function} callback An optional function to run after the transition completes.
     * @chainable
     */
    'hide',

    /**
     * Displays or hides each node.
     * If the "transition" module is loaded, toggleView optionally
     * animates the toggling of the nodes using given named effect.
     * @method toggleView
     * @param {String} [name] An optional string value to use as transition effect.
     * @param {Boolean} [on] An optional boolean value to force the nodes to be shown or hidden
     * @param {Function} [callback] An optional function to run after the transition completes.
     * @chainable
     */
    'toggleView'
]);

if (!Y.config.doc.documentElement.hasAttribute) { // IE < 8
    Y.Node.prototype.hasAttribute = function(attr) {
        if (attr === 'value') {
            if (this.get('value') !== "") { // IE < 8 fails to populate specified when set in HTML
                return true;
            }
        }
        return !!(this._node.attributes[attr] &&
                this._node.attributes[attr].specified);
    };
}

// IE throws an error when calling focus() on an element that's invisible, not
// displayed, or disabled.
Y.Node.prototype.focus = function () {
    try {
        this._node.focus();
    } catch (e) {
    }

    return this;
};

// IE throws error when setting input.type = 'hidden',
// input.setAttribute('type', 'hidden') and input.attributes.type.value = 'hidden'
Y.Node.ATTRS.type = {
    setter: function(val) {
        if (val === 'hidden') {
            try {
                this._node.type = 'hidden';
            } catch(e) {
                this.setStyle('display', 'none');
                this._inputType = 'hidden';
            }
        } else {
            try { // IE errors when changing the type from "hidden'
                this._node.type = val;
            } catch (e) {
            }
        }
        return val;
    },

    getter: function() {
        return this._inputType || this._node.type;
    },

    _bypassProxy: true // don't update DOM when using with Attribute
};

if (Y.config.doc.createElement('form').elements.nodeType) {
    // IE: elements collection is also FORM node which trips up scrubVal.
    Y.Node.ATTRS.elements = {
            getter: function() {
                return this.all('input, textarea, button, select');
            }
    };
}

/**
 * Provides methods for managing custom Node data.
 *
 * @module node
 * @main node
 * @submodule node-data
 */

Y.mix(Y.Node.prototype, {
    _initData: function() {
        if (! ('_data' in this)) {
            this._data = {};
        }
    },

    /**
    * @method getData
    * @for Node
    * @description Retrieves arbitrary data stored on a Node instance.
    * If no data is associated with the Node, it will attempt to retrieve
    * a value from the corresponding HTML data attribute. (e.g. node.getData('foo')
    * will check node.getAttribute('data-foo')).
    * @param {string} name Optional name of the data field to retrieve.
    * If no name is given, all data is returned.
    * @return {any | Object} Whatever is stored at the given field,
    * or an object hash of all fields.
    */
    getData: function(name) {
        this._initData();
        var data = this._data,
            ret = data;

        if (arguments.length) { // single field
            if (name in data) {
                ret = data[name];
            } else { // initialize from HTML attribute
                ret = this._getDataAttribute(name);
            }
        } else if (typeof data == 'object' && data !== null) { // all fields
            ret = {};
            Y.Object.each(data, function(v, n) {
                ret[n] = v;
            });

            ret = this._getDataAttributes(ret);
        }

        return ret;

    },

    _getDataAttributes: function(ret) {
        ret = ret || {};
        var i = 0,
            attrs = this._node.attributes,
            len = attrs.length,
            prefix = this.DATA_PREFIX,
            prefixLength = prefix.length,
            name;

        while (i < len) {
            name = attrs[i].name;
            if (name.indexOf(prefix) === 0) {
                name = name.substr(prefixLength);
                if (!(name in ret)) { // only merge if not already stored
                    ret[name] = this._getDataAttribute(name);
                }
            }

            i += 1;
        }

        return ret;
    },

    _getDataAttribute: function(name) {
        name = this.DATA_PREFIX + name;

        var node = this._node,
            attrs = node.attributes,
            data = attrs && attrs[name] && attrs[name].value;

        return data;
    },

    /**
    * @method setData
    * @for Node
    * @description Stores arbitrary data on a Node instance.
    * This is not stored with the DOM node.
    * @param {string} name The name of the field to set. If no val
    * is given, name is treated as the data and overrides any existing data.
    * @param {any} val The value to be assigned to the field.
    * @chainable
    */
    setData: function(name, val) {
        this._initData();
        if (arguments.length > 1) {
            this._data[name] = val;
        } else {
            this._data = name;
        }

       return this;
    },

    /**
    * @method clearData
    * @for Node
    * @description Clears internally stored data.
    * @param {string} name The name of the field to clear. If no name
    * is given, all data is cleared.
    * @chainable
    */
    clearData: function(name) {
        if ('_data' in this) {
            if (typeof name != 'undefined') {
                delete this._data[name];
            } else {
                delete this._data;
            }
        }

        return this;
    }
});

Y.mix(Y.NodeList.prototype, {
    /**
    * @method getData
    * @for NodeList
    * @description Retrieves arbitrary data stored on each Node instance
    * bound to the NodeList.
    * @see Node
    * @param {string} name Optional name of the data field to retrieve.
    * If no name is given, all data is returned.
    * @return {Array} An array containing all of the data for each Node instance.
    * or an object hash of all fields.
    */
    getData: function(name) {
        var args = (arguments.length) ? [name] : [];
        return this._invoke('getData', args, true);
    },

    /**
    * @method setData
    * @for NodeList
    * @description Stores arbitrary data on each Node instance bound to the
    *  NodeList. This is not stored with the DOM node.
    * @param {string} name The name of the field to set. If no name
    * is given, name is treated as the data and overrides any existing data.
    * @param {any} val The value to be assigned to the field.
    * @chainable
    */
    setData: function(name, val) {
        var args = (arguments.length > 1) ? [name, val] : [name];
        return this._invoke('setData', args);
    },

    /**
    * @method clearData
    * @for NodeList
    * @description Clears data on all Node instances bound to the NodeList.
    * @param {string} name The name of the field to clear. If no name
    * is given, all data is cleared.
    * @chainable
    */
    clearData: function(name) {
        var args = (arguments.length) ? [name] : [];
        return this._invoke('clearData', [name]);
    }
});


}, '3.10.1', {"requires": ["event-base", "node-core", "dom-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/calendarnavigator/calendarnavigator.js
// ----------------------------------------------------------------------------------------

YUI.add('calendarnavigator', function (Y, NAME) {

/**
 * Provides a plugin which adds navigation controls to Calendar.
 *
 * @module calendarnavigator
 */
var CONTENT_BOX = "contentBox",
    HOST        = "host",
    getCN       = Y.ClassNameManager.getClassName,
    substitute  = Y.Lang.sub,
    node        = Y.Node,
    create      = node.create,
    CALENDAR    = 'calendar',
    CALENDARNAV = 'calendarnav',
    CAL_HD      = getCN(CALENDAR, 'header'),
    CAL_PREV_M  = getCN(CALENDARNAV, 'prevmonth'),
    CAL_NEXT_M  = getCN(CALENDARNAV, 'nextmonth'),
    CAL_DIS_M   = getCN(CALENDARNAV, 'month-disabled'),
    ydate       = Y.DataType.Date;
/**
 * A plugin class which adds navigation controls to Calendar.
 *
 * @class CalendarNavigator
 * @extends Plugin.Base
 * @namespace Plugin
 */
function CalendarNavigator() {
    CalendarNavigator.superclass.constructor.apply(this, arguments);
}

/**
 * The namespace for the plugin. This will be the property on the widget, which will
 * reference the plugin instance, when it's plugged in.
 *
 * @property NS
 * @static
 * @type String
 * @default "navigator"
 */
CalendarNavigator.NS = "navigator";

/**
 * The NAME of the CalendarNavigator class. Used to prefix events generated
 * by the plugin class.
 *
 * @property NAME
 * @static
 * @type String
 * @default "pluginCalendarNavigator"
 */
CalendarNavigator.NAME = "pluginCalendarNavigator";


/**
 * Static property used to define the default attribute
 * configuration for the plugin.
 *
 * @property ATTRS
 * @type Object
 * @static
 */
CalendarNavigator.ATTRS = {

    /**
     * The number of months to shift by when the control arrows are clicked.
     *
     * @attribute shiftByMonths
     * @type Number
     * @default 1 (months)
     */
    shiftByMonths : {
        value: 1
    }
};

   /**
    * The CSS classnames for the calendar navigator controls.
    * @property CALENDARNAV_STRINGS
    * @type Object
    * @readOnly
    * @protected
    * @static
    */
CalendarNavigator.CALENDARNAV_STRINGS = {
   prev_month_class: CAL_PREV_M,
   next_month_class: CAL_NEXT_M
};

   /**
    * The template for the calendar navigator previous month control.
    * @property PREV_MONTH_CONTROL_TEMPLATE
    * @type String
    * @protected
    * @static
    */
CalendarNavigator.PREV_MONTH_CONTROL_TEMPLATE = '<a class="yui3-u {prev_month_class}" role="button" aria-label="{prev_month_arialabel}" ' +
                                                    'tabindex="{control_tabindex}">' +
                                                    "<span>&lt;</span>" +
                                                '</a>';
   /**
    * The template for the calendar navigator next month control.
    * @property NEXT_MONTH_CONTROL_TEMPLATE
    * @type String
    * @readOnly
    * @protected
    * @static
    */
CalendarNavigator.NEXT_MONTH_CONTROL_TEMPLATE = '<a class="yui3-u {next_month_class}" role="button" aria-label="{next_month_arialabel}" ' +
                                                    'tabindex="{control_tabindex}">' +
                                                    "<span>&gt;</span>" +
                                                '</a>';


Y.extend(CalendarNavigator, Y.Plugin.Base, {

    _eventAttachments : {},
    _controls: {},

    /**
     * The initializer lifecycle implementation. Modifies the host widget's
     * render to add navigation controls.
     *
     * @method initializer
     */
    initializer : function() {

        // After the host has rendered its UI, place the navigation cotnrols
        this._controls = {};
        this._eventAttachments = {};

        this.afterHostMethod("renderUI", this._initNavigationControls);
    },

    /**
     * The initializer destructor implementation. Responsible for destroying the initialized
     * control mechanisms.
     *
     * @method destructor
     */
    destructor : function() {

    },

    /**
     * Private utility method that focuses on a navigation button when it is clicked
     * or pressed with a keyboard.
     *
     * @method _focusNavigation
     * @param {Event} ev Click or keydown event from the controls
     * @protected
     */
    _focusNavigation : function (ev) {
        ev.currentTarget.focus();
    },

    /**
     * Private utility method that subtracts months from the host calendar date
     * based on the control click and the shiftByMonths property.
     *
     * @method _subtractMonths
     * @param {Event} ev Click event from the controls
     * @protected
     */
    _subtractMonths : function (ev) {
        if ( (ev.type === "click") || (ev.type === "keydown" && (ev.keyCode === 13 || ev.keyCode === 32)) ) {
            var host = this.get(HOST),
                oldDate = host.get("date");
            host.set("date", ydate.addMonths(oldDate, -1*this.get("shiftByMonths")));
            ev.preventDefault();
        }
    },

    /**
     * Private utility method that adds months to the host calendar date
     * based on the control click and the shiftByMonths property.
     *
     * @method _addMonths
     * @param {Event} ev Click event from the controls
     * @protected
     */
    _addMonths : function (ev) {
        if ( (ev.type === "click") || (ev.type === "keydown" && (ev.keyCode === 13 || ev.keyCode === 32)) ) {
            var host = this.get(HOST),
                oldDate = host.get("date");
            host.set("date", ydate.addMonths(oldDate, this.get("shiftByMonths")));
            ev.preventDefault();
        }
    },


    _updateControlState : function () {

        var host = this.get(HOST);
        if (ydate.areEqual(host.get("minimumDate"), host.get("date"))) {
            if (this._eventAttachments.prevMonth) {
                this._eventAttachments.prevMonth.detach();
                this._eventAttachments.prevMonth = false;
            }

            if (!this._controls.prevMonth.hasClass(CAL_DIS_M)) {
                this._controls.prevMonth.addClass(CAL_DIS_M).setAttribute("aria-disabled", "true");
            }
        }
        else {
            if (!this._eventAttachments.prevMonth) {
            this._eventAttachments.prevMonth = this._controls.prevMonth.on(["click", "keydown"], this._subtractMonths, this);
            }
            if (this._controls.prevMonth.hasClass(CAL_DIS_M)) {
              this._controls.prevMonth.removeClass(CAL_DIS_M).setAttribute("aria-disabled", "false");
            }
        }

        if (ydate.areEqual(host.get("maximumDate"), ydate.addMonths(host.get("date"), host._paneNumber - 1))) {
            if (this._eventAttachments.nextMonth) {
                this._eventAttachments.nextMonth.detach();
                this._eventAttachments.nextMonth = false;
            }

            if (!this._controls.nextMonth.hasClass(CAL_DIS_M)) {
                this._controls.nextMonth.addClass(CAL_DIS_M).setAttribute("aria-disabled", "true");
            }
        }
        else {
            if (!this._eventAttachments.nextMonth) {
            this._eventAttachments.nextMonth = this._controls.nextMonth.on(["click", "keydown"], this._addMonths, this);
            }
            if (this._controls.nextMonth.hasClass(CAL_DIS_M)) {
              this._controls.nextMonth.removeClass(CAL_DIS_M).setAttribute("aria-disabled", "false");
            }
        }

        this._controls.prevMonth.on(["click", "keydown"], this._focusNavigation, this);
        this._controls.nextMonth.on(["click", "keydown"], this._focusNavigation, this);
    },




    /**
     * Private render assist method that renders the previous month control
     *
     * @method _renderPrevControls
     * @private
     */
    _renderPrevControls : function () {
      var prevControlNode = create(substitute (CalendarNavigator.PREV_MONTH_CONTROL_TEMPLATE,
                               CalendarNavigator.CALENDARNAV_STRINGS));
      prevControlNode.on("selectstart", this.get(HOST)._preventSelectionStart);

      return prevControlNode;
    },

    /**
     * Private render assist method that renders the next month control
     *
     * @method _renderNextControls
     * @private
     */
    _renderNextControls : function () {
      var nextControlNode = create(substitute (CalendarNavigator.NEXT_MONTH_CONTROL_TEMPLATE,
                               CalendarNavigator.CALENDARNAV_STRINGS));
      nextControlNode.on("selectstart", this.get(HOST)._preventSelectionStart);

      return nextControlNode;
    },

    /**
     * Protected render assist method that initialized and renders the navigation controls.
     * @method _initNavigationControls
     * @protected
     */
    _initNavigationControls : function() {
        var host = this.get(HOST),
            headerCell = host.get(CONTENT_BOX).one("." + CAL_HD);

        CalendarNavigator.CALENDARNAV_STRINGS.control_tabindex = host.get("tabIndex");
        CalendarNavigator.CALENDARNAV_STRINGS.prev_month_arialabel = "Go to previous month";
        CalendarNavigator.CALENDARNAV_STRINGS.next_month_arialabel = "Go to next month";

        this._controls.prevMonth = this._renderPrevControls();
        this._controls.nextMonth = this._renderNextControls();

        this._updateControlState();

        host.after("dateChange", this._updateControlState, this);
        host.after("minimumDateChange", this._updateControlState, this);
        host.after("maximumDateChange", this._updateControlState, this);

        headerCell.prepend(this._controls.prevMonth);
        headerCell.append(this._controls.nextMonth);
    }
});

Y.namespace("Plugin").CalendarNavigator = CalendarNavigator;


}, '3.10.1', {"requires": ["plugin", "classnamemanager", "datatype-date", "node"], "skinnable": true});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/substitute/substitute.js
// ----------------------------------------------------------------------------------------

YUI.add('substitute', function (Y, NAME) {

/**
 * String variable substitution and string formatting.
 * If included, the substitute method is added to the YUI instance.
 *
 * @module substitute
 * @deprecated
 */

    var L = Y.Lang, DUMP = 'dump', SPACE = ' ', LBRACE = '{', RBRACE = '}',
        savedRegExp =  /(~-(\d+)-~)/g, lBraceRegExp = /\{LBRACE\}/g, rBraceRegExp = /\{RBRACE\}/g,

    /**
     * The following methods are added to the YUI instance
     *
     * <strong>Use `Y.Lang.sub` or `Y.Template` instead.</strong>
     * @class YUI~substitute
     * @deprecated
     */

/**
<strong>Use `Y.Lang.sub` or `Y.Template` instead.</strong>



Does `{placeholder}` substitution on a string.  The object passed as the
second parameter provides values to replace the `{placeholder}`s.
{placeholder} token names must match property names of the object.  For
example

`var greeting = Y.substitute("Hello, {who}!", { who: "World" });`

`{placeholder}` tokens that are undefined on the object map will be left in
tact (leaving unsightly "{placeholder}"s in the output string).  If your
replacement strings *should* include curly braces, use `{LBRACE}` and
`{RBRACE}` in your object map string value.

If a function is passed as a third argument, it will be called for each
{placeholder} found.  The {placeholder} name is passed as the first value
and the value from the object map is passed as the second.  If the
{placeholder} contains a space, the first token will be used to identify
the object map property and the remainder will be passed as a third
argument to the function.  See below for an example.

If the value in the object map for a given {placeholder} is an object and
the `dump` module is loaded, the replacement value will be the string
result of calling `Y.dump(...)` with the object as input.  Include a
numeric second token in the {placeholder} to configure the depth of the call
to `Y.dump(...)`, e.g. "{someObject 2}".  See the
<a href="../classes/YUI.html#method_dump">`dump`</a> method for details.

    @method substitute
    @deprecated
    @param {string} s The string that will be modified.
    @param {object} o An object containing the replacement values.
    @param {function} f An optional function that can be used to
                        process each match.  It receives the key,
                        value, and any extra metadata included with
                        the key inside of the braces.
    @param {boolean} recurse if true, the replacement will be recursive,
                        letting you have replacement tokens in replacement text.
                        The default is false.
    @return {string} the substituted string.

    @example

        function getAttrVal(key, value, name) {
            // Return a string describing the named attribute and its value if
            // the first token is @. Otherwise, return the value from the
            // replacement object.
            if (key === "@") {
                value += name + " Value: " + myObject.get(name);
            }
            return value;
        }

        // Assuming myObject.set('foo', 'flowers'),
        // => "Attr: foo Value: flowers"
        var attrVal = Y.substitute("{@ foo}", { "@": "Attr: " }, getAttrVal);
    **/

    substitute = function(s, o, f, recurse) {
        var i, j, k, key, v, meta, saved = [], token, dump,
            lidx = s.length;

        for (;;) {
            i = s.lastIndexOf(LBRACE, lidx);
            if (i < 0) {
                break;
            }
            j = s.indexOf(RBRACE, i);
            if (i + 1 >= j) {
                break;
            }

            //Extract key and meta info
            token = s.substring(i + 1, j);
            key = token;
            meta = null;
            k = key.indexOf(SPACE);
            if (k > -1) {
                meta = key.substring(k + 1);
                key = key.substring(0, k);
            }

            // lookup the value
            v = o[key];

            // if a substitution function was provided, execute it
            if (f) {
                v = f(key, v, meta);
            }

            if (L.isObject(v)) {
                if (!Y.dump) {
                    v = v.toString();
                } else {
                    if (L.isArray(v)) {
                        v = Y.dump(v, parseInt(meta, 10));
                    } else {
                        meta = meta || '';

                        // look for the keyword 'dump', if found force obj dump
                        dump = meta.indexOf(DUMP);
                        if (dump > -1) {
                            meta = meta.substring(4);
                        }

                        // use the toString if it is not the Object toString
                        // and the 'dump' meta info was not found
                        if (v.toString === Object.prototype.toString ||
                            dump > -1) {
                            v = Y.dump(v, parseInt(meta, 10));
                        } else {
                            v = v.toString();
                        }
                    }
                }
            } else if (L.isUndefined(v)) {
                // This {block} has no replace string. Save it for later.
                v = '~-' + saved.length + '-~';
                    saved.push(token);

                // break;
            }

            s = s.substring(0, i) + v + s.substring(j + 1);

            if (!recurse) {
                lidx = i - 1;
            }
        }
        // restore saved {block}s and escaped braces

        return s
            .replace(savedRegExp, function (str, p1, p2) {
                return LBRACE + saved[parseInt(p2,10)] + RBRACE;
            })
            .replace(lBraceRegExp, LBRACE)
            .replace(rBraceRegExp, RBRACE)
        ;
    };

    Y.substitute = substitute;
    L.substitute = substitute;



}, '3.10.1', {"requires": ["yui-base"], "optional": ["dump"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/spinner.js
// ----------------------------------------------------------------------------------------

/*
 * Squarespace Spinner
 */

YUI.add('squarespace-spinner', function(Y) {

   Y.namespace('Squarespace').Spinner = Y.Base.create('Spinner', Y.Widget, [], {

    renderUI: function() {

      this.get('boundingBox').addClass(this.get('color'));

      if (Y.UA.ie > 0 && Y.UA.ie < 10) {
        this.get('contentBox').append(Y.Node.create('<img class="sqs-ie-spinner" src="/universal/images-v6/configuration/crappy-ie-spinner.gif"/>'));
        this.get('boundingBox').addClass('degraded');
      }

      var size = this.get('size');
      if (!Y.Lang.isNumber(size)) {
        this.get('boundingBox').addClass(size);
      }

    },

    spin: function() {
      this.show();
    },

    stop: function() {
      this.hide();
    }

  }, {
    CSS_PREFIX: 'sqs-spin',
    NS: 'spinner',
    ATTRS: {
      size: {
        value: 'default', // extra-small, small, default, large, extra-large
        setter: function(val) {
          if (Y.Lang.isNumber(val)) {
            this.set('width', val);
            this.set('height', val);
          }
          return val;
        }
      },
      color: {
        value: 'light' // dark, light
      }
    }
  });
}, '1.0', {requires: [
  'base-build',
  'widget'
]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/commerce-utils.js
// ----------------------------------------------------------------------------------------

/**
 * Commerce-related utility functions
 *
 * @module squarespace-commerce-utils
 */
YUI.add('squarespace-commerce-utils', function(Y) {

  Y.Squarespace.Commerce = {


    /**
     * GLOBAL SETTINGS
     */
    currencyCode: function() {
      return (Y.Object.getValue(Static, ['SQUARESPACE_CONTEXT', 'websiteSettings', 'storeSettings', 'currenciesSupported']) || ['USD'])[0];
    },

    currencySymbol: function() {
      return Y.Squarespace.CurrencySymbol[this.currencyCode()];
    },

    showCurrencyCode: function() {
      return this.currencyCode() !== 'USD' && this.currencySymbol() === '$';
    },

    isExpressCheckout: function() {
      return Static.SQUARESPACE_CONTEXT.websiteSettings.storeSettings.expressCheckout;
    },


    /**
     * GLOBAL METHODS
     */
    goToCheckoutPage: function() {
      window.location = 'https://secure.' + Static.SQUARESPACE_CONTEXT.appDomain + '/commerce/checkout?cartId=' + Y.Cookie.get('CART');
    },

    goToDonatePage: function(donatePageId) {
      window.location = 'https://secure.' + Static.SQUARESPACE_CONTEXT.appDomain + '/commerce/donate?donatePageId=' + donatePageId;
    },

    /**
     Gives us cents as decimalized dollars: 10 => 0.10
    */
    moneyFormat: function(cents) {
      return Number( (cents / 100).toFixed(2) ).formatMoney(2);
    },


    /**
     * FORMATTERS
     */

    /**
     Takes a variant and generates a descriptor string (e.g. "Small / Red / Cotton")
    */
    variantFormat: function(variant) {
      var attrs = [];
      for (var attr in variant.attributes) {
        attrs.push(variant.attributes[attr]);
      }
      return attrs.join(" / ");
    },

    /**
      Gives the names of the visible attrs (e.g. "Color / Size")
    */
    variantFormatAttributes: function(variant) {
      var attrs = [];
      for (var attr in variant.attributes) {
        attrs.push(attr);
      }
      return attrs.join(" / ");
    },

    moneyString: function(value) {
      return '<span class="sqs-money-native">' + Y.Squarespace.Commerce.moneyFormat(value) + '</span>';
    },

    priceString: function(item) {
      var normalPrice = this.normalPrice(item);

      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          if (this.onSale(item)) {
            if (this.variedPrices(item)) {
              return 'from ' + this.moneyString(this.fromPrice(item));
            } else {
              return this.moneyString(this.salePrice(item)) + ' <span class="strikeout">' + this.moneyString(normalPrice) + '</span>';
            }
          }

          else if (this.variedPrices(item)) {
            return 'from ' + this.moneyString(this.fromPrice(item));
          }

          return this.moneyString(normalPrice);

        case Y.Squarespace.ProductTypes.DIGITAL:
          if (item.payWhatYouWant) {
            return this.moneyString(item.minimumPriceCents) + ' or more';
          }

          else if (this.onSale(item)) {
            return this.moneyString(this.salePrice(item)) + ' <span class="strikeout">' + this.moneyString(normalPrice) + '</span>';
          }

          return this.moneyString(normalPrice);
      }
    },

    variantsSelectString: function(item) {
      var variants = item.variants;
      var ordering = item.variantOptionOrdering;

      if (Y.Lang.isUndefined(variants) || variants.length <= 1) {
        return '';
      }

      // Create mapping of variant options and their potential values
      var userDefinedOptions = [];

      for (var i = 0; i < ordering.length; i++) {
        var optionName = ordering[i];

        userDefinedOptions.push({
          name: optionName,
          values: []
        });
      }

      // for all variants
      for (var i = 0; i < variants.length; i++) {
        var variant = variants[i];

        // for all options in the variant
        for (var variantOption in variant.attributes) {

          if (!Y.Squarespace.Utils.isSystemVariantOption(variantOption)) {
            var variantOptionValue = variant.attributes[variantOption];

            var userDefinedOption;

            for (var j = 0; j < userDefinedOptions.length; j++) {
              var current = userDefinedOptions[j];

              if (current.name == variantOption) {
                userDefinedOption = current;
              }
            }

            var optionValues = userDefinedOption.values;
            var hasOptionValue = false;

            for (var k = 0; k < optionValues.length; k++) {
              var optionValue = optionValues[k];

              if (optionValue == variantOptionValue) {
                hasOptionValue = true;
              }
            }

            if (!hasOptionValue) {
              optionValues.push(variantOptionValue);
            }
          }
        }
      }

      // Use the mapping created above to generate the markup for variant options
      var optionsString = '';

      for (var i = 0; i < userDefinedOptions.length; i++) {
        var variantOption = userDefinedOptions[i].name;
        var variantOptionValues = userDefinedOptions[i].values;

        var optionString = '<div class="variant-option">' +
                             '<div class="variant-option-title">' + variantOption + ': </div>' +
                             '<select data-variant-option-name="' + variantOption + '"><option value="none" >Select ' + variantOption + '</option>';

        for (var j = 0; j < variantOptionValues.length; j++) {
          var variantOptionValue = variantOptionValues[j];

          optionString += '<option value="' + Y.Squarespace.Escaping.escapeForHtmlTag(variantOptionValue) + '">' + variantOptionValue + '</option>';
        }

        optionString += '</select></div>';

        optionsString += optionString;
      }

      return '<div class="product-variants" data-item-id="' + item.id + '" data-variants="' + Y.Squarespace.Escaping.escapeForHtmlTag(JSON.stringify(variants)) + '">' + optionsString + '</div>';
    },

    quantityInputString: function(item) {
      // if this productType has a notion of Quantity
      if (item.productType !== Y.Squarespace.ProductTypes.PHYSICAL) {
        return '';
      }

      // if this product is singular
      if (Y.Squarespace.Commerce.getTotalStockRemaining(item) === 1) {
        return '';
      }

      var label = '<div class="quantity-label">Quantity:</div>';
      return '<div class="product-quantity-input" data-item-id="' + item.id + '" >' +
          label +
          '<input size="4" maxlength="4" value="1"></input>' +
        '</div>';
    },

    getTotalStockRemaining: function(item) {
      if (item.productType === Y.Squarespace.ProductTypes.DIGITAL) {
        return Infinity;
      } else {
        var totalStock = 0;

        for (var i = 0; i < item.variants.length; i++) {
          var variant = item.variants[i];

          if (variant.unlimited) {
            return Infinity;
          }
          else {
            totalStock += variant.qtyInStock;
          }
        }

        return totalStock;
      }
    },

    payWhatYouWantInputString: function(item) {
      if (!item.payWhatYouWant) {
        return '';
      }

      var currencySymbol = this.currencySymbol();
      var formattedPrice = Y.Squarespace.Commerce.moneyFormat(item.minimumPriceCents);

      return '<span>' + currencySymbol + '</span>' +
             '<input data-item-id="' + item.id + 'data-name="payWhatYouWantPrice" value="' + formattedPrice + '"/>' +
             '<div class="minimum-price">(' + currencySymbol + formattedPrice + ' or more)</div>';
    },

    addToCartBtnString: function(item) {
      var useForm = Y.Lang.isValue(item.additionalFieldsFormId) && Y.Lang.isValue(item.additionalFieldsForm);

      var buttonClass = 'sqs-add-to-cart-button sqs-suppress-edit-mode';

      if (useForm) {
        buttonClass += ' use-form';
      }

      var buttonText = item.useCustomButtonText ? item.customButtonText : 'Add To Cart';
      var buttonAttrs = 'class="' + buttonClass + '" data-item-id="' + item.id + '" data-original-label="' + buttonText + '"';

      if (useForm) {
        buttonAttrs += ' data-form="' + Y.Squarespace.Escaping.escapeForHtmlTag(JSON.stringify(item.additionalFieldsForm)) + '"';
      }

      return '<div class="sqs-add-to-cart-button-wrapper">' +
               '<div ' + buttonAttrs + '><div class="sqs-add-to-cart-button-inner">' + buttonText + '</div></div>' +
             '</div>';
    },

    summaryFormFieldString: function(field) {
      var values = field.values;
      var valueString;

      switch (field.type) {
        case 'name':
          valueString = values.First + ' ' + values.Last;
          break;

        case 'phone':
          var countryCode = values.Country;

          valueString = '';

          if (countryCode && countryCode !== '') {
            valueString += '+' + countryCode + ' ';
          }

          valueString += values.Areacode + '-' + values.Prefix + '-' + values.Line;
          break;

        case 'likert':
          function getStringForValue(value) {
            var string;

            switch (value) {
              case '-2':
                string = 'Strongly Disagree';
                break;

              case '-1':
                string = 'Disagree';
                break;

              case '0':
                string = 'Neutral';
                break;

              case '1':
                string = 'Agree';
                break;

              case '2':
                string = 'Strongly Agree';
                break;
            }

            return string;
          }

          valueString = '<div style="padding-left:5px;">';

          for (var key in values) {
            var value = values[key];
            valueString += '<div><span style="font-weight:bold;">' + key + ':</span> ' + getStringForValue(value) + '</div>';
          }

          valueString += '</div>';
          break;

        case 'address':
          valueString = '<div style="padding-left:5px;"><div>' + values.Line1 + '</div>';

          var line2 = values.Line2;

          if (line2 && line2 !== '') {
            valueString += '<div>' + line2 + '</div>';
          }

          valueString += '<div>' + values.City + ', ' + values.State + ' ' + values.Zip + ' ' + values.Country + '</div></div>';
          break;

        case 'date':
          valueString = values.Month + '/' + values.Day + '/' + values.Year;
          break;

        case 'time':
          valueString = (values.Hour || '00') + ':' + (values.Minute || '00') + ':' + (values.Second || '00') + ' ' + values.Ampm;
          break;

        default:
          valueString = field.value;
          break;
      }

      if (valueString === '') {
        valueString = 'N/A';
      }

      return '<div style="margin-top:3px;">' +
               '<span style="font-weight:bold;">' + field.rawTitle + ':</span> ' + valueString +
             '</div>';
    },

    hasVariants: function(item) {
      return (item.productType == Y.Squarespace.ProductTypes.DIGITAL) ? false : (item.variants.length > 1);
    },

    variedPrices: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;

          if (variants.length <= 1) {
            return false;
          }

          var firstVariant = variants[0];

          for (var i = 1; i < variants.length; i++) {
            var variant = variants[i];

            if ((variant.onSale != firstVariant.onSale) ||
                (firstVariant.onSale && (variant.salePrice != firstVariant.salePrice)) ||
                (variant.price != firstVariant.price)) {

              return true;
            }
          }

          return false;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return false;
      }
    },

    onSale: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;
          var onSale = false;

          for (var i = 0; i < variants.length; i++) {
            var variant = variants[i];

            if (variant.onSale) {
              onSale = true;
              break;
            }
          }

          return onSale;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return item.payWhatYouWant ? false : item.onSale;
      }
    },

    soldOut: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;
          var soldOut = true;

          for (var i = 0; i < variants.length; i++) {
            var variant = variants[i];

            if (variant.unlimited || variant.qtyInStock > 0) {
              soldOut = false;
              break;
            }
          }

          return soldOut;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return false;
      }
    },

    normalPrice: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;

          if (variants.length === 0) {
            return 0;
          }

          var normalPrice = variants[0].price;

          for (var i = 1; i < variants.length; i++) {
            var currPrice = variants[i].price;

            if (currPrice > normalPrice) {
              normalPrice = currPrice;
            }
          }

          return normalPrice;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return Y.Lang.isUndefined(item.priceCents) ? 0 : item.priceCents;
      }
    },

    salePrice: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;

          if (variants.length === 0) {
            return 0;
          }

          var salePrice = null;

          for (var i = 0; i < variants.length; i++) {
            var variant = variants[i];
            var variantSalePrice = variant.salePrice;

            if (variant.onSale && (salePrice === null || (variant.salePrice < salePrice))) {
              salePrice = variantSalePrice;
            }
          }

          return salePrice;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return Y.Lang.isUndefined(item.salePriceCents) ? 0 : item.salePriceCents;
      }
    },

    fromPrice: function(item) {
      switch (item.productType) {
        case Y.Squarespace.ProductTypes.PHYSICAL:
        case Y.Squarespace.ProductTypes.SERVICE:
          var variants = item.variants;

          if (variants.length === 0) {
            return 0;
          }

          var firstVariant = variants[0];
          var fromPrice = firstVariant.onSale ? firstVariant.salePrice : firstVariant.price;

          for (var i = 1; i < variants.length; i++) {
            var variant = variants[i];
            var currPrice = variant.onSale ? variant.salePrice : variant.price;

            if (currPrice < fromPrice) {
              fromPrice = currPrice;
            }
          }

          return fromPrice;

        case Y.Squarespace.ProductTypes.DIGITAL:
          return Y.Lang.isUndefined(item.priceCents) ? 0 : item.priceCents;
      }
    },

    /**
     * Get an English language summary of a coupon's intended action. Conveys info about what it applies to,
     * how much it takes off, and the minimum amount the customer needs to spend. TEMPLATE-HELPERS SAFE.
     */
    couponDescriptor: function(coupon) {
      var amountTpl;
      var freeShipTpl;
      var couponFmt = this._clone(coupon, {});

      couponFmt = this.normalizeAndCleanCouponData(couponFmt);

      var tplData = {
        minPrice: this.moneyString(couponFmt.minPrice),
        productTitle : couponFmt.productTitle || '?',
        discountAmt : couponFmt.discountAmt || '?'
      };

      switch (couponFmt.type) {
        case Y.Squarespace.CommerceCouponTypes.ALL_ORDERS:
          amountTpl = function(o) { return 'Save ' + o.discountAmt + ' on any order.'; };
          freeShipTpl = function() { return 'Free shipping on any order.'; };
          break;
        case Y.Squarespace.CommerceCouponTypes.ORDERS_OVER:
          amountTpl = function(o) { return 'Save ' + o.discountAmt + ' on any order over ' + o.minPrice + '.'; };
          freeShipTpl = function(o) { return 'Free shipping on any order over ' + o.minPrice + '.'; };
          break;
        case Y.Squarespace.CommerceCouponTypes.CATEGORIES:
          amountTpl = function(o) { return 'Save ' + o.discountAmt + ' on select products.'; };
          break;
        case Y.Squarespace.CommerceCouponTypes.SINGLE_PRODUCT:
          amountTpl = function(o) { return 'Save ' + o.discountAmt + ' on  ' + o.productTitle + ' .'; };
          break;
        default:
          throw 'Unsupported coupon type';
      }

      switch (couponFmt.discountType) {
        case Y.Squarespace.CommerceDiscountTypes.FLAT:
          tplData.discountAmt = this.moneyString(couponFmt.discountAmt);
          break;
        case Y.Squarespace.CommerceDiscountTypes.PERCENTAGE:
          tplData.discountAmt = tplData.discountAmt + '%';
          break;
        case Y.Squarespace.CommerceDiscountTypes.FREE_SHIPPING:
          return freeShipTpl(tplData);
      }

      return amountTpl(tplData);
    },

    normalizeAndCleanCouponData: function (data) {
          if (data.discountType === Y.Squarespace.CommerceDiscountTypes.FLAT) {
        data.flatDiscount = data.discountAmt;
      } else if (data.discountType === Y.Squarespace.CommerceDiscountTypes.PERCENTAGE) {
        data.percentDiscount = data.discountAmt;
      }

      return data;
    },

    // capitalizes first letter of every word
    capitalizeFirst: function(string) {
      string = string.toLowerCase();
      var arr = string.split(new RegExp('\\s+'));
      var caps = Y.Array.map(arr, function(word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
      });
      return caps.join(' ');
    },

    generateSKU: function() {
      var code   = "",
          chars  = "0123456789",
          skuMap = {};

      var generate = function() {
        var newCode = "";
        for (var i = 0; i < 7; ++i) {
          var idx = Math.floor(Math.random() * chars.length);
          newCode += chars.charAt(idx);
        }
        return "SQ" + newCode;
      };

      code = generate();
      return code;
    },

    /**
     * PRIVATE
     */
    _clone: function (source, target) {
      var i, src;

      for (i in source) {
        if (source.hasOwnProperty(i)) {
          src = source[i];

          if (src && typeof src === 'object' && !src.node) {
            switch (Object.prototype.toString.call(src)) {
              case '[object Object]':
                target[i] = this._clone(src, (typeof target[i] !== 'undefined' && Object.prototype.toString.call(target[i]) === '[object Object]') ? target[i] : {});
                break;
              case '[object Array]':
                target[i] = this._clone(src, (typeof target[i] !== 'undefined' && Object.prototype.toString.call(target[i]) === '[object Array]') ? target[i] : []);
                break;
              default:
                target[i] = src;
                break;
            }
          } else {
            target[i] = src;
          }
        }
      }

      return target;
    }
  };
}, '1.0', { requires: [
  'node',
  'cookie',
  'squarespace-enum'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-event-simulate/node-event-simulate.js
// ----------------------------------------------------------------------------------------

YUI.add('node-event-simulate', function (Y, NAME) {

/**
 * Adds functionality to simulate events.
 * @module node
 * @submodule node-event-simulate
 */

/**
 * Simulates an event on the node.
 * @param {String} type The type of event (i.e., "click").
 * @param {Object} options (Optional) Extra options to copy onto the event object.
 * @return {void}
 * @for Node
 * @method simulate
 */
Y.Node.prototype.simulate = function (type, options) {

    Y.Event.simulate(Y.Node.getDOMNode(this), type, options);
};

/**
 * Simulates the higher user level gesture of the given name on this node.
 * This method generates a set of low level touch events(Apple specific gesture
 * events as well for the iOS platforms) asynchronously. Note that gesture
 * simulation is relying on `Y.Event.simulate()` method to generate
 * the touch events under the hood. The `Y.Event.simulate()` method
 * itself is a synchronous method.
 *
 * Supported gestures are `tap`, `doubletap`, `press`, `move`, `flick`, `pinch`
 * and `rotate`.
 *
 * The `pinch` gesture is used to simulate the pinching and spreading of two
 * fingers. During a pinch simulation, rotation is also possible. Essentially
 * `pinch` and `rotate` simulations share the same base implementation to allow
 * both pinching and rotation at the same time. The only difference is `pinch`
 * requires `start` and `end` option properties while `rotate` requires `rotation`
 * option property.
 *
 * The `pinch` and `rotate` gestures can be described as placing 2 fingers along a
 * circle. Pinching and spreading can be described by start and end circles while
 * rotation occurs on a single circle. If the radius of the start circle is greater
 * than the end circle, the gesture becomes a pinch, otherwise it is a spread spread.
 *
 * @example
 *
 *     var node = Y.one("#target");
 *
 *     // double tap example
 *     node.simulateGesture("doubletap", function() {
 *         // my callback function
 *     });
 *
 *     // flick example from the center of the node, move 50 pixels down for 50ms)
 *     node.simulateGesture("flick", {
 *         axis: y,
 *         distance: -100
 *         duration: 50
 *     }, function() {
 *         // my callback function
 *     });
 *
 *     // simulate rotating a node 75 degrees counter-clockwise
 *     node.simulateGesture("rotate", {
 *         rotation: -75
 *     });
 *
 *     // simulate a pinch and a rotation at the same time.
 *     // fingers start on a circle of radius 100 px, placed at top/bottom
 *     // fingers end on a circle of radius 50px, placed at right/left
 *     node.simulateGesture("pinch", {
 *         r1: 100,
 *         r2: 50,
 *         start: 0
 *         rotation: 90
 *     });
 *
 * @method simulateGesture
 * @param {String} name The name of the supported gesture to simulate. The
 *      supported gesture name is one of "tap", "doubletap", "press", "move",
 *      "flick", "pinch" and "rotate".
 * @param {Object} [options] Extra options used to define the gesture behavior:
 *
 *      Valid options properties for the `tap` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the tap should be simulated. Default is the center of the node
 *        element.
 *      @param {Number} [options.hold=10] (Optional) The hold time in milliseconds.
 *        This is the time between `touchstart` and `touchend` event generation.
 *      @param {Number} [options.times=1] (Optional) Indicates the number of taps.
 *      @param {Number} [options.delay=10] (Optional) The number of milliseconds
 *        before the next tap simulation happens. This is valid only when `times`
 *        is more than 1.
 *
 *      Valid options properties for the `doubletap` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the doubletap should be simulated. Default is the center of the
 *        node element.
 *
 *      Valid options properties for the `press` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x,y] coordinates
 *        where the press should be simulated. Default is the center of the node
 *        element.
 *      @param {Number} [options.hold=3000] (Optional) The hold time in milliseconds.
 *        This is the time between `touchstart` and `touchend` event generation.
 *        Default is 3000ms (3 seconds).
 *
 *      Valid options properties for the `move` gesture:
 *
 *      @param {Object} [options.path] (Optional) Indicates the path of the finger
 *        movement. It's an object with three optional properties: `point`,
 *        `xdist` and  `ydist`.
 *        @param {Array} [options.path.point] A starting point of the gesture.
 *          Default is the center of the node element.
 *        @param {Number} [options.path.xdist=200] A distance to move in pixels
 *          along the X axis. A negative distance value indicates moving left.
 *        @param {Number} [options.path.ydist=0] A distance to move in pixels
 *          along the Y axis. A negative distance value indicates moving up.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *
 *      Valid options properties for the `flick` gesture:
 *
 *      @param {Array} [options.point] (Optional) Indicates the [x, y] coordinates
 *        where the flick should be simulated. Default is the center of the
 *        node element.
 *      @param {String} [options.axis='x'] (Optional) Valid values are either
 *        "x" or "y". Indicates axis to move along. The flick can move to one of
 *        4 directions(left, right, up and down).
 *      @param {Number} [options.distance=200] (Optional) Distance to move in pixels
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds. User given value could be automatically
 *        adjusted by the framework if it is below the minimum velocity to be
 *        a flick gesture.
 *
 *      Valid options properties for the `pinch` gesture:
 *
 *      @param {Array} [options.center] (Optional) The center of the circle where
 *        two fingers are placed. Default is the center of the node element.
 *      @param {Number} [options.r1] (Required) Pixel radius of the start circle
 *        where 2 fingers will be on when the gesture starts. The circles are
 *        centered at the center of the element.
 *      @param {Number} [options.r2] (Required) Pixel radius of the end circle
 *        when this gesture ends.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *      @param {Number} [options.start=0] (Optional) Starting degree of the first
 *        finger. The value is relative to the path of the north. Default is 0
 *        (i.e., 12:00 on a clock).
 *      @param {Number} [options.rotation=0] (Optional) Degrees to rotate from
 *        the starting degree. A negative value means rotation to the
 *        counter-clockwise direction.
 *
 *      Valid options properties for the `rotate` gesture:
 *
 *      @param {Array} [options.center] (Optional) The center of the circle where
 *        two fingers are placed. Default is the center of the node element.
 *      @param {Number} [options.r1] (Optional) Pixel radius of the start circle
 *        where 2 fingers will be on when the gesture starts. The circles are
 *        centered at the center of the element. Default is a fourth of the node
 *        element width or height, whichever is smaller.
 *      @param {Number} [options.r2] (Optional) Pixel radius of the end circle
 *        when this gesture ends. Default is a fourth of the node element width or
 *        height, whichever is smaller.
 *      @param {Number} [options.duration=1000] (Optional) The duration of the
 *        gesture in milliseconds.
 *      @param {Number} [options.start=0] (Optional) Starting degree of the first
 *        finger. The value is relative to the path of the north. Default is 0
 *        (i.e., 12:00 on a clock).
 *      @param {Number} [options.rotation] (Required) Degrees to rotate from
 *        the starting degree. A negative value means rotation to the
 *        counter-clockwise direction.
 *
 * @param {Function} [cb] The callback to execute when the asynchronouse gesture
 *      simulation is completed.
 *      @param {Error} cb.err An error object if the simulation is failed.
 * @return {void}
 * @for Node
 */
Y.Node.prototype.simulateGesture = function (name, options, cb) {

    Y.Event.simulateGesture(this, name, options, cb);
};


}, '3.10.1', {"requires": ["node-base", "event-simulate", "gesture-simulate"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/ss-widget.js
// ----------------------------------------------------------------------------------------

/**
  Home of the Squarespace Widget, a yui widget extension that all Squarespace
  widgets should extend from. It provides some additional facilities for cleaning

  @module squarespace-ss-widget
*/
YUI.add('squarespace-ss-widget', function(Y) {

  Y.namespace('Squarespace.Widgets');

  /**
    A mixin that adds some Gizmo-like facilities to YUI widgets. It provides
    this._anims an, a Y.Squarespace.Anim (arrayList like object that does some
    additional checking for animations) which gets cleaned up on destroy. It will
    also automagically detach all events in the category labeled with this widget's
    global id.

    @class SSWidget
    @constructor
    @namespace Squarespace.Widgets
    @extends Y.Widget
  */
  var SSWidget =
  Y.Squarespace.Widgets.SSWidget = Y.Squarespace.SSWidget = Y.Base.create('ssWidget', Y.Widget, [ ],
    // prototype
    {
      /**
        An Y.View style events object for delegated event binding. It should
        be in the following form:
        {
          '.some-selector': {
            eventName: '_nameOfHandler'
          }
        }
        @property delegatedEvents
        @type Object
      */
      delegatedEvents: {},

      initializer: function(config) {
        this._anims = new Y.Squarespace.Anims();

        this.on('classNameChange', function(e) {
          var boundingBox = this.get('boundingBox');
          if (boundingBox) {
            boundingBox
              .removeClass(e.prevVal)
              .addClass(e.newVal);
          }
        }, this);

        this._events = [];
      },

      destructor: function() {
        this._anims.destroy();

        Y.detach(this.get('id') + '|*');
        this.detach(this.get('id') + '|*');

        while (this._events.length !== 0) {
          this._events.shift().detach();
        }
      },

      /*
       * Register an event, so on destruction, it'll
       * safely get detached.
       */
      _registerEvent: function(e) {
        this._events.push(e);
      },


      /**
       * Register an animation using the anims manager.
       */
      _registerAnim: function (a) {
        this._anims.add(a);
      },

      /**
        Initial rendering of this widget's HTML. It sets the content
        of the content box to the rendered PUT_TEMPLATE or TEMPLATE of the
        first class in the hierarchy to have one defined (PUT_TEMPLATE is looked
        at first)

        @method renderUI
      */
      renderUI: function() {
        var additionalClass = this.get('className'),
            boundingBox     = this.get('boundingBox');

        boundingBox.addClass(additionalClass);

        this.get('contentBox').prepend(this.renderTemplate());
      },

      /**
        This method is responsible for attaching event listeners which bind
        the UI to the widget state. These listeners are generally attribute
        change listeners - used to update the state of the UI in response to
        changes in the attribute's value. It also attaches DOM event listeners
        to the UI to map user interactions to the widget's API.

        @method bindUI
      */
      bindUI: function() {
        var id = this.get('id');

        this.after(id + '|stringsChange', function(e) {
          if (!e.noSyncUI) {
            this.syncUI();
          }
        }, this);

        // Y.View style delegated event binding. The only difference is the
        // handlers can't be specified as an actual function pointer, only
        // as a string
        var boundingBox = this.get('boundingBox');
        Y.Object.each(this.delegatedEvents, function (evObj, selectorFilter) {
          Y.Object.each(evObj, function (handler, eventName) {
            boundingBox.delegate(id + '|' + eventName, this[handler], selectorFilter, this);
          }, this);
        }, this);
      },

      /**
        This method is responsible for setting the initial state of the UI
        based on the current state of the widget at the time of rendering. You can
        call it again to make the ui reflect this widget's backing data

        @method syncUI
      */
      syncUI: function() {},

      /**
        Inspects this class to find the type of template defined and grab the
        corresponding template function, which can be called with a context
        to produce a rendered template string.

        More specifically it traverses up the class hierarchy to find the first
        defined handlebars, put (zen coding-ish style) or standard html string,
        then creates a template function from it. This allows any user of this
        class or its subclasses to simply set the PUT_TEMPLATE or TEMPLATE properties as a string, or set a handlebars template file name. as the
        HANDLEBARS_TEMPLATE property.

        @method _getTemplateInfo
        @return An object literal containing the 'type' string and 'template'
          function
      */
      _getTemplateInfo: function () {
        var templateTypes        = SSWidget.TEMPLATE_TYPES;
        var isPutTemplate        = false;
        var isHandleBarsTemplate = false;
        var currentClass         = this.constructor;

        var templateStr, templateFileName, type;

        var checkCurrentClass = function() {
          // grab the template filename or template string itself
          templateFileName = currentClass.HANDLEBARS_TEMPLATE;
          if (Y.Lang.isUndefined(templateFileName)) {
            templateStr = currentClass.PUT_TEMPLATE || currentClass.TEMPLATE;
          }

          // Set the proper template type
          isPutTemplate        = !!currentClass.PUT_TEMPLATE;
          isHandleBarsTemplate = !!currentClass.HANDLEBARS_TEMPLATE;

          if (isHandleBarsTemplate) {
            type = templateTypes.HANDLEBARS;
          } else if (isPutTemplate) {
            type = templateTypes.PUT;
          } else {
            type = templateTypes.HTML;
          }
        };

        checkCurrentClass();

        // Guaranteed to stop at this class if no subclass has
        // defined HANDLEBARS_TEMPLATE, PUT_TEMPLATE, or TEMPLATE
        while (Y.Lang.isUndefined(templateFileName) && Y.Lang.isUndefined(templateStr)) {
          // go up one level
          currentClass = currentClass.superclass.constructor;

          // Stop at the topmost class in the hierarchy. It
          // should never actually get that point, technically,
          // since this class has defined TEMPLATE
          if (Y.Lang.isUndefined(currentClass)) {
            throw this.name + ': Reached topmost class in heirarchy w/o finding a template.';
          }
          checkCurrentClass();
        }

        var templateFn;
        if (isHandleBarsTemplate) {
          templateFn = Y.Squarespace.UITemplates.getCompiledTemplate(templateFileName);
        } else if (isPutTemplate) {
          templateFn = function () {
            return Y.zen(templateStr);
          };
        } else {
          templateFn = function () {
            return Y.Node.create(templateStr);
          };
        }

        return {
          type: type,
          template: templateFn
        };
      },

      /**
        Gets the template for this class and renders it.

        @method renderTemplate
        @return {String} The rendered template
      */
      renderTemplate: function () {
        var templateTypes = SSWidget.TEMPLATE_TYPES;
        var templateInfo  = this._getTemplateInfo();

        if (templateInfo.type === templateTypes.HANDLEBARS) {
          var templateContext = this._getHBTemplateContext();
          return templateInfo.template(templateContext);
        } else {
          return templateInfo.template();
        }
      },

      getProperty: function(name) {
        var currentClass = this.constructor,
            value        = this.constructor[name];

        while (Y.Lang.isUndefined(value)) {
          // go up one level
          if (currentClass.superclass) {
            currentClass = currentClass.superclass.constructor;
          } else {
            break;
          }
          // stop at the topmost level
          if (Y.Lang.isUndefined(currentClass)) {
            break;
          }
          value = currentClass[name];
        }
        return value;
      },

      /**
        This method returns getAtts by default. Override this method to provide
        a custom context to render with in renderUI

        @method _getHBTemplateContext
        @return {Object} The context object to use to render the handlebars
          template in renderUI
      */
      _getHBTemplateContext: function() {
        return this.getAttrs();
      }

    },
    // Static properties
    {
      CSS_PREFIX: 'sqs-widget',

      /**
        @property PUT_TEMPLATE
        @type String
        @description The filename of the handlebars template file in the
          handlebars template folder. The handlebars template is used in place
          of the TEMPLATE or PUT_TEMPLATE, if found.
      */
      HANDLEBARS_TEMPLATE: '',

      /**
        @property PUT_TEMPLATE
        @type String
        @description The put selector style template for this class (https://github.com/kriszyp/put-selector), overridable
          by subclasses. The put template is used in place of the TEMPLATE, if found.
          TEMPLATE, if found.
      */
      PUT_TEMPLATE: '',

      /**
        @property TEMPLATE
        @type String
        @description The standard html template for this class, overridable
          by subclasses. The PUT_TEMPLATE is used in its place if found.
      */
      TEMPLATE: '',

      /**
        @property TEMPLATE_TYPES
        @description Constants representing the type of template being used
      */
      TEMPLATE_TYPES: {
        HANDLEBARS: 'handlebars',
        PUT:        'put',
        HTML:       'html'
      },

      ATTRS: {
        /**
          @attribute className
          @description An optional additional classname to add to the bounding box
            of this widget
          @type String
          @default
        */
        className: {
          value: null
        }
      }
    }
  );

  var DATA_STATE_PREFIX = 'data-state-';
  /**
    An ss widget subclass with an additional attribute for storing data ('data')
    and one for labeling the widgets data state ('dataState')

    @class DataWidget
    @namespace Squarespace.Widgets
    @constructor
    @extends SSWidget
  */
  var DataWidget =
  Y.Squarespace.Widgets.DataWidget = Y.Base.create('dataWidget', Y.Squarespace.SSWidget, [],
    // prototype
    {
      initializer: function(config) {
        if(!config.dataState) {
          // set data state to initialized or loaded if its data loading is not async
          if (this.getProperty('ASYNC_DATA')) {
            this.set('dataState', this.getProperty('DATA_STATES').INITIALIZED);
          } else {
            this.set('dataState', this.getProperty('DATA_STATES').LOADED);
          }
        }
      },

      renderUI: function() {
        DataWidget.superclass.renderUI.call(this);
        this._updateDataStateClassName();
      },

      bindUI: function() {
        DataWidget.superclass.bindUI.call(this);

        var id = this.get('id');
        this.after(id + '|dataChange', function(e) {
          if (!e.noSyncUI) {
            this.syncUI();
          }
        }, this);

        this.after(id + '|dataStateChange', this._updateDataStateClassName, this);
      },

      /**
        Updates the bounding box with a class for the current data-state

        @method _updateDataStateClassName
        @private
      */
      _updateDataStateClassName: function() {
        // update bounding box class
        var boundingBox  = this.get('boundingBox'),
            currentState = this.get('dataState');

        Y.Object.each(this.getProperty('DATA_STATES'), function(dataState) {
          boundingBox.removeClass(DATA_STATE_PREFIX + dataState);
        }, this);

        boundingBox.addClass(DATA_STATE_PREFIX + currentState);
      },

      // sugar methods
      /**
        Convenience method for settings the data state to loading

        @method setLoadingState
      */
      setLoadingState: function() {
        return this.set('dataState', this.getProperty('DATA_STATES').LOADING);
      },

      /**
        Convenience method for settings the data state to loaded

        @method setLoadedState
      */
      setLoadedState: function() {
        return this.set('dataState', this.getProperty('DATA_STATES').LOADED);
      },

      /**
        Convenience method for settings the data state to load failed

        @method setLoadFailedState
      */
      setLoadFailedState: function() {
        return this.set('dataState', this.getProperty('DATA_STATES').LOAD_FAILED);
      },

      /**
        Pretty convenience method for checking if this widget completed loading
        successfully

        @method loadedSuccessfully
      */
      loadedSuccessfully: function() {
        return this.get('dataState') === this.getProperty('DATA_STATES').LOADED;
      },

      /**
        Pretty convenience method for checking if this widget is loading

        @method isLoading
      */
      isLoading: function() {
        return this.get('dataState') === this.getProperty('DATA_STATES').LOADING;
      },

      /**
        Pretty convenience method for checking if loading failed

        @method loadFailed
      */
      loadFailed: function() {
        return this.get('dataState') === this.getProperty('DATA_STATES').LOAD_FAILED;
      }
    },
    // static properties
    {
      CSS_PREFIX: 'sqs-data-widget',

      /**
        @property ASYNC_DATA
        @description Whether or not this dialog field loads it's own data
          asynchronously, likely from a server through an api call. If your sub
          class loads its own data asynchronously, override this property to set
          its default to true
        @type Boolean
      */
      ASYNC_DATA: false,

      /**
        @property DATA_STATES
        @description Constants representing the state of the field data
      */
      DATA_STATES: {
        INITIALIZED: 'initialized', // has not attempted to load data yet
        LOADING    : 'loading',
        LOADED     : 'loaded',
        LOAD_FAILED: 'load-failed'
      },

      ATTRS: {
        /**
          @attribute data
          @description This field's data
          @type Mixed
          @default null
        */
        data: {
          value: null,
          validator: function(val) {
            if (Y.Lang.isUndefined(val)) {
              console.warn(this.name + ': Will not set data to undefined.');
              return false;
            } else {
              return true;
            }
          }
        },

        /**
          @attribute dataState
          @description The loading state of this field's data
          @type String
          @default this.constructor.INITIALIZED
        */
        dataState: {
          valueFn: function() {
            return this.getProperty('DATA_STATES').INITIALIZED;
          }
        }
      }
    }
  );

}, '1.0', { requires: [
  'base',
  'widget',
  'squarespace-anims',
  'squarespace-zen',
  'squarespace-ui-templates'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/simple-liking.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-simple-liking', function(Y) {

  Y.Squarespace.SimpleLike = {

    TEXT_LIKE_VERB_NONE:     "No Likes",
    TEXT_LIKE_VERB_SINGULAR: "Like",
    TEXT_LIKE_VERB_PLURAL:   "Likes",
    TEXT_LIKE_ACTIVATED:     "You like this",
    TEXT_LIKE_SUGGEST:       "Click to like",

    attached: false,

    attach: function() {

      // once only
      if (this.attached) { return; }
      this.attached = true;

      // try and get likes from local storage
      var previousLikes;

      try {
        if (localStorage) {
          previousLikes = Y.JSON.parse(localStorage.getItem("squarespace-likes"));
          if (!previousLikes) {
            previousLikes = { };
          }
          localStorage.setItem("squarespace-likes", Y.JSON.stringify(previousLikes));
        }
      }
      catch (e) {
        previousLikes = { };
      }

      // add actions
      Y.delegate("click", function(e) {

        // fail on invalid items
        var n = e.currentTarget;
        var itemId = n.getAttribute("data-item-id");
        if (!itemId) {
          return;
        }

        // animate
        for (var i = 0; i < 5; ++i) { Y.Squarespace.SimpleLike.burst(n); }

        // send only once
        if (n.hasClass("clicked") || n.hasClass("float")) {
          return;
        }

        // update count
        var likeCount = parseInt(n.getAttribute("data-like-count"), 10);
        n.setAttribute("data-like-count", likeCount + 1);

        Y.Squarespace.SimpleLike.renderLikeCount(n);

        // visually update
        n.addClass("clicked");
        // var countNode = n.one(".like-count");
        // countNode.setContent(Y.Squarespace.SimpleLike.TEXT_LIKE_ACTIVATED);

        // save to local storage
        try {
          if (localStorage) {
            previousLikes[itemId] = true;
            localStorage.setItem("squarespace-likes", Y.JSON.stringify(previousLikes));
          }
        }
        catch (e) {
          console.warn("Unable to save like to local storage: ", e);
        }

        // report
        Y.Data.post({
          url: '/api/comment/LikeContentItem',
          secure: true,
          data: {
            contentItemId: itemId
          },
          failure: function(data) {
            if (data.crumbFail && !Y.Squarespace.Utils.areCookiesEnabled()) {
              alert('You need to enable cookies to be able to like something');
            }
          }
        });


      }, "body", ".sqs-simple-like");

      // Y.delegate("mouseover", function(e) {

      //   var n = e.currentTarget;
      //   var countNode = n.one(".like-count");
      //   if (!countNode) { return; }
      //   if (n.hasClass("clicked")) {
      //     countNode.setContent(Y.Squarespace.SimpleLike.TEXT_LIKE_ACTIVATED);
      //   } else {
      //     countNode.setContent(Y.Squarespace.SimpleLike.TEXT_LIKE_SUGGEST);
      //   }

      // }, "body", ".sqs-simple-like");

      // Y.delegate("mouseout", function(e) {

      //   Y.Squarespace.SimpleLike.renderLikeCount(e.currentTarget);


      // }, "body", ".sqs-simple-like");

      // initialize nodes
      Y.all(".sqs-simple-like").each(function(n) {

        var itemId = n.getAttribute("data-item-id");
        if (!itemId) { return; }

        // are they disabled?
        if (!Static.SQUARESPACE_CONTEXT.websiteSettings.simpleLikingEnabled) {
          n.remove();
        }

        // try and restore previous like actions
        if (previousLikes[itemId]) {
          n.addClass("clicked");
        }

        // update counts
        Y.Squarespace.SimpleLike.renderLikeCount(n);

      });

    },

    renderLikeCount: function(n) {

      var itemId = n.getAttribute("data-item-id");
      var likeCount = n.getAttribute("data-like-count");
      var countNode = n.one(".like-count");
      if (!itemId || !countNode) {
        return;
      }

      var likeText = "";

      if (likeCount === 0) {
        likeText = Y.Squarespace.SimpleLike.TEXT_LIKE_VERB_NONE;
      } else if (likeCount == 1) {
        likeText = "1 " + Y.Squarespace.SimpleLike.TEXT_LIKE_VERB_SINGULAR;
      } else {
        likeText = likeCount + " " + Y.Squarespace.SimpleLike.TEXT_LIKE_VERB_PLURAL;
      }

      countNode.setContent(likeText);

    },

    burst: function(n) {

      var clone = n.cloneNode(true);

      if (clone.one(".like-count")) { clone.one(".like-count").remove(); }

      var iconNode = n.one(".like-icon");
      if (!iconNode) {
        iconNode = n;
      }

      clone.setStyles({
        position: "absolute",
        left: iconNode.getX() + "px",
        top: iconNode.getY() + "px"
      });

      Y.one(document.body).append(clone);

      // float

      var a = new Y.Anim({
        node: clone,
        duration: 2,
        easing: Y.Easing.easeOut
      });
      a.set('to', {
        curve: Y.Squarespace.SimpleLike.randomCurve(clone)
      });
      a.on("end", function() {
        this.get("node").remove();
      });
      a.run();

      clone.removeClass("clicked");
      clone.addClass("float");

    },

    randomCurve: function(node) {

      var points = [],
          n = 3,
          mag = 30,
          xdir = ((Math.floor(Math.random()*2)) ? 1 : -1),
          ydir = ((Math.floor(Math.random()*2)) ? 1 : -1),
          x = node.getX(),
          y = node.getY();


      for (var i = 0; i < n; ++i) {
        x += Math.floor(Math.random() * mag) * xdir;
        y += Math.floor(Math.random() * mag) * ydir;
        points.push([x, y]);
      }

      return points;

    }

  };

  // ------------------------------------------------------------------------------------------------
  // Initialize
  // ------------------------------------------------------------------------------------------------

  Squarespace.onInitialize(Y, function() {
    if (Static.SQUARESPACE_CONTEXT.websiteSettings.simpleLikingEnabled) {
      Y.Squarespace.SimpleLike.attach();
    }
  });


}, 1.0, { requires: [
  'anim',
  'node',
  'json'
]});




// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-resize/event-resize.js
// ----------------------------------------------------------------------------------------

YUI.add('event-resize', function (Y, NAME) {

/**
 * Adds a window resize event that has its behavior normalized to fire at the
 * end of the resize rather than constantly during the resize.
 * @module event
 * @submodule event-resize
 */


/**
 * Old firefox fires the window resize event once when the resize action
 * finishes, other browsers fire the event periodically during the
 * resize.  This code uses timeout logic to simulate the Firefox
 * behavior in other browsers.
 * @event windowresize
 * @for YUI
 */
Y.Event.define('windowresize', {

    on: (Y.UA.gecko && Y.UA.gecko < 1.91) ?
        function (node, sub, notifier) {
            sub._handle = Y.Event.attach('resize', function (e) {
                notifier.fire(e);
            });
        } :
        function (node, sub, notifier) {
            // interval bumped from 40 to 100ms as of 3.4.1
            var delay = Y.config.windowResizeDelay || 100;

            sub._handle = Y.Event.attach('resize', function (e) {
                if (sub._timer) {
                    sub._timer.cancel();
                }

                sub._timer = Y.later(delay, Y, function () {
                    notifier.fire(e);
                });
            });
        },

    detach: function (node, sub) {
        if (sub._timer) {
            sub._timer.cancel();
        }
        sub._handle.detach();
    }
    // delegate methods not defined because this only works for window
    // subscriptions, so...yeah.
});


}, '3.10.1', {"requires": ["node-base", "event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/json-parse/json-parse.js
// ----------------------------------------------------------------------------------------

YUI.add('json-parse', function (Y, NAME) {

var _JSON = Y.config.global.JSON;

Y.namespace('JSON').parse = function (obj, reviver, space) {
    return _JSON.parse((typeof obj === 'string' ? obj : obj + ''), reviver, space);
};


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-base/widget-base.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-base', function (Y, NAME) {

/**
 * Provides the base Widget class, with HTML Parser support
 *
 * @module widget
 * @main widget
 */

/**
 * Provides the base Widget class
 *
 * @module widget
 * @submodule widget-base
 */
var L = Y.Lang,
    Node = Y.Node,

    ClassNameManager = Y.ClassNameManager,

    _getClassName = ClassNameManager.getClassName,
    _getWidgetClassName,

    _toInitialCap = Y.cached(function(str) {
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }),

    // K-Weight, IE GC optimizations
    CONTENT = "content",
    VISIBLE = "visible",
    HIDDEN = "hidden",
    DISABLED = "disabled",
    FOCUSED = "focused",
    WIDTH = "width",
    HEIGHT = "height",
    BOUNDING_BOX = "boundingBox",
    CONTENT_BOX = "contentBox",
    PARENT_NODE = "parentNode",
    OWNER_DOCUMENT = "ownerDocument",
    AUTO = "auto",
    SRC_NODE = "srcNode",
    BODY = "body",
    TAB_INDEX = "tabIndex",
    ID = "id",
    RENDER = "render",
    RENDERED = "rendered",
    DESTROYED = "destroyed",
    STRINGS = "strings",
    DIV = "<div></div>",
    CHANGE = "Change",
    LOADING = "loading",

    _UISET = "_uiSet",

    EMPTY_STR = "",
    EMPTY_FN = function() {},

    TRUE = true,
    FALSE = false,

    UI,
    ATTRS = {},
    UI_ATTRS = [VISIBLE, DISABLED, HEIGHT, WIDTH, FOCUSED, TAB_INDEX],

    WEBKIT = Y.UA.webkit,

    // Widget nodeid-to-instance map.
    _instances = {};

/**
 * A base class for widgets, providing:
 * <ul>
 *    <li>The render lifecycle method, in addition to the init and destroy
 *        lifecycle methods provide by Base</li>
 *    <li>Abstract methods to support consistent MVC structure across
 *        widgets: renderer, renderUI, bindUI, syncUI</li>
 *    <li>Support for common widget attributes, such as boundingBox, contentBox, visible,
 *        disabled, focused, strings</li>
 * </ul>
 *
 * @param config {Object} Object literal specifying widget configuration properties.
 *
 * @class Widget
 * @constructor
 * @extends Base
 */
function Widget(config) {

    // kweight
    var widget = this,
        parentNode,
        render,
        constructor = widget.constructor;

    widget._strs = {};
    widget._cssPrefix = constructor.CSS_PREFIX || _getClassName(constructor.NAME.toLowerCase());

    // We need a config for HTML_PARSER to work.
    config = config || {};

    Widget.superclass.constructor.call(widget, config);

    render = widget.get(RENDER);

    if (render) {
        // Render could be a node or boolean
        if (render !== TRUE) {
            parentNode = render;
        }
        widget.render(parentNode);
    }
}

/**
 * Static property provides a string to identify the class.
 * <p>
 * Currently used to apply class identifiers to the bounding box
 * and to classify events fired by the widget.
 * </p>
 *
 * @property NAME
 * @type String
 * @static
 */
Widget.NAME = "widget";

/**
 * Constant used to identify state changes originating from
 * the DOM (as opposed to the JavaScript model).
 *
 * @property UI_SRC
 * @type String
 * @static
 * @final
 */
UI = Widget.UI_SRC = "ui";

/**
 * Static property used to define the default attribute
 * configuration for the Widget.
 *
 * @property ATTRS
 * @type Object
 * @static
 */
Widget.ATTRS = ATTRS;

// Trying to optimize kweight by setting up attrs this way saves about 0.4K min'd

/**
 * @attribute id
 * @writeOnce
 * @default Generated using guid()
 * @type String
 */

ATTRS[ID] = {
    valueFn: "_guid",
    writeOnce: TRUE
};

/**
 * Flag indicating whether or not this Widget
 * has been through the render lifecycle phase.
 *
 * @attribute rendered
 * @readOnly
 * @default false
 * @type boolean
 */
ATTRS[RENDERED] = {
    value:FALSE,
    readOnly: TRUE
};

/**
 * @attribute boundingBox
 * @description The outermost DOM node for the Widget, used for sizing and positioning
 * of a Widget as well as a containing element for any decorator elements used
 * for skinning.
 * @type String | Node
 * @writeOnce
 */
ATTRS[BOUNDING_BOX] = {
    value:null,
    setter: "_setBB",
    writeOnce: TRUE
};

/**
 * @attribute contentBox
 * @description A DOM node that is a direct descendant of a Widget's bounding box that
 * houses its content.
 * @type String | Node
 * @writeOnce
 */
ATTRS[CONTENT_BOX] = {
    valueFn:"_defaultCB",
    setter: "_setCB",
    writeOnce: TRUE
};

/**
 * @attribute tabIndex
 * @description Number (between -32767 to 32767) indicating the widget's
 * position in the default tab flow.  The value is used to set the
 * "tabIndex" attribute on the widget's bounding box.  Negative values allow
 * the widget to receive DOM focus programmatically (by calling the focus
 * method), while being removed from the default tab flow.  A value of
 * null removes the "tabIndex" attribute from the widget's bounding box.
 * @type Number
 * @default null
 */
ATTRS[TAB_INDEX] = {
    value: null,
    validator: "_validTabIndex"
};

/**
 * @attribute focused
 * @description Boolean indicating if the Widget, or one of its descendants,
 * has focus.
 * @readOnly
 * @default false
 * @type boolean
 */
ATTRS[FOCUSED] = {
    value: FALSE,
    readOnly:TRUE
};

/**
 * @attribute disabled
 * @description Boolean indicating if the Widget should be disabled. The disabled implementation
 * is left to the specific classes extending widget.
 * @default false
 * @type boolean
 */
ATTRS[DISABLED] = {
    value: FALSE
};

/**
 * @attribute visible
 * @description Boolean indicating whether or not the Widget is visible.
 * @default TRUE
 * @type boolean
 */
ATTRS[VISIBLE] = {
    value: TRUE
};

/**
 * @attribute height
 * @description String with units, or number, representing the height of the Widget. If a number is provided,
 * the default unit, defined by the Widgets DEF_UNIT, property is used.
 * @default EMPTY_STR
 * @type {String | Number}
 */
ATTRS[HEIGHT] = {
    value: EMPTY_STR
};

/**
 * @attribute width
 * @description String with units, or number, representing the width of the Widget. If a number is provided,
 * the default unit, defined by the Widgets DEF_UNIT, property is used.
 * @default EMPTY_STR
 * @type {String | Number}
 */
ATTRS[WIDTH] = {
    value: EMPTY_STR
};

/**
 * @attribute strings
 * @description Collection of strings used to label elements of the Widget's UI.
 * @default null
 * @type Object
 */
ATTRS[STRINGS] = {
    value: {},
    setter: "_strSetter",
    getter: "_strGetter"
};

/**
 * Whether or not to render the widget automatically after init, and optionally, to which parent node.
 *
 * @attribute render
 * @type boolean | Node
 * @writeOnce
 */
ATTRS[RENDER] = {
    value:FALSE,
    writeOnce:TRUE
};

/**
 * The css prefix which the static Widget.getClassName method should use when constructing class names
 *
 * @property CSS_PREFIX
 * @type String
 * @default Widget.NAME.toLowerCase()
 * @private
 * @static
 */
Widget.CSS_PREFIX = _getClassName(Widget.NAME.toLowerCase());

/**
 * Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined
 * by the <code>Y.config.classNamePrefix</code> attribute used by <code>ClassNameManager</code> and
 * <code>Widget.NAME.toLowerCase()</code> (e.g. "yui-widget-xxxxx-yyyyy", based on default values for
 * the prefix and widget class name).
 * <p>
 * The instance based version of this method can be used to generate standard prefixed classnames,
 * based on the instances NAME, as opposed to Widget.NAME. This method should be used when you
 * need to use a constant class name across different types instances.
 * </p>
 * @method getClassName
 * @param {String*} args* 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name
 */
Widget.getClassName = function() {
    // arguments needs to be array'fied to concat
    return _getClassName.apply(ClassNameManager, [Widget.CSS_PREFIX].concat(Y.Array(arguments), true));
};

_getWidgetClassName = Widget.getClassName;

/**
 * Returns the widget instance whose bounding box contains, or is, the given node.
 * <p>
 * In the case of nested widgets, the nearest bounding box ancestor is used to
 * return the widget instance.
 * </p>
 * @method getByNode
 * @static
 * @param node {Node | String} The node for which to return a Widget instance. If a selector
 * string is passed in, which selects more than one node, the first node found is used.
 * @return {Widget} Widget instance, or null if not found.
 */
Widget.getByNode = function(node) {
    var widget,
        widgetMarker = _getWidgetClassName();

    node = Node.one(node);
    if (node) {
        node = node.ancestor("." + widgetMarker, true);
        if (node) {
            widget = _instances[Y.stamp(node, true)];
        }
    }

    return widget || null;
};

Y.extend(Widget, Y.Base, {

    /**
     * Returns a class name prefixed with the the value of the
     * <code>YUI.config.classNamePrefix</code> attribute + the instances <code>NAME</code> property.
     * Uses <code>YUI.config.classNameDelimiter</code> attribute to delimit the provided strings.
     * e.g.
     * <code>
     * <pre>
     *    // returns "yui-slider-foo-bar", for a slider instance
     *    var scn = slider.getClassName('foo','bar');
     *
     *    // returns "yui-overlay-foo-bar", for an overlay instance
     *    var ocn = overlay.getClassName('foo','bar');
     * </pre>
     * </code>
     *
     * @method getClassName
     * @param {String}+ One or more classname bits to be joined and prefixed
     */
    getClassName: function () {
        return _getClassName.apply(ClassNameManager, [this._cssPrefix].concat(Y.Array(arguments), true));
    },

    /**
     * Initializer lifecycle implementation for the Widget class. Registers the
     * widget instance, and runs through the Widget's HTML_PARSER definition.
     *
     * @method initializer
     * @protected
     * @param  config {Object} Configuration object literal for the widget
     */
    initializer: function(config) {

        var bb = this.get(BOUNDING_BOX);

        if (bb instanceof Node) {
            this._mapInstance(Y.stamp(bb));
        }

        /**
         * Notification event, which widget implementations can fire, when
         * they change the content of the widget. This event has no default
         * behavior and cannot be prevented, so the "on" or "after"
         * moments are effectively equivalent (with on listeners being invoked before
         * after listeners).
         *
         * @event widget:contentUpdate
         * @preventable false
         * @param {EventFacade} e The Event Facade
         */

        if (this._applyParser) {
            this._applyParser(config);
        }
    },

    /**
     * Utility method used to add an entry to the boundingBox id to instance map.
     *
     * This method can be used to populate the instance with lazily created boundingBox Node references.
     *
     * @method _mapInstance
     * @param {String} The boundingBox id
     * @protected
     */
    _mapInstance : function(id) {
        _instances[id] = this;
    },

    /**
     * Destructor lifecycle implementation for the Widget class. Purges events attached
     * to the bounding box and content box, removes them from the DOM and removes
     * the Widget from the list of registered widgets.
     *
     * @method destructor
     * @protected
     */
    destructor: function() {

        var boundingBox = this.get(BOUNDING_BOX),
            bbGuid;

        if (boundingBox instanceof Node) {
            bbGuid = Y.stamp(boundingBox,true);

            if (bbGuid in _instances) {
                delete _instances[bbGuid];
            }

            this._destroyBox();
        }
    },

    /**
     * <p>
     * Destroy lifecycle method. Fires the destroy
     * event, prior to invoking destructors for the
     * class hierarchy.
     *
     * Overrides Base's implementation, to support arguments to destroy
     * </p>
     * <p>
     * Subscribers to the destroy
     * event can invoke preventDefault on the event object, to prevent destruction
     * from proceeding.
     * </p>
     * @method destroy
     * @param destroyAllNodes {Boolean} If true, all nodes contained within the Widget are removed and destroyed. Defaults to false due to potentially high run-time cost.
     * @return {Widget} A reference to this object
     * @chainable
     */
    destroy: function(destroyAllNodes) {
        this._destroyAllNodes = destroyAllNodes;
        return Widget.superclass.destroy.apply(this);
    },

    /**
     * Removes and destroys the widgets rendered boundingBox, contentBox,
     * and detaches bound UI events.
     *
     * @method _destroyBox
     * @protected
     */
    _destroyBox : function() {

        var boundingBox = this.get(BOUNDING_BOX),
            contentBox = this.get(CONTENT_BOX),
            deep = this._destroyAllNodes,
            same;

        same = boundingBox && boundingBox.compareTo(contentBox);

        if (this.UI_EVENTS) {
            this._destroyUIEvents();
        }

        this._unbindUI(boundingBox);

        if (deep) {
            // Removes and destroys all child nodes.
            boundingBox.empty();
            boundingBox.remove(TRUE);
        } else {
            if (contentBox) {
                contentBox.remove(TRUE);
            }
            if (!same) {
                boundingBox.remove(TRUE);
            }
        }
    },

    /**
     * Establishes the initial DOM for the widget. Invoking this
     * method will lead to the creating of all DOM elements for
     * the widget (or the manipulation of existing DOM elements
     * for the progressive enhancement use case).
     * <p>
     * This method should only be invoked once for an initialized
     * widget.
     * </p>
     * <p>
     * It delegates to the widget specific renderer method to do
     * the actual work.
     * </p>
     *
     * @method render
     * @chainable
     * @final
     * @param  parentNode {Object | String} Optional. The Node under which the
     * Widget is to be rendered. This can be a Node instance or a CSS selector string.
     * <p>
     * If the selector string returns more than one Node, the first node will be used
     * as the parentNode. NOTE: This argument is required if both the boundingBox and contentBox
     * are not currently in the document. If it's not provided, the Widget will be rendered
     * to the body of the current document in this case.
     * </p>
     */
    render: function(parentNode) {

        if (!this.get(DESTROYED) && !this.get(RENDERED)) {
             /**
              * Lifecycle event for the render phase, fired prior to rendering the UI
              * for the widget (prior to invoking the widget's renderer method).
              * <p>
              * Subscribers to the "on" moment of this event, will be notified
              * before the widget is rendered.
              * </p>
              * <p>
              * Subscribers to the "after" moment of this event, will be notified
              * after rendering is complete.
              * </p>
              *
              * @event render
              * @preventable _defRenderFn
              * @param {EventFacade} e The Event Facade
              */
            this.publish(RENDER, {
                queuable:FALSE,
                fireOnce:TRUE,
                defaultTargetOnly:TRUE,
                defaultFn: this._defRenderFn
            });

            this.fire(RENDER, {parentNode: (parentNode) ? Node.one(parentNode) : null});
        }
        return this;
    },

    /**
     * Default render handler
     *
     * @method _defRenderFn
     * @protected
     * @param {EventFacade} e The Event object
     * @param {Node} parentNode The parent node to render to, if passed in to the <code>render</code> method
     */
    _defRenderFn : function(e) {
        this._parentNode = e.parentNode;

        this.renderer();
        this._set(RENDERED, TRUE);

        this._removeLoadingClassNames();
    },

    /**
     * Creates DOM (or manipulates DOM for progressive enhancement)
     * This method is invoked by render() and is not chained
     * automatically for the class hierarchy (unlike initializer, destructor)
     * so it should be chained manually for subclasses if required.
     *
     * @method renderer
     * @protected
     */
    renderer: function() {
        // kweight
        var widget = this;

        widget._renderUI();
        widget.renderUI();

        widget._bindUI();
        widget.bindUI();

        widget._syncUI();
        widget.syncUI();
    },

    /**
     * Configures/Sets up listeners to bind Widget State to UI/DOM
     *
     * This method is not called by framework and is not chained
     * automatically for the class hierarchy.
     *
     * @method bindUI
     * @protected
     */
    bindUI: EMPTY_FN,

    /**
     * Adds nodes to the DOM
     *
     * This method is not called by framework and is not chained
     * automatically for the class hierarchy.
     *
     * @method renderUI
     * @protected
     */
    renderUI: EMPTY_FN,

    /**
     * Refreshes the rendered UI, based on Widget State
     *
     * This method is not called by framework and is not chained
     * automatically for the class hierarchy.
     *
     * @method syncUI
     * @protected
     *
     */
    syncUI: EMPTY_FN,

    /**
     * @method hide
     * @description Hides the Widget by setting the "visible" attribute to "false".
     * @chainable
     */
    hide: function() {
        return this.set(VISIBLE, FALSE);
    },

    /**
     * @method show
     * @description Shows the Widget by setting the "visible" attribute to "true".
     * @chainable
     */
    show: function() {
        return this.set(VISIBLE, TRUE);
    },

    /**
     * @method focus
     * @description Causes the Widget to receive the focus by setting the "focused"
     * attribute to "true".
     * @chainable
     */
    focus: function () {
        return this._set(FOCUSED, TRUE);
    },

    /**
     * @method blur
     * @description Causes the Widget to lose focus by setting the "focused" attribute
     * to "false"
     * @chainable
     */
    blur: function () {
        return this._set(FOCUSED, FALSE);
    },

    /**
     * @method enable
     * @description Set the Widget's "disabled" attribute to "false".
     * @chainable
     */
    enable: function() {
        return this.set(DISABLED, FALSE);
    },

    /**
     * @method disable
     * @description Set the Widget's "disabled" attribute to "true".
     * @chainable
     */
    disable: function() {
        return this.set(DISABLED, TRUE);
    },

    /**
     * @method _uiSizeCB
     * @protected
     * @param {boolean} expand
     */
    _uiSizeCB : function(expand) {
        this.get(CONTENT_BOX).toggleClass(_getWidgetClassName(CONTENT, "expanded"), expand);
    },

    /**
     * Helper method to collect the boundingBox and contentBox and append to the provided parentNode, if not
     * already a child. The owner document of the boundingBox, or the owner document of the contentBox will be used
     * as the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and
     * the contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered
     * to the current document's body.
     *
     * @method _renderBox
     * @private
     * @param {Node} parentNode The parentNode to render the widget to. If not provided, and both the boundingBox and
     * the contentBox are not currently in the document, the widget will be rendered to the current document's body.
     */
    _renderBox: function(parentNode) {

        // TODO: Performance Optimization [ More effective algo to reduce Node refs, compares, replaces? ]

        var widget = this, // kweight
            contentBox = widget.get(CONTENT_BOX),
            boundingBox = widget.get(BOUNDING_BOX),
            srcNode = widget.get(SRC_NODE),
            defParentNode = widget.DEF_PARENT_NODE,

            doc = (srcNode && srcNode.get(OWNER_DOCUMENT)) || boundingBox.get(OWNER_DOCUMENT) || contentBox.get(OWNER_DOCUMENT);

        // If srcNode (assume it's always in doc), have contentBox take its place (widget render responsible for re-use of srcNode contents)
        if (srcNode && !srcNode.compareTo(contentBox) && !contentBox.inDoc(doc)) {
            srcNode.replace(contentBox);
        }

        if (!boundingBox.compareTo(contentBox.get(PARENT_NODE)) && !boundingBox.compareTo(contentBox)) {
            // If contentBox box is already in the document, have boundingBox box take it's place
            if (contentBox.inDoc(doc)) {
                contentBox.replace(boundingBox);
            }
            boundingBox.appendChild(contentBox);
        }

        parentNode = parentNode || (defParentNode && Node.one(defParentNode));

        if (parentNode) {
            parentNode.appendChild(boundingBox);
        } else if (!boundingBox.inDoc(doc)) {
            Node.one(BODY).insert(boundingBox, 0);
        }
    },

    /**
     * Setter for the boundingBox attribute
     *
     * @method _setBB
     * @private
     * @param Node/String
     * @return Node
     */
    _setBB: function(node) {
        return this._setBox(this.get(ID), node, this.BOUNDING_TEMPLATE, true);
    },

    /**
     * Setter for the contentBox attribute
     *
     * @method _setCB
     * @private
     * @param {Node|String} node
     * @return Node
     */
    _setCB: function(node) {
        return (this.CONTENT_TEMPLATE === null) ? this.get(BOUNDING_BOX) : this._setBox(null, node, this.CONTENT_TEMPLATE, false);
    },

    /**
     * Returns the default value for the contentBox attribute.
     *
     * For the Widget class, this will be the srcNode if provided, otherwise null (resulting in
     * a new contentBox node instance being created)
     *
     * @method _defaultCB
     * @protected
     */
    _defaultCB : function(node) {
        return this.get(SRC_NODE) || null;
    },

    /**
     * Helper method to set the bounding/content box, or create it from
     * the provided template if not found.
     *
     * @method _setBox
     * @private
     *
     * @param {String} id The node's id attribute
     * @param {Node|String} node The node reference
     * @param {String} template HTML string template for the node
     * @param {boolean} true if this is the boundingBox, false if it's the contentBox
     * @return {Node} The node
     */
    _setBox : function(id, node, template, isBounding) {

        node = Node.one(node);

        if (!node) {
            node = Node.create(template);

            if (isBounding) {
                this._bbFromTemplate = true;
            } else {
                this._cbFromTemplate = true;
            }
        }

        if (!node.get(ID)) {
            node.set(ID, id || Y.guid());
        }

        return node;
    },

    /**
     * Initializes the UI state for the Widget's bounding/content boxes.
     *
     * @method _renderUI
     * @protected
     */
    _renderUI: function() {
        this._renderBoxClassNames();
        this._renderBox(this._parentNode);
    },

    /**
     * Applies standard class names to the boundingBox and contentBox
     *
     * @method _renderBoxClassNames
     * @protected
     */
    _renderBoxClassNames : function() {
        var classes = this._getClasses(),
            cl,
            boundingBox = this.get(BOUNDING_BOX),
            i;

        boundingBox.addClass(_getWidgetClassName());

        // Start from Widget Sub Class
        for (i = classes.length-3; i >= 0; i--) {
            cl = classes[i];
            boundingBox.addClass(cl.CSS_PREFIX || _getClassName(cl.NAME.toLowerCase()));
        }

        // Use instance based name for content box
        this.get(CONTENT_BOX).addClass(this.getClassName(CONTENT));
    },

    /**
     * Removes class names representative of the widget's loading state from
     * the boundingBox.
     *
     * @method _removeLoadingClassNames
     * @protected
     */
    _removeLoadingClassNames: function () {

        var boundingBox = this.get(BOUNDING_BOX),
            contentBox = this.get(CONTENT_BOX),
            instClass = this.getClassName(LOADING),
            widgetClass = _getWidgetClassName(LOADING);

        boundingBox.removeClass(widgetClass)
                   .removeClass(instClass);

        contentBox.removeClass(widgetClass)
                  .removeClass(instClass);
    },

    /**
     * Sets up DOM and CustomEvent listeners for the widget.
     *
     * @method _bindUI
     * @protected
     */
    _bindUI: function() {
        this._bindAttrUI(this._UI_ATTRS.BIND);
        this._bindDOM();
    },

    /**
     * @method _unbindUI
     * @protected
     */
    _unbindUI : function(boundingBox) {
        this._unbindDOM(boundingBox);
    },

    /**
     * Sets up DOM listeners, on elements rendered by the widget.
     *
     * @method _bindDOM
     * @protected
     */
    _bindDOM : function() {
        var oDocument = this.get(BOUNDING_BOX).get(OWNER_DOCUMENT),
            focusHandle = Widget._hDocFocus;

        // Shared listener across all Widgets.
        if (!focusHandle) {
            focusHandle = Widget._hDocFocus = oDocument.on("focus", this._onDocFocus, this);
            focusHandle.listeners = {
                count: 0
            };
        }

        focusHandle.listeners[Y.stamp(this, true)] = true;
        focusHandle.listeners.count++;

        //  Fix for Webkit:
        //  Document doesn't receive focus in Webkit when the user mouses
        //  down on it, so the "focused" attribute won't get set to the
        //  correct value. Keeping this instance based for now, potential better performance.
        //  Otherwise we'll end up looking up widgets from the DOM on every mousedown.
        if (WEBKIT){
            this._hDocMouseDown = oDocument.on("mousedown", this._onDocMouseDown, this);
        }
    },

    /**
     * @method _unbindDOM
     * @protected
     */
    _unbindDOM : function(boundingBox) {

        var focusHandle = Widget._hDocFocus,
            yuid = Y.stamp(this, true),
            focusListeners,
            mouseHandle = this._hDocMouseDown;

        if (focusHandle) {

            focusListeners = focusHandle.listeners;

            if (focusListeners[yuid]) {
                delete focusListeners[yuid];
                focusListeners.count--;
            }

            if (focusListeners.count === 0) {
                focusHandle.detach();
                Widget._hDocFocus = null;
            }
        }

        if (WEBKIT && mouseHandle) {
            mouseHandle.detach();
        }
    },

    /**
     * Updates the widget UI to reflect the attribute state.
     *
     * @method _syncUI
     * @protected
     */
    _syncUI: function() {
        this._syncAttrUI(this._UI_ATTRS.SYNC);
    },

    /**
     * Sets the height on the widget's bounding box element
     *
     * @method _uiSetHeight
     * @protected
     * @param {String | Number} val
     */
    _uiSetHeight: function(val) {
        this._uiSetDim(HEIGHT, val);
        this._uiSizeCB((val !== EMPTY_STR && val !== AUTO));
    },

    /**
     * Sets the width on the widget's bounding box element
     *
     * @method _uiSetWidth
     * @protected
     * @param {String | Number} val
     */
    _uiSetWidth: function(val) {
        this._uiSetDim(WIDTH, val);
    },

    /**
     * @method _uiSetDim
     * @private
     * @param {String} dim The dimension - "width" or "height"
     * @param {Number | String} val The value to set
     */
    _uiSetDim: function(dimension, val) {
        this.get(BOUNDING_BOX).setStyle(dimension, L.isNumber(val) ? val + this.DEF_UNIT : val);
    },

    /**
     * Sets the visible state for the UI
     *
     * @method _uiSetVisible
     * @protected
     * @param {boolean} val
     */
    _uiSetVisible: function(val) {
        this.get(BOUNDING_BOX).toggleClass(this.getClassName(HIDDEN), !val);
    },

    /**
     * Sets the disabled state for the UI
     *
     * @method _uiSetDisabled
     * @protected
     * @param {boolean} val
     */
    _uiSetDisabled: function(val) {
        this.get(BOUNDING_BOX).toggleClass(this.getClassName(DISABLED), val);
    },

    /**
     * Sets the focused state for the UI
     *
     * @method _uiSetFocused
     * @protected
     * @param {boolean} val
     * @param {string} src String representing the source that triggered an update to
     * the UI.
     */
    _uiSetFocused: function(val, src) {
         var boundingBox = this.get(BOUNDING_BOX);
         boundingBox.toggleClass(this.getClassName(FOCUSED), val);

         if (src !== UI) {
            if (val) {
                boundingBox.focus();
            } else {
                boundingBox.blur();
            }
         }
    },

    /**
     * Set the tabIndex on the widget's rendered UI
     *
     * @method _uiSetTabIndex
     * @protected
     * @param Number
     */
    _uiSetTabIndex: function(index) {
        var boundingBox = this.get(BOUNDING_BOX);

        if (L.isNumber(index)) {
            boundingBox.set(TAB_INDEX, index);
        } else {
            boundingBox.removeAttribute(TAB_INDEX);
        }
    },

    /**
     * @method _onDocMouseDown
     * @description "mousedown" event handler for the owner document of the
     * widget's bounding box.
     * @protected
     * @param {EventFacade} evt The event facade for the DOM focus event
     */
    _onDocMouseDown: function (evt) {
        if (this._domFocus) {
            this._onDocFocus(evt);
        }
    },

    /**
     * DOM focus event handler, used to sync the state of the Widget with the DOM
     *
     * @method _onDocFocus
     * @protected
     * @param {EventFacade} evt The event facade for the DOM focus event
     */
    _onDocFocus: function (evt) {
        var widget = Widget.getByNode(evt.target),
            activeWidget = Widget._active;

        if (activeWidget && (activeWidget !== widget)) {
            activeWidget._domFocus = false;
            activeWidget._set(FOCUSED, false, {src:UI});

            Widget._active = null;
        }

        if (widget) {
            widget._domFocus = true;
            widget._set(FOCUSED, true, {src:UI});

            Widget._active = widget;
        }
    },

    /**
     * Generic toString implementation for all widgets.
     *
     * @method toString
     * @return {String} The default string value for the widget [ displays the NAME of the instance, and the unique id ]
     */
    toString: function() {
        // Using deprecated name prop for kweight squeeze.
        return this.name + "[" + this.get(ID) + "]";
    },

    /**
     * Default unit to use for dimension values
     *
     * @property DEF_UNIT
     * @type String
     */
    DEF_UNIT : "px",

    /**
     * Default node to render the bounding box to. If not set,
     * will default to the current document body.
     *
     * @property DEF_PARENT_NODE
     * @type String | Node
     */
    DEF_PARENT_NODE : null,

    /**
     * Property defining the markup template for content box. If your Widget doesn't
     * need the dual boundingBox/contentBox structure, set CONTENT_TEMPLATE to null,
     * and contentBox and boundingBox will both point to the same Node.
     *
     * @property CONTENT_TEMPLATE
     * @type String
     */
    CONTENT_TEMPLATE : DIV,

    /**
     * Property defining the markup template for bounding box.
     *
     * @property BOUNDING_TEMPLATE
     * @type String
     */
    BOUNDING_TEMPLATE : DIV,

    /**
     * @method _guid
     * @protected
     */
    _guid : function() {
        return Y.guid();
    },

    /**
     * @method _validTabIndex
     * @protected
     * @param {Number} tabIndex
     */
    _validTabIndex : function (tabIndex) {
        return (L.isNumber(tabIndex) || L.isNull(tabIndex));
    },

    /**
     * Binds after listeners for the list of attributes provided
     *
     * @method _bindAttrUI
     * @private
     * @param {Array} attrs
     */
    _bindAttrUI : function(attrs) {
        var i,
            l = attrs.length;

        for (i = 0; i < l; i++) {
            this.after(attrs[i] + CHANGE, this._setAttrUI);
        }
    },

    /**
     * Invokes the _uiSet&#61;ATTR NAME&#62; method for the list of attributes provided
     *
     * @method _syncAttrUI
     * @private
     * @param {Array} attrs
     */
    _syncAttrUI : function(attrs) {
        var i, l = attrs.length, attr;
        for (i = 0; i < l; i++) {
            attr = attrs[i];
            this[_UISET + _toInitialCap(attr)](this.get(attr));
        }
    },

    /**
     * @method _setAttrUI
     * @private
     * @param {EventFacade} e
     */
    _setAttrUI : function(e) {
        if (e.target === this) {
            this[_UISET + _toInitialCap(e.attrName)](e.newVal, e.src);
        }
    },

    /**
     * The default setter for the strings attribute. Merges partial sets
     * into the full string set, to allow users to partial sets of strings
     *
     * @method _strSetter
     * @protected
     * @param {Object} strings
     * @return {String} The full set of strings to set
     */
    _strSetter : function(strings) {
        return Y.merge(this.get(STRINGS), strings);
    },

    /**
     * Helper method to get a specific string value
     *
     * @deprecated Used by deprecated WidgetLocale implementations.
     * @method getString
     * @param {String} key
     * @return {String} The string
     */
    getString : function(key) {
        return this.get(STRINGS)[key];
    },

    /**
     * Helper method to get the complete set of strings for the widget
     *
     * @deprecated  Used by deprecated WidgetLocale implementations.
     * @method getStrings
     * @param {String} key
     * @return {String} The strings
     */
    getStrings : function() {
        return this.get(STRINGS);
    },

    /**
     * The lists of UI attributes to bind and sync for widget's _bindUI and _syncUI implementations
     *
     * @property _UI_ATTRS
     * @type Object
     * @private
     */
    _UI_ATTRS : {
        BIND: UI_ATTRS,
        SYNC: UI_ATTRS
    }
});

Y.Widget = Widget;


}, '3.10.1', {
    "requires": [
        "attribute",
        "base-base",
        "base-pluginhost",
        "classnamemanager",
        "event-focus",
        "node-base",
        "node-style"
    ],
    "skinnable": true
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/selector/selector.js
// ----------------------------------------------------------------------------------------

YUI.add('selector', function (Y, NAME) {



}, '3.10.1', {"requires": ["selector-native"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/history-hash/history-hash.js
// ----------------------------------------------------------------------------------------

YUI.add('history-hash', function (Y, NAME) {

/**
 * Provides browser history management backed by
 * <code>window.location.hash</code>, as well as convenience methods for working
 * with the location hash and a synthetic <code>hashchange</code> event that
 * normalizes differences across browsers.
 *
 * @module history
 * @submodule history-hash
 * @since 3.2.0
 * @class HistoryHash
 * @extends HistoryBase
 * @constructor
 * @param {Object} config (optional) Configuration object. See the HistoryBase
 *   documentation for details.
 */

var HistoryBase = Y.HistoryBase,
    Lang        = Y.Lang,
    YArray      = Y.Array,
    YObject     = Y.Object,
    GlobalEnv   = YUI.namespace('Env.HistoryHash'),

    SRC_HASH    = 'hash',

    hashNotifiers,
    oldHash,
    oldUrl,
    win             = Y.config.win,
    useHistoryHTML5 = Y.config.useHistoryHTML5;

function HistoryHash() {
    HistoryHash.superclass.constructor.apply(this, arguments);
}

Y.extend(HistoryHash, HistoryBase, {
    // -- Initialization -------------------------------------------------------
    _init: function (config) {
        var bookmarkedState = HistoryHash.parseHash();

        // If an initialState was provided, merge the bookmarked state into it
        // (the bookmarked state wins).
        config = config || {};

        this._initialState = config.initialState ?
                Y.merge(config.initialState, bookmarkedState) : bookmarkedState;

        // Subscribe to the synthetic hashchange event (defined below) to handle
        // changes.
        Y.after('hashchange', Y.bind(this._afterHashChange, this), win);

        HistoryHash.superclass._init.apply(this, arguments);
    },

    // -- Protected Methods ----------------------------------------------------
    _change: function (src, state, options) {
        // Stringify all values to ensure that comparisons don't fail after
        // they're coerced to strings in the location hash.
        YObject.each(state, function (value, key) {
            if (Lang.isValue(value)) {
                state[key] = value.toString();
            }
        });

        return HistoryHash.superclass._change.call(this, src, state, options);
    },

    _storeState: function (src, newState) {
        var decode  = HistoryHash.decode,
            newHash = HistoryHash.createHash(newState);

        HistoryHash.superclass._storeState.apply(this, arguments);

        // Update the location hash with the changes, but only if the new hash
        // actually differs from the current hash (this avoids creating multiple
        // history entries for a single state).
        //
        // We always compare decoded hashes, since it's possible that the hash
        // could be set incorrectly to a non-encoded value outside of
        // HistoryHash.
        if (src !== SRC_HASH && decode(HistoryHash.getHash()) !== decode(newHash)) {
            HistoryHash[src === HistoryBase.SRC_REPLACE ? 'replaceHash' : 'setHash'](newHash);
        }
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
     * Handler for hashchange events.
     *
     * @method _afterHashChange
     * @param {Event} e
     * @protected
     */
    _afterHashChange: function (e) {
        this._resolveChanges(SRC_HASH, HistoryHash.parseHash(e.newHash), {});
    }
}, {
    // -- Public Static Properties ---------------------------------------------
    NAME: 'historyHash',

    /**
     * Constant used to identify state changes originating from
     * <code>hashchange</code> events.
     *
     * @property SRC_HASH
     * @type String
     * @static
     * @final
     */
    SRC_HASH: SRC_HASH,

    /**
     * <p>
     * Prefix to prepend when setting the hash fragment. For example, if the
     * prefix is <code>!</code> and the hash fragment is set to
     * <code>#foo=bar&baz=quux</code>, the final hash fragment in the URL will
     * become <code>#!foo=bar&baz=quux</code>. This can be used to help make an
     * Ajax application crawlable in accordance with Google's guidelines at
     * <a href="http://code.google.com/web/ajaxcrawling/">http://code.google.com/web/ajaxcrawling/</a>.
     * </p>
     *
     * <p>
     * Note that this prefix applies to all HistoryHash instances. It's not
     * possible for individual instances to use their own prefixes since they
     * all operate on the same URL.
     * </p>
     *
     * @property hashPrefix
     * @type String
     * @default ''
     * @static
     */
    hashPrefix: '',

    // -- Protected Static Properties ------------------------------------------

    /**
     * Regular expression used to parse location hash/query strings.
     *
     * @property _REGEX_HASH
     * @type RegExp
     * @protected
     * @static
     * @final
     */
    _REGEX_HASH: /([^\?#&]+)=([^&]+)/g,

    // -- Public Static Methods ------------------------------------------------

    /**
     * Creates a location hash string from the specified object of key/value
     * pairs.
     *
     * @method createHash
     * @param {Object} params object of key/value parameter pairs
     * @return {String} location hash string
     * @static
     */
    createHash: function (params) {
        var encode = HistoryHash.encode,
            hash   = [];

        YObject.each(params, function (value, key) {
            if (Lang.isValue(value)) {
                hash.push(encode(key) + '=' + encode(value));
            }
        });

        return hash.join('&');
    },

    /**
     * Wrapper around <code>decodeURIComponent()</code> that also converts +
     * chars into spaces.
     *
     * @method decode
     * @param {String} string string to decode
     * @return {String} decoded string
     * @static
     */
    decode: function (string) {
        return decodeURIComponent(string.replace(/\+/g, ' '));
    },

    /**
     * Wrapper around <code>encodeURIComponent()</code> that converts spaces to
     * + chars.
     *
     * @method encode
     * @param {String} string string to encode
     * @return {String} encoded string
     * @static
     */
    encode: function (string) {
        return encodeURIComponent(string).replace(/%20/g, '+');
    },

    /**
     * Gets the raw (not decoded) current location hash, minus the preceding '#'
     * character and the hashPrefix (if one is set).
     *
     * @method getHash
     * @return {String} current location hash
     * @static
     */
    getHash: (Y.UA.gecko ? function () {
        // Gecko's window.location.hash returns a decoded string and we want all
        // encoding untouched, so we need to get the hash value from
        // window.location.href instead. We have to use UA sniffing rather than
        // feature detection, since the only way to detect this would be to
        // actually change the hash.
        var location = Y.getLocation(),
            matches  = /#(.*)$/.exec(location.href),
            hash     = matches && matches[1] || '',
            prefix   = HistoryHash.hashPrefix;

        return prefix && hash.indexOf(prefix) === 0 ?
                    hash.replace(prefix, '') : hash;
    } : function () {
        var location = Y.getLocation(),
            hash     = location.hash.substring(1),
            prefix   = HistoryHash.hashPrefix;

        // Slight code duplication here, but execution speed is of the essence
        // since getHash() is called every 50ms to poll for changes in browsers
        // that don't support native onhashchange. An additional function call
        // would add unnecessary overhead.
        return prefix && hash.indexOf(prefix) === 0 ?
                    hash.replace(prefix, '') : hash;
    }),

    /**
     * Gets the current bookmarkable URL.
     *
     * @method getUrl
     * @return {String} current bookmarkable URL
     * @static
     */
    getUrl: function () {
        return location.href;
    },

    /**
     * Parses a location hash string into an object of key/value parameter
     * pairs. If <i>hash</i> is not specified, the current location hash will
     * be used.
     *
     * @method parseHash
     * @param {String} hash (optional) location hash string
     * @return {Object} object of parsed key/value parameter pairs
     * @static
     */
    parseHash: function (hash) {
        var decode = HistoryHash.decode,
            i,
            len,
            matches,
            param,
            params = {},
            prefix = HistoryHash.hashPrefix,
            prefixIndex;

        hash = Lang.isValue(hash) ? hash : HistoryHash.getHash();

        if (prefix) {
            prefixIndex = hash.indexOf(prefix);

            if (prefixIndex === 0 || (prefixIndex === 1 && hash.charAt(0) === '#')) {
                hash = hash.replace(prefix, '');
            }
        }

        matches = hash.match(HistoryHash._REGEX_HASH) || [];

        for (i = 0, len = matches.length; i < len; ++i) {
            param = matches[i].split('=');
            params[decode(param[0])] = decode(param[1]);
        }

        return params;
    },

    /**
     * Replaces the browser's current location hash with the specified hash
     * and removes all forward navigation states, without creating a new browser
     * history entry. Automatically prepends the <code>hashPrefix</code> if one
     * is set.
     *
     * @method replaceHash
     * @param {String} hash new location hash
     * @static
     */
    replaceHash: function (hash) {
        var location = Y.getLocation(),
            base     = location.href.replace(/#.*$/, '');

        if (hash.charAt(0) === '#') {
            hash = hash.substring(1);
        }

        location.replace(base + '#' + (HistoryHash.hashPrefix || '') + hash);
    },

    /**
     * Sets the browser's location hash to the specified string. Automatically
     * prepends the <code>hashPrefix</code> if one is set.
     *
     * @method setHash
     * @param {String} hash new location hash
     * @static
     */
    setHash: function (hash) {
        var location = Y.getLocation();

        if (hash.charAt(0) === '#') {
            hash = hash.substring(1);
        }

        location.hash = (HistoryHash.hashPrefix || '') + hash;
    }
});

// -- Synthetic hashchange Event -----------------------------------------------

// TODO: YUIDoc currently doesn't provide a good way to document synthetic DOM
// events. For now, we're just documenting the hashchange event on the YUI
// object, which is about the best we can do until enhancements are made to
// YUIDoc.

/**
Synthetic <code>window.onhashchange</code> event that normalizes differences
across browsers and provides support for browsers that don't natively support
<code>onhashchange</code>.

This event is provided by the <code>history-hash</code> module.

@example

    YUI().use('history-hash', function (Y) {
      Y.on('hashchange', function (e) {
        // Handle hashchange events on the current window.
      }, Y.config.win);
    });

@event hashchange
@param {EventFacade} e Event facade with the following additional
  properties:

<dl>
  <dt>oldHash</dt>
  <dd>
    Previous hash fragment value before the change.
  </dd>

  <dt>oldUrl</dt>
  <dd>
    Previous URL (including the hash fragment) before the change.
  </dd>

  <dt>newHash</dt>
  <dd>
    New hash fragment value after the change.
  </dd>

  <dt>newUrl</dt>
  <dd>
    New URL (including the hash fragment) after the change.
  </dd>
</dl>
@for YUI
@since 3.2.0
**/

hashNotifiers = GlobalEnv._notifiers;

if (!hashNotifiers) {
    hashNotifiers = GlobalEnv._notifiers = [];
}

Y.Event.define('hashchange', {
    on: function (node, subscriber, notifier) {
        // Ignore this subscription if the node is anything other than the
        // window or document body, since those are the only elements that
        // should support the hashchange event. Note that the body could also be
        // a frameset, but that's okay since framesets support hashchange too.
        if (node.compareTo(win) || node.compareTo(Y.config.doc.body)) {
            hashNotifiers.push(notifier);
        }
    },

    detach: function (node, subscriber, notifier) {
        var index = YArray.indexOf(hashNotifiers, notifier);

        if (index !== -1) {
            hashNotifiers.splice(index, 1);
        }
    }
});

oldHash = HistoryHash.getHash();
oldUrl  = HistoryHash.getUrl();

if (HistoryBase.nativeHashChange) {
    // Wrap the browser's native hashchange event if there's not already a
    // global listener.
    if (!GlobalEnv._hashHandle) {
        GlobalEnv._hashHandle = Y.Event.attach('hashchange', function (e) {
            var newHash = HistoryHash.getHash(),
                newUrl  = HistoryHash.getUrl();

            // Iterate over a copy of the hashNotifiers array since a subscriber
            // could detach during iteration and cause the array to be re-indexed.
            YArray.each(hashNotifiers.concat(), function (notifier) {
                notifier.fire({
                    _event : e,
                    oldHash: oldHash,
                    oldUrl : oldUrl,
                    newHash: newHash,
                    newUrl : newUrl
                });
            });

            oldHash = newHash;
            oldUrl  = newUrl;
        }, win);
    }
} else {
    // Begin polling for location hash changes if there's not already a global
    // poll running.
    if (!GlobalEnv._hashPoll) {
        GlobalEnv._hashPoll = Y.later(50, null, function () {
            var newHash = HistoryHash.getHash(),
                facade, newUrl;

            if (oldHash !== newHash) {
                newUrl = HistoryHash.getUrl();

                facade = {
                    oldHash: oldHash,
                    oldUrl : oldUrl,
                    newHash: newHash,
                    newUrl : newUrl
                };

                oldHash = newHash;
                oldUrl  = newUrl;

                YArray.each(hashNotifiers.concat(), function (notifier) {
                    notifier.fire(facade);
                });
            }
        }, null, true);
    }
}

Y.HistoryHash = HistoryHash;

// HistoryHash will never win over HistoryHTML5 unless useHistoryHTML5 is false.
if (useHistoryHTML5 === false || (!Y.History && useHistoryHTML5 !== true &&
        (!HistoryBase.html5 || !Y.HistoryHTML5))) {
    Y.History = HistoryHash;
}


}, '3.10.1', {"requires": ["event-synthetic", "history-base", "yui-later"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/dom-core/dom-core.js
// ----------------------------------------------------------------------------------------

YUI.add('dom-core', function (Y, NAME) {

var NODE_TYPE = 'nodeType',
    OWNER_DOCUMENT = 'ownerDocument',
    DOCUMENT_ELEMENT = 'documentElement',
    DEFAULT_VIEW = 'defaultView',
    PARENT_WINDOW = 'parentWindow',
    TAG_NAME = 'tagName',
    PARENT_NODE = 'parentNode',
    PREVIOUS_SIBLING = 'previousSibling',
    NEXT_SIBLING = 'nextSibling',
    CONTAINS = 'contains',
    COMPARE_DOCUMENT_POSITION = 'compareDocumentPosition',
    EMPTY_ARRAY = [],

    // IE < 8 throws on node.contains(textNode)
    supportsContainsTextNode = (function() {
        var node = Y.config.doc.createElement('div'),
            textNode = node.appendChild(Y.config.doc.createTextNode('')),
            result = false;

        try {
            result = node.contains(textNode);
        } catch(e) {}

        return result;
    })(),

/**
 * The DOM utility provides a cross-browser abtraction layer
 * normalizing DOM tasks, and adds extra helper functionality
 * for other common tasks.
 * @module dom
 * @main dom
 * @submodule dom-base
 * @for DOM
 *
 */

/**
 * Provides DOM helper methods.
 * @class DOM
 *
 */

Y_DOM = {
    /**
     * Returns the HTMLElement with the given ID (Wrapper for document.getElementById).
     * @method byId
     * @param {String} id the id attribute
     * @param {Object} doc optional The document to search. Defaults to current document
     * @return {HTMLElement | null} The HTMLElement with the id, or null if none found.
     */
    byId: function(id, doc) {
        // handle dupe IDs and IE name collision
        return Y_DOM.allById(id, doc)[0] || null;
    },

    getId: function(node) {
        var id;
        // HTMLElement returned from FORM when INPUT name === "id"
        // IE < 8: HTMLCollection returned when INPUT id === "id"
        // via both getAttribute and form.id
        if (node.id && !node.id.tagName && !node.id.item) {
            id = node.id;
        } else if (node.attributes && node.attributes.id) {
            id = node.attributes.id.value;
        }

        return id;
    },

    setId: function(node, id) {
        if (node.setAttribute) {
            node.setAttribute('id', id);
        } else {
            node.id = id;
        }
    },

    /*
     * Finds the ancestor of the element.
     * @method ancestor
     * @param {HTMLElement} element The html element.
     * @param {Function} fn optional An optional boolean test to apply.
     * The optional function is passed the current DOM node being tested as its only argument.
     * If no function is given, the parentNode is returned.
     * @param {Boolean} testSelf optional Whether or not to include the element in the scan
     * @return {HTMLElement | null} The matching DOM node or null if none found.
     */
    ancestor: function(element, fn, testSelf, stopFn) {
        var ret = null;
        if (testSelf) {
            ret = (!fn || fn(element)) ? element : null;

        }
        return ret || Y_DOM.elementByAxis(element, PARENT_NODE, fn, null, stopFn);
    },

    /*
     * Finds the ancestors of the element.
     * @method ancestors
     * @param {HTMLElement} element The html element.
     * @param {Function} fn optional An optional boolean test to apply.
     * The optional function is passed the current DOM node being tested as its only argument.
     * If no function is given, all ancestors are returned.
     * @param {Boolean} testSelf optional Whether or not to include the element in the scan
     * @return {Array} An array containing all matching DOM nodes.
     */
    ancestors: function(element, fn, testSelf, stopFn) {
        var ancestor = element,
            ret = [];

        while ((ancestor = Y_DOM.ancestor(ancestor, fn, testSelf, stopFn))) {
            testSelf = false;
            if (ancestor) {
                ret.unshift(ancestor);

                if (stopFn && stopFn(ancestor)) {
                    return ret;
                }
            }
        }

        return ret;
    },

    /**
     * Searches the element by the given axis for the first matching element.
     * @method elementByAxis
     * @param {HTMLElement} element The html element.
     * @param {String} axis The axis to search (parentNode, nextSibling, previousSibling).
     * @param {Function} fn optional An optional boolean test to apply.
     * @param {Boolean} all optional Whether all node types should be returned, or just element nodes.
     * The optional function is passed the current HTMLElement being tested as its only argument.
     * If no function is given, the first element is returned.
     * @return {HTMLElement | null} The matching element or null if none found.
     */
    elementByAxis: function(element, axis, fn, all, stopAt) {
        while (element && (element = element[axis])) { // NOTE: assignment
                if ( (all || element[TAG_NAME]) && (!fn || fn(element)) ) {
                    return element;
                }

                if (stopAt && stopAt(element)) {
                    return null;
                }
        }
        return null;
    },

    /**
     * Determines whether or not one HTMLElement is or contains another HTMLElement.
     * @method contains
     * @param {HTMLElement} element The containing html element.
     * @param {HTMLElement} needle The html element that may be contained.
     * @return {Boolean} Whether or not the element is or contains the needle.
     */
    contains: function(element, needle) {
        var ret = false;

        if ( !needle || !element || !needle[NODE_TYPE] || !element[NODE_TYPE]) {
            ret = false;
        } else if (element[CONTAINS] &&
                // IE < 8 throws on node.contains(textNode) so fall back to brute.
                // Falling back for other nodeTypes as well.
                (needle[NODE_TYPE] === 1 || supportsContainsTextNode)) {
                ret = element[CONTAINS](needle);
        } else if (element[COMPARE_DOCUMENT_POSITION]) {
            // Match contains behavior (node.contains(node) === true).
            // Needed for Firefox < 4.
            if (element === needle || !!(element[COMPARE_DOCUMENT_POSITION](needle) & 16)) {
                ret = true;
            }
        } else {
            ret = Y_DOM._bruteContains(element, needle);
        }

        return ret;
    },

    /**
     * Determines whether or not the HTMLElement is part of the document.
     * @method inDoc
     * @param {HTMLElement} element The containing html element.
     * @param {HTMLElement} doc optional The document to check.
     * @return {Boolean} Whether or not the element is attached to the document.
     */
    inDoc: function(element, doc) {
        var ret = false,
            rootNode;

        if (element && element.nodeType) {
            (doc) || (doc = element[OWNER_DOCUMENT]);

            rootNode = doc[DOCUMENT_ELEMENT];

            // contains only works with HTML_ELEMENT
            if (rootNode && rootNode.contains && element.tagName) {
                ret = rootNode.contains(element);
            } else {
                ret = Y_DOM.contains(rootNode, element);
            }
        }

        return ret;

    },

   allById: function(id, root) {
        root = root || Y.config.doc;
        var nodes = [],
            ret = [],
            i,
            node;

        if (root.querySelectorAll) {
            ret = root.querySelectorAll('[id="' + id + '"]');
        } else if (root.all) {
            nodes = root.all(id);

            if (nodes) {
                // root.all may return HTMLElement or HTMLCollection.
                // some elements are also HTMLCollection (FORM, SELECT).
                if (nodes.nodeName) {
                    if (nodes.id === id) { // avoid false positive on name
                        ret.push(nodes);
                        nodes = EMPTY_ARRAY; // done, no need to filter
                    } else { //  prep for filtering
                        nodes = [nodes];
                    }
                }

                if (nodes.length) {
                    // filter out matches on node.name
                    // and element.id as reference to element with id === 'id'
                    for (i = 0; node = nodes[i++];) {
                        if (node.id === id  ||
                                (node.attributes && node.attributes.id &&
                                node.attributes.id.value === id)) {
                            ret.push(node);
                        }
                    }
                }
            }
        } else {
            ret = [Y_DOM._getDoc(root).getElementById(id)];
        }

        return ret;
   },


    isWindow: function(obj) {
        return !!(obj && obj.scrollTo && obj.document);
    },

    _removeChildNodes: function(node) {
        while (node.firstChild) {
            node.removeChild(node.firstChild);
        }
    },

    siblings: function(node, fn) {
        var nodes = [],
            sibling = node;

        while ((sibling = sibling[PREVIOUS_SIBLING])) {
            if (sibling[TAG_NAME] && (!fn || fn(sibling))) {
                nodes.unshift(sibling);
            }
        }

        sibling = node;
        while ((sibling = sibling[NEXT_SIBLING])) {
            if (sibling[TAG_NAME] && (!fn || fn(sibling))) {
                nodes.push(sibling);
            }
        }

        return nodes;
    },

    /**
     * Brute force version of contains.
     * Used for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).
     * @method _bruteContains
     * @private
     * @param {HTMLElement} element The containing html element.
     * @param {HTMLElement} needle The html element that may be contained.
     * @return {Boolean} Whether or not the element is or contains the needle.
     */
    _bruteContains: function(element, needle) {
        while (needle) {
            if (element === needle) {
                return true;
            }
            needle = needle.parentNode;
        }
        return false;
    },

// TODO: move to Lang?
    /**
     * Memoizes dynamic regular expressions to boost runtime performance.
     * @method _getRegExp
     * @private
     * @param {String} str The string to convert to a regular expression.
     * @param {String} flags optional An optinal string of flags.
     * @return {RegExp} An instance of RegExp
     */
    _getRegExp: function(str, flags) {
        flags = flags || '';
        Y_DOM._regexCache = Y_DOM._regexCache || {};
        if (!Y_DOM._regexCache[str + flags]) {
            Y_DOM._regexCache[str + flags] = new RegExp(str, flags);
        }
        return Y_DOM._regexCache[str + flags];
    },

// TODO: make getDoc/Win true privates?
    /**
     * returns the appropriate document.
     * @method _getDoc
     * @private
     * @param {HTMLElement} element optional Target element.
     * @return {Object} The document for the given element or the default document.
     */
    _getDoc: function(element) {
        var doc = Y.config.doc;
        if (element) {
            doc = (element[NODE_TYPE] === 9) ? element : // element === document
                element[OWNER_DOCUMENT] || // element === DOM node
                element.document || // element === window
                Y.config.doc; // default
        }

        return doc;
    },

    /**
     * returns the appropriate window.
     * @method _getWin
     * @private
     * @param {HTMLElement} element optional Target element.
     * @return {Object} The window for the given element or the default window.
     */
    _getWin: function(element) {
        var doc = Y_DOM._getDoc(element);
        return doc[DEFAULT_VIEW] || doc[PARENT_WINDOW] || Y.config.win;
    },

    _batch: function(nodes, fn, arg1, arg2, arg3, etc) {
        fn = (typeof fn === 'string') ? Y_DOM[fn] : fn;
        var result,
            i = 0,
            node,
            ret;

        if (fn && nodes) {
            while ((node = nodes[i++])) {
                result = result = fn.call(Y_DOM, node, arg1, arg2, arg3, etc);
                if (typeof result !== 'undefined') {
                    (ret) || (ret = []);
                    ret.push(result);
                }
            }
        }

        return (typeof ret !== 'undefined') ? ret : nodes;
    },

    generateID: function(el) {
        var id = el.id;

        if (!id) {
            id = Y.stamp(el);
            el.id = id;
        }

        return id;
    }
};


Y.DOM = Y_DOM;


}, '3.10.1', {"requires": ["oop", "features"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/gallery-stacked.js
// ----------------------------------------------------------------------------------------

/**
* Gallery stacked
* @module squarespace-gallery-stacked
*/
YUI.add('squarespace-gallery-stacked', function(Y) {

  Y.namespace('Squarespace');

  // Design stacked
  Y.Squarespace.GalleryDesigns.stacked = Y.Squarespace.GalleryDesigns.off.extend({

    // the Gallery object
    gallery: null,
    options: {
      speed: 0.3,
      easing: Y.Easing.easeOutStrong,
      transition: 'fade'
    },

    setup: function() {

      // And now some css
      var $gallery = this.gallery.elems.container;
      var $slides = this.gallery.elems.slides;

      // Make the $gallery position relative;
      var position;
      if( $gallery.getStyle('position') != 'absolute' && $gallery.getStyle('position') != 'fixed' ) {
        position = 'relative';
      } else {
        position = $gallery.getStyle('position');
      }

      $gallery.setStyles({
        'position': position,
        'width': $gallery.get('outerWidth'),
        'height': $gallery.get('outerHeight'),
        'overflow': 'hidden'
      });

      // And the stack the slides
      $slides.setStyles({
        'position': 'absolute',
        'top': 0,
        'left': 0,
        'zIndex': -1 // IE fix
      });

      // And then setup the transition level
      if( !Y.Squarespace.StackedGalleryTransitions[this.options.transition] ) {
        var available_transitions = [];
        for( var design in Y.Squarespace.StackedGalleryTransitions ) {
          available_transitions.push( design );
        }

        throw new Error("Transition '" + this.options.transition + "' not found. Currently loaded transitions: [" + available_transitions.join(', ') + "].");
      }

      this.transition = new Y.Squarespace.StackedGalleryTransitions[this.options.transition]();
      this.transition.setup( $gallery, $slides );

      // Bind some listeners
      this.gallery.on('change', this.change, this);

      // resize handler
      Y.on('resize', function() {
        this.getGallery().getSlides().each(function(slide) {
          if (slide.test('img')) {
            slide.fire('refresh');
          } else if (slide.one('img')) {
            slide.one('img').fire('refresh');
          }
        });
      }, Y.config.win, this);


    },


    change: function(params) {

      // Store some parameters
      params = Y.merge(params, {
        slides: this.gallery.elems.slides,
        container: this.gallery.elems.container
      });

      // Animation options
      var animOpts = {
        duration: this.options.speed,
        easing: this.options.easing,
        increment: ( params.direction ? params.direction : 'fwd' )
      };

      var node;
      var animation;

      // If there's something to animate out
      if( params.fromIndex != params.toIndex && Y.Lang.isNumber(params.fromIndex) ) {
        node = params.slides.item(params.fromIndex);
        animation = this.transition.animOut( Y.merge(animOpts, {node: node}) );
        animation.run();
      }

      // If there's something to animate in
      if( Y.Lang.isNumber(params.toIndex) ) {
        node = params.slides.item(params.toIndex);
        animation = this.transition.animIn( Y.merge(animOpts, {node: node}) );
        animation.run();
      }

    }

  });

  /*
   * Stacked Gallery Transitions
   * This should probably be re-written
   */
  Y.Squarespace.StackedGalleryTransitions = Y.Squarespace.StackedGalleryTransitions || {};

  /*
   * The base definition
   * This handles setting the transitions direction.
   */
  Y.Squarespace.StackedGalleryTransitions.base = Class.create({

    setup: function( $gallery, $slides ) {},

    animIn: function( animOpts ) {

      if( this.animInTransition ) { this.animInTransition.cancel(); }

      this.animInTransition = new this.transition(animOpts);
      this.animInTransition.set('direction', 'in');

      return this.animInTransition;

    },

    animOut: function( animOpts ) {

      if( this.animOutTransition ) { this.animOutTransition.cancel(); }

      this.animOutTransition = new this.transition(animOpts);
      this.animOutTransition.set('direction', 'out');

      return this.animOutTransition;

    }

  });

  /*
   * Stacked Gallery Design Fade
   */
  Y.Squarespace.StackedGalleryTransitions.fade = Y.Squarespace.StackedGalleryTransitions.base.extend({

    setup: function( $gallery, $slides ) {
      $slides.setStyles({
        'opacity': 0
      });
    },

    transition: Y.Squarespace.GalleryTransitions.fade,

    animIn: function( animOpts ) {
      this.superclass.animIn.call( this, animOpts );
      this.animInTransition.get('node').setStyle('zIndex', 101);

      return this.animInTransition;
    },

    animOut: function( animOpts ) {
      this.superclass.animOut.call( this, animOpts );

      // this.animOutTransition.set('direction', 'none');
      this.animOutTransition.get('node').setStyle('zIndex', 100);
      // this.animOutTransition.anim.on('end', function() {
      //   this.get('node').setStyle('opacity', '0');
      // }, this.animOutTransition);
      this.animOutTransition.get('node').anim({
        opacity: 0
      }).run();

      return this.animOutTransition;
    }

  });

  /*
   * Stacked Gallery Design Scroll Horizontal
   */
  Y.Squarespace.StackedGalleryTransitions.scrollHorz = Y.Squarespace.StackedGalleryTransitions.base.extend({

    transition: Y.Squarespace.GalleryTransitions.scroll,

    setup: function( $container, $slides ) {

      $slides.setStyles({
        'left': $container.get('offsetWidth')
      });

    },

    animIn: function( animOpts ) {
      this.superclass.animIn.call( this, animOpts );

      return this.animInTransition;
    },

    animOut: function( animOpts ) {
      this.superclass.animOut.call( this, animOpts );

      return this.animOutTransition;
    }

  });

  /*
   * Stacked Gallery Design Scroll Vertical
   */
   Y.Squarespace.StackedGalleryTransitions.scrollVert = Y.Squarespace.StackedGalleryTransitions.base.extend({

     transition: Y.Squarespace.GalleryTransitions.scroll,

     setup: function( $container, $slides ) {

       $slides.setStyles({
         'top': $container.get('offsetHeight')
       });

     },

     animIn: function( animOpts ) {
       this.superclass.animIn.call( this, animOpts );
       this.animInTransition.set('movement', 'vertical');

       return this.animInTransition;
     },

     animOut: function( animOpts ) {
       this.superclass.animOut.call( this, animOpts );
       this.animOutTransition.set('movement', 'vertical');

       return this.animOutTransition;
     }

   });


  Y.Squarespace.StackedGalleryTransitions.puff = Y.Squarespace.StackedGalleryTransitions.base.extend({

    transition: Y.Squarespace.GalleryTransitions.puff,

    setup: function( $container, $slides ) {

      $slides.setStyles({
        'opacity': 0
      });

      $container.setStyles({
        'overflow': 'visible'
//        '-webkit-transform': 'translateZ(0)'
      });

    }

  });

  Y.Squarespace.StackedGalleryTransitions.flip = Y.Squarespace.StackedGalleryTransitions.base.extend({

    transition: Y.Squarespace.GalleryTransitions.flip

  });

}, '1.0', { requires: ['anim', 'squarespace-gallery', 'squarespace-gallery-transitions'] });


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/template-helpers.js
// ----------------------------------------------------------------------------------------

/*
* Template Helpers
* A universal list of template helpers
*/

YUI.add('squarespace-template-helpers', function(Y) {

  var TemplateContextUtils = {
    get: function(context, field) {
      if (typeof(context.get) === "function") {
        return context.get(field);
      } else {
        return context[field];
      }
    }
  };

  var FORMATTERS = {
    'html': Y.Squarespace.Escaping.escapeForHtml,
    'htmltag': Y.Squarespace.Escaping.escapeForHtmlTag,
    'htmlattr': Y.Squarespace.Escaping.escapeForHtmlTag,

    'str': function(s) {
      if (s === null || typeof(s) === 'undefined') { return ''; }
      try {
        return s.toString();
      }
      catch (e) {
        return "[JSONT: Can't format variable as string (typeof: " + typeof(s) + ").]";
      }
    },

    'raw': function(x) {
      return x;
    },

    'safe': function(x) {
      if (!x) return '';
      return x.replace(/<.*?>/g, '');
    },

    'json': function(x) {
      return Y.JSON.stringify(x).replace(/<\/script>/g, '</scr"+"ipt>');
    },

    'json-pretty': function(x) {
      return Y.JSON.stringify(x, null, 2).replace(/<\/script>/g, '</scr"+"ipt>');
    },

    'smartypants': function(x) {
      // Change straight quotes to curly and double hyphens to em-dashes.
        x = x.replace(/(^|[-\u2014\s(\["])'/g, "$1\u2018");
        x = x.replace(/'/g, "\u2019");
        x = x.replace(/(^|[-\u2014/\[(\u2018\s])"/g, "$1\u201c");
        x = x.replace(/"/g, "\u201d");
        x = x.replace(/--/g, "\u2014");
        return x;
    },

    'slugify': function(txt) {
      return (!txt ? '' : txt.replace(/[^\-a-zA-Z0-9\s]+/ig, '').replace(/\s/g, '-').toLowerCase());
    },

    'url-encode':  function(str) {
      return encodeURIComponent(str);
    },

    'activate-twitter-links': function(text) {

      var LINKS_REGEX  = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      var TWEETS_REGEX = /(^| )@([a-zA-Z0-9_]+)/ig;
      var HASHTAG_REGEX = /(^| )#([a-zA-Z0-9_]+)/ig;

      return text.replace(LINKS_REGEX, "<a target=\"new\" href=\"$1\">$1</a>")
                 .replace(TWEETS_REGEX, "$1<a target=\"new\" href=\"http://www.twitter.com/$2/\">@$2</a>")
                 .replace(HASHTAG_REGEX, function(match) {
                   return '<a target="new" href="http://www.twitter.com/search/' + encodeURIComponent(match) +'">' + match + '</a>';
                 });

    },

    'count': function count (x) {
      var ret = x.length;
      if (ret == null && typeof x === 'object') {
        ret = 0;
        for (i in x) { if (Object.prototype.hasOwnProperty.call(x, i)) { ret++; } }
      }
      return ret || 0;
    },

    'audio-player': function(item) {
      return "<script>Y.use('squarespace-audio-player-frontend');</script>" +
             "<div class=\"squarespace-audio-player\" data-audio-asset-url=\"" + item.audioAssetUrl + "\" data-item-id=\"" + item.id + "\" id=\"audio-player-" + item.id + "\"></div>";
    },

    'social-button': function(item, context) {
      var website = context._LookUpStack('website');

      // To make this work with gallery collections, check the 'mainImageId' field which is only present on collections.
      var mainImageId = (item.systemDataId || item.mainImageId || "");
      var assetUrl = (item.assetUrl || (item.mainImage ? item.mainImage.assetUrl : "") || "");
      if (website && website.shareButtonOptions && Object.keys(website.shareButtonOptions).length !== 0) {
        return "<script>Y.use('squarespace-social-buttons');</script><div class=\"squarespace-social-buttons button-style\" data-system-data-id=\"" + mainImageId + "\" data-asset-url=\"" + assetUrl + "\" data-record-type=\"" + item.recordType +"\" data-full-url=\"" + item.fullUrl + "\" data-title=\"" + Y.Squarespace.Escaping.escapeForHtmlTag(item.title) +"\"></div>";
      }
    },

    'social-button-inline': function(item, context) {
      var website = context._LookUpStack('website');

      // To make this work with gallery collections, check the 'mainImageId' field which is only present on collections.
      var mainImageId = (item.systemDataId || item.mainImageId || "");
      var assetUrl = (item.assetUrl || (item.mainImage ? item.mainImage.assetUrl : "") || "");
      if (website && website.shareButtonOptions && Object.keys(website.shareButtonOptions).length !== 0) {
        return "<script>Y.use('squarespace-social-buttons');</script><span class=\"squarespace-social-buttons inline-style\" data-system-data-id=\"" + mainImageId + "\" data-asset-url=\"" + assetUrl + "\" data-record-type=\"" + item.recordType +"\" data-full-url=\"" + item.fullUrl + "\" data-title=\"" + Y.Squarespace.Escaping.escapeForHtmlTag(item.title) +"\"></span>";
      }
    },

    'twitter-follow-button': function(connectedAccount) {
      // If the connected account is old and doesn't have a userName set,
      // try to use the end of their profileUrl. This should be https://twitter.com/RyanCGee
      // for example.
      var userName = connectedAccount.userName || connectedAccount.profileUrl.split('/').pop();

      return "<script>Y.use('squarespace-follow-buttons', function(Y) { Y.on('domready', function() { Y.Squarespace.FollowButtonUtils.renderAll(); }); });</script><div class=\"squarespace-follow-button\" data-username=\"" + userName + "\"></div>";
    },

    'comments': function(item) {
      return "<div class=\"squarespace-comments\" id=\"comments-" + item.id + "\"></div>";
    },

    'comment-link': function(item, context) {
      var settings = context._LookUpStack('websiteSettings');
      if(settings && settings.disqusShortname) {
        return '<a href="' + item.fullUrl + '" class="sqs-comment-link sqs-disqus-comment-link" data-id="' + item.id + '"></a>';
      }
        return '<a href="' + item.fullUrl + '#comments-' + item.id + '" class="sqs-comment-link" data-id="' + item.id + '">' +
                 (item.publicCommentCount === 0 ? 'No' : item.publicCommentCount) + ' Comment' + (item.publicCommentCount === 1 ? '' : 's') +
               '</a>';
    },

    'like-button': function(item, context) {
      var settings = context._LookUpStack('websiteSettings');
      if (settings && settings.simpleLikingEnabled) {
        return '<span class="sqs-simple-like" data-item-id="' + item.id + '" data-like-count="' + item.likeCount + '">' +
            '<span class="like-icon"></span>' +
            '<span class="like-count"></span>' +
          '</span>';
      }
    },

    'comment-count': function(item) {
      return (item.publicCommentCount === 0 ? 'No' : item.publicCommentCount) + ' Comment' + (item.publicCommentCount === 1 ? '' : 's');
    },

    'image-meta': function(x) {
      if (!x) {
        return;
      }
      var focalPoint = '0.5,0.5';
      if (x.mediaFocalPoint) {
        focalPoint = x.mediaFocalPoint.x + ',' + x.mediaFocalPoint.y;
      }

      // NOTE: WHEN WE GET NODE WORKED OUT, WE SHOULD GIVE THIS A SHOT.
      // IT SOLVES A LOT OF BROWSER ISSUES
      // -naz
      // var canvas = document.createElement('canvas');
      // canvas.width = x.originalSize.split('x')[0];
      // canvas.width = x.originalSize.split('x')[1];
      // var src = canvas.toDataURL();
      //
      // return "src="' + src + '" .....

      // ALT text = title || description || filename (any of these could be undefined)
      var alt;
      if (x.title && x.title.length > 0) {
        alt = x.title;
      }
      if (!alt && x.body && x.body.length > 0) {
        alt = x.body.replace(/<(?:.|\n)*?>/gm, ''); // strip html
      }
      if (!alt && x.filename && x.filename.length > 0) {
        alt = x.filename;
      }
      if (alt) {
        alt = Y.Squarespace.Escaping.escapeForHtmlTag(alt);
      }
      return 'data-image="' + x.assetUrl + '" data-src="' + x.assetUrl + '" data-image-dimensions="' + (x.originalSize || '') + '" data-image-focal-point="' + focalPoint + '" alt="' +  alt +'" ';
    },

    'height': function(x) {
      var wh = x.split("x");
      if (wh.length != 2) { return "Invalid source parameter.  Pass in 'originalSize'."; }

      var width = parseInt(wh[0], 10);
      var height = parseInt(wh[1], 10);

      return height;
    },

    'width': function(x) {
      var wh = x.split("x");
      if (wh.length != 2) { return "Invalid source parameter.  Pass in 'originalSize'."; }

      var width = parseInt(wh[0], 10);
      var height = parseInt(wh[1], 10);

      return width;
    },

    // Deprecated, but still in use by a couple dev platform commerce customers.
    // Please use hyphenated formatter below.
    'moneyFormat' : function(cents) {
      return Y.Squarespace.Commerce.moneyFormat(cents);
    },

    'money-format': function(cents) {
      return Y.Squarespace.Commerce.moneyFormat(cents);
    },

    'google-calendar-url' : function(x) {
      var url = "http://www.google.com/calendar/event?action=TEMPLATE";
      var formatStr = '%Y%m%dT%H%M%SZ';

      // hacky way to show UTC time since the format() does not take a display timezone
      var startDate = new Date(x.startDate);
      startDate.setHours(startDate.getHours() + startDate.getTimezoneOffset() / 60);
      var start = Y.DataType.Date.format(startDate, { format: formatStr });

      var endDate = new Date(x.endDate);
      endDate.setHours(endDate.getHours() + endDate.getTimezoneOffset() / 60);
      var end = Y.DataType.Date.format(endDate, { format: formatStr });

      var location;
      if (x.location) {
        location = x.location.addressLine1 + ", " + x.location.addressLine2 + ", " + x.location.addressCountry;
      }

      url += "&text=" + encodeURI(x.title);
      url += "&dates=" + start + "/" + end;
      if (location) {
        url += '&location=' + location;
      }
      return url;
    },

    'AbsUrl': function(value, context) {
      return TemplateContextUtils.get('base-url') + '/' + value;
    },

    'item-classes': function(value, context) {

      if (context.hash) { // sign its handlebars
        context = this;
      }

      var classes = ['hentry'];

      var promotedBlockType = TemplateContextUtils.get(context, 'promotedBlockType');
      if (!!promotedBlockType) {
        classes.push('promoted');
        classes.push(FORMATTERS['slugify']('promoted-block-' + promotedBlockType));
      }

      var categories = TemplateContextUtils.get(context, 'categories');
      if (!!categories) {
        for (var i = 0; i < categories.length; i++) {
          classes.push(FORMATTERS['slugify']('category-' + categories[i]));
        }
      }

      var tags = TemplateContextUtils.get(context, 'tags');
      if (!!tags) {
        for (var j = 0; j < tags.length; j++) {
          classes.push(FORMATTERS['slugify']('tag-' + tags[j]));
        }
      }

      var author = TemplateContextUtils.get(context, 'author');
      if (!!author && !!author.displayName) {
        classes.push(FORMATTERS['slugify']('author-' + author.displayName));
      }

      classes.push('post-type-' + TemplateContextUtils.get(context, 'recordTypeLabel'));

      classes.push('article-index-' + TemplateContextUtils.get(context, '@index'));

      if (TemplateContextUtils.get(context, 'starred')) {
        classes.push('featured');
      }

      // product classes
      if (value.recordType === Y.Squarespace.ContentConstants.STORE_ITEM) {

        if (Y.Squarespace.Commerce.onSale(value)) {
          classes.push('on-sale');
        }

        if (value.payWhatYouWant) {
          classes.push('pay-what-you-want');
        }
      }

      return classes.join(' ');
    },

    'round': function(value, context, args) {
      return Math.round(parseFloat(value));
    },

    'iter': function(context) {
      return TemplateContextUtils.get(context, '@index');
    },

    // COMMERCE FORMATTERS
    'product-status': function(item) {
      if (Y.Squarespace.Commerce.soldOut(item)) {
        return '<div class="product-mark sold-out">sold out</div>';
      } else if (Y.Squarespace.Commerce.onSale(item)) {
        return '<div class="product-mark sale">sale</div>';
      }
    },

    'money-string': function(value) {
      return Y.Squarespace.Commerce.moneyString(value);
    },

    'product-price': function(item) {
      return '<div class="product-price">' + Y.Squarespace.Commerce.priceString(item) + '</div>';
    },

    'product-checkout': function(item) {
      return Y.Squarespace.Commerce.variantsSelectString(item) +
             Y.Squarespace.Commerce.quantityInputString(item) +
             Y.Squarespace.Commerce.payWhatYouWantInputString(item) +
             Y.Squarespace.Commerce.addToCartBtnString(item);
    },

    'from-price': function(item) {
      return Y.Squarespace.Commerce.fromPrice(item);
    },

    'normal-price': function(item) {
      return Y.Squarespace.Commerce.normalPrice(item);
    },

    'sale-price': function(item) {
      return Y.Squarespace.Commerce.salePrice(item);
    },

    'coupon-descriptor': function(coupon) {
      return Y.Squarespace.Commerce.couponDescriptor(coupon);
    },

    'variant-descriptor': function(variant) {
      return Y.Squarespace.Commerce.variantFormat(variant);
    },

    'variants-attributes' : function(item) {
      if (item.variants === undefined || item.variants.length <= 1)
        return '';

      return Y.Squarespace.Commerce.variantFormatAttributes(item.variants[0]);
    },

    // Generates the dropdown for selecting variants.
    'variants-select' : function(item) {
      return Y.Squarespace.Commerce.variantsSelectString(item);
    },

    'quantity-input': function(item) {
      return Y.Squarespace.Commerce.quantityInputString(item);
    },

    'pay-what-you-want-input': function(item) {
      return Y.Squarespace.Commerce.payWhatYouWantInputString(item);
    },

    'add-to-cart-btn' : function(item) {
      return Y.Squarespace.Commerce.addToCartBtnString(item);
    },

    'color-weight': function(hexcolor) {
      if (hexcolor && hexcolor.length > 0 && hexcolor.length <= 7) {
        hexcolor = hexcolor.replace('#', '');
        return ((parseInt(hexcolor, 16) > 0xffffff/2) ? 'light' : 'dark');
      } else {
        return '';
      }
    },

    'summary-form-field': function(item) {
      return Y.Squarespace.Commerce.summaryFormFieldString(item);
    }
  };


  /*
   * PREDICATES
   */

  // NOTE: PARAMETERIC PREDICATES REQUIRES A "?" at the end of the predicate.

  var PARAMETRIC_PREDICATES = [
    {
      name: 'collectionTypeNameEquals?',
      func: function(value, context, pred_args) {
        return context.get('typeName') == pred_args[0];
      }
    }
  ];

  var PREDICATES = {

    'has-multiple?': function(x) {
      return (x.length > 1);
    },

    'main-image?': function(x) {
      return !!x.mainImageId || !!x.systemDataId;
    },

    'child-images?': function(x) {
      if (!!x.items && x.items.length > 0) {
        var firstChild = x.items[0];

        if (!!firstChild.mainImageId || !!firstChild.systemDataId) {
          return true;
        }
      }

      return false;
    },

    'location?': function(x) {
      return (x.location && x.location.mapLat && x.location.mapLng);
    },

    'excerpt?': function(x) {
      var stripTagsRE = /<[^>]+>/g
      var wsAll = /^[\u200b\s]*$/;
      var excerptText = (x.excerpt && (x.excerpt.html || x.excerpt)) || '';
      return !wsAll.test(excerptText.replace(stripTagsRE, ''));
    },

    'comments?': function(x, context) {
      var settings = context._LookUpStack('websiteSettings');
      var commentsOn = x.commentState === 1;

      // If comments are disabled for a single post, we still have
      // to load comments JS in the case where the post has comments
      // visible. The thread is just read-only.
      if (!commentsOn && x.publicCommentCount > 0) {
        commentsOn = true;
      }

      // If the owner has disabled comments across their site,
      // we render and load nothing.
      if (settings && !settings.commentsEnabled) {
        commentsOn = false;
      }

      return commentsOn;
    },

    'collection?': function(x) {
      return x.collection;
    },

    'collection-page?': function(x) {
      return (x.collection && x.collection.type == Y.Squarespace.CollectionTypes.PAGE);
    },

    'passthrough?': function(x) {
      return x.passthrough && x.sourceUrl && x.sourceUrl !== '';
    },

    'event?': function(x) {
      return x.recordType == Y.Squarespace.ContentConstants.EVENT;
    },

    'same-day?': function(x, context) {
      try {
        var s = new TimezoneJS.Date(x.startDate, context.get('website.timeZone'));
        var e = new TimezoneJS.Date(x.endDate, context.get('website.timeZone'));
        return (s.getYear() == e.getYear()) && (s.getMonth() == e.getMonth()) && (s.getDate() == e.getDate());
      } catch (ex) {
        return false;
      }
    },

    'external-link?': function(x) {
      return !!x.externalLink;
    },

    'folder?': function(x) {
      return x.collection && x.collection.folder;
    },

    'index?': function(x) {
      return x.collection && x.collection.folder && x.collection.folderBehavior == Y.Squarespace.FolderBehavior.INDEX;
    },

    'singular?': function(x) { return  x === 1; },

    'plural?': function(x) { return x !== 1; },

    'disqus?': function(x, context) {
      var settings = context._LookUpStack('websiteSettings');
      return settings && settings.disqusShortname;
    },

    'serviceNameEmail?': function(x, context) {
      return x.serviceName === "email";
    },

    'debug?': function(x, context) {
      try {
        return context.get('debug');
      } catch(err) {
        if (err.name == 'UndefinedVariable') {
          return false;
        } else {
          throw err;
        }
      }
    },
    'calendar-view?': function(x, context) {
      var calendarView = context._LookUpStack('calendarView');
      return (calendarView === true); // want to return clean true/false no undefined stuff
    },

    // COMMERCE PREDICATES
    'has-variants?': function(item) {
      return Y.Squarespace.Commerce.hasVariants(item);
    },

    'varied-prices?': function(item) {
      return Y.Squarespace.Commerce.variedPrices(item);
    },

    'on-sale?': function(item) {
      return Y.Squarespace.Commerce.onSale(item);
    },

    'sold-out?': function(item) {
      return Y.Squarespace.Commerce.soldOut(item);
    }
  };


  var PREFIX_FORMATTERS = [
    {
      name: 'output',
      func: function(value, context, args) {
        return args.join(' ');
      }
    },

    {
      name: 'video',
      func: function(x, context, args) {
        var oembed = x.oembed || {}; // this is so that this doesn't blow up on the server side, and the user / developer gets a nice message. [SIX-6414]
        var assetUrl = x.assetUrl;
        var mediaFocalPoint = x.mediaFocalPoint;

        var loadFalse = false;
        var useColorData = false;
        var colorData = x.colorData;

        if (args) {
          for (var i = 0; i < args.length; i++) {
            var arg = args[i];

            if (arg === 'load-false') {
              loadFalse = true;
            } else if (arg === 'color-data') {
              useColorData = true;

            }
          }
        }

        // opening div tag
        var returnString =
          '<div class="sqs-video-wrapper" ' + (loadFalse ? 'data-load="false" ' : '') +
            'data-html="' + Y.Squarespace.Escaping.escapeForHtmlTag(oembed.html) + '" ' +
            'data-provider-name="' + oembed.providerName + '">';

            if (x.overlay) {
              // openining overlay tag
              var overlayString = '<div class="sqs-video-overlay';

                if (!!x.mainImageId || !!x.systemDataId) {
                  overlayString += '" style="opacity: 0;">';

                  // opening overlay image
                  overlayString +=
                    '<img ' +
                        'data-load="false" ' +
                        'data-image="' + assetUrl + '" ' +
                        'data-src="' + assetUrl + '" ' +
                        'data-image-dimensions="' + (x.originalSize || '') + '" ' +
                        'data-image-focal-point="' + (mediaFocalPoint ? mediaFocalPoint.x + ',' + mediaFocalPoint.y : '0.5,0.5') + '" ';

                  if (useColorData && colorData) {
                    overlayString +=
                        'data-color-topleft="#' + colorData.topLeftAverage + '" ' +
                        'data-color-topright="#' + colorData.topRightAverage + '" ' +
                        'data-color-bottomleft="#' + colorData.bottomLeftAverage + '" ' +
                        'data-color-bottomright="#' + colorData.bottomRightAverage + '" ' +
                        'data-color-center="#' + colorData.centerAverage + '" ';
                  }

                  overlayString +=
                    '/>';

                } else {
                  overlayString += ' no-thumb" style="opacity: 0;">';
                }

                overlayString +=
                  '<div class="sqs-video-opaque"> </div>' +
                  '<div class="sqs-video-icon"></div>';

              overlayString += '</div>';

              returnString += overlayString;
            }

        returnString += '</div>';

        return returnString;
      }
    },

    {
      /*
       * Usage: {@|image-color (position: topLeft|topRight|bottomLeft|bottomRight) (css property)}
       *
       * Examples:
       * {@|image-color}
       *    => data-color-topleft="#cfcfcf" data-color-topright="#d6d6d6" data-color-bottomleft="#cccccc" data-color-bottomright="#d4d4d4" data-color-center="#d39bad"
       * {@|image-color topLeft}
       *    => #cfcfcf
       * {@|image-color topLeft background-color}
       *    => background-color: #cfcfcf;
       */
      name: 'image-color',
      func: function(x, context, args) {
        var result = "";
        if (x.colorData) {
          if (args.length > 0) {
            var color = x['colorData'][args[0]+'Average'];
            if (color) {
              if (args.length == 2) {
                result = args[1] + ': #' + color;
              } else {
                result = '#' + color;
              }
            } else {
              result = args[0] + ' not found: valid position-- topLeft, topRight, bottomLeft, bottomRight, center';
            }
          } else {
            result = 'data-color-topleft="#' + x.colorData.topLeftAverage + '" ' +
                     'data-color-topright="#' + x.colorData.topRightAverage + '" ' +
                     'data-color-bottomleft="#' + x.colorData.bottomLeftAverage + '" ' +
                     'data-color-bottomright="#' + x.colorData.bottomRightAverage + '" ' +
                     'data-color-center="#' + x.colorData.centerAverage + '" ';
          }
        }
        return result;
      }
    },

    {
      name: 'child-image-meta',
      func: function(x, context, args) {
        var child = x.items[(args && args[0] ? args[0] : 0)];
        var focalPoint = '0.5,0.5';

        if (child.mediaFocalPoint) {
          focalPoint = child.mediaFocalPoint.x + ',' + child.mediaFocalPoint.y;
        }

        // NOTE: WHEN WE GET NODE WORKED OUT, WE SHOULD GIVE THIS A SHOT.
        // IT SOLVES A LOT OF BROWSER ISSUES
        // -naz
        // var canvas = document.createElement('canvas');
        // canvas.width = x.originalSize.split('x')[0];
        // canvas.width = x.originalSize.split('x')[1];
        // var src = canvas.toDataURL();
        //
        // return "src="' + src + '" .....

        // ALT text = title || description || filename (any of these could be undefined)
        var alt;
        if (child.title && child.title.length > 0) {
          alt = child.title;
        }
        if (!alt && child.body && child.body.length > 0) {
          alt = child.body.replace(/<(?:.|\n)*?>/gm, ''); // strip html
        }
        if (!alt && child.filename && child.filename.length > 0) {
          alt = child.filename;
        }
        if (alt) {
          alt = Y.Squarespace.Escaping.escapeForHtmlTag(alt);
        }
        return 'data-image="' + child.assetUrl + '" data-src="' + child.assetUrl + '" data-image-dimensions="' + (child.originalSize || '') + '" data-image-focal-point="' + focalPoint + '" alt="' +  alt +'" ';
      }
    }
  ];

  /*
  * Build content items from constants
  */
  function buildContentStringCheck(type, blockType) {
    if (!!blockType) {
      return function(input) {
        return (input.recordType == type) || (input.promotedBlockType == blockType);
      };
    } else {
      return function(input) {
        return (input.recordType == type);
      };
    }
  }

  for (var type in Y.Squarespace.ContentStringConstants) {
    PREDICATES[type + '?'] = buildContentStringCheck(Y.Squarespace.ContentStringConstants[type]);
  }

  PREDICATES['external-video?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.VIDEO, 'video');
  PREDICATES['video?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.VIDEO, 'video');
  PREDICATES['image?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.IMAGE, 'image');
  PREDICATES['quote?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.QUOTE, 'quote');
  PREDICATES['link?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.LINK, 'link');
  PREDICATES['quote?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.QUOTE, 'quote');
  PREDICATES['gallery?'] = buildContentStringCheck(Y.Squarespace.ContentConstants.GALLERY, 'gallery');


  /*
   * Build promoted block type checks
   */
  function buildPromotedBlockTypeCheck(type) {
    return function(input) {
      return (input.promotedBlockType == type);
    };
  }

  var blockTypes = ['map','embed','image','code','quote','twitter','link','video','foursquare','instagram','form'];
  for (var i = 0; i < blockTypes.length; i++) {
    var blockType = blockTypes[i];
    var capitalized = blockType.charAt(0).toUpperCase() + blockType.slice(1);
    PREDICATES['promoted' + capitalized + '?'] = buildPromotedBlockTypeCheck(blockType);
  }

  /*
   * Folder behavior predicates.
   */
  // PREDICATES['index?'] = function(x) { return x.folderBehavior == Y.Squarespace.FolderBehavior.INDEX; };
  PREDICATES['redirect?'] = function(x) { return x.folderBehavior == Y.Squarespace.FolderBehavior.REDIRECT; };
  PREDICATES['clickable?'] = function(input, context, pred_args) {
    var folderBehavior = context._LookUpStack('folderBehavior');
    if (typeof(folderBehavior) === 'undefined') { return true; }
    return folderBehavior == Y.Squarespace.FolderBehavior.INDEX || folderBehavior == Y.Squarespace.FolderBehavior.REDIRECT;
  };

  function buildGalleryOptionCheck(opt, value) {
    return function(input, context, pred_args) {
      return context._LookUpStack('options')[opt] == value;
    };
  }

  for (var opt in Y.Squarespace.GalleryOptions) {
    var config = Y.Squarespace.GalleryOptions[opt];
    switch (config.type) {
      case 'select':
        for (var name in config.options) {
          var option = config.options[name];
          PREDICATES['gallery-' + opt + '-' + name + '?'] = buildGalleryOptionCheck(opt, name);
        }
      break;
      case 'boolean':
        PREDICATES['gallery-' + opt + '?'] = buildGalleryOptionCheck(opt, true);
      break;
      case 'slider':
        // do nothing
      break;
      default:
        console.log('Unknown type: ' + type + ', (opt: ' + opt + ')');
      break;
    }
  }

  PREDICATES['gallery-meta?'] = function(input, context, pred_args) {
    return context._LookUpStack('options')['controls'] || context._LookUpStack('options')['indicators'];
  };

  /*
   * Handlebar specific helpers
   */
  var HANDLEBARS_HELPERS = {
    "debug": function() {
      return function(optionalValue) {
        var response = "DEBUG:\n========================\n";
        response += JSON.stringify(this || optionalValue, null, 2);
        response += "END DEBUG:\n========================\n";

        return response;
      };
    },

    "moneyFormat": function(cents) {
      return Y.Squarespace.Commerce.moneyFormat(cents);
    }
  };


  // ------------------------------------------------------------------------
  //
  // REGISTER THE TEMPLATE HELPERS
  //
  // ------------------------------------------------------------------------

  Y.namespace('Squarespace');

  // HANDLEBAR SPECIFIC HELPERS
  Y.Squarespace.HANDLEBARS_HELPERS = HANDLEBARS_HELPERS;


  // REGISTER THE PREDICATES {.collection-type-page?} ... {.end}
  Y.Squarespace.TEMPLATE_PREDICATES = PREDICATES;
  Y.Squarespace.TEMPLATE_PARAMETRIC_PREDICATES = PARAMETRIC_PREDICATES;

  // REGISTER THE FORMATTERS {title|htmlattr}.
  Y.Squarespace.TEMPLATE_FORMATTERS = FORMATTERS;
  Y.Squarespace.TEMPLATE_PREFIX_FORMATTERS = PREFIX_FORMATTERS;

}, '1.0', { requires: [
  'squarespace-common',
  'squarespace-util',
  'squarespace-commerce-utils',
  'substitute',
  'json'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/dom-screen/dom-screen.js
// ----------------------------------------------------------------------------------------

YUI.add('dom-screen', function (Y, NAME) {

(function(Y) {

/**
 * Adds position and region management functionality to DOM.
 * @module dom
 * @submodule dom-screen
 * @for DOM
 */

var DOCUMENT_ELEMENT = 'documentElement',
    COMPAT_MODE = 'compatMode',
    POSITION = 'position',
    FIXED = 'fixed',
    RELATIVE = 'relative',
    LEFT = 'left',
    TOP = 'top',
    _BACK_COMPAT = 'BackCompat',
    MEDIUM = 'medium',
    BORDER_LEFT_WIDTH = 'borderLeftWidth',
    BORDER_TOP_WIDTH = 'borderTopWidth',
    GET_BOUNDING_CLIENT_RECT = 'getBoundingClientRect',
    GET_COMPUTED_STYLE = 'getComputedStyle',

    Y_DOM = Y.DOM,

    // TODO: how about thead/tbody/tfoot/tr?
    // TODO: does caption matter?
    RE_TABLE = /^t(?:able|d|h)$/i,

    SCROLL_NODE;

if (Y.UA.ie) {
    if (Y.config.doc[COMPAT_MODE] !== 'BackCompat') {
        SCROLL_NODE = DOCUMENT_ELEMENT;
    } else {
        SCROLL_NODE = 'body';
    }
}

Y.mix(Y_DOM, {
    /**
     * Returns the inner height of the viewport (exludes scrollbar).
     * @method winHeight
     * @return {Number} The current height of the viewport.
     */
    winHeight: function(node) {
        var h = Y_DOM._getWinSize(node).height;
        return h;
    },

    /**
     * Returns the inner width of the viewport (exludes scrollbar).
     * @method winWidth
     * @return {Number} The current width of the viewport.
     */
    winWidth: function(node) {
        var w = Y_DOM._getWinSize(node).width;
        return w;
    },

    /**
     * Document height
     * @method docHeight
     * @return {Number} The current height of the document.
     */
    docHeight:  function(node) {
        var h = Y_DOM._getDocSize(node).height;
        return Math.max(h, Y_DOM._getWinSize(node).height);
    },

    /**
     * Document width
     * @method docWidth
     * @return {Number} The current width of the document.
     */
    docWidth:  function(node) {
        var w = Y_DOM._getDocSize(node).width;
        return Math.max(w, Y_DOM._getWinSize(node).width);
    },

    /**
     * Amount page has been scroll horizontally
     * @method docScrollX
     * @return {Number} The current amount the screen is scrolled horizontally.
     */
    docScrollX: function(node, doc) {
        doc = doc || (node) ? Y_DOM._getDoc(node) : Y.config.doc; // perf optimization
        var dv = doc.defaultView,
            pageOffset = (dv) ? dv.pageXOffset : 0;
        return Math.max(doc[DOCUMENT_ELEMENT].scrollLeft, doc.body.scrollLeft, pageOffset);
    },

    /**
     * Amount page has been scroll vertically
     * @method docScrollY
     * @return {Number} The current amount the screen is scrolled vertically.
     */
    docScrollY:  function(node, doc) {
        doc = doc || (node) ? Y_DOM._getDoc(node) : Y.config.doc; // perf optimization
        var dv = doc.defaultView,
            pageOffset = (dv) ? dv.pageYOffset : 0;
        return Math.max(doc[DOCUMENT_ELEMENT].scrollTop, doc.body.scrollTop, pageOffset);
    },

    /**
     * Gets the current position of an element based on page coordinates.
     * Element must be part of the DOM tree to have page coordinates
     * (display:none or elements not appended return false).
     * @method getXY
     * @param element The target element
     * @return {Array} The XY position of the element

     TODO: test inDocument/display?
     */
    getXY: function() {
        if (Y.config.doc[DOCUMENT_ELEMENT][GET_BOUNDING_CLIENT_RECT]) {
            return function(node) {
                var xy = null,
                    scrollLeft,
                    scrollTop,
                    mode,
                    box,
                    offX,
                    offY,
                    doc,
                    win,
                    inDoc,
                    rootNode;

                if (node && node.tagName) {
                    doc = node.ownerDocument;
                    mode = doc[COMPAT_MODE];

                    if (mode !== _BACK_COMPAT) {
                        rootNode = doc[DOCUMENT_ELEMENT];
                    } else {
                        rootNode = doc.body;
                    }

                    // inline inDoc check for perf
                    if (rootNode.contains) {
                        inDoc = rootNode.contains(node);
                    } else {
                        inDoc = Y.DOM.contains(rootNode, node);
                    }

                    if (inDoc) {
                        win = doc.defaultView;

                        // inline scroll calc for perf
                        if (win && 'pageXOffset' in win) {
                            scrollLeft = win.pageXOffset;
                            scrollTop = win.pageYOffset;
                        } else {
                            scrollLeft = (SCROLL_NODE) ? doc[SCROLL_NODE].scrollLeft : Y_DOM.docScrollX(node, doc);
                            scrollTop = (SCROLL_NODE) ? doc[SCROLL_NODE].scrollTop : Y_DOM.docScrollY(node, doc);
                        }

                        if (Y.UA.ie) { // IE < 8, quirks, or compatMode
                            if (!doc.documentMode || doc.documentMode < 8 || mode === _BACK_COMPAT) {
                                offX = rootNode.clientLeft;
                                offY = rootNode.clientTop;
                            }
                        }
                        box = node[GET_BOUNDING_CLIENT_RECT]();
                        xy = [box.left, box.top];

                        if (offX || offY) {
                                xy[0] -= offX;
                                xy[1] -= offY;

                        }
                        if ((scrollTop || scrollLeft)) {
                            if (!Y.UA.ios || (Y.UA.ios >= 4.2)) {
                                xy[0] += scrollLeft;
                                xy[1] += scrollTop;
                            }

                        }
                    } else {
                        xy = Y_DOM._getOffset(node);
                    }
                }
                return xy;
            };
        } else {
            return function(node) { // manually calculate by crawling up offsetParents
                //Calculate the Top and Left border sizes (assumes pixels)
                var xy = null,
                    doc,
                    parentNode,
                    bCheck,
                    scrollTop,
                    scrollLeft;

                if (node) {
                    if (Y_DOM.inDoc(node)) {
                        xy = [node.offsetLeft, node.offsetTop];
                        doc = node.ownerDocument;
                        parentNode = node;
                        // TODO: refactor with !! or just falsey
                        bCheck = ((Y.UA.gecko || Y.UA.webkit > 519) ? true : false);

                        // TODO: worth refactoring for TOP/LEFT only?
                        while ((parentNode = parentNode.offsetParent)) {
                            xy[0] += parentNode.offsetLeft;
                            xy[1] += parentNode.offsetTop;
                            if (bCheck) {
                                xy = Y_DOM._calcBorders(parentNode, xy);
                            }
                        }

                        // account for any scrolled ancestors
                        if (Y_DOM.getStyle(node, POSITION) != FIXED) {
                            parentNode = node;

                            while ((parentNode = parentNode.parentNode)) {
                                scrollTop = parentNode.scrollTop;
                                scrollLeft = parentNode.scrollLeft;

                                //Firefox does something funky with borders when overflow is not visible.
                                if (Y.UA.gecko && (Y_DOM.getStyle(parentNode, 'overflow') !== 'visible')) {
                                        xy = Y_DOM._calcBorders(parentNode, xy);
                                }


                                if (scrollTop || scrollLeft) {
                                    xy[0] -= scrollLeft;
                                    xy[1] -= scrollTop;
                                }
                            }
                            xy[0] += Y_DOM.docScrollX(node, doc);
                            xy[1] += Y_DOM.docScrollY(node, doc);

                        } else {
                            //Fix FIXED position -- add scrollbars
                            xy[0] += Y_DOM.docScrollX(node, doc);
                            xy[1] += Y_DOM.docScrollY(node, doc);
                        }
                    } else {
                        xy = Y_DOM._getOffset(node);
                    }
                }

                return xy;
            };
        }
    }(),// NOTE: Executing for loadtime branching

    /**
    Gets the width of vertical scrollbars on overflowed containers in the body
    content.

    @method getScrollbarWidth
    @return {Number} Pixel width of a scrollbar in the current browser
    **/
    getScrollbarWidth: Y.cached(function () {
        var doc      = Y.config.doc,
            testNode = doc.createElement('div'),
            body     = doc.getElementsByTagName('body')[0],
            // 0.1 because cached doesn't support falsy refetch values
            width    = 0.1;

        if (body) {
            testNode.style.cssText = "position:absolute;visibility:hidden;overflow:scroll;width:20px;";
            testNode.appendChild(doc.createElement('p')).style.height = '1px';
            body.insertBefore(testNode, body.firstChild);
            width = testNode.offsetWidth - testNode.clientWidth;

            body.removeChild(testNode);
        }

        return width;
    }, null, 0.1),

    /**
     * Gets the current X position of an element based on page coordinates.
     * Element must be part of the DOM tree to have page coordinates
     * (display:none or elements not appended return false).
     * @method getX
     * @param element The target element
     * @return {Number} The X position of the element
     */

    getX: function(node) {
        return Y_DOM.getXY(node)[0];
    },

    /**
     * Gets the current Y position of an element based on page coordinates.
     * Element must be part of the DOM tree to have page coordinates
     * (display:none or elements not appended return false).
     * @method getY
     * @param element The target element
     * @return {Number} The Y position of the element
     */

    getY: function(node) {
        return Y_DOM.getXY(node)[1];
    },

    /**
     * Set the position of an html element in page coordinates.
     * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
     * @method setXY
     * @param element The target element
     * @param {Array} xy Contains X & Y values for new position (coordinates are page-based)
     * @param {Boolean} noRetry By default we try and set the position a second time if the first fails
     */
    setXY: function(node, xy, noRetry) {
        var setStyle = Y_DOM.setStyle,
            pos,
            delta,
            newXY,
            currentXY;

        if (node && xy) {
            pos = Y_DOM.getStyle(node, POSITION);

            delta = Y_DOM._getOffset(node);
            if (pos == 'static') { // default to relative
                pos = RELATIVE;
                setStyle(node, POSITION, pos);
            }
            currentXY = Y_DOM.getXY(node);

            if (xy[0] !== null) {
                setStyle(node, LEFT, xy[0] - currentXY[0] + delta[0] + 'px');
            }

            if (xy[1] !== null) {
                setStyle(node, TOP, xy[1] - currentXY[1] + delta[1] + 'px');
            }

            if (!noRetry) {
                newXY = Y_DOM.getXY(node);
                if (newXY[0] !== xy[0] || newXY[1] !== xy[1]) {
                    Y_DOM.setXY(node, xy, true);
                }
            }

        } else {
        }
    },

    /**
     * Set the X position of an html element in page coordinates, regardless of how the element is positioned.
     * The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
     * @method setX
     * @param element The target element
     * @param {Number} x The X values for new position (coordinates are page-based)
     */
    setX: function(node, x) {
        return Y_DOM.setXY(node, [x, null]);
    },

    /**
     * Set the Y position of an html element in page coordinates, regardless of how the element is positioned.
     * The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
     * @method setY
     * @param element The target element
     * @param {Number} y The Y values for new position (coordinates are page-based)
     */
    setY: function(node, y) {
        return Y_DOM.setXY(node, [null, y]);
    },

    /**
     * @method swapXY
     * @description Swap the xy position with another node
     * @param {Node} node The node to swap with
     * @param {Node} otherNode The other node to swap with
     * @return {Node}
     */
    swapXY: function(node, otherNode) {
        var xy = Y_DOM.getXY(node);
        Y_DOM.setXY(node, Y_DOM.getXY(otherNode));
        Y_DOM.setXY(otherNode, xy);
    },

    _calcBorders: function(node, xy2) {
        var t = parseInt(Y_DOM[GET_COMPUTED_STYLE](node, BORDER_TOP_WIDTH), 10) || 0,
            l = parseInt(Y_DOM[GET_COMPUTED_STYLE](node, BORDER_LEFT_WIDTH), 10) || 0;
        if (Y.UA.gecko) {
            if (RE_TABLE.test(node.tagName)) {
                t = 0;
                l = 0;
            }
        }
        xy2[0] += l;
        xy2[1] += t;
        return xy2;
    },

    _getWinSize: function(node, doc) {
        doc  = doc || (node) ? Y_DOM._getDoc(node) : Y.config.doc;
        var win = doc.defaultView || doc.parentWindow,
            mode = doc[COMPAT_MODE],
            h = win.innerHeight,
            w = win.innerWidth,
            root = doc[DOCUMENT_ELEMENT];

        if ( mode && !Y.UA.opera ) { // IE, Gecko
            if (mode != 'CSS1Compat') { // Quirks
                root = doc.body;
            }
            h = root.clientHeight;
            w = root.clientWidth;
        }
        return { height: h, width: w };
    },

    _getDocSize: function(node) {
        var doc = (node) ? Y_DOM._getDoc(node) : Y.config.doc,
            root = doc[DOCUMENT_ELEMENT];

        if (doc[COMPAT_MODE] != 'CSS1Compat') {
            root = doc.body;
        }

        return { height: root.scrollHeight, width: root.scrollWidth };
    }
});

})(Y);
(function(Y) {
var TOP = 'top',
    RIGHT = 'right',
    BOTTOM = 'bottom',
    LEFT = 'left',

    getOffsets = function(r1, r2) {
        var t = Math.max(r1[TOP], r2[TOP]),
            r = Math.min(r1[RIGHT], r2[RIGHT]),
            b = Math.min(r1[BOTTOM], r2[BOTTOM]),
            l = Math.max(r1[LEFT], r2[LEFT]),
            ret = {};

        ret[TOP] = t;
        ret[RIGHT] = r;
        ret[BOTTOM] = b;
        ret[LEFT] = l;
        return ret;
    },

    DOM = Y.DOM;

Y.mix(DOM, {
    /**
     * Returns an Object literal containing the following about this element: (top, right, bottom, left)
     * @for DOM
     * @method region
     * @param {HTMLElement} element The DOM element.
     * @return {Object} Object literal containing the following about this element: (top, right, bottom, left)
     */
    region: function(node) {
        var xy = DOM.getXY(node),
            ret = false;

        if (node && xy) {
            ret = DOM._getRegion(
                xy[1], // top
                xy[0] + node.offsetWidth, // right
                xy[1] + node.offsetHeight, // bottom
                xy[0] // left
            );
        }

        return ret;
    },

    /**
     * Find the intersect information for the passed nodes.
     * @method intersect
     * @for DOM
     * @param {HTMLElement} element The first element
     * @param {HTMLElement | Object} element2 The element or region to check the interect with
     * @param {Object} altRegion An object literal containing the region for the first element if we already have the data (for performance e.g. DragDrop)
     * @return {Object} Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)
     */
    intersect: function(node, node2, altRegion) {
        var r = altRegion || DOM.region(node), region = {},
            n = node2,
            off;

        if (n.tagName) {
            region = DOM.region(n);
        } else if (Y.Lang.isObject(node2)) {
            region = node2;
        } else {
            return false;
        }

        off = getOffsets(region, r);
        return {
            top: off[TOP],
            right: off[RIGHT],
            bottom: off[BOTTOM],
            left: off[LEFT],
            area: ((off[BOTTOM] - off[TOP]) * (off[RIGHT] - off[LEFT])),
            yoff: ((off[BOTTOM] - off[TOP])),
            xoff: (off[RIGHT] - off[LEFT]),
            inRegion: DOM.inRegion(node, node2, false, altRegion)
        };

    },
    /**
     * Check if any part of this node is in the passed region
     * @method inRegion
     * @for DOM
     * @param {Object} node The node to get the region from
     * @param {Object} node2 The second node to get the region from or an Object literal of the region
     * @param {Boolean} all Should all of the node be inside the region
     * @param {Object} altRegion An object literal containing the region for this node if we already have the data (for performance e.g. DragDrop)
     * @return {Boolean} True if in region, false if not.
     */
    inRegion: function(node, node2, all, altRegion) {
        var region = {},
            r = altRegion || DOM.region(node),
            n = node2,
            off;

        if (n.tagName) {
            region = DOM.region(n);
        } else if (Y.Lang.isObject(node2)) {
            region = node2;
        } else {
            return false;
        }

        if (all) {
            return (
                r[LEFT]   >= region[LEFT]   &&
                r[RIGHT]  <= region[RIGHT]  &&
                r[TOP]    >= region[TOP]    &&
                r[BOTTOM] <= region[BOTTOM]  );
        } else {
            off = getOffsets(region, r);
            if (off[BOTTOM] >= off[TOP] && off[RIGHT] >= off[LEFT]) {
                return true;
            } else {
                return false;
            }

        }
    },

    /**
     * Check if any part of this element is in the viewport
     * @method inViewportRegion
     * @for DOM
     * @param {HTMLElement} element The DOM element.
     * @param {Boolean} all Should all of the node be inside the region
     * @param {Object} altRegion An object literal containing the region for this node if we already have the data (for performance e.g. DragDrop)
     * @return {Boolean} True if in region, false if not.
     */
    inViewportRegion: function(node, all, altRegion) {
        return DOM.inRegion(node, DOM.viewportRegion(node), all, altRegion);

    },

    _getRegion: function(t, r, b, l) {
        var region = {};

        region[TOP] = region[1] = t;
        region[LEFT] = region[0] = l;
        region[BOTTOM] = b;
        region[RIGHT] = r;
        region.width = region[RIGHT] - region[LEFT];
        region.height = region[BOTTOM] - region[TOP];

        return region;
    },

    /**
     * Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)
     * @method viewportRegion
     * @for DOM
     * @return {Object} Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)
     */
    viewportRegion: function(node) {
        node = node || Y.config.doc.documentElement;
        var ret = false,
            scrollX,
            scrollY;

        if (node) {
            scrollX = DOM.docScrollX(node);
            scrollY = DOM.docScrollY(node);

            ret = DOM._getRegion(scrollY, // top
                DOM.winWidth(node) + scrollX, // right
                scrollY + DOM.winHeight(node), // bottom
                scrollX); // left
        }

        return ret;
    }
});
})(Y);


}, '3.10.1', {"requires": ["dom-base", "dom-style"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-htmlparser/widget-htmlparser.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-htmlparser', function (Y, NAME) {

/**
 * Adds HTML Parser support to the base Widget class
 *
 * @module widget
 * @submodule widget-htmlparser
 * @for Widget
 */

var Widget = Y.Widget,
    Node = Y.Node,
    Lang = Y.Lang,

    SRC_NODE = "srcNode",
    CONTENT_BOX = "contentBox";

/**
 * Object hash, defining how attribute values are to be parsed from
 * markup contained in the widget's content box. e.g.:
 * <pre>
 *   {
 *       // Set single Node references using selector syntax
 *       // (selector is run through node.one)
 *       titleNode: "span.yui-title",
 *       // Set NodeList references using selector syntax
 *       // (array indicates selector is to be run through node.all)
 *       listNodes: ["li.yui-item"],
 *       // Set other attribute types, using a parse function.
 *       // Context is set to the widget instance.
 *       label: function(contentBox) {
 *           return contentBox.one("span.title").get("innerHTML");
 *       }
 *   }
 * </pre>
 *
 * @property HTML_PARSER
 * @type Object
 * @static
 */
Widget.HTML_PARSER = {};

/**
 * The build configuration for the Widget class.
 * <p>
 * Defines the static fields which need to be aggregated,
 * when this class is used as the main class passed to
 * the <a href="Base.html#method_build">Base.build</a> method.
 * </p>
 * @property _buildCfg
 * @type Object
 * @static
 * @final
 * @private
 */
Widget._buildCfg = {
    aggregates : ["HTML_PARSER"]
};

/**
 * The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition
 *
 * @attribute srcNode
 * @type String | Node
 * @writeOnce
 */
Widget.ATTRS[SRC_NODE] = {
    value: null,
    setter: Node.one,
    getter: "_getSrcNode",
    writeOnce: true
};

Y.mix(Widget.prototype, {

    /**
     * @method _getSrcNode
     * @protected
     * @return {Node} The Node to apply HTML_PARSER to
     */
    _getSrcNode : function(val) {
        return val || this.get(CONTENT_BOX);
    },

    /**
     * @method _applyParsedConfig
     * @protected
     * @return {Object} The merged configuration literal
     */
    _applyParsedConfig : function(node, cfg, parsedCfg) {
        return (parsedCfg) ? Y.mix(cfg, parsedCfg, false) : cfg;
    },

    /**
     * Utility method used to apply the <code>HTML_PARSER</code> configuration for the
     * instance, to retrieve config data values.
     *
     * @method _applyParser
     * @protected
     * @param config {Object} User configuration object (will be populated with values from Node)
     */
    _applyParser : function(config) {

        var widget = this,
            srcNode = this._getNodeToParse(),
            schema = widget._getHtmlParser(),
            parsedConfig,
            val;

        if (schema && srcNode) {
            Y.Object.each(schema, function(v, k, o) {
                val = null;

                if (Lang.isFunction(v)) {
                    val = v.call(widget, srcNode);
                } else {
                    if (Lang.isArray(v)) {
                        val = srcNode.all(v[0]);
                        if (val.isEmpty()) {
                            val = null;
                        }
                    } else {
                        val = srcNode.one(v);
                    }
                }

                if (val !== null && val !== undefined) {
                    parsedConfig = parsedConfig || {};
                    parsedConfig[k] = val;
                }
            });
        }
        config = widget._applyParsedConfig(srcNode, config, parsedConfig);
    },

    /**
     * Determines whether we have a node reference which we should try and parse.
     *
     * The current implementation does not parse nodes generated from CONTENT_TEMPLATE,
     * only explicitly set srcNode, or contentBox attributes.
     *
     * @method _getNodeToParse
     * @return {Node} The node reference to apply HTML_PARSER to.
     * @private
     */
    _getNodeToParse : function() {
        var srcNode = this.get("srcNode");
        return (!this._cbFromTemplate) ? srcNode : null;
    },

    /**
     * Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER
     * definitions across the class hierarchy.
     *
     * @private
     * @method _getHtmlParser
     * @return {Object} HTML_PARSER definition for this instance
     */
    _getHtmlParser : function() {
        // Removed caching for kweight. This is a private method
        // and only called once so don't need to cache HTML_PARSER
        var classes = this._getClasses(),
            parser = {},
            i, p;

        for (i = classes.length - 1; i >= 0; i--) {
            p = classes[i].HTML_PARSER;
            if (p) {
                Y.mix(parser, p, true);
            }
        }
        return parser;
    }
});


}, '3.10.1', {"requires": ["widget-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/json-stringify/json-stringify.js
// ----------------------------------------------------------------------------------------

YUI.add('json-stringify', function (Y, NAME) {

/**
 * Provides Y.JSON.stringify method for converting objects to JSON strings.
 *
 * @module json
 * @submodule json-stringify
 * @for JSON
 * @static
 */
var COLON     = ':',
    _JSON     = Y.config.global.JSON;

Y.mix(Y.namespace('JSON'), {
    /**
     * Serializes a Date instance as a UTC date string.  Used internally by
     * stringify.  Override this method if you need Dates serialized in a
     * different format.
     *
     * @method dateToString
     * @param d {Date} The Date to serialize
     * @return {String} stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ
     * @deprecated Use a replacer function
     * @static
     */
    dateToString: function (d) {
        function _zeroPad(v) {
            return v < 10 ? '0' + v : v;
        }

        return d.getUTCFullYear()           + '-' +
              _zeroPad(d.getUTCMonth() + 1) + '-' +
              _zeroPad(d.getUTCDate())      + 'T' +
              _zeroPad(d.getUTCHours())     + COLON +
              _zeroPad(d.getUTCMinutes())   + COLON +
              _zeroPad(d.getUTCSeconds())   + 'Z';
    },

    /**
     * <p>Converts an arbitrary value to a JSON string representation.</p>
     *
     * <p>Objects with cyclical references will trigger an exception.</p>
     *
     * <p>If a whitelist is provided, only matching object keys will be
     * included.  Alternately, a replacer function may be passed as the
     * second parameter.  This function is executed on every value in the
     * input, and its return value will be used in place of the original value.
     * This is useful to serialize specialized objects or class instances.</p>
     *
     * <p>If a positive integer or non-empty string is passed as the third
     * parameter, the output will be formatted with carriage returns and
     * indentation for readability.  If a String is passed (such as "\t") it
     * will be used once for each indentation level.  If a number is passed,
     * that number of spaces will be used.</p>
     *
     * @method stringify
     * @param o {MIXED} any arbitrary value to convert to JSON string
     * @param w {Array|Function} (optional) whitelist of acceptable object
     *                  keys to include, or a replacer function to modify the
     *                  raw value before serialization
     * @param ind {Number|String} (optional) indentation character or depth of
     *                  spaces to format the output.
     * @return {string} JSON string representation of the input
     * @static
     */
    stringify: function () {
        return _JSON.stringify.apply(_JSON, arguments);
    },

    /**
     * <p>Number of occurrences of a special character within a single call to
     * stringify that should trigger promotion of that character to a dedicated
     * preprocess step for future calls.  This is only used in environments
     * that don't support native JSON, or when useNativeJSONStringify is set to
     * false.</p>
     *
     * <p>So, if set to 50 and an object is passed to stringify that includes
     * strings containing the special character \x07 more than 50 times,
     * subsequent calls to stringify will process object strings through a
     * faster serialization path for \x07 before using the generic, slower,
     * replacement process for all special characters.</p>
     *
     * <p>To prime the preprocessor cache, set this value to 1, then call
     * <code>Y.JSON.stringify("<em>(all special characters to
     * cache)</em>");</code>, then return this setting to a more conservative
     * value.</p>
     *
     * <p>Special characters \ " \b \t \n \f \r are already cached.</p>
     *
     * @property charCacheThreshold
     * @static
     * @default 100
     * @type {Number}
     */
    charCacheThreshold: 100
});

}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-thirdparty/modernizr/modernizr.js
// ----------------------------------------------------------------------------------------

/*
 * Modernizr v1.6
 * http://www.modernizr.com
 *
 * Developed by:
 * - Faruk Ates  http://farukat.es/
 * - Paul Irish  http://paulirish.com/
 *
 * Copyright (c) 2009-2010
 * Dual-licensed under the BSD or MIT licenses.
 * http://www.modernizr.com/license/
 */
window.Modernizr=function(i,e,u){function s(a,b){return(""+a).indexOf(b)!==-1}function D(a,b){for(var c in a)if(j[a[c]]!==u&&(!b||b(a[c],E)))return true}function n(a,b){var c=a.charAt(0).toUpperCase()+a.substr(1);c=(a+" "+F.join(c+" ")+c).split(" ");return!!D(c,b)}function S(){f.input=function(a){for(var b=0,c=a.length;b<c;b++)L[a[b]]=!!(a[b]in h);return L}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" "));f.inputtypes=function(a){for(var b=0,c,k=a.length;b<
k;b++){h.setAttribute("type",a[b]);if(c=h.type!=="text"){h.value=M;if(/^range$/.test(h.type)&&h.style.WebkitAppearance!==u){l.appendChild(h);c=e.defaultView;c=c.getComputedStyle&&c.getComputedStyle(h,null).WebkitAppearance!=="textfield"&&h.offsetHeight!==0;l.removeChild(h)}else/^(search|tel)$/.test(h.type)||(c=/^(url|email)$/.test(h.type)?h.checkValidity&&h.checkValidity()===false:h.value!=M)}N[a[b]]=!!c}return N}("search tel url email datetime date month week time datetime-local number range color".split(" "))}
var f={},l=e.documentElement,E=e.createElement("modernizr"),j=E.style,h=e.createElement("input"),M=":)",O=Object.prototype.toString,q=" -webkit- -moz- -o- -ms- -khtml- ".split(" "),F="Webkit Moz O ms Khtml".split(" "),v={svg:"http://www.w3.org/2000/svg"},d={},N={},L={},P=[],w,Q=function(a){var b=document.createElement("style"),c=e.createElement("div");b.textContent=a+"{#modernizr{height:3px}}";(e.head||e.getElementsByTagName("head")[0]).appendChild(b);c.id="modernizr";l.appendChild(c);a=c.offsetHeight===
3;b.parentNode.removeChild(b);c.parentNode.removeChild(c);return!!a},o=function(){var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return function(b,c){c=c||document.createElement(a[b]||"div");b="on"+b;var k=b in c;if(!k){c.setAttribute||(c=document.createElement("div"));if(c.setAttribute&&c.removeAttribute){c.setAttribute(b,"");k=typeof c[b]=="function";if(typeof c[b]!="undefined")c[b]=u;c.removeAttribute(b)}}return k}}(),G={}.hasOwnProperty,R;R=
typeof G!=="undefined"&&typeof G.call!=="undefined"?function(a,b){return G.call(a,b)}:function(a,b){return b in a&&typeof a.constructor.prototype[b]==="undefined"};d.flexbox=function(){var a=e.createElement("div"),b=e.createElement("div");(function(k,g,r,x){g+=":";k.style.cssText=(g+q.join(r+";"+g)).slice(0,-g.length)+(x||"")})(a,"display","box","width:42px;padding:0;");b.style.cssText=q.join("box-flex:1;")+"width:10px;";a.appendChild(b);l.appendChild(a);var c=b.offsetWidth===42;a.removeChild(b);
l.removeChild(a);return c};d.canvas=function(){var a=e.createElement("canvas");return!!(a.getContext&&a.getContext("2d"))};d.canvastext=function(){return!!(f.canvas&&typeof e.createElement("canvas").getContext("2d").fillText=="function")};d.webgl=function(){var a=e.createElement("canvas");try{if(a.getContext("webgl"))return true}catch(b){}try{if(a.getContext("experimental-webgl"))return true}catch(c){}return false};d.touch=function(){return"ontouchstart"in i||Q("@media ("+q.join("touch-enabled),(")+
"modernizr)")};d.geolocation=function(){return!!navigator.geolocation};d.postmessage=function(){return!!i.postMessage};d.websqldatabase=function(){return!!i.openDatabase};d.indexedDB=function(){for(var a=-1,b=F.length;++a<b;){var c=F[a].toLowerCase();if(i[c+"_indexedDB"]||i[c+"IndexedDB"])return true}return false};d.hashchange=function(){return o("hashchange",i)&&(document.documentMode===u||document.documentMode>7)};d.history=function(){return!!(i.history&&history.pushState)};d.draganddrop=function(){return o("drag")&&
o("dragstart")&&o("dragenter")&&o("dragover")&&o("dragleave")&&o("dragend")&&o("drop")};d.websockets=function(){return"WebSocket"in i};d.rgba=function(){j.cssText="background-color:rgba(150,255,150,.5)";return s(j.backgroundColor,"rgba")};d.hsla=function(){j.cssText="background-color:hsla(120,40%,100%,.5)";return s(j.backgroundColor,"rgba")||s(j.backgroundColor,"hsla")};d.multiplebgs=function(){j.cssText="background:url(//:),url(//:),red url(//:)";return/(url\s*\(.*?){3}/.test(j.background)};d.backgroundsize=
function(){return n("backgroundSize")};d.borderimage=function(){return n("borderImage")};d.borderradius=function(){return n("borderRadius","",function(a){return s(a,"orderRadius")})};d.boxshadow=function(){return n("boxShadow")};d.textshadow=function(){return e.createElement("div").style.textShadow===""};d.opacity=function(){var a=q.join("opacity:.5;")+"";j.cssText=a;return s(j.opacity,"0.5")};d.cssanimations=function(){return n("animationName")};d.csscolumns=function(){return n("columnCount")};d.cssgradients=
function(){var a=("background-image:"+q.join("gradient(linear,left top,right bottom,from(#9f9),to(white));background-image:")+q.join("linear-gradient(left top,#9f9, white);background-image:")).slice(0,-17);j.cssText=a;return s(j.backgroundImage,"gradient")};d.cssreflections=function(){return n("boxReflect")};d.csstransforms=function(){return!!D(["transformProperty","WebkitTransform","MozTransform","OTransform","msTransform"])};d.csstransforms3d=function(){var a=!!D(["perspectiveProperty","WebkitPerspective",
"MozPerspective","OPerspective","msPerspective"]);if(a)a=Q("@media ("+q.join("transform-3d),(")+"modernizr)");return a};d.csstransitions=function(){return n("transitionProperty")};d.fontface=function(){var a,b=e.head||e.getElementsByTagName("head")[0]||l,c=e.createElement("style"),k=e.implementation||{hasFeature:function(){return false}};c.type="text/css";b.insertBefore(c,b.firstChild);a=c.sheet||c.styleSheet;b=k.hasFeature("CSS2","")?function(g){if(!(a&&g))return false;var r=false;try{a.insertRule(g,
0);r=!/unknown/i.test(a.cssRules[0].cssText);a.deleteRule(a.cssRules.length-1)}catch(x){}return r}:function(g){if(!(a&&g))return false;a.cssText=g;return a.cssText.length!==0&&!/unknown/i.test(a.cssText)&&a.cssText.replace(/\r+|\n+/g,"").indexOf(g.split(" ")[0])===0};f._fontfaceready=function(g){g(f.fontface)};return b('@font-face { font-family: "font"; src: "font.ttf"; }')};d.video=function(){var a=e.createElement("video"),b=!!a.canPlayType;if(b){b=new Boolean(b);b.ogg=a.canPlayType('video/ogg; codecs="theora"');
b.h264=a.canPlayType('video/mp4; codecs="avc1.42E01E"')||a.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');b.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"')}return b};d.audio=function(){var a=e.createElement("audio"),b=!!a.canPlayType;if(b){b=new Boolean(b);b.ogg=a.canPlayType('audio/ogg; codecs="vorbis"');b.mp3=a.canPlayType("audio/mpeg;");b.wav=a.canPlayType('audio/wav; codecs="1"');b.m4a=a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")}return b};d.localstorage=function(){try{return"localStorage"in
i&&i.localStorage!==null}catch(a){return false}};d.sessionstorage=function(){try{return"sessionStorage"in i&&i.sessionStorage!==null}catch(a){return false}};d.webWorkers=function(){return!!i.Worker};d.applicationcache=function(){return!!i.applicationCache};d.svg=function(){return!!e.createElementNS&&!!e.createElementNS(v.svg,"svg").createSVGRect};d.inlinesvg=function(){var a=document.createElement("div");a.innerHTML="<svg/>";return(a.firstChild&&a.firstChild.namespaceURI)==v.svg};d.smil=function(){return!!e.createElementNS&&
/SVG/.test(O.call(e.createElementNS(v.svg,"animate")))};d.svgclippaths=function(){return!!e.createElementNS&&/SVG/.test(O.call(e.createElementNS(v.svg,"clipPath")))};for(var H in d)if(R(d,H)){w=H.toLowerCase();f[w]=d[H]();P.push((f[w]?"":"no-")+w)}f.input||S();f.crosswindowmessaging=f.postmessage;f.historymanagement=f.history;f.addTest=function(a,b){a=a.toLowerCase();if(!f[a]){b=!!b();l.className+=" "+(b?"":"no-")+a;f[a]=b;return f}};j.cssText="";E=h=null;i.attachEvent&&function(){var a=e.createElement("div");
a.innerHTML="<elem></elem>";return a.childNodes.length!==1}()&&function(a,b){function c(p){for(var m=-1;++m<r;)p.createElement(g[m])}function k(p,m){for(var I=p.length,t=-1,y,J=[];++t<I;){y=p[t];m=y.media||m;J.push(k(y.imports,m));J.push(y.cssText)}return J.join("")}var g="abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video".split("|"),r=g.length,x=RegExp("<(/*)(abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video)",
"gi"),T=RegExp("\\b(abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video)\\b(?!.*[;}])","gi"),z=b.createDocumentFragment(),A=b.documentElement,K=A.firstChild,B=b.createElement("style"),C=b.createElement("body");B.media="all";c(b);c(z);a.attachEvent("onbeforeprint",function(){for(var p=-1;++p<r;)for(var m=b.getElementsByTagName(g[p]),I=m.length,t=-1;++t<I;)if(m[t].className.indexOf("iepp_")<0)m[t].className+=" iepp_"+
g[p];K.insertBefore(B,K.firstChild);B.styleSheet.cssText=k(b.styleSheets,"all").replace(T,".iepp_$1");z.appendChild(b.body);A.appendChild(C);C.innerHTML=z.firstChild.innerHTML.replace(x,"<$1bdo")});a.attachEvent("onafterprint",function(){C.innerHTML="";A.removeChild(C);K.removeChild(B);A.appendChild(z.firstChild)})}(this,document);f._enableHTML5=true;f._version="1.6";l.className=l.className.replace(/\bno-js\b/,"")+" js";l.className+=" "+P.join(" ");return f}(this,this.document);

YUI.add('thirdparty-modernizr', function (Y) {}, "1.0", { });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/history-html5/history-html5.js
// ----------------------------------------------------------------------------------------

YUI.add('history-html5', function (Y, NAME) {

/**
 * Provides browser history management using the HTML5 history API.
 *
 * @module history
 * @submodule history-html5
 * @since 3.2.0
 */

/**
 * <p>
 * Provides browser history management using the HTML5 history API.
 * </p>
 *
 * <p>
 * When calling the <code>add()</code>, <code>addValue()</code>,
 * <code>replace()</code>, or <code>replaceValue()</code> methods on
 * <code>HistoryHTML5</code>, the following additional options are supported:
 * </p>
 *
 * <dl>
 *   <dt><strong>title (String)</strong></dt>
 *   <dd>
 *     Title to use for the new history entry. Browsers will typically display
 *     this title to the user in the detailed history window or in a dropdown
 *     menu attached to the back/forward buttons. If not specified, the title
 *     of the current document will be used.
 *   </dd>
 *
 *   <dt><strong>url (String)</strong></dt>
 *   <dd>
 *     URL to display to the user for the new history entry. This URL will be
 *     visible in the browser's address bar and will be the bookmarked URL if
 *     the user bookmarks the page. It may be a relative path ("foo/bar"), an
 *     absolute path ("/foo/bar"), or a full URL ("http://example.com/foo/bar").
 *     If you specify a full URL, the origin <i>must</i> be the same as the
 *     origin of the current page, or an error will occur. If no URL is
 *     specified, the current URL will not be changed.
 *   </dd>
 * </dl>
 *
 * @class HistoryHTML5
 * @extends HistoryBase
 * @constructor
 * @param {Object} config (optional) Configuration object.
 */

var HistoryBase     = Y.HistoryBase,
    Lang            = Y.Lang,
    win             = Y.config.win,
    useHistoryHTML5 = Y.config.useHistoryHTML5,

    SRC_POPSTATE    = 'popstate',
    SRC_REPLACE     = HistoryBase.SRC_REPLACE;

function HistoryHTML5() {
    HistoryHTML5.superclass.constructor.apply(this, arguments);
}

Y.extend(HistoryHTML5, HistoryBase, {
    // -- Initialization -------------------------------------------------------
    _init: function (config) {
        var bookmarkedState = win.history.state;

        // Treat empty state objects as `null` so they're not processed further.
        if (Y.Object.isEmpty(bookmarkedState)) {
            bookmarkedState = null;
        }

        config || (config = {});

        // If both the initial state and the bookmarked state are objects, merge
        // them (bookmarked state wins).
        if (config.initialState
                && Lang.type(config.initialState) === 'object'
                && Lang.type(bookmarkedState) === 'object') {

            this._initialState = Y.merge(config.initialState, bookmarkedState);
        } else {
            // Otherwise, the bookmarked state always wins if there is one. If
            // there isn't a bookmarked state, history-base will take care of
            // falling back to config.initialState or null.
            this._initialState = bookmarkedState;
        }

        Y.on('popstate', this._onPopState, win, this);

        HistoryHTML5.superclass._init.apply(this, arguments);
    },

    // -- Protected Methods ----------------------------------------------------

    /**
     * Overrides HistoryBase's <code>_storeState()</code> and pushes or replaces
     * a history entry using the HTML5 history API when necessary.
     *
     * @method _storeState
     * @param {String} src Source of the changes.
     * @param {Object} newState New state to store.
     * @param {Object} options Zero or more options.
     * @protected
     */
    _storeState: function (src, newState, options) {
        if (src !== SRC_POPSTATE) {
            win.history[src === SRC_REPLACE ? 'replaceState' : 'pushState'](
                newState,
                options.title || Y.config.doc.title || '',
                options.url || null
            );
        }

        HistoryHTML5.superclass._storeState.apply(this, arguments);
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
     * Handler for popstate events.
     *
     * @method _onPopState
     * @param {Event} e
     * @protected
     */
    _onPopState: function (e) {
        this._resolveChanges(SRC_POPSTATE, e._event.state || null);
    }
}, {
    // -- Public Static Properties ---------------------------------------------
    NAME: 'historyhtml5',

    /**
     * Constant used to identify state changes originating from
     * <code>popstate</code> events.
     *
     * @property SRC_POPSTATE
     * @type String
     * @static
     * @final
     */
    SRC_POPSTATE: SRC_POPSTATE
});

if (!Y.Node.DOM_EVENTS.popstate) {
    Y.Node.DOM_EVENTS.popstate = 1;
}

Y.HistoryHTML5 = HistoryHTML5;

/**
 * <p>
 * If <code>true</code>, the <code>Y.History</code> alias will always point to
 * <code>Y.HistoryHTML5</code> when the history-html5 module is loaded, even if
 * the current browser doesn't support HTML5 history.
 * </p>
 *
 * <p>
 * If <code>false</code>, the <code>Y.History</code> alias will always point to
 * <code>Y.HistoryHash</code> when the history-hash module is loaded, even if
 * the current browser supports HTML5 history.
 * </p>
 *
 * <p>
 * If neither <code>true</code> nor <code>false</code>, the
 * <code>Y.History</code> alias will point to the best available history adapter
 * that the browser supports. This is the default behavior.
 * </p>
 *
 * @property useHistoryHTML5
 * @type boolean
 * @for config
 * @since 3.2.0
 */

// HistoryHTML5 will always win over HistoryHash unless useHistoryHTML5 is false
// or HTML5 history is not supported.
if (useHistoryHTML5 === true || (useHistoryHTML5 !== false &&
        HistoryBase.html5)) {
    Y.History = HistoryHTML5;
}


}, '3.10.1', {"optional": ["json"], "requires": ["event-base", "history-base", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/io-upload-iframe/io-upload-iframe.js
// ----------------------------------------------------------------------------------------

YUI.add('io-upload-iframe', function (Y, NAME) {

/**
Extends the IO  to enable file uploads, with HTML forms
using an iframe as the transport medium.
@module io
@submodule io-upload-iframe
@for IO
**/

var w = Y.config.win,
    d = Y.config.doc,
    _std = (d.documentMode && d.documentMode >= 8),
    _d = decodeURIComponent,
    _end = Y.IO.prototype.end;

/**
 * Creates the iframe transported used in file upload
 * transactions, and binds the response event handler.
 *
 * @method _cFrame
 * @private
 * @param {Object} o Transaction object generated by _create().
 * @param {Object} c Configuration object passed to YUI.io().
 * @param {Object} io
 */
function _cFrame(o, c, io) {
    var i = Y.Node.create('<iframe src="#" id="io_iframe' + o.id + '" name="io_iframe' + o.id + '" />');
        i._node.style.position = 'absolute';
        i._node.style.top = '-1000px';
        i._node.style.left = '-1000px';
        Y.one('body').appendChild(i);
    // Bind the onload handler to the iframe to detect the file upload response.
    Y.on("load", function() { io._uploadComplete(o, c); }, '#io_iframe' + o.id);
}

/**
 * Removes the iframe transport used in the file upload
 * transaction.
 *
 * @method _dFrame
 * @private
 * @param {Number} id The transaction ID used in the iframe's creation.
 */
function _dFrame(id) {
    Y.Event.purgeElement('#io_iframe' + id, false);
    Y.one('body').removeChild(Y.one('#io_iframe' + id));
}

Y.mix(Y.IO.prototype, {
   /**
    * Parses the POST data object and creates hidden form elements
    * for each key-value, and appends them to the HTML form object.
    * @method appendData
    * @private
    * @static
    * @param {Object} f HTML form object.
    * @param {String} s The key-value POST data.
    * @return {Array} o Array of created fields.
    */
    _addData: function(f, s) {
        // Serialize an object into a key-value string using
        // querystring-stringify-simple.
        if (Y.Lang.isObject(s)) {
            s = Y.QueryString.stringify(s);
        }

        var o = [],
            m = s.split('='),
            i, l;

        for (i = 0, l = m.length - 1; i < l; i++) {
            o[i] = d.createElement('input');
            o[i].type = 'hidden';
            o[i].name = _d(m[i].substring(m[i].lastIndexOf('&') + 1));
            o[i].value = (i + 1 === l) ? _d(m[i + 1]) : _d(m[i + 1].substring(0, (m[i + 1].lastIndexOf('&'))));
            f.appendChild(o[i]);
        }

        return o;
    },

   /**
    * Removes the custom fields created to pass additional POST
    * data, along with the HTML form fields.
    * @method _removeData
    * @private
    * @static
    * @param {Object} f HTML form object.
    * @param {Object} o HTML form fields created from configuration.data.
    */
    _removeData: function(f, o) {
        var i, l;

        for (i = 0, l = o.length; i < l; i++) {
            f.removeChild(o[i]);
        }
    },

   /**
    * Sets the appropriate attributes and values to the HTML
    * form, in preparation of a file upload transaction.
    * @method _setAttrs
    * @private
    * @static
    * @param {Object} f HTML form object.
    * @param {Object} id The Transaction ID.
    * @param {Object} uri Qualified path to transaction resource.
    */
    _setAttrs: function(f, id, uri) {
        f.setAttribute('action', uri);
        f.setAttribute('method', 'POST');
        f.setAttribute('target', 'io_iframe' + id );
        f.setAttribute(Y.UA.ie && !_std ? 'encoding' : 'enctype', 'multipart/form-data');
    },

   /**
    * Reset the HTML form attributes to their original values.
    * @method _resetAttrs
    * @private
    * @static
    * @param {Object} f HTML form object.
    * @param {Object} a Object of original attributes.
    */
    _resetAttrs: function(f, a) {
        Y.Object.each(a, function(v, p) {
            if (v) {
                f.setAttribute(p, v);
            }
            else {
                f.removeAttribute(p);
            }
        });
    },

   /**
    * Starts timeout count if the configuration object
    * has a defined timeout property.
    *
    * @method _startUploadTimeout
    * @private
    * @static
    * @param {Object} o Transaction object generated by _create().
    * @param {Object} c Configuration object passed to YUI.io().
    */
    _startUploadTimeout: function(o, c) {
        var io = this;

        io._timeout[o.id] = w.setTimeout(
            function() {
                o.status = 0;
                o.statusText = 'timeout';
                io.complete(o, c);
                io.end(o, c);
            }, c.timeout);
    },

   /**
    * Clears the timeout interval started by _startUploadTimeout().
    * @method _clearUploadTimeout
    * @private
    * @static
    * @param {Number} id - Transaction ID.
    */
    _clearUploadTimeout: function(id) {
        var io = this;

        w.clearTimeout(io._timeout[id]);
        delete io._timeout[id];
    },

   /**
    * Bound to the iframe's Load event and processes
    * the response data.
    * @method _uploadComplete
    * @private
    * @static
    * @param {Object} o The transaction object
    * @param {Object} c Configuration object for the transaction.
    */
    _uploadComplete: function(o, c) {
        var io = this,
            d = Y.one('#io_iframe' + o.id).get('contentWindow.document'),
            b = d.one('body'),
            p;

        if (c.timeout) {
            io._clearUploadTimeout(o.id);
        }

        try {
            if (b) {
                // When a response Content-Type of "text/plain" is used, Firefox and Safari
                // will wrap the response string with <pre></pre>.
                p = b.one('pre:first-child');
                o.c.responseText = p ? p.get('text') : b.get('text');
            }
            else {
                o.c.responseXML = d._node;
            }
        }
        catch (e) {
            o.e = "upload failure";
        }

        io.complete(o, c);
        io.end(o, c);
        // The transaction is complete, so call _dFrame to remove
        // the event listener bound to the iframe transport, and then
        // destroy the iframe.
        w.setTimeout( function() { _dFrame(o.id); }, 0);
    },

   /**
    * Uploads HTML form data, inclusive of files/attachments,
    * using the iframe created in _create to facilitate the transaction.
    * @method _upload
    * @private
    * @static
    * @param {Object} o The transaction object
    * @param {Object} uri Qualified path to transaction resource.
    * @param {Object} c Configuration object for the transaction.
    */
    _upload: function(o, uri, c) {
        var io = this,
            f = (typeof c.form.id === 'string') ? d.getElementById(c.form.id) : c.form.id,
            // Track original HTML form attribute values.
            attr = {
                action: f.getAttribute('action'),
                target: f.getAttribute('target')
            },
            fields;

        // Initialize the HTML form properties in case they are
        // not defined in the HTML form.
        io._setAttrs(f, o.id, uri);
        if (c.data) {
            fields = io._addData(f, c.data);
        }

        // Start polling if a callback is present and the timeout
        // property has been defined.
        if (c.timeout) {
            io._startUploadTimeout(o, c);
        }

        // Start file upload.
        f.submit();
        io.start(o, c);
        if (c.data) {
            io._removeData(f, fields);
        }

        return {
            id: o.id,
            abort: function() {
                o.status = 0;
                o.statusText = 'abort';
                if (Y.one('#io_iframe' + o.id)) {
                    _dFrame(o.id);
                    io.complete(o, c);
                    io.end(o, c, attr);
                }
                else {
                    return false;
                }
            },
            isInProgress: function() {
                return Y.one('#io_iframe' + o.id) ? true : false;
            },
            io: io
        };
    },

    upload: function(o, uri, c) {
        _cFrame(o, c, this);
        return this._upload(o, uri, c);
    },

    end: function(transaction, config, attr) {
        if (config && config.form && config.form.upload) {
            var io = this;
            // Restore HTML form attributes to their original values.
            io._resetAttrs(f, attr);
        }

        return _end.call(this, transaction, config);
    }
});


}, '3.10.1', {"requires": ["io-base", "node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/pluginhost-config/pluginhost-config.js
// ----------------------------------------------------------------------------------------

YUI.add('pluginhost-config', function (Y, NAME) {

    /**
     * Adds pluginhost constructor configuration and static configuration support
     * @submodule pluginhost-config
     */

    var PluginHost = Y.Plugin.Host,
        L = Y.Lang;

    /**
     * A protected initialization method, used by the host class to initialize
     * plugin configurations passed the constructor, through the config object.
     *
     * Host objects should invoke this method at the appropriate time in their
     * construction lifecycle.
     *
     * @method _initConfigPlugins
     * @param {Object} config The configuration object passed to the constructor
     * @protected
     * @for Plugin.Host
     */
    PluginHost.prototype._initConfigPlugins = function(config) {

        // Class Configuration
        var classes = (this._getClasses) ? this._getClasses() : [this.constructor],
            plug = [],
            unplug = {},
            constructor, i, classPlug, classUnplug, pluginClassName;

        // TODO: Room for optimization. Can we apply statically/unplug in same pass?
        for (i = classes.length - 1; i >= 0; i--) {
            constructor = classes[i];

            classUnplug = constructor._UNPLUG;
            if (classUnplug) {
                // subclasses over-write
                Y.mix(unplug, classUnplug, true);
            }

            classPlug = constructor._PLUG;
            if (classPlug) {
                // subclasses over-write
                Y.mix(plug, classPlug, true);
            }
        }

        for (pluginClassName in plug) {
            if (plug.hasOwnProperty(pluginClassName)) {
                if (!unplug[pluginClassName]) {
                    this.plug(plug[pluginClassName]);
                }
            }
        }

        // User Configuration
        if (config && config.plugins) {
            this.plug(config.plugins);
        }
    };

    /**
     * Registers plugins to be instantiated at the class level (plugins
     * which should be plugged into every instance of the class by default).
     *
     * @method plug
     * @static
     *
     * @param {Function} hostClass The host class on which to register the plugins
     * @param {Function | Array} plugin Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)
     * @param {Object} config (Optional) If plugin is the plugin class, the configuration for the plugin
     * @for Plugin.Host
     */
    PluginHost.plug = function(hostClass, plugin, config) {
        // Cannot plug into Base, since Plugins derive from Base [ will cause infinite recurrsion ]
        var p, i, l, name;

        if (hostClass !== Y.Base) {
            hostClass._PLUG = hostClass._PLUG || {};

            if (!L.isArray(plugin)) {
                if (config) {
                    plugin = {fn:plugin, cfg:config};
                }
                plugin = [plugin];
            }

            for (i = 0, l = plugin.length; i < l;i++) {
                p = plugin[i];
                name = p.NAME || p.fn.NAME;
                hostClass._PLUG[name] = p;
            }
        }
    };

    /**
     * Unregisters any class level plugins which have been registered by the host class, or any
     * other class in the hierarchy.
     *
     * @method unplug
     * @static
     *
     * @param {Function} hostClass The host class from which to unregister the plugins
     * @param {Function | Array} plugin The plugin class, or an array of plugin classes
     * @for Plugin.Host
     */
    PluginHost.unplug = function(hostClass, plugin) {
        var p, i, l, name;

        if (hostClass !== Y.Base) {
            hostClass._UNPLUG = hostClass._UNPLUG || {};

            if (!L.isArray(plugin)) {
                plugin = [plugin];
            }

            for (i = 0, l = plugin.length; i < l; i++) {
                p = plugin[i];
                name = p.NAME;
                if (!hostClass._PLUG[name]) {
                    hostClass._UNPLUG[name] = p;
                } else {
                    delete hostClass._PLUG[name];
                }
            }
        }
    };


}, '3.10.1', {"requires": ["pluginhost-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/selector-css2/selector-css2.js
// ----------------------------------------------------------------------------------------

YUI.add('selector-css2', function (Y, NAME) {

/**
 * The selector module provides helper methods allowing CSS2 Selectors to be used with DOM elements.
 * @module dom
 * @submodule selector-css2
 * @for Selector
 */

/*
 * Provides helper methods for collecting and filtering DOM elements.
 */

var PARENT_NODE = 'parentNode',
    TAG_NAME = 'tagName',
    ATTRIBUTES = 'attributes',
    COMBINATOR = 'combinator',
    PSEUDOS = 'pseudos',

    Selector = Y.Selector,

    SelectorCSS2 = {
        _reRegExpTokens: /([\^\$\?\[\]\*\+\-\.\(\)\|\\])/,
        SORT_RESULTS: true,

        // TODO: better detection, document specific
        _isXML: (function() {
            var isXML = (Y.config.doc.createElement('div').tagName !== 'DIV');
            return isXML;
        }()),

        /**
         * Mapping of shorthand tokens to corresponding attribute selector
         * @property shorthand
         * @type object
         */
        shorthand: {
            '\\#(-?[_a-z0-9]+[-\\w\\uE000]*)': '[id=$1]',
            '\\.(-?[_a-z]+[-\\w\\uE000]*)': '[className~=$1]'
        },

        /**
         * List of operators and corresponding boolean functions.
         * These functions are passed the attribute and the current node's value of the attribute.
         * @property operators
         * @type object
         */
        operators: {
            '': function(node, attr) { return Y.DOM.getAttribute(node, attr) !== ''; }, // Just test for existence of attribute
            '~=': '(?:^|\\s+){val}(?:\\s+|$)', // space-delimited
            '|=': '^{val}-?' // optional hyphen-delimited
        },

        pseudos: {
           'first-child': function(node) {
                return Y.DOM._children(node[PARENT_NODE])[0] === node;
            }
        },

        _bruteQuery: function(selector, root, firstOnly) {
            var ret = [],
                nodes = [],
                tokens = Selector._tokenize(selector),
                token = tokens[tokens.length - 1],
                rootDoc = Y.DOM._getDoc(root),
                child,
                id,
                className,
                tagName;

            if (token) {
                // prefilter nodes
                id = token.id;
                className = token.className;
                tagName = token.tagName || '*';

                if (root.getElementsByTagName) { // non-IE lacks DOM api on doc frags
                    // try ID first, unless no root.all && root not in document
                    // (root.all works off document, but not getElementById)
                    if (id && (root.all || (root.nodeType === 9 || Y.DOM.inDoc(root)))) {
                        nodes = Y.DOM.allById(id, root);
                    // try className
                    } else if (className) {
                        nodes = root.getElementsByClassName(className);
                    } else { // default to tagName
                        nodes = root.getElementsByTagName(tagName);
                    }

                } else { // brute getElementsByTagName()
                    child = root.firstChild;
                    while (child) {
                        // only collect HTMLElements
                        // match tag to supplement missing getElementsByTagName
                        if (child.tagName && (tagName === '*' || child.tagName === tagName)) {
                            nodes.push(child);
                        }
                        child = child.nextSibling || child.firstChild;
                    }
                }
                if (nodes.length) {
                    ret = Selector._filterNodes(nodes, tokens, firstOnly);
                }
            }

            return ret;
        },

        _filterNodes: function(nodes, tokens, firstOnly) {
            var i = 0,
                j,
                len = tokens.length,
                n = len - 1,
                result = [],
                node = nodes[0],
                tmpNode = node,
                getters = Y.Selector.getters,
                operator,
                combinator,
                token,
                path,
                pass,
                value,
                tests,
                test;

            for (i = 0; (tmpNode = node = nodes[i++]);) {
                n = len - 1;
                path = null;

                testLoop:
                while (tmpNode && tmpNode.tagName) {
                    token = tokens[n];
                    tests = token.tests;
                    j = tests.length;
                    if (j && !pass) {
                        while ((test = tests[--j])) {
                            operator = test[1];
                            if (getters[test[0]]) {
                                value = getters[test[0]](tmpNode, test[0]);
                            } else {
                                value = tmpNode[test[0]];
                                if (test[0] === 'tagName' && !Selector._isXML) {
                                    value = value.toUpperCase();
                                }
                                if (typeof value != 'string' && value !== undefined && value.toString) {
                                    value = value.toString(); // coerce for comparison
                                } else if (value === undefined && tmpNode.getAttribute) {
                                    // use getAttribute for non-standard attributes
                                    value = tmpNode.getAttribute(test[0], 2); // 2 === force string for IE
                                }
                            }

                            if ((operator === '=' && value !== test[2]) ||  // fast path for equality
                                (typeof operator !== 'string' && // protect against String.test monkey-patch (Moo)
                                operator.test && !operator.test(value)) ||  // regex test
                                (!operator.test && // protect against RegExp as function (webkit)
                                        typeof operator === 'function' && !operator(tmpNode, test[0], test[2]))) { // function test

                                // skip non element nodes or non-matching tags
                                if ((tmpNode = tmpNode[path])) {
                                    while (tmpNode &&
                                        (!tmpNode.tagName ||
                                            (token.tagName && token.tagName !== tmpNode.tagName))
                                    ) {
                                        tmpNode = tmpNode[path];
                                    }
                                }
                                continue testLoop;
                            }
                        }
                    }

                    n--; // move to next token
                    // now that we've passed the test, move up the tree by combinator
                    if (!pass && (combinator = token.combinator)) {
                        path = combinator.axis;
                        tmpNode = tmpNode[path];

                        // skip non element nodes
                        while (tmpNode && !tmpNode.tagName) {
                            tmpNode = tmpNode[path];
                        }

                        if (combinator.direct) { // one pass only
                            path = null;
                        }

                    } else { // success if we made it this far
                        result.push(node);
                        if (firstOnly) {
                            return result;
                        }
                        break;
                    }
                }
            }
            node = tmpNode = null;
            return result;
        },

        combinators: {
            ' ': {
                axis: 'parentNode'
            },

            '>': {
                axis: 'parentNode',
                direct: true
            },


            '+': {
                axis: 'previousSibling',
                direct: true
            }
        },

        _parsers: [
            {
                name: ATTRIBUTES,
                re: /^\uE003(-?[a-z]+[\w\-]*)+([~\|\^\$\*!=]=?)?['"]?([^\uE004'"]*)['"]?\uE004/i,
                fn: function(match, token) {
                    var operator = match[2] || '',
                        operators = Selector.operators,
                        escVal = (match[3]) ? match[3].replace(/\\/g, '') : '',
                        test;

                    // add prefiltering for ID and CLASS
                    if ((match[1] === 'id' && operator === '=') ||
                            (match[1] === 'className' &&
                            Y.config.doc.documentElement.getElementsByClassName &&
                            (operator === '~=' || operator === '='))) {
                        token.prefilter = match[1];


                        match[3] = escVal;

                        // escape all but ID for prefilter, which may run through QSA (via Dom.allById)
                        token[match[1]] = (match[1] === 'id') ? match[3] : escVal;

                    }

                    // add tests
                    if (operator in operators) {
                        test = operators[operator];
                        if (typeof test === 'string') {
                            match[3] = escVal.replace(Selector._reRegExpTokens, '\\$1');
                            test = new RegExp(test.replace('{val}', match[3]));
                        }
                        match[2] = test;
                    }
                    if (!token.last || token.prefilter !== match[1]) {
                        return match.slice(1);
                    }
                }
            },
            {
                name: TAG_NAME,
                re: /^((?:-?[_a-z]+[\w-]*)|\*)/i,
                fn: function(match, token) {
                    var tag = match[1];

                    if (!Selector._isXML) {
                        tag = tag.toUpperCase();
                    }

                    token.tagName = tag;

                    if (tag !== '*' && (!token.last || token.prefilter)) {
                        return [TAG_NAME, '=', tag];
                    }
                    if (!token.prefilter) {
                        token.prefilter = 'tagName';
                    }
                }
            },
            {
                name: COMBINATOR,
                re: /^\s*([>+~]|\s)\s*/,
                fn: function(match, token) {
                }
            },
            {
                name: PSEUDOS,
                re: /^:([\-\w]+)(?:\uE005['"]?([^\uE005]*)['"]?\uE006)*/i,
                fn: function(match, token) {
                    var test = Selector[PSEUDOS][match[1]];
                    if (test) { // reorder match array and unescape special chars for tests
                        if (match[2]) {
                            match[2] = match[2].replace(/\\/g, '');
                        }
                        return [match[2], test];
                    } else { // selector token not supported (possibly missing CSS3 module)
                        return false;
                    }
                }
            }
            ],

        _getToken: function(token) {
            return {
                tagName: null,
                id: null,
                className: null,
                attributes: {},
                combinator: null,
                tests: []
            };
        },

        /*
            Break selector into token units per simple selector.
            Combinator is attached to the previous token.
         */
        _tokenize: function(selector) {
            selector = selector || '';
            selector = Selector._parseSelector(Y.Lang.trim(selector));
            var token = Selector._getToken(),     // one token per simple selector (left selector holds combinator)
                query = selector, // original query for debug report
                tokens = [],    // array of tokens
                found = false,  // whether or not any matches were found this pass
                match,         // the regex match
                test,
                i, parser;

            /*
                Search for selector patterns, store, and strip them from the selector string
                until no patterns match (invalid selector) or we run out of chars.

                Multiple attributes and pseudos are allowed, in any order.
                for example:
                    'form:first-child[type=button]:not(button)[lang|=en]'
            */
            outer:
            do {
                found = false; // reset after full pass
                for (i = 0; (parser = Selector._parsers[i++]);) {
                    if ( (match = parser.re.exec(selector)) ) { // note assignment
                        if (parser.name !== COMBINATOR ) {
                            token.selector = selector;
                        }
                        selector = selector.replace(match[0], ''); // strip current match from selector
                        if (!selector.length) {
                            token.last = true;
                        }

                        if (Selector._attrFilters[match[1]]) { // convert class to className, etc.
                            match[1] = Selector._attrFilters[match[1]];
                        }

                        test = parser.fn(match, token);
                        if (test === false) { // selector not supported
                            found = false;
                            break outer;
                        } else if (test) {
                            token.tests.push(test);
                        }

                        if (!selector.length || parser.name === COMBINATOR) {
                            tokens.push(token);
                            token = Selector._getToken(token);
                            if (parser.name === COMBINATOR) {
                                token.combinator = Y.Selector.combinators[match[1]];
                            }
                        }
                        found = true;
                    }
                }
            } while (found && selector.length);

            if (!found || selector.length) { // not fully parsed
                tokens = [];
            }
            return tokens;
        },

        _replaceMarkers: function(selector) {
            selector = selector.replace(/\[/g, '\uE003');
            selector = selector.replace(/\]/g, '\uE004');

            selector = selector.replace(/\(/g, '\uE005');
            selector = selector.replace(/\)/g, '\uE006');
            return selector;
        },

        _replaceShorthand: function(selector) {
            var shorthand = Y.Selector.shorthand,
                re;

            for (re in shorthand) {
                if (shorthand.hasOwnProperty(re)) {
                    selector = selector.replace(new RegExp(re, 'gi'), shorthand[re]);
                }
            }

            return selector;
        },

        _parseSelector: function(selector) {
            var replaced = Y.Selector._replaceSelector(selector),
                selector = replaced.selector;

            // replace shorthand (".foo, #bar") after pseudos and attrs
            // to avoid replacing unescaped chars
            selector = Y.Selector._replaceShorthand(selector);

            selector = Y.Selector._restore('attr', selector, replaced.attrs);
            selector = Y.Selector._restore('pseudo', selector, replaced.pseudos);

            // replace braces and parens before restoring escaped chars
            // to avoid replacing ecaped markers
            selector = Y.Selector._replaceMarkers(selector);
            selector = Y.Selector._restore('esc', selector, replaced.esc);

            return selector;
        },

        _attrFilters: {
            'class': 'className',
            'for': 'htmlFor'
        },

        getters: {
            href: function(node, attr) {
                return Y.DOM.getAttribute(node, attr);
            },

            id: function(node, attr) {
                return Y.DOM.getId(node);
            }
        }
    };

Y.mix(Y.Selector, SelectorCSS2, true);
Y.Selector.getters.src = Y.Selector.getters.rel = Y.Selector.getters.href;

// IE wants class with native queries
if (Y.Selector.useNative && Y.config.doc.querySelector) {
    Y.Selector.shorthand['\\.(-?[_a-z]+[-\\w]*)'] = '[class~=$1]';
}



}, '3.10.1', {"requires": ["selector-native"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-hover/event-hover.js
// ----------------------------------------------------------------------------------------

YUI.add('event-hover', function (Y, NAME) {

/**
 * Adds support for a "hover" event.  The event provides a convenience wrapper
 * for subscribing separately to mouseenter and mouseleave.  The signature for
 * subscribing to the event is</p>
 *
 * <pre><code>node.on("hover", overFn, outFn);
 * node.delegate("hover", overFn, outFn, ".filterSelector");
 * Y.on("hover", overFn, outFn, ".targetSelector");
 * Y.delegate("hover", overFn, outFn, "#container", ".filterSelector");
 * </code></pre>
 *
 * <p>Additionally, for compatibility with a more typical subscription
 * signature, the following are also supported:</p>
 *
 * <pre><code>Y.on("hover", overFn, ".targetSelector", outFn);
 * Y.delegate("hover", overFn, "#container", outFn, ".filterSelector");
 * </code></pre>
 *
 * @module event
 * @submodule event-hover
 */
var isFunction = Y.Lang.isFunction,
    noop = function () {},
    conf = {
        processArgs: function (args) {
            // Y.delegate('hover', over, out, '#container', '.filter')
            // comes in as ['hover', over, out, '#container', '.filter'], but
            // node.delegate('hover', over, out, '.filter')
            // comes in as ['hover', over, containerEl, out, '.filter']
            var i = isFunction(args[2]) ? 2 : 3;

            return (isFunction(args[i])) ? args.splice(i,1)[0] : noop;
        },

        on: function (node, sub, notifier, filter) {
            var args = (sub.args) ? sub.args.slice() : [];

            args.unshift(null);

            sub._detach = node[(filter) ? "delegate" : "on"]({
                mouseenter: function (e) {
                    e.phase = 'over';
                    notifier.fire(e);
                },
                mouseleave: function (e) {
                    var thisObj = sub.context || this;

                    args[0] = e;

                    e.type = 'hover';
                    e.phase = 'out';
                    sub._extra.apply(thisObj, args);
                }
            }, filter);
        },

        detach: function (node, sub, notifier) {
            sub._detach.detach();
        }
    };

conf.delegate = conf.on;
conf.detachDelegate = conf.detach;

Y.Event.define("hover", conf);


}, '3.10.1', {"requires": ["event-mouseenter"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/gallery-transitions.js
// ----------------------------------------------------------------------------------------

/**
* Gallery Transitions, Soup & Dumplings not included
* @module squarespace-gallery-transitions
*/
YUI.add('squarespace-gallery-transitions', function(Y) {

  Y.namespace('Squarespace');

  //
  //Custom Animation Base Definition
  //
  Y.Squarespace.GalleryCustomAnim = Class.create({

    defaults: {
      easing: {
        value: Y.Easing.easeOutStrong
      },
      duration: {
        value: 0.3
      },
      direction: {
        value: 'in',
        validator: function(val, name) {
          return ( val == 'in' || val == 'out' );
        }
      }
    },

    initialize: function(params) {
      this.addAttrs( this.defaults );
      this.setAttrs( params );

      this.anim = new Y.Anim();
    },

    run: function() {
      this.anim.setAttrs({
        node: this.get('node'),
        duration: this.get('duration'),
        easing: this.get('easing')
      });

      this.anim.run();
    },

    cancel: function() {
      this.anim.stop(true);
      this.anim.fire('end');
    }

  });

  Y.augment(Y.Squarespace.GalleryCustomAnim, Y.EventTarget);
  Y.augment(Y.Squarespace.GalleryCustomAnim, Y.Attribute);

  //
  //Now for the transitions
  //

  Y.Squarespace.GalleryTransitions = {};

  //
  // quarespace Fade
  //
  Y.Squarespace.GalleryTransitions.fade = Y.Squarespace.GalleryCustomAnim.extend({

    run: function() {

      if( this.get('direction') == 'in' ) {

        this.anim.set('from', {opacity: 0});
        this.anim.set('to', {opacity: 1});

      } else if( this.get('direction') == 'out' ) {

        this.anim.set('from', {opacity: 1});
        this.anim.set('to', {opacity: 0});

      }

      // and we'll use the super definition to run the animation.
      this.superclass.run.call(this);
    }

  });

  /*
   * Squarespace Scroll
   */
  Y.Squarespace.GalleryTransitions.scroll = Y.Squarespace.GalleryCustomAnim.extend({

    properties: {
      offset: 'offsetWidth',
      position: 'left'
    },

    run: function() {

      // Figure out the properties
      if( this.get('movement') == 'vertical' ) {

        this.properties = {
          offset: 'offsetHeight',
          position: 'top'
        };

      }

      // Set the container correctly
      if( !this.get('container') ) {
        this.set('container', this.get('node').get('parentNode') );
      }

      this.get('node').setStyle( this.properties.position, this.get('container').get( this.properties.offset ) );

      if( this.get('node').getStyle('position') != 'absolute' ) {
        this.get('node').setStyle( 'position', 'relative' );
      }

      var from = {};
      var to = {};

      if( this.get('direction') == 'in' ) {

        var from_value;

        if( this.get('increment') == 'fwd' ) {
          from_value = this.get('container').get( this.properties.offset );
        } else {
          from_value = -1 * this.get('container').get( this.properties.offset );
        }

        from[ this.properties.position ] = from_value;
        to[ this.properties.position ] = 0;

        this.anim.setAttrs({
          from: from,
          to: to
        });

      } else if( this.get('direction') == 'out' ) {

        var to_value;

        if( this.get('increment') == 'fwd' ) {
          to_value = -1 * this.get('container').get( this.properties.offset );
        } else {
          to_value = this.get('container').get( this.properties.offset );
        }

        from[ this.properties.position ] = 0;
        to[ this.properties.position ] = to_value;

        this.anim.setAttrs({
          from: from,
          to: to
        });

      }

      this.superclass.run.call(this);

    }

  });

  //
  // Squarespace Puff
  //
  Y.Squarespace.GalleryTransitions.puff = Y.Squarespace.GalleryCustomAnim.extend({

    run: function() {

      if( !this.get('container') ) {
        this.set('container', this.get('node').get('parentNode') );
      }

      this.get('container').setStyles({
        'overflow': 'visible'
//        'transform': 'translateZ(0)'
      });

      var scaleFrom;
      var scaleTo;
      var opacityFrom;
      var opacityTo;

      if( this.get('direction') == 'in' ) {
        scaleFrom = ( this.get('increment') == 'fwd' ? 0.8 : 1.2 );
        scaleTo = 1;
        opacityFrom = 0;
        opacityTo = 1;
      } else if( this.get('direction') == 'out' ) {
        scaleFrom = 1;
        scaleTo = ( this.get('increment') == 'fwd' ? 1.2 : 0.8 );
        opacityFrom = 1;
        opacityTo = 0;
      }

      this.webkitTransform( this.get('node'), scaleFrom, scaleTo, opacityFrom, opacityTo );

    },

    webkitTransform: function( node, from, to, opacFrom, opacTo ) {

      // cancel all timers, so we don't have any overlaps.
      if( this.timer_transition ) { this.timer_transition.cancel(); }
      if( this.timer_transitionTo ) { this.timer_transitionTo.cancel(); }
      if( this.timer_end ) { this.timer_end.cancel(); }

      var speed = this.get('duration');

      this.set('scaleFrom', from);
      this.set('scaleTo', to);
      this.set('opacityFrom', opacFrom);
      this.set('opacityTo', opacTo);
      this.set('display', 'block');

      // Set the starting point
      node.setStyles({
        'transform': 'scale(' + this.get('scaleFrom') + ')',
        'opacity': this.get('opacityFrom')
      });

      // And then we apply the animation to it.
      this.timer_transition = Y.later(1, node, function() {

        node.setStyles({
          'transitionProperty': 'transform, opacity',
          'transitionDuration': speed + 's',
          'transitionTimingFunction': 'ease-out'
        });

      });

      // And then we set the transitionTo values, so it animates.
      this.timer_transitionTo = Y.later(2, node, function() {

        node.setStyles({
          'transform': 'scale(' + to + ')',
          'opacity': opacTo
        });

      });

      // And once the animation is over -- we reset the animation, and set the final states.
      this.timer_end = Y.later( speed * 1000, node, function() {

        node.setStyles({
          // 'opacity': opacTo,
          'transform': 'scale(' + to + ')',

          'transitionProperty': '',
          'transitionDuration': '0s',
          'transitionTimingFunction': 'ease-out'
        });

      }, this);

    },

    cancel: function() {

      this.get('node').setStyles({
        'transitionProperty': '',
        'transitionDuration': '0s',
        'transitionTimingFunction': 'ease-out',

        'opacity': this.get('opacityTo'),
        'transform': 'scale(' + this.get('scaleTo') + ')'
      });

    }

  });


  //
  //Squarespace Flip
  //
  Y.Squarespace.GalleryTransitions.flip = Y.Squarespace.GalleryCustomAnim.extend({

    run: function() {

      if( !this.get('container') ) {
        this.set('container', this.get('node').get('parentNode') );
      }

      var degree;

      if( this.get('direction') == 'in' ) {

        if( this.get('increment') == 'fwd' ) {
          degree = 180;
        } else if( this.get('increment') == 'rev' ) {
          degree = -180;
        }

        this.webkitFlip( degree, 0, false );
      } else if( this.get('direction') == 'out' ) {

        if( this.get('increment') == 'fwd' ) {
          degree = -180;
        } else if( this.get('increment') == 'rev' ) {
          degree = 180;
        }

        this.webkitFlip( 0, degree, true );
      }

    },

    webkitFlip: function( fromDeg, toDeg, hide ) {

      if( this.transitionTo ) { this.transitionTo.cancel(); }
      if( this.transitionEnd ) { this.transitionEnd.cancel(); }

      // var wrapper = this.wrapElement( this.get('node') );
      var node = this.get('node');

      this.get('container').setStyle('perspective', 1000);

      // set the wrapper styles
      node.setStyles({
        'transformStyle': 'preserve-3d',
        'transition': this.get('duration') + 's',
        'backfaceVisibility': 'hidden',
        'transform': 'rotateY(' + fromDeg + 'deg)'
      });

      node.setStyle('display', 'block');

      this.transitionTo = Y.later(1, node, function() {
        this.setStyle('transform', 'rotateY(' + toDeg + 'deg)');
      });

      this.transitionEnd = Y.later( this.get('duration') * 1000, node, function() {
        if( hide ) { node.hide(); }

        // this.replace( node );

        // set the new node
        // this.set('node', node);
      });

    },

    wrapElement: function(e) {

      var wrapper = Y.Node.create('<div></div>');

      wrapper.setStyles({
        'width': e.get('offsetWidth'),
        'height': e.get('offsetHeight')
      });

      wrapper.append( e.cloneNode(true) );
      e.get('parentNode').insert(wrapper, e);
      e.remove();

      return wrapper;

    }

  });

}, '1.0',  { requires: ['node', 'anim', 'attribute']});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-flick/event-flick.js
// ----------------------------------------------------------------------------------------

YUI.add('event-flick', function (Y, NAME) {

/**
 * The gestures module provides gesture events such as "flick", which normalize user interactions
 * across touch and mouse or pointer based input devices. This layer can be used by application developers
 * to build input device agnostic components which behave the same in response to either touch or mouse based
 * interaction.
 *
 * <p>Documentation for events added by this module can be found in the event document for the <a href="../classes/YUI.html#events">YUI</a> global.</p>
 *
 *
 @example

     YUI().use('event-flick', function (Y) {
         Y.one('#myNode').on('flick', function (e) {
         });
     });

 *
 * @module event-gestures
 */

/**
 * Adds support for a "flick" event, which is fired at the end of a touch or mouse based flick gesture, and provides
 * velocity of the flick, along with distance and time information.
 *
 * <p>Documentation for the flick event can be found on the <a href="../classes/YUI.html#event_flick">YUI</a> global,
 * along with the other supported events.</p>
 *
 * @module event-gestures
 * @submodule event-flick
 */
var GESTURE_MAP = Y.Event._GESTURE_MAP,
    EVENT = {
        start: GESTURE_MAP.start,
        end: GESTURE_MAP.end,
        move: GESTURE_MAP.move
    },
    START = "start",
    END = "end",
    MOVE = "move",

    OWNER_DOCUMENT = "ownerDocument",
    MIN_VELOCITY = "minVelocity",
    MIN_DISTANCE = "minDistance",
    PREVENT_DEFAULT = "preventDefault",

    _FLICK_START = "_fs",
    _FLICK_START_HANDLE = "_fsh",
    _FLICK_END_HANDLE = "_feh",
    _FLICK_MOVE_HANDLE = "_fmh",

    NODE_TYPE = "nodeType";

/**
 * Sets up a "flick" event, that is fired whenever the user initiates a flick gesture on the node
 * where the listener is attached. The subscriber can specify a minimum distance or velocity for
 * which the event is to be fired. The subscriber can also specify if there is a particular axis which
 * they are interested in - "x" or "y". If no axis is specified, the axis along which there was most distance
 * covered is used.
 *
 * <p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,
 * however if you want to pass the context and arguments as additional signature arguments to "on",
 * you need to provide a null value for the configuration object, e.g: <code>node.on("flick", fn, null, context, arg1, arg2, arg3)</code></p>
 *
 * @event flick
 * @for YUI
 * @param type {string} "flick"
 * @param fn {function} The method the event invokes. It receives an event facade with an e.flick object containing the flick related properties: e.flick.time, e.flick.distance, e.flick.velocity and e.flick.axis, e.flick.start.
 * @param cfg {Object} Optional. An object which specifies any of the following:
 * <dl>
 * <dt>minDistance (in pixels, defaults to 10)</dt>
 * <dd>The minimum distance between start and end points, which would qualify the gesture as a flick.</dd>
 * <dt>minVelocity (in pixels/ms, defaults to 0)</dt>
 * <dd>The minimum velocity which would qualify the gesture as a flick.</dd>
 * <dt>preventDefault (defaults to false)</dt>
 * <dd>Can be set to true/false to prevent default behavior as soon as the touchstart/touchend or mousedown/mouseup is received so that things like scrolling or text selection can be
 * prevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it.</dd>
 * <dt>axis (no default)</dt>
 * <dd>Can be set to "x" or "y" if you want to constrain the flick velocity and distance to a single axis. If not
 * defined, the axis along which the maximum distance was covered is used.</dd>
 * </dl>
 * @return {EventHandle} the detach handle
 */

Y.Event.define('flick', {

    on: function (node, subscriber, ce) {

        var startHandle = node.on(EVENT[START],
            this._onStart,
            this,
            node,
            subscriber,
            ce);

        subscriber[_FLICK_START_HANDLE] = startHandle;
    },

    detach: function (node, subscriber, ce) {

        var startHandle = subscriber[_FLICK_START_HANDLE],
            endHandle = subscriber[_FLICK_END_HANDLE];

        if (startHandle) {
            startHandle.detach();
            subscriber[_FLICK_START_HANDLE] = null;
        }

        if (endHandle) {
            endHandle.detach();
            subscriber[_FLICK_END_HANDLE] = null;
        }
    },

    processArgs: function(args) {
        var params = (args.length > 3) ? Y.merge(args.splice(3, 1)[0]) : {};

        if (!(MIN_VELOCITY in params)) {
            params[MIN_VELOCITY] = this.MIN_VELOCITY;
        }

        if (!(MIN_DISTANCE in params)) {
            params[MIN_DISTANCE] = this.MIN_DISTANCE;
        }

        if (!(PREVENT_DEFAULT in params)) {
            params[PREVENT_DEFAULT] = this.PREVENT_DEFAULT;
        }

        return params;
    },

    _onStart: function(e, node, subscriber, ce) {

        var start = true, // always true for mouse
            endHandle,
            moveHandle,
            doc,
            preventDefault = subscriber._extra.preventDefault,
            origE = e;

        if (e.touches) {
            start = (e.touches.length === 1);
            e = e.touches[0];
        }

        if (start) {

            if (preventDefault) {
                // preventDefault is a boolean or function
                if (!preventDefault.call || preventDefault(e)) {
                    origE.preventDefault();
                }
            }

            e.flick = {
                time : new Date().getTime()
            };

            subscriber[_FLICK_START] = e;

            endHandle = subscriber[_FLICK_END_HANDLE];

            doc = (node.get(NODE_TYPE) === 9) ? node : node.get(OWNER_DOCUMENT);
            if (!endHandle) {
                endHandle = doc.on(EVENT[END], Y.bind(this._onEnd, this), null, node, subscriber, ce);
                subscriber[_FLICK_END_HANDLE] = endHandle;
            }

            subscriber[_FLICK_MOVE_HANDLE] = doc.once(EVENT[MOVE], Y.bind(this._onMove, this), null, node, subscriber, ce);
        }
    },

    _onMove: function(e, node, subscriber, ce) {
        var start = subscriber[_FLICK_START];

        // Start timing from first move.
        if (start && start.flick) {
            start.flick.time = new Date().getTime();
        }
    },

    _onEnd: function(e, node, subscriber, ce) {

        var endTime = new Date().getTime(),
            start = subscriber[_FLICK_START],
            valid = !!start,
            endEvent = e,
            startTime,
            time,
            preventDefault,
            params,
            xyDistance,
            distance,
            velocity,
            axis,
            moveHandle = subscriber[_FLICK_MOVE_HANDLE];

        if (moveHandle) {
            moveHandle.detach();
            delete subscriber[_FLICK_MOVE_HANDLE];
        }

        if (valid) {

            if (e.changedTouches) {
                if (e.changedTouches.length === 1 && e.touches.length === 0) {
                    endEvent = e.changedTouches[0];
                } else {
                    valid = false;
                }
            }

            if (valid) {

                params = subscriber._extra;
                preventDefault = params[PREVENT_DEFAULT];

                if (preventDefault) {
                    // preventDefault is a boolean or function
                    if (!preventDefault.call || preventDefault(e)) {
                        e.preventDefault();
                    }
                }

                startTime = start.flick.time;
                endTime = new Date().getTime();
                time = endTime - startTime;

                xyDistance = [
                    endEvent.pageX - start.pageX,
                    endEvent.pageY - start.pageY
                ];

                if (params.axis) {
                    axis = params.axis;
                } else {
                    axis = (Math.abs(xyDistance[0]) >= Math.abs(xyDistance[1])) ? 'x' : 'y';
                }

                distance = xyDistance[(axis === 'x') ? 0 : 1];
                velocity = (time !== 0) ? distance/time : 0;

                if (isFinite(velocity) && (Math.abs(distance) >= params[MIN_DISTANCE]) && (Math.abs(velocity)  >= params[MIN_VELOCITY])) {

                    e.type = "flick";
                    e.flick = {
                        time:time,
                        distance: distance,
                        velocity:velocity,
                        axis: axis,
                        start : start
                    };

                    ce.fire(e);

                }

                subscriber[_FLICK_START] = null;
            }
        }
    },

    MIN_VELOCITY : 0,
    MIN_DISTANCE : 0,
    PREVENT_DEFAULT : false
});


}, '3.10.1', {"requires": ["node-base", "event-touch", "event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/async-queue/async-queue.js
// ----------------------------------------------------------------------------------------

YUI.add('async-queue', function (Y, NAME) {

/**
 * <p>AsyncQueue allows you create a chain of function callbacks executed
 * via setTimeout (or synchronously) that are guaranteed to run in order.
 * Items in the queue can be promoted or removed.  Start or resume the
 * execution chain with run().  pause() to temporarily delay execution, or
 * stop() to halt and clear the queue.</p>
 *
 * @module async-queue
 */

/**
 * <p>A specialized queue class that supports scheduling callbacks to execute
 * sequentially, iteratively, even asynchronously.</p>
 *
 * <p>Callbacks can be function refs or objects with the following keys.  Only
 * the <code>fn</code> key is required.</p>
 *
 * <ul>
 * <li><code>fn</code> -- The callback function</li>
 * <li><code>context</code> -- The execution context for the callbackFn.</li>
 * <li><code>args</code> -- Arguments to pass to callbackFn.</li>
 * <li><code>timeout</code> -- Millisecond delay before executing callbackFn.
 *                     (Applies to each iterative execution of callback)</li>
 * <li><code>iterations</code> -- Number of times to repeat the callback.
 * <li><code>until</code> -- Repeat the callback until this function returns
 *                         true.  This setting trumps iterations.</li>
 * <li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from
 *                        executing the next callback in the Queue after
 *                        the callback completes.</li>
 * <li><code>id</code> -- Name that can be used to get, promote, get the
 *                        indexOf, or delete this callback.</li>
 * </ul>
 *
 * @class AsyncQueue
 * @extends EventTarget
 * @constructor
 * @param callback* {Function|Object} 0..n callbacks to seed the queue
 */
Y.AsyncQueue = function() {
    this._init();
    this.add.apply(this, arguments);
};

var Queue   = Y.AsyncQueue,
    EXECUTE = 'execute',
    SHIFT   = 'shift',
    PROMOTE = 'promote',
    REMOVE  = 'remove',

    isObject   = Y.Lang.isObject,
    isFunction = Y.Lang.isFunction;

/**
 * <p>Static default values used to populate callback configuration properties.
 * Preconfigured defaults include:</p>
 *
 * <ul>
 *  <li><code>autoContinue</code>: <code>true</code></li>
 *  <li><code>iterations</code>: 1</li>
 *  <li><code>timeout</code>: 10 (10ms between callbacks)</li>
 *  <li><code>until</code>: (function to run until iterations &lt;= 0)</li>
 * </ul>
 *
 * @property defaults
 * @type {Object}
 * @static
 */
Queue.defaults = Y.mix({
    autoContinue : true,
    iterations   : 1,
    timeout      : 10,
    until        : function () {
        this.iterations |= 0;
        return this.iterations <= 0;
    }
}, Y.config.queueDefaults || {});

Y.extend(Queue, Y.EventTarget, {
    /**
     * Used to indicate the queue is currently executing a callback.
     *
     * @property _running
     * @type {Boolean|Object} true for synchronous callback execution, the
     *                        return handle from Y.later for async callbacks.
     *                        Otherwise false.
     * @protected
     */
    _running : false,

    /**
     * Initializes the AsyncQueue instance properties and events.
     *
     * @method _init
     * @protected
     */
    _init : function () {
        Y.EventTarget.call(this, { prefix: 'queue', emitFacade: true });

        this._q = [];

        /**
         * Callback defaults for this instance.  Static defaults that are not
         * overridden are also included.
         *
         * @property defaults
         * @type {Object}
         */
        this.defaults = {};

        this._initEvents();
    },

    /**
     * Initializes the instance events.
     *
     * @method _initEvents
     * @protected
     */
    _initEvents : function () {
        this.publish({
            'execute' : { defaultFn : this._defExecFn,    emitFacade: true },
            'shift'   : { defaultFn : this._defShiftFn,   emitFacade: true },
            'add'     : { defaultFn : this._defAddFn,     emitFacade: true },
            'promote' : { defaultFn : this._defPromoteFn, emitFacade: true },
            'remove'  : { defaultFn : this._defRemoveFn,  emitFacade: true }
        });
    },

    /**
     * Returns the next callback needing execution.  If a callback is
     * configured to repeat via iterations or until, it will be returned until
     * the completion criteria is met.
     *
     * When the queue is empty, null is returned.
     *
     * @method next
     * @return {Function} the callback to execute
     */
    next : function () {
        var callback;

        while (this._q.length) {
            callback = this._q[0] = this._prepare(this._q[0]);
            if (callback && callback.until()) {
                this.fire(SHIFT, { callback: callback });
                callback = null;
            } else {
                break;
            }
        }

        return callback || null;
    },

    /**
     * Default functionality for the &quot;shift&quot; event.  Shifts the
     * callback stored in the event object's <em>callback</em> property from
     * the queue if it is the first item.
     *
     * @method _defShiftFn
     * @param e {Event} The event object
     * @protected
     */
    _defShiftFn : function (e) {
        if (this.indexOf(e.callback) === 0) {
            this._q.shift();
        }
    },

    /**
     * Creates a wrapper function to execute the callback using the aggregated
     * configuration generated by combining the static AsyncQueue.defaults, the
     * instance defaults, and the specified callback settings.
     *
     * The wrapper function is decorated with the callback configuration as
     * properties for runtime modification.
     *
     * @method _prepare
     * @param callback {Object|Function} the raw callback
     * @return {Function} a decorated function wrapper to execute the callback
     * @protected
     */
    _prepare: function (callback) {
        if (isFunction(callback) && callback._prepared) {
            return callback;
        }

        var config = Y.merge(
            Queue.defaults,
            { context : this, args: [], _prepared: true },
            this.defaults,
            (isFunction(callback) ? { fn: callback } : callback)),

            wrapper = Y.bind(function () {
                if (!wrapper._running) {
                    wrapper.iterations--;
                }
                if (isFunction(wrapper.fn)) {
                    wrapper.fn.apply(wrapper.context || Y,
                                     Y.Array(wrapper.args));
                }
            }, this);

        return Y.mix(wrapper, config);
    },

    /**
     * Sets the queue in motion.  All queued callbacks will be executed in
     * order unless pause() or stop() is called or if one of the callbacks is
     * configured with autoContinue: false.
     *
     * @method run
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    run : function () {
        var callback,
            cont = true;

        for (callback = this.next();
            cont && callback && !this.isRunning();
            callback = this.next())
        {
            cont = (callback.timeout < 0) ?
                this._execute(callback) :
                this._schedule(callback);
        }

        if (!callback) {
            /**
             * Event fired after the last queued callback is executed.
             * @event complete
             */
            this.fire('complete');
        }

        return this;
    },

    /**
     * Handles the execution of callbacks. Returns a boolean indicating
     * whether it is appropriate to continue running.
     *
     * @method _execute
     * @param callback {Object} the callback object to execute
     * @return {Boolean} whether the run loop should continue
     * @protected
     */
    _execute : function (callback) {
        this._running = callback._running = true;

        callback.iterations--;
        this.fire(EXECUTE, { callback: callback });

        var cont = this._running && callback.autoContinue;

        this._running = callback._running = false;

        return cont;
    },

    /**
     * Schedules the execution of asynchronous callbacks.
     *
     * @method _schedule
     * @param callback {Object} the callback object to execute
     * @return {Boolean} whether the run loop should continue
     * @protected
     */
    _schedule : function (callback) {
        this._running = Y.later(callback.timeout, this, function () {
            if (this._execute(callback)) {
                this.run();
            }
        });

        return false;
    },

    /**
     * Determines if the queue is waiting for a callback to complete execution.
     *
     * @method isRunning
     * @return {Boolean} true if queue is waiting for a
     *                   from any initiated transactions
     */
    isRunning : function () {
        return !!this._running;
    },

    /**
     * Default functionality for the &quot;execute&quot; event.  Executes the
     * callback function
     *
     * @method _defExecFn
     * @param e {Event} the event object
     * @protected
     */
    _defExecFn : function (e) {
        e.callback();
    },

    /**
     * Add any number of callbacks to the end of the queue. Callbacks may be
     * provided as functions or objects.
     *
     * @method add
     * @param callback* {Function|Object} 0..n callbacks
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    add : function () {
        this.fire('add', { callbacks: Y.Array(arguments,0,true) });

        return this;
    },

    /**
     * Default functionality for the &quot;add&quot; event.  Adds the callbacks
     * in the event facade to the queue. Callbacks successfully added to the
     * queue are present in the event's <code>added</code> property in the
     * after phase.
     *
     * @method _defAddFn
     * @param e {Event} the event object
     * @protected
     */
    _defAddFn : function(e) {
        var _q = this._q,
            added = [];

        Y.Array.each(e.callbacks, function (c) {
            if (isObject(c)) {
                _q.push(c);
                added.push(c);
            }
        });

        e.added = added;
    },

    /**
     * Pause the execution of the queue after the execution of the current
     * callback completes.  If called from code outside of a queued callback,
     * clears the timeout for the pending callback. Paused queue can be
     * restarted with q.run()
     *
     * @method pause
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    pause: function () {
        if (isObject(this._running)) {
            this._running.cancel();
        }

        this._running = false;

        return this;
    },

    /**
     * Stop and clear the queue after the current execution of the
     * current callback completes.
     *
     * @method stop
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    stop : function () {
        this._q = [];

        return this.pause();
    },

    /**
     * Returns the current index of a callback.  Pass in either the id or
     * callback function from getCallback.
     *
     * @method indexOf
     * @param callback {String|Function} the callback or its specified id
     * @return {Number} index of the callback or -1 if not found
     */
    indexOf : function (callback) {
        var i = 0, len = this._q.length, c;

        for (; i < len; ++i) {
            c = this._q[i];
            if (c === callback || c.id === callback) {
                return i;
            }
        }

        return -1;
    },

    /**
     * Retrieve a callback by its id.  Useful to modify the configuration
     * while the queue is running.
     *
     * @method getCallback
     * @param id {String} the id assigned to the callback
     * @return {Object} the callback object
     */
    getCallback : function (id) {
        var i = this.indexOf(id);

        return (i > -1) ? this._q[i] : null;
    },

    /**
     * Promotes the named callback to the top of the queue. If a callback is
     * currently executing or looping (via until or iterations), the promotion
     * is scheduled to occur after the current callback has completed.
     *
     * @method promote
     * @param callback {String|Object} the callback object or a callback's id
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    promote : function (callback) {
        var payload = { callback : callback },e;

        if (this.isRunning()) {
            e = this.after(SHIFT, function () {
                    this.fire(PROMOTE, payload);
                    e.detach();
                }, this);
        } else {
            this.fire(PROMOTE, payload);
        }

        return this;
    },

    /**
     * <p>Default functionality for the &quot;promote&quot; event.  Promotes the
     * named callback to the head of the queue.</p>
     *
     * <p>The event object will contain a property &quot;callback&quot;, which
     * holds the id of a callback or the callback object itself.</p>
     *
     * @method _defPromoteFn
     * @param e {Event} the custom event
     * @protected
     */
    _defPromoteFn : function (e) {
        var i = this.indexOf(e.callback),
            promoted = (i > -1) ? this._q.splice(i,1)[0] : null;

        e.promoted = promoted;

        if (promoted) {
            this._q.unshift(promoted);
        }
    },

    /**
     * Removes the callback from the queue.  If the queue is active, the
     * removal is scheduled to occur after the current callback has completed.
     *
     * @method remove
     * @param callback {String|Object} the callback object or a callback's id
     * @return {AsyncQueue} the AsyncQueue instance
     * @chainable
     */
    remove : function (callback) {
        var payload = { callback : callback },e;

        // Can't return the removed callback because of the deferral until
        // current callback is complete
        if (this.isRunning()) {
            e = this.after(SHIFT, function () {
                    this.fire(REMOVE, payload);
                    e.detach();
                },this);
        } else {
            this.fire(REMOVE, payload);
        }

        return this;
    },

    /**
     * <p>Default functionality for the &quot;remove&quot; event.  Removes the
     * callback from the queue.</p>
     *
     * <p>The event object will contain a property &quot;callback&quot;, which
     * holds the id of a callback or the callback object itself.</p>
     *
     * @method _defRemoveFn
     * @param e {Event} the custom event
     * @protected
     */
    _defRemoveFn : function (e) {
        var i = this.indexOf(e.callback);

        e.removed = (i > -1) ? this._q.splice(i,1)[0] : null;
    },

    /**
     * Returns the number of callbacks in the queue.
     *
     * @method size
     * @return {Number}
     */
    size : function () {
        // next() flushes callbacks that have met their until() criteria and
        // therefore shouldn't count since they wouldn't execute anyway.
        if (!this.isRunning()) {
            this.next();
        }

        return this._q.length;
    }
});



}, '3.10.1', {"requires": ["event-custom"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/dom-base/dom-base.js
// ----------------------------------------------------------------------------------------

YUI.add('dom-base', function (Y, NAME) {

/**
* @for DOM
* @module dom
*/
var documentElement = Y.config.doc.documentElement,
    Y_DOM = Y.DOM,
    TAG_NAME = 'tagName',
    OWNER_DOCUMENT = 'ownerDocument',
    EMPTY_STRING = '',
    addFeature = Y.Features.add,
    testFeature = Y.Features.test;

Y.mix(Y_DOM, {
    /**
     * Returns the text content of the HTMLElement.
     * @method getText
     * @param {HTMLElement} element The html element.
     * @return {String} The text content of the element (includes text of any descending elements).
     */
    getText: (documentElement.textContent !== undefined) ?
        function(element) {
            var ret = '';
            if (element) {
                ret = element.textContent;
            }
            return ret || '';
        } : function(element) {
            var ret = '';
            if (element) {
                ret = element.innerText || element.nodeValue; // might be a textNode
            }
            return ret || '';
        },

    /**
     * Sets the text content of the HTMLElement.
     * @method setText
     * @param {HTMLElement} element The html element.
     * @param {String} content The content to add.
     */
    setText: (documentElement.textContent !== undefined) ?
        function(element, content) {
            if (element) {
                element.textContent = content;
            }
        } : function(element, content) {
            if ('innerText' in element) {
                element.innerText = content;
            } else if ('nodeValue' in element) {
                element.nodeValue = content;
            }
    },

    CUSTOM_ATTRIBUTES: (!documentElement.hasAttribute) ? { // IE < 8
        'for': 'htmlFor',
        'class': 'className'
    } : { // w3c
        'htmlFor': 'for',
        'className': 'class'
    },

    /**
     * Provides a normalized attribute interface.
     * @method setAttribute
     * @param {HTMLElement} el The target element for the attribute.
     * @param {String} attr The attribute to set.
     * @param {String} val The value of the attribute.
     */
    setAttribute: function(el, attr, val, ieAttr) {
        if (el && attr && el.setAttribute) {
            attr = Y_DOM.CUSTOM_ATTRIBUTES[attr] || attr;
            el.setAttribute(attr, val, ieAttr);
        }
    },


    /**
     * Provides a normalized attribute interface.
     * @method getAttribute
     * @param {HTMLElement} el The target element for the attribute.
     * @param {String} attr The attribute to get.
     * @return {String} The current value of the attribute.
     */
    getAttribute: function(el, attr, ieAttr) {
        ieAttr = (ieAttr !== undefined) ? ieAttr : 2;
        var ret = '';
        if (el && attr && el.getAttribute) {
            attr = Y_DOM.CUSTOM_ATTRIBUTES[attr] || attr;
            ret = el.getAttribute(attr, ieAttr);

            if (ret === null) {
                ret = ''; // per DOM spec
            }
        }
        return ret;
    },

    VALUE_SETTERS: {},

    VALUE_GETTERS: {},

    getValue: function(node) {
        var ret = '', // TODO: return null?
            getter;

        if (node && node[TAG_NAME]) {
            getter = Y_DOM.VALUE_GETTERS[node[TAG_NAME].toLowerCase()];

            if (getter) {
                ret = getter(node);
            } else {
                ret = node.value;
            }
        }

        // workaround for IE8 JSON stringify bug
        // which converts empty string values to null
        if (ret === EMPTY_STRING) {
            ret = EMPTY_STRING; // for real
        }

        return (typeof ret === 'string') ? ret : '';
    },

    setValue: function(node, val) {
        var setter;

        if (node && node[TAG_NAME]) {
            setter = Y_DOM.VALUE_SETTERS[node[TAG_NAME].toLowerCase()];

            if (setter) {
                setter(node, val);
            } else {
                node.value = val;
            }
        }
    },

    creators: {}
});

addFeature('value-set', 'select', {
    test: function() {
        var node = Y.config.doc.createElement('select');
        node.innerHTML = '<option>1</option><option>2</option>';
        node.value = '2';
        return (node.value && node.value === '2');
    }
});

if (!testFeature('value-set', 'select')) {
    Y_DOM.VALUE_SETTERS.select = function(node, val) {
        for (var i = 0, options = node.getElementsByTagName('option'), option;
                option = options[i++];) {
            if (Y_DOM.getValue(option) === val) {
                option.selected = true;
                //Y_DOM.setAttribute(option, 'selected', 'selected');
                break;
            }
        }
    };
}

Y.mix(Y_DOM.VALUE_GETTERS, {
    button: function(node) {
        return (node.attributes && node.attributes.value) ? node.attributes.value.value : '';
    }
});

Y.mix(Y_DOM.VALUE_SETTERS, {
    // IE: node.value changes the button text, which should be handled via innerHTML
    button: function(node, val) {
        var attr = node.attributes.value;
        if (!attr) {
            attr = node[OWNER_DOCUMENT].createAttribute('value');
            node.setAttributeNode(attr);
        }

        attr.value = val;
    }
});


Y.mix(Y_DOM.VALUE_GETTERS, {
    option: function(node) {
        var attrs = node.attributes;
        return (attrs.value && attrs.value.specified) ? node.value : node.text;
    },

    select: function(node) {
        var val = node.value,
            options = node.options;

        if (options && options.length) {
            // TODO: implement multipe select
            if (node.multiple) {
            } else if (node.selectedIndex > -1) {
                val = Y_DOM.getValue(options[node.selectedIndex]);
            }
        }

        return val;
    }
});
var addClass, hasClass, removeClass;

Y.mix(Y.DOM, {
    /**
     * Determines whether a DOM element has the given className.
     * @method hasClass
     * @for DOM
     * @param {HTMLElement} element The DOM element.
     * @param {String} className the class name to search for
     * @return {Boolean} Whether or not the element has the given class.
     */
    hasClass: function(node, className) {
        var re = Y.DOM._getRegExp('(?:^|\\s+)' + className + '(?:\\s+|$)');
        return re.test(node.className);
    },

    /**
     * Adds a class name to a given DOM element.
     * @method addClass
     * @for DOM
     * @param {HTMLElement} element The DOM element.
     * @param {String} className the class name to add to the class attribute
     */
    addClass: function(node, className) {
        if (!Y.DOM.hasClass(node, className)) { // skip if already present
            node.className = Y.Lang.trim([node.className, className].join(' '));
        }
    },

    /**
     * Removes a class name from a given element.
     * @method removeClass
     * @for DOM
     * @param {HTMLElement} element The DOM element.
     * @param {String} className the class name to remove from the class attribute
     */
    removeClass: function(node, className) {
        if (className && hasClass(node, className)) {
            node.className = Y.Lang.trim(node.className.replace(Y.DOM._getRegExp('(?:^|\\s+)' +
                            className + '(?:\\s+|$)'), ' '));

            if ( hasClass(node, className) ) { // in case of multiple adjacent
                removeClass(node, className);
            }
        }
    },

    /**
     * Replace a class with another class for a given element.
     * If no oldClassName is present, the newClassName is simply added.
     * @method replaceClass
     * @for DOM
     * @param {HTMLElement} element The DOM element
     * @param {String} oldClassName the class name to be replaced
     * @param {String} newClassName the class name that will be replacing the old class name
     */
    replaceClass: function(node, oldC, newC) {
        removeClass(node, oldC); // remove first in case oldC === newC
        addClass(node, newC);
    },

    /**
     * If the className exists on the node it is removed, if it doesn't exist it is added.
     * @method toggleClass
     * @for DOM
     * @param {HTMLElement} element The DOM element
     * @param {String} className the class name to be toggled
     * @param {Boolean} addClass optional boolean to indicate whether class
     * should be added or removed regardless of current state
     */
    toggleClass: function(node, className, force) {
        var add = (force !== undefined) ? force :
                !(hasClass(node, className));

        if (add) {
            addClass(node, className);
        } else {
            removeClass(node, className);
        }
    }
});

hasClass = Y.DOM.hasClass;
removeClass = Y.DOM.removeClass;
addClass = Y.DOM.addClass;

var re_tag = /<([a-z]+)/i,

    Y_DOM = Y.DOM,

    addFeature = Y.Features.add,
    testFeature = Y.Features.test,

    creators = {},

    createFromDIV = function(html, tag) {
        var div = Y.config.doc.createElement('div'),
            ret = true;

        div.innerHTML = html;
        if (!div.firstChild || div.firstChild.tagName !== tag.toUpperCase()) {
            ret = false;
        }

        return ret;
    },

    re_tbody = /(?:\/(?:thead|tfoot|tbody|caption|col|colgroup)>)+\s*<tbody/,

    TABLE_OPEN = '<table>',
    TABLE_CLOSE = '</table>';

Y.mix(Y.DOM, {
    _fragClones: {},

    _create: function(html, doc, tag) {
        tag = tag || 'div';

        var frag = Y_DOM._fragClones[tag];
        if (frag) {
            frag = frag.cloneNode(false);
        } else {
            frag = Y_DOM._fragClones[tag] = doc.createElement(tag);
        }
        frag.innerHTML = html;
        return frag;
    },

    _children: function(node, tag) {
            var i = 0,
            children = node.children,
            childNodes,
            hasComments,
            child;

        if (children && children.tags) { // use tags filter when possible
            if (tag) {
                children = node.children.tags(tag);
            } else { // IE leaks comments into children
                hasComments = children.tags('!').length;
            }
        }

        if (!children || (!children.tags && tag) || hasComments) {
            childNodes = children || node.childNodes;
            children = [];
            while ((child = childNodes[i++])) {
                if (child.nodeType === 1) {
                    if (!tag || tag === child.tagName) {
                        children.push(child);
                    }
                }
            }
        }

        return children || [];
    },

    /**
     * Creates a new dom node using the provided markup string.
     * @method create
     * @param {String} html The markup used to create the element
     * @param {HTMLDocument} doc An optional document context
     * @return {HTMLElement|DocumentFragment} returns a single HTMLElement
     * when creating one node, and a documentFragment when creating
     * multiple nodes.
     */
    create: function(html, doc) {
        if (typeof html === 'string') {
            html = Y.Lang.trim(html); // match IE which trims whitespace from innerHTML

        }

        doc = doc || Y.config.doc;
        var m = re_tag.exec(html),
            create = Y_DOM._create,
            custom = creators,
            ret = null,
            creator,
            tag, nodes;

        if (html != undefined) { // not undefined or null
            if (m && m[1]) {
                creator = custom[m[1].toLowerCase()];
                if (typeof creator === 'function') {
                    create = creator;
                } else {
                    tag = creator;
                }
            }

            nodes = create(html, doc, tag).childNodes;

            if (nodes.length === 1) { // return single node, breaking parentNode ref from "fragment"
                ret = nodes[0].parentNode.removeChild(nodes[0]);
            } else if (nodes[0] && nodes[0].className === 'yui3-big-dummy') { // using dummy node to preserve some attributes (e.g. OPTION not selected)
                if (nodes.length === 2) {
                    ret = nodes[0].nextSibling;
                } else {
                    nodes[0].parentNode.removeChild(nodes[0]);
                    ret = Y_DOM._nl2frag(nodes, doc);
                }
            } else { // return multiple nodes as a fragment
                 ret = Y_DOM._nl2frag(nodes, doc);
            }

        }

        return ret;
    },

    _nl2frag: function(nodes, doc) {
        var ret = null,
            i, len;

        if (nodes && (nodes.push || nodes.item) && nodes[0]) {
            doc = doc || nodes[0].ownerDocument;
            ret = doc.createDocumentFragment();

            if (nodes.item) { // convert live list to static array
                nodes = Y.Array(nodes, 0, true);
            }

            for (i = 0, len = nodes.length; i < len; i++) {
                ret.appendChild(nodes[i]);
            }
        } // else inline with log for minification
        return ret;
    },

    /**
     * Inserts content in a node at the given location
     * @method addHTML
     * @param {HTMLElement} node The node to insert into
     * @param {HTMLElement | Array | HTMLCollection} content The content to be inserted
     * @param {HTMLElement} where Where to insert the content
     * If no "where" is given, content is appended to the node
     * Possible values for "where"
     * <dl>
     * <dt>HTMLElement</dt>
     * <dd>The element to insert before</dd>
     * <dt>"replace"</dt>
     * <dd>Replaces the existing HTML</dd>
     * <dt>"before"</dt>
     * <dd>Inserts before the existing HTML</dd>
     * <dt>"before"</dt>
     * <dd>Inserts content before the node</dd>
     * <dt>"after"</dt>
     * <dd>Inserts content after the node</dd>
     * </dl>
     */
    addHTML: function(node, content, where) {
        var nodeParent = node.parentNode,
            i = 0,
            item,
            ret = content,
            newNode;


        if (content != undefined) { // not null or undefined (maybe 0)
            if (content.nodeType) { // DOM node, just add it
                newNode = content;
            } else if (typeof content == 'string' || typeof content == 'number') {
                ret = newNode = Y_DOM.create(content);
            } else if (content[0] && content[0].nodeType) { // array or collection
                newNode = Y.config.doc.createDocumentFragment();
                while ((item = content[i++])) {
                    newNode.appendChild(item); // append to fragment for insertion
                }
            }
        }

        if (where) {
            if (newNode && where.parentNode) { // insert regardless of relationship to node
                where.parentNode.insertBefore(newNode, where);
            } else {
                switch (where) {
                    case 'replace':
                        while (node.firstChild) {
                            node.removeChild(node.firstChild);
                        }
                        if (newNode) { // allow empty content to clear node
                            node.appendChild(newNode);
                        }
                        break;
                    case 'before':
                        if (newNode) {
                            nodeParent.insertBefore(newNode, node);
                        }
                        break;
                    case 'after':
                        if (newNode) {
                            if (node.nextSibling) { // IE errors if refNode is null
                                nodeParent.insertBefore(newNode, node.nextSibling);
                            } else {
                                nodeParent.appendChild(newNode);
                            }
                        }
                        break;
                    default:
                        if (newNode) {
                            node.appendChild(newNode);
                        }
                }
            }
        } else if (newNode) {
            node.appendChild(newNode);
        }

        return ret;
    },

    wrap: function(node, html) {
        var parent = (html && html.nodeType) ? html : Y.DOM.create(html),
            nodes = parent.getElementsByTagName('*');

        if (nodes.length) {
            parent = nodes[nodes.length - 1];
        }

        if (node.parentNode) {
            node.parentNode.replaceChild(parent, node);
        }
        parent.appendChild(node);
    },

    unwrap: function(node) {
        var parent = node.parentNode,
            lastChild = parent.lastChild,
            next = node,
            grandparent;

        if (parent) {
            grandparent = parent.parentNode;
            if (grandparent) {
                node = parent.firstChild;
                while (node !== lastChild) {
                    next = node.nextSibling;
                    grandparent.insertBefore(node, parent);
                    node = next;
                }
                grandparent.replaceChild(lastChild, parent);
            } else {
                parent.removeChild(node);
            }
        }
    }
});

addFeature('innerhtml', 'table', {
    test: function() {
        var node = Y.config.doc.createElement('table');
        try {
            node.innerHTML = '<tbody></tbody>';
        } catch(e) {
            return false;
        }
        return (node.firstChild && node.firstChild.nodeName === 'TBODY');
    }
});

addFeature('innerhtml-div', 'tr', {
    test: function() {
        return createFromDIV('<tr></tr>', 'tr');
    }
});

addFeature('innerhtml-div', 'script', {
    test: function() {
        return createFromDIV('<script></script>', 'script');
    }
});

if (!testFeature('innerhtml', 'table')) {
    // TODO: thead/tfoot with nested tbody
        // IE adds TBODY when creating TABLE elements (which may share this impl)
    creators.tbody = function(html, doc) {
        var frag = Y_DOM.create(TABLE_OPEN + html + TABLE_CLOSE, doc),
            tb = Y.DOM._children(frag, 'tbody')[0];

        if (frag.children.length > 1 && tb && !re_tbody.test(html)) {
            tb.parentNode.removeChild(tb); // strip extraneous tbody
        }
        return frag;
    };
}

if (!testFeature('innerhtml-div', 'script')) {
    creators.script = function(html, doc) {
        var frag = doc.createElement('div');

        frag.innerHTML = '-' + html;
        frag.removeChild(frag.firstChild);
        return frag;
    };

    creators.link = creators.style = creators.script;
}

if (!testFeature('innerhtml-div', 'tr')) {
    Y.mix(creators, {
        option: function(html, doc) {
            return Y_DOM.create('<select><option class="yui3-big-dummy" selected></option>' + html + '</select>', doc);
        },

        tr: function(html, doc) {
            return Y_DOM.create('<tbody>' + html + '</tbody>', doc);
        },

        td: function(html, doc) {
            return Y_DOM.create('<tr>' + html + '</tr>', doc);
        },

        col: function(html, doc) {
            return Y_DOM.create('<colgroup>' + html + '</colgroup>', doc);
        },

        tbody: 'table'
    });

    Y.mix(creators, {
        legend: 'fieldset',
        th: creators.td,
        thead: creators.tbody,
        tfoot: creators.tbody,
        caption: creators.tbody,
        colgroup: creators.tbody,
        optgroup: creators.option
    });
}

Y_DOM.creators = creators;
Y.mix(Y.DOM, {
    /**
     * Sets the width of the element to the given size, regardless
     * of box model, border, padding, etc.
     * @method setWidth
     * @param {HTMLElement} element The DOM element.
     * @param {String|Number} size The pixel height to size to
     */

    setWidth: function(node, size) {
        Y.DOM._setSize(node, 'width', size);
    },

    /**
     * Sets the height of the element to the given size, regardless
     * of box model, border, padding, etc.
     * @method setHeight
     * @param {HTMLElement} element The DOM element.
     * @param {String|Number} size The pixel height to size to
     */

    setHeight: function(node, size) {
        Y.DOM._setSize(node, 'height', size);
    },

    _setSize: function(node, prop, val) {
        val = (val > 0) ? val : 0;
        var size = 0;

        node.style[prop] = val + 'px';
        size = (prop === 'height') ? node.offsetHeight : node.offsetWidth;

        if (size > val) {
            val = val - (size - val);

            if (val < 0) {
                val = 0;
            }

            node.style[prop] = val + 'px';
        }
    }
});


}, '3.10.1', {"requires": ["dom-core"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/video-loader.js
// ----------------------------------------------------------------------------------------

/**
* Video Loader
* @module squarespace-video-loader
*/
YUI.add('squarespace-video-loader', function(Y) {

  Y.namespace('Squarespace');

  Y.Squarespace.VideoLoader = Y.Base.create('VideoLoader', Y.Plugin.Base,
    [],
    {
      initializer: function() {
        var host = this.get('host');

        host.plug(Y.Squarespace.NodeDestroyNotifier, {
          onDestroy: function() {
            this.destroy();
          },
          context: this
        });

        this._setVariables();

        this._resizeEmitter = new Y.Squarespace.ResizeEmitter({ timeout: 100 });

        this._modeClass = 'video-' + this.get('mode');
        host.addClass(this._modeClass);

        this.once('loaded', this.bindUI, this);

        if (this.get('load')) {
          this.load();
        }
      },

      destructor: function() {
        this._resizeEmitter.destroy();
      },

      load: function() {
        // don't load more than once
        if (this._loaded) { return; }

        // remove intrinsic and overlay for invalid videos
        if (this.get('type') == 'invalid') {
          this._intrinsic = false;

          if (this.get('overlay')) {
            this.get('overlay').remove();
            this._set('overlay', null);
          }
        }

        var host = this.get('host');
        var mode = this.get('mode');

        // remove existing mode-specific class and add new one
        host.removeClass(this._modeClass);

        this._modeClass = 'video-' + mode;
        host.addClass(this._modeClass);

        // apply intrinsic wrapper for none and fit modes
        var intrinsic;
        var intrinsicInner;

        if (this._intrinsic) {
          var videoWidth = this.getWidth();
          var videoHeight = this.getHeight();

          var paddingBottom;

          if (videoWidth && videoHeight) {
            paddingBottom = (videoHeight/videoWidth)*100;
          } else {
            paddingBottom = 56.3;
          }

          intrinsic = Y.Node.create('<div class="intrinsic"></div>');
          intrinsicInner = Y.Node.create('<div class="intrinsic-inner" style="padding-bottom: ' + paddingBottom + '%;"></div>');

          var parent = host.get('parentNode');
          var parentPosition = parent.getComputedStyle('position');

          if (mode == 'fit') {

            host.setStyles(host.getAdjustedDimensions({
              scale: 'contain',
              width: this.getWidth(),
              height: this.getHeight()
            }));

            if (parentPosition == 'static') {
              parent.setStyle('position', 'relative');
            }

          } else if (mode == 'fill') {
            if (parentPosition == 'static') {
              parent.setStyle('position', 'relative');
            }
          }

          if (this.get('overlay')) {
            this.get('overlay').wrap(intrinsicInner);
            intrinsicInner.wrap(intrinsic);
          } else {
            intrinsic.appendChild(intrinsicInner);
            host.appendChild(intrinsic);
          }
        }

        // make visible
        if (this.get('overlay')) {
          this.get('overlay').setStyle('opacity', 1);

          // refresh to correctly set image dimensions
          var overlayImage = this.get('overlay').one('img');

          if (overlayImage) {
            overlayImage.fire('refresh');

            this.get('overlay').one('img').plug(Y.Squarespace.Loader2, {
              load: true,
              mode: 'fill'
            });

            this.get('overlay').one('img').fire('refresh');
          }
        } else {

          if (intrinsic) {
            intrinsicInner.appendChild(this.get('video'));
          } else {
            host.appendChild(this.get('video'));
          }

          this._set('showingVideo', true);
        }

        this.fire('loaded');
        this._loaded = true;

      },

      unload: function() {
        var host = this.get('host');

        host.setStyles({
          top: null
        });

        // show overlay
        this.showOverlay();

        // remove elements from the DOM
        if (this.get('overlay')) {
          this.get('overlay').remove();
        }
        this.get('video').remove();

        // destroy intrinsic if it exists
        if (this._intrinsic) {
          host.one('.intrinsic').remove(true);
        }

        // re-append overlay
        if (this.get('overlay')) {
          this.get('overlay').setStyle('opacity', 0);
          host.appendChild(this.get('overlay'));
        }

        this._setIntrinsic();

        this._loaded = false;
      },

      reload: function() {
        this.unload();
        this.load();
      },

      bindUI: function() {

        // show video on overlay click (only in frontend)
        if (!Static.IN_BACKEND) {
          if (this.get('overlay')) {
            this.get('overlay').on('click', function(e) {
              if (!this.get('inactive')) {
                this.showVideo();
              }
            }, this);
          }
        }

        // reload video after change in mode
        this.after('modeChange', this.reload, this);

        // correctly set intrinsic top after resize and tweak open/close
        this._resizeEmitter.on('resize', function() {
          if (this.get('mode') == 'fit') {
            this._resetFitTop();
          }

          if (this.get('overlay')) {
            this.get('overlay').one('img').fire('refresh');
          }
        }, this);

        Y.Global.on('tweak:aftershow', function() {
          if (this.get('mode') == 'fit') {
            this._resetFitTop();
          }
        }, this);

        Y.Global.after('tweak:afterclose', function() {
          if (this.get('mode') == 'fit') {
            setTimeout(Y.bind(function() {
              this._resetFitTop();
            }, this), 1000);
          }
        }, this);
      },

      showVideo: function() {
        // don't show video if already showing or no overlay exists
        if (this.get('showingVideo') || !this.get('overlay')) { return; }

        this._set('showingVideo', true);

        this._showOverlayOnOthers();

        var video = this.get('video');

        video.setStyle('opacity', 0);

        if (this._intrinsic) {
          this.get('host').one('.intrinsic-inner').appendChild(video);
        } else {
          this.get('host').appendChild(video);
        }

        // transition from overlay to video
        var overlay = this.get('overlay');
        overlay.one('.sqs-video-opaque').anim({opacity: 1}, {
          duration: 1,
          start: function() {
            overlay.one('.sqs-video-icon').setStyle('visibility', 'hidden');
          },
          end: function() {
            this.get('video').setStyle('opacity', 1);
            if (this.get('showingVideo')) {
              overlay.setStyle('visibility', 'hidden');
            }
            if (overlay.hasClass('no-thumb')) {
              overlay.one('.sqs-video-opaque').setStyle('opacity', 1);
            } else {
              overlay.one('.sqs-video-opaque').setStyle('opacity', 0);
            }
            overlay.one('.sqs-video-icon').setStyle('visibility', null);
          },
          context: this
        }).run();
      },

      showOverlay: function() {
        // don't show overlay if already not showing or no overlay exists
        if (!this.get('showingVideo') || !this.get('overlay')) { return; }

        this._set('showingVideo', false);

        this.get('overlay').setStyle('opacity', 0);
        this.get('overlay').setStyle('visibility', null);

        // transition from video to overlay
        var video = this.get('video');

        video.anim({opacity: 0}, {
          duration: 0.3,
          start: function() {
            this.get('overlay').anim({opacity: 1}, {
              duration: 0.3
            }).run();
          },
          end: function() {
            video.remove();
          },
          context: this
        }).run();
      },

      refreshVideo: function() {
        // don't refresh if already loaded
        if (!this.get('showingVideo')) { return; }

        var video = this.get('video');

        if (this.get('type') == 'object') {
          video.remove();

          var host = this.get('host');

          if (this._intrinsic) {
            host.one('.intrinsic-inner').appendChild(video);
          } else {
            host.appendChild(video);
          }
        } else if (this.get('type') == 'iframe') {
          video.setAttribute('src', video.getAttribute('src'));
        }
      },

      play: function() {
        // do nothing if api is not supported
        if (!this.get('apiFriendly')) { return; }

        var player = this.get('video').getDOMNode().contentWindow;

        switch (this._providerName) {
          case 'Vimeo':
            player.postMessage('{"method": "play", "value": "true"}', '*');
            break;

          case 'YouTube':
            player.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
            break;
        }
      },

      pause: function() {
        // do nothing if api is not supported
        if (!this.get('apiFriendly')) { return; }

        var player = this.get('video').getDOMNode().contentWindow;

        switch (this._providerName) {
          case 'Vimeo':
            player.postMessage('{"method": "pause", "value": "true"}', '*');
            break;

          case 'YouTube':
            player.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
            break;
        }
      },

      getWidth: function() {
        return this.get('video').getAttribute('width');
      },

      getHeight: function() {
        return this.get('video').getAttribute('height');
      },

      _setVariables: function() {
        var host = this.get('host');

        this._setIntrinsic();

        // this.get('overlay')
        this._set('overlay', host.one('.sqs-video-overlay'));

        // this.get('video'), this.get('type')
        var videoNode = Y.Node.create(host.getAttribute('data-html'));

        var invalidNode = Y.Node.create(
          '<div class="sqs-video-invalid-wrapper">' +
            '<div class="state-message">Invalid video embed.</div>' +
          '</div>'
        );

        var video;
        if (!videoNode) {
          video = invalidNode;
          this._set('type', 'invalid');
        }

        else if (videoNode.test('iframe')) {
          video = videoNode;
          this._set('type', 'iframe');
        }

        else if (videoNode.test('object')) {
          video = videoNode;
          this._set('type', 'object');
        }

        else if (videoNode.one('iframe')) {
          video = videoNode.one('iframe');
          this._set('type', 'iframe');
        }

        else if (videoNode.one('object')) {

          if (videoNode.one('embed')) {
            video = videoNode.one('object');
            this._set('type', 'object');
          } else {
            video = invalidNode;
            this._set('type', 'invalid');
          }
        }

        else {
          video = invalidNode;
          this._set('type', 'invalid');
        }

        this._set('video', video);

        // this._providerName
        var providerName = host.getAttribute('data-provider-name');
        if ((!providerName || providerName === '') && this.get('type') != 'invalid') {
          var src = this.get('video').getAttribute('src');
          if (src.match('player.vimeo.com')) {
            providerName = 'Vimeo';
          } else if (src.match('www.youtube.com')) {
            providerName = 'YouTube';
          }
        }

        this._providerName = providerName;

        if (this.get('type') === 'invalid') {
          host.addClass('video-invalid');
        } else {
          this._augmentVideoSrc();
          host.removeClass('video-invalid');
        }
      },

      _setIntrinsic: function() {
        this._intrinsic = (this.get('mode') == 'none' || this.get('mode') == 'fit');
      },

      _resetFitTop: function() {
        var host = this.get('host');

        var parentHeight = host.get('parentNode').get('offsetHeight');

        var intrinsic = host.one('.intrinsic');
        intrinsic.setStyle('top', null);

        var intrinsicHeight = intrinsic.get('offsetHeight');

        host.setStyle('top', (parentHeight - intrinsicHeight)/2 + 'px');
      },

      _augmentVideoSrc: function() {
        var srcEl = (this.get('type') == 'iframe') ? this.get('video') : this.get('video').one('embed');

        var src = srcEl.getAttribute('src');
        var splitSrc = src.split('?');
        var baseUrl = splitSrc[0];
        var queryString = splitSrc[1] || '';
        var queryParams = Y.QueryString.parse(queryString);

        // set autoplay if overlay exists
        if (this.get('overlay')) {
          if (this._providerName == 'Wistia, Inc.') {
            queryParams.autoPlay = 'true';
          } else {
            queryParams.autoplay = 1;
          }
        }

        // set https for object embeds and Vimeo videos
        var providerName = this._providerName;

        if (this.get('type') == 'object' || providerName == 'Vimeo' || providerName == 'YouTube') {
          if (window.location.protocol.startsWith('https')) {
            baseUrl = baseUrl.replace('http://', 'https://');
          }
        }

        /**
         * SIX-9838 fixing corrupt data during a small period where
         * we were incorrectly adding 'http://' to Vimeo src attributes
         * that already contained '//'. -dbarber
         */
        baseUrl = baseUrl.replace('http:////', '//');
        baseUrl = baseUrl.replace('https:////', '//');

        // enable API interactions for supported services
        if (this.get('type') == 'iframe') {
          switch (this._providerName) {
            case 'Vimeo':
              queryParams.api = 1;
              this._set('apiFriendly', true);
              break;

            case 'YouTube':
              queryParams.enablejsapi = 1;
              this._set('apiFriendly', true);
              break;
          }
        }

        src = baseUrl + '?' + Y.QueryString.stringify(queryParams);

        srcEl.setAttribute('src', src);
      },

      _showOverlayOnOthers: function() {
        Y.all('.sqs-video-wrapper').each(function(videoWrapperEl) {
          if (videoWrapperEl == this.get('host')) { return; }
          videoWrapperEl.videoloader.showOverlay();
        }, this);
      }
    },

    {
      NS: 'videoloader',
      ATTRS: {
        apiFriendly: {
          value: false,
          readOnly: true
        },

        inactive: {
          value: false
        },

        load: {
          value: true
        },

        mode: {
          value: 'none',
          validator: function(val) {
            return ['none', 'fit', 'fill', null].indexOf(val) != -1;
          }
        },

        overlay: {
          value: null,
          readOnly: true
        },

        showingVideo: {
          value: false,
          readOnly: true
        },

        type: {
          value: null,
          readOnly: true
        },

        video: {
          value: null,
          readOnly: true
        }
      }
    }
  );
}, '1.0', { requires: [
  "base",
  "plugin",
  "node",
  "querystring",
  "squarespace-image-loader",
  "squarespace-video-css"
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-base/anim-base.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-base', function (Y, NAME) {

/**
* The Animation Utility provides an API for creating advanced transitions.
* @module anim
*/

/**
* Provides the base Anim class, for animating numeric properties.
*
* @module anim
* @submodule anim-base
*/

    /**
     * A class for constructing animation instances.
     * @class Anim
     * @for Anim
     * @constructor
     * @extends Base
     */

    var RUNNING = 'running',
        START_TIME = 'startTime',
        ELAPSED_TIME = 'elapsedTime',
        /**
        * @for Anim
        * @event start
        * @description fires when an animation begins.
        * @param {Event} ev The start event.
        * @type Event.Custom
        */
        START = 'start',

        /**
        * @event tween
        * @description fires every frame of the animation.
        * @param {Event} ev The tween event.
        * @type Event.Custom
        */
        TWEEN = 'tween',

        /**
        * @event end
        * @description fires after the animation completes.
        * @param {Event} ev The end event.
        * @type Event.Custom
        */
        END = 'end',
        NODE = 'node',
        PAUSED = 'paused',
        REVERSE = 'reverse', // TODO: cleanup
        ITERATION_COUNT = 'iterationCount',

        NUM = Number;

    var _running = {},
        _timer;

    Y.Anim = function() {
        Y.Anim.superclass.constructor.apply(this, arguments);
        Y.Anim._instances[Y.stamp(this)] = this;
    };

    Y.Anim.NAME = 'anim';

    Y.Anim._instances = {};

    /**
     * Regex of properties that should use the default unit.
     *
     * @property RE_DEFAULT_UNIT
     * @static
     */
    Y.Anim.RE_DEFAULT_UNIT = /^width|height|top|right|bottom|left|margin.*|padding.*|border.*$/i;

    /**
     * The default unit to use with properties that pass the RE_DEFAULT_UNIT test.
     *
     * @property DEFAULT_UNIT
     * @static
     */
    Y.Anim.DEFAULT_UNIT = 'px';

    Y.Anim.DEFAULT_EASING = function (t, b, c, d) {
        return c * t / d + b; // linear easing
    };

    /**
     * Time in milliseconds passed to setInterval for frame processing
     *
     * @property intervalTime
     * @default 20
     * @static
     */
    Y.Anim._intervalTime = 20;

    /**
     * Bucket for custom getters and setters
     *
     * @property behaviors
     * @static
     */
    Y.Anim.behaviors = {
        left: {
            get: function(anim, attr) {
                return anim._getOffset(attr);
            }
        }
    };

    Y.Anim.behaviors.top = Y.Anim.behaviors.left;

    /**
     * The default setter to use when setting object properties.
     *
     * @property DEFAULT_SETTER
     * @static
     */
    Y.Anim.DEFAULT_SETTER = function(anim, att, from, to, elapsed, duration, fn, unit) {
        var node = anim._node,
            domNode = node._node,
            val = fn(elapsed, NUM(from), NUM(to) - NUM(from), duration);

        if (domNode) {
            if ('style' in domNode && (att in domNode.style || att in Y.DOM.CUSTOM_STYLES)) {
                unit = unit || '';
                node.setStyle(att, val + unit);
            } else if ('attributes' in domNode && att in domNode.attributes) {
                node.setAttribute(att, val);
            } else if (att in domNode) {
                domNode[att] = val;
            }
        } else if (node.set) {
            node.set(att, val);
        } else if (att in node) {
            node[att] = val;
        }
    };

    /**
     * The default getter to use when getting object properties.
     *
     * @property DEFAULT_GETTER
     * @static
     */
    Y.Anim.DEFAULT_GETTER = function(anim, att) {
        var node = anim._node,
            domNode = node._node,
            val = '';

        if (domNode) {
            if ('style' in domNode && (att in domNode.style || att in Y.DOM.CUSTOM_STYLES)) {
                val = node.getComputedStyle(att);
            } else if ('attributes' in domNode && att in domNode.attributes) {
                val = node.getAttribute(att);
            } else if (att in domNode) {
                val = domNode[att];
            }
        } else if (node.get) {
            val = node.get(att);
        } else if (att in node) {
            val = node[att];
        }

        return val;
    };

    Y.Anim.ATTRS = {
        /**
         * The object to be animated.
         * @attribute node
         * @type Node
         */
        node: {
            setter: function(node) {
                if (node) {
                    if (typeof node === 'string' || node.nodeType) {
                        node = Y.one(node);
                    }
                }

                this._node = node;
                if (!node) {
                }
                return node;
            }
        },

        /**
         * The length of the animation.  Defaults to "1" (second).
         * @attribute duration
         * @type NUM
         */
        duration: {
            value: 1
        },

        /**
         * The method that will provide values to the attribute(s) during the animation.
         * Defaults to "Easing.easeNone".
         * @attribute easing
         * @type Function
         */
        easing: {
            value: Y.Anim.DEFAULT_EASING,

            setter: function(val) {
                if (typeof val === 'string' && Y.Easing) {
                    return Y.Easing[val];
                }
            }
        },

        /**
         * The starting values for the animated properties.
         *
         * Fields may be strings, numbers, or functions.
         * If a function is used, the return value becomes the from value.
         * If no from value is specified, the DEFAULT_GETTER will be used.
         * Supports any unit, provided it matches the "to" (or default)
         * unit (e.g. `{width: '10em', color: 'rgb(0, 0, 0)', borderColor: '#ccc'}`).
         *
         * If using the default ('px' for length-based units), the unit may be omitted
         * (e.g. `{width: 100}, borderColor: 'ccc'}`, which defaults to pixels
         * and hex, respectively).
         *
         * @attribute from
         * @type Object
         */
        from: {},

        /**
         * The ending values for the animated properties.
         *
         * Fields may be strings, numbers, or functions.
         * Supports any unit, provided it matches the "from" (or default)
         * unit (e.g. `{width: '50%', color: 'red', borderColor: '#ccc'}`).
         *
         * If using the default ('px' for length-based units), the unit may be omitted
         * (e.g. `{width: 100, borderColor: 'ccc'}`, which defaults to pixels
         * and hex, respectively).
         *
         * @attribute to
         * @type Object
         */
        to: {},

        /**
         * Date stamp for the first frame of the animation.
         * @attribute startTime
         * @type Int
         * @default 0
         * @readOnly
         */
        startTime: {
            value: 0,
            readOnly: true
        },

        /**
         * Current time the animation has been running.
         * @attribute elapsedTime
         * @type Int
         * @default 0
         * @readOnly
         */
        elapsedTime: {
            value: 0,
            readOnly: true
        },

        /**
         * Whether or not the animation is currently running.
         * @attribute running
         * @type Boolean
         * @default false
         * @readOnly
         */
        running: {
            getter: function() {
                return !!_running[Y.stamp(this)];
            },
            value: false,
            readOnly: true
        },

        /**
         * The number of times the animation should run
         * @attribute iterations
         * @type Int
         * @default 1
         */
        iterations: {
            value: 1
        },

        /**
         * The number of iterations that have occurred.
         * Resets when an animation ends (reaches iteration count or stop() called).
         * @attribute iterationCount
         * @type Int
         * @default 0
         * @readOnly
         */
        iterationCount: {
            value: 0,
            readOnly: true
        },

        /**
         * How iterations of the animation should behave.
         * Possible values are "normal" and "alternate".
         * Normal will repeat the animation, alternate will reverse on every other pass.
         *
         * @attribute direction
         * @type String
         * @default "normal"
         */
        direction: {
            value: 'normal' // | alternate (fwd on odd, rev on even per spec)
        },

        /**
         * Whether or not the animation is currently paused.
         * @attribute paused
         * @type Boolean
         * @default false
         * @readOnly
         */
        paused: {
            readOnly: true,
            value: false
        },

        /**
         * If true, animation begins from last frame
         * @attribute reverse
         * @type Boolean
         * @default false
         */
        reverse: {
            value: false
        }


    };

    /**
     * Runs all animation instances.
     * @method run
     * @static
     */
    Y.Anim.run = function() {
        var instances = Y.Anim._instances,
            i;
        for (i in instances) {
            if (instances[i].run) {
                instances[i].run();
            }
        }
    };

    /**
     * Pauses all animation instances.
     * @method pause
     * @static
     */
    Y.Anim.pause = function() {
        for (var i in _running) { // stop timer if nothing running
            if (_running[i].pause) {
                _running[i].pause();
            }
        }

        Y.Anim._stopTimer();
    };

    /**
     * Stops all animation instances.
     * @method stop
     * @static
     */
    Y.Anim.stop = function() {
        for (var i in _running) { // stop timer if nothing running
            if (_running[i].stop) {
                _running[i].stop();
            }
        }
        Y.Anim._stopTimer();
    };

    Y.Anim._startTimer = function() {
        if (!_timer) {
            _timer = setInterval(Y.Anim._runFrame, Y.Anim._intervalTime);
        }
    };

    Y.Anim._stopTimer = function() {
        clearInterval(_timer);
        _timer = 0;
    };

    /**
     * Called per Interval to handle each animation frame.
     * @method _runFrame
     * @private
     * @static
     */
    Y.Anim._runFrame = function() {
        var done = true,
            anim;
        for (anim in _running) {
            if (_running[anim]._runFrame) {
                done = false;
                _running[anim]._runFrame();
            }
        }

        if (done) {
            Y.Anim._stopTimer();
        }
    };

    Y.Anim.RE_UNITS = /^(-?\d*\.?\d*){1}(em|ex|px|in|cm|mm|pt|pc|%)*$/;

    var proto = {
        /**
         * Starts or resumes an animation.
         * @method run
         * @chainable
         */
        run: function() {
            if (this.get(PAUSED)) {
                this._resume();
            } else if (!this.get(RUNNING)) {
                this._start();
            }
            return this;
        },

        /**
         * Pauses the animation and
         * freezes it in its current state and time.
         * Calling run() will continue where it left off.
         * @method pause
         * @chainable
         */
        pause: function() {
            if (this.get(RUNNING)) {
                this._pause();
            }
            return this;
        },

        /**
         * Stops the animation and resets its time.
         * @method stop
         * @param {Boolean} finish If true, the animation will move to the last frame
         * @chainable
         */
        stop: function(finish) {
            if (this.get(RUNNING) || this.get(PAUSED)) {
                this._end(finish);
            }
            return this;
        },

        _added: false,

        _start: function() {
            this._set(START_TIME, new Date() - this.get(ELAPSED_TIME));
            this._actualFrames = 0;
            if (!this.get(PAUSED)) {
                this._initAnimAttr();
            }
            _running[Y.stamp(this)] = this;
            Y.Anim._startTimer();

            this.fire(START);
        },

        _pause: function() {
            this._set(START_TIME, null);
            this._set(PAUSED, true);
            delete _running[Y.stamp(this)];

            /**
            * @event pause
            * @description fires when an animation is paused.
            * @param {Event} ev The pause event.
            * @type Event.Custom
            */
            this.fire('pause');
        },

        _resume: function() {
            this._set(PAUSED, false);
            _running[Y.stamp(this)] = this;
            this._set(START_TIME, new Date() - this.get(ELAPSED_TIME));
            Y.Anim._startTimer();

            /**
            * @event resume
            * @description fires when an animation is resumed (run from pause).
            * @param {Event} ev The pause event.
            * @type Event.Custom
            */
            this.fire('resume');
        },

        _end: function(finish) {
            var duration = this.get('duration') * 1000;
            if (finish) { // jump to last frame
                this._runAttrs(duration, duration, this.get(REVERSE));
            }

            this._set(START_TIME, null);
            this._set(ELAPSED_TIME, 0);
            this._set(PAUSED, false);

            delete _running[Y.stamp(this)];
            this.fire(END, {elapsed: this.get(ELAPSED_TIME)});
        },

        _runFrame: function() {
            var d = this._runtimeAttr.duration,
                t = new Date() - this.get(START_TIME),
                reverse = this.get(REVERSE),
                done = (t >= d);

            this._runAttrs(t, d, reverse);
            this._actualFrames += 1;
            this._set(ELAPSED_TIME, t);

            this.fire(TWEEN);
            if (done) {
                this._lastFrame();
            }
        },

        _runAttrs: function(t, d, reverse) {
            var attr = this._runtimeAttr,
                customAttr = Y.Anim.behaviors,
                easing = attr.easing,
                lastFrame = d,
                done = false,
                attribute,
                setter,
                i;

            if (t >= d) {
                done = true;
            }

            if (reverse) {
                t = d - t;
                lastFrame = 0;
            }

            for (i in attr) {
                if (attr[i].to) {
                    attribute = attr[i];
                    setter = (i in customAttr && 'set' in customAttr[i]) ?
                            customAttr[i].set : Y.Anim.DEFAULT_SETTER;

                    if (!done) {
                        setter(this, i, attribute.from, attribute.to, t, d, easing, attribute.unit);
                    } else {
                        setter(this, i, attribute.from, attribute.to, lastFrame, d, easing, attribute.unit);
                    }
                }
            }


        },

        _lastFrame: function() {
            var iter = this.get('iterations'),
                iterCount = this.get(ITERATION_COUNT);

            iterCount += 1;
            if (iter === 'infinite' || iterCount < iter) {
                if (this.get('direction') === 'alternate') {
                    this.set(REVERSE, !this.get(REVERSE)); // flip it
                }
                /**
                * @event iteration
                * @description fires when an animation begins an iteration.
                * @param {Event} ev The iteration event.
                * @type Event.Custom
                */
                this.fire('iteration');
            } else {
                iterCount = 0;
                this._end();
            }

            this._set(START_TIME, new Date());
            this._set(ITERATION_COUNT, iterCount);
        },

        _initAnimAttr: function() {
            var from = this.get('from') || {},
                to = this.get('to') || {},
                attr = {
                    duration: this.get('duration') * 1000,
                    easing: this.get('easing')
                },
                customAttr = Y.Anim.behaviors,
                node = this.get(NODE), // implicit attr init
                unit, begin, end;

            Y.each(to, function(val, name) {
                if (typeof val === 'function') {
                    val = val.call(this, node);
                }

                begin = from[name];
                if (begin === undefined) {
                    begin = (name in customAttr && 'get' in customAttr[name])  ?
                            customAttr[name].get(this, name) : Y.Anim.DEFAULT_GETTER(this, name);
                } else if (typeof begin === 'function') {
                    begin = begin.call(this, node);
                }

                var mFrom = Y.Anim.RE_UNITS.exec(begin),
                    mTo = Y.Anim.RE_UNITS.exec(val);

                begin = mFrom ? mFrom[1] : begin;
                end = mTo ? mTo[1] : val;
                unit = mTo ? mTo[2] : mFrom ?  mFrom[2] : ''; // one might be zero TODO: mixed units

                if (!unit && Y.Anim.RE_DEFAULT_UNIT.test(name)) {
                    unit = Y.Anim.DEFAULT_UNIT;
                }

                if (!begin || !end) {
                    Y.error('invalid "from" or "to" for "' + name + '"', 'Anim');
                    return;
                }

                attr[name] = {
                    from: Y.Lang.isObject(begin) ? Y.clone(begin) : begin,
                    to: end,
                    unit: unit
                };

            }, this);

            this._runtimeAttr = attr;
        },


        // TODO: move to computedStyle? (browsers dont agree on default computed offsets)
        _getOffset: function(attr) {
            var node = this._node,
                val = node.getComputedStyle(attr),
                get = (attr === 'left') ? 'getX': 'getY',
                set = (attr === 'left') ? 'setX': 'setY',
                position;

            if (val === 'auto') {
                position = node.getStyle('position');
                if (position === 'absolute' || position === 'fixed') {
                    val = node[get]();
                    node[set](val);
                } else {
                    val = 0;
                }
            }

            return val;
        },

        destructor: function() {
            delete Y.Anim._instances[Y.stamp(this)];
        }
    };

    Y.extend(Y.Anim, Y.Base, proto);


}, '3.10.1', {"requires": ["base-base", "node-style"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-pluginhost/node-pluginhost.js
// ----------------------------------------------------------------------------------------

YUI.add('node-pluginhost', function (Y, NAME) {

/**
 * @module node
 * @submodule node-pluginhost
 */

/**
 * Registers plugins to be instantiated at the class level (plugins
 * which should be plugged into every instance of Node by default).
 *
 * @method plug
 * @static
 * @for Node
 * @param {Function | Array} plugin Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)
 * @param {Object} config (Optional) If plugin is the plugin class, the configuration for the plugin
 */
Y.Node.plug = function() {
    var args = Y.Array(arguments);
    args.unshift(Y.Node);
    Y.Plugin.Host.plug.apply(Y.Base, args);
    return Y.Node;
};

/**
 * Unregisters any class level plugins which have been registered by the Node
 *
 * @method unplug
 * @static
 *
 * @param {Function | Array} plugin The plugin class, or an array of plugin classes
 */
Y.Node.unplug = function() {
    var args = Y.Array(arguments);
    args.unshift(Y.Node);
    Y.Plugin.Host.unplug.apply(Y.Base, args);
    return Y.Node;
};

Y.mix(Y.Node, Y.Plugin.Host, false, null, 1);

// allow batching of plug/unplug via NodeList
// doesn't use NodeList.importMethod because we need real Nodes (not tmpNode)
/**
 * Adds a plugin to each node in the NodeList.
 * This will instantiate the plugin and attach it to the configured namespace on each node
 * @method plug
 * @for NodeList
 * @param P {Function | Object |Array} Accepts the plugin class, or an
 * object with a "fn" property specifying the plugin class and
 * a "cfg" property specifying the configuration for the Plugin.
 * <p>
 * Additionally an Array can also be passed in, with the above function or
 * object values, allowing the user to add multiple plugins in a single call.
 * </p>
 * @param config (Optional) If the first argument is the plugin class, the second argument
 * can be the configuration for the plugin.
 * @chainable
 */
Y.NodeList.prototype.plug = function() {
    var args = arguments;
    Y.NodeList.each(this, function(node) {
        Y.Node.prototype.plug.apply(Y.one(node), args);
    });
    return this;
};

/**
 * Removes a plugin from all nodes in the NodeList. This will destroy the
 * plugin instance and delete the namespace each node.
 * @method unplug
 * @for NodeList
 * @param {String | Function} plugin The namespace of the plugin, or the plugin class with the static NS namespace property defined. If not provided,
 * all registered plugins are unplugged.
 * @chainable
 */
Y.NodeList.prototype.unplug = function() {
    var args = arguments;
    Y.NodeList.each(this, function(node) {
        Y.Node.prototype.unplug.apply(Y.one(node), args);
    });
    return this;
};


}, '3.10.1', {"requires": ["node-base", "pluginhost"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/hb-templates/SearchContainerFullScreen-template.js
// ----------------------------------------------------------------------------------------

// Generated from seed-templates/handlebars-module-template.js
YUI.add('squarespace-SearchContainerFullScreen-template', function(Y) {
  var Handlebars = Y.Handlebars;
  (function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['SearchContainerFullScreen.html'] = template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;
function program1(depth0,data) {
  return "\n      <div class=\"loading\"><div class=\"spinner-wrapper\"></div><div class=\"desc\"> Searching your content... </div></div>\n    ";
  }
function program3(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n      ";
  stack1 = helpers['if'].call(depth0, depth0.notice, {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      ";
  stack1 = helpers['if'].call(depth0, depth0.error, {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n     ";
  stack1 = helpers['if'].call(depth0, depth0.items, {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;
  }
function program4(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n        <div class=\"search-result-notice\">";
  if (stack1 = helpers.notice) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.notice; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n      ";
  return buffer;
  }
function program6(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n        <div class=\"search-result-notice error\">";
  if (stack1 = helpers.error) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.error; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n      ";
  return buffer;
  }
function program8(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n     <div class=\"sqs-search-ui-list\">\n        <div class=\"search-results\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.items, {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n        ";
  stack1 = helpers['if'].call(depth0, depth0.facets, {hash:{},inverse:self.noop,fn:self.program(20, program20, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </div>\n      ";
  return buffer;
  }
function program9(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n          <div class=\"search-result\" itemid=\"";
  if (stack1 = helpers.id) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n            <div class=\"sqs-search-ui-item sqs-post ";
  stack1 = helpers['if'].call(depth0, depth0.recordTypeName, {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  if (stack1 = helpers.documentType) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.documentType; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n              ";
  stack1 = helpers['if'].call(depth0, depth0.imageUrl, {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              <div class=\"sqs-title\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " \n                ";
  stack1 = helpers['if'].call(depth0, depth0.recordTypeName, {hash:{},inverse:self.noop,fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, depth0.editable, {hash:{},inverse:self.noop,fn:self.program(16, program16, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              </div>\n              <div class=\"sqs-content\">\n                ";
  stack1 = helpers.each.call(depth0, depth0.highlight, {hash:{},inverse:self.noop,fn:self.program(18, program18, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              </div>\n            </div>\n          </div>  \n          ";
  return buffer;
  }
function program10(depth0,data) {
  var buffer = "", stack1;
  buffer += "sqs-post-type-";
  if (stack1 = helpers.recordTypeName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.recordTypeName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1);
  return buffer;
  }
function program12(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n              <div class=\"sqs-main-image\">\n                <img src=\"";
  if (stack1 = helpers.imageUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.imageUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "?format=150w\"> \n              </div>\n              ";
  return buffer;
  }
function program14(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n                <span class=\"record-type\">";
  if (stack1 = helpers.recordTypeName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.recordTypeName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</span>\n                ";
  return buffer;
  }
function program16(depth0,data) {
  return "\n                <span class=\"edit\">Edit</span>\n                ";
  }
function program18(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n                <span>&hellip;</span>\n                <span>";
  stack1 = (typeof depth0 === functionType ? depth0.apply(depth0) : depth0);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n                ";
  return buffer;
  }
function program20(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n        <div class=\"sqs-search-ui-filters\">\n          <ul>\n            ";
  stack1 = helpers.each.call(depth0, depth0.facets, {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n          </ul>\n        </div>\n        ";
  return buffer;
  }
function program21(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n            <li class=\"sqs-search-ui-filters-group\" name=\"";
  if (stack1 = helpers.name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n              <strong>";
  if (stack1 = helpers.displayName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.displayName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</strong>\n              <ul>\n                ";
  stack1 = helpers.each.call(depth0, depth0.values, {hash:{},inverse:self.noop,fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n              </ul>\n            </li>\n            ";
  return buffer;
  }
function program22(depth0,data) {
  var buffer = "", stack1;
  buffer += "\n                <li displayname=\"";
  if (stack1 = helpers.displayName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.displayName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" class=\"";
  stack1 = helpers['if'].call(depth0, depth0.active, {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" filter=\"";
  if (stack1 = helpers.value) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.value; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\">\n                  <a>";
  if (stack1 = helpers.displayName) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.displayName; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " <span class=\"count\">";
  if (stack1 = helpers.hits) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.hits; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</span></a>\n                </li>\n                ";
  return buffer;
  }
function program23(depth0,data) {
  return "active";
  }
  buffer += "<div class\"sqs-search-ui\">\n  <div class=\"sqs-search-ui-close test\"></div>\n  <div id=\"searchInputBox\"></div>\n  <div class=\"sqs-search-ui-result\">\n    ";
  stack1 = helpers['if'].call(depth0, depth0.loading, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </div>\n</div>";
  return buffer;
  });
})();
  var filename = 'SearchContainerFullScreen.html';
  Y.Handlebars.registerPartial(filename.replace('/', '.'), Handlebars.templates[filename]);
}, '1.0', {
  requires: [
    "handlebars-base"
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/gismo.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-gismo', function(Y) {

  /*
   * Gismo is a lightweight animation, timer, and event management system for YUI classes
   * This is a Work In Progress.
   *
   * When mixed into a class (Y.Base.create("YourClass", Y.Squarespace.SSWidget, [Y.Squarespace.Gismo]))
   * it adds the following methods:
   *
   * - _anim( [element - required], [toProperties - required], [other Y.Anim options - optional]) -- usage this._anim('body', {opacity: 1}, {duration: 0.5})
   * - _event( [event - required], [type - optional]) -- usage this._event(Y.one('body').on('mousemove', function() { alert('move'); }), 'mousemove')
   * - _flushEvents( [type - required] ) -- usage this._flushEvents('mousemove')
   * - _timer( [timer - required], [type - optional]) -- usage this._timer(Y.later(100, this, function() { alert('hey'); }), 'alerter');
   *
   * the type parameter is used to group events and timers, so you can detach / cancel them easily. by default, the type is generic.
   */

  Y.Squarespace.GismoBase = function() {
    this._gismoEvents = {};
    this._timers = {};
    this._anims = this._anims || [ ];
  };

  Y.Squarespace.GismoBase.prototype = {
    destructor: function() {
      for (var type in this._gismoEvents) {
        while (this._gismoEvents[type].length !== 0) {
          this._gismoEvents[type].shift().detach();
        }
      }

      for (var timerType in this.timers) {
        while (this._timer[timerType].length !== 0) {
          this._timer[timerType].shift().cancel();
        }
      }

      if (this._anims.shift) {
        while (this._anims.length !== 0) {
          this._anims.shift().destroy();
        }
      } else if (this._anims.destructor) {
        this._anims.destructor();
      }

    },

    /*
     * Animations
     */
    _anim: function(el, to, opts) {
      var anim = el.anim(to, opts || {});
      anim.on('end', function() {
        this._anims.remove(anim);
      }, this);
      this._anims.push(anim);

      return anim;
    },

    /*
     * Event Management
     */

    _event: function(e, type) {
      type = type || 'generic';
      this._gismoEvents[type] = this._gismoEvents[type] || [];
      this._gismoEvents[type].push(e);
    },

    _getEvents: function(type) {
      return this._gismoEvents[type || 'generic'];
    },

    _flushEvents: function (type) {
      type = type || 'generic';
      if (!!this._gismoEvents[type]) {
        while (this._gismoEvents[type].length !== 0) {
          this._gismoEvents[type].shift().detach();
        }
      }
    },

    /*
     * Timer Management
     */
    _timer: function(timer, type) {
      type = type || 'generic';
      this._timers[type] = this._timers[type] || [];
      this._timers[type].push(timer);
    }

  };

}, "1.0", { requires: [
  "squarespace-anims",
  "squarespace-util"
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/intl/intl.js
// ----------------------------------------------------------------------------------------

YUI.add('intl', function (Y, NAME) {

var _mods = {},

    ROOT_LANG = "yuiRootLang",
    ACTIVE_LANG = "yuiActiveLang",
    NONE = [];

/**
 * Provides utilities to support the management of localized resources (strings and formatting patterns).
 *
 * @module intl
 */

/**
 * The Intl utility provides a central location for managing sets of localized resources (strings and formatting patterns).
 *
 * @class Intl
 * @uses EventTarget
 * @static
 */
Y.mix(Y.namespace("Intl"), {

    /**
     * Private method to retrieve the language hash for a given module.
     *
     * @method _mod
     * @private
     *
     * @param {String} module The name of the module
     * @return {Object} The hash of localized resources for the module, keyed by BCP language tag
     */
    _mod : function(module) {
        if (!_mods[module]) {
            _mods[module] = {};
        }
        return _mods[module];
    },

    /**
     * Sets the active language for the given module.
     *
     * Returns false on failure, which would happen if the language had not been registered through the <a href="#method_add">add()</a> method.
     *
     * @method setLang
     *
     * @param {String} module The module name.
     * @param {String} lang The BCP 47 language tag.
     * @return boolean true if successful, false if not.
     */
    setLang : function(module, lang) {
        var langs = this._mod(module),
            currLang = langs[ACTIVE_LANG],
            exists = !!langs[lang];

        if (exists && lang !== currLang) {
            langs[ACTIVE_LANG] = lang;
            this.fire("intl:langChange", {module: module, prevVal: currLang, newVal: (lang === ROOT_LANG) ? "" : lang});
        }

        return exists;
    },

    /**
     * Get the currently active language for the given module.
     *
     * @method getLang
     *
     * @param {String} module The module name.
     * @return {String} The BCP 47 language tag.
     */
    getLang : function(module) {
        var lang = this._mod(module)[ACTIVE_LANG];
        return (lang === ROOT_LANG) ? "" : lang;
    },

    /**
     * Register a hash of localized resources for the given module and language
     *
     * @method add
     *
     * @param {String} module The module name.
     * @param {String} lang The BCP 47 language tag.
     * @param {Object} strings The hash of localized values, keyed by the string name.
     */
    add : function(module, lang, strings) {
        lang = lang || ROOT_LANG;
        this._mod(module)[lang] = strings;
        this.setLang(module, lang);
    },

    /**
     * Gets the module's localized resources for the currently active language (as provided by the <a href="#method_getLang">getLang</a> method).
     * <p>
     * Optionally, the localized resources for alternate languages which have been added to Intl (see the <a href="#method_add">add</a> method) can
     * be retrieved by providing the BCP 47 language tag as the lang parameter.
     * </p>
     * @method get
     *
     * @param {String} module The module name.
     * @param {String} key Optional. A single resource key. If not provided, returns a copy (shallow clone) of all resources.
     * @param {String} lang Optional. The BCP 47 language tag. If not provided, the module's currently active language is used.
     * @return String | Object A copy of the module's localized resources, or a single value if key is provided.
     */
    get : function(module, key, lang) {
        var mod = this._mod(module),
            strs;

        lang = lang || mod[ACTIVE_LANG];
        strs = mod[lang] || {};

        return (key) ? strs[key] : Y.merge(strs);
    },

    /**
     * Gets the list of languages for which localized resources are available for a given module, based on the module
     * meta-data (part of loader). If loader is not on the page, returns an empty array.
     *
     * @method getAvailableLangs
     * @param {String} module The name of the module
     * @return {Array} The array of languages available.
     */
    getAvailableLangs : function(module) {
        var loader = Y.Env._loader,
            mod = loader && loader.moduleInfo[module],
            langs = mod && mod.lang;
        return (langs) ? langs.concat() : NONE;

    }
});

Y.augment(Y.Intl, Y.EventTarget);

/**
 * Notification event to indicate when the lang for a module has changed. There is no default behavior associated with this event,
 * so the on and after moments are equivalent.
 *
 * @event intl:langChange
 * @param {EventFacade} e The event facade
 * <p>The event facade contains:</p>
 * <dl>
 *     <dt>module</dt><dd>The name of the module for which the language changed</dd>
 *     <dt>newVal</dt><dd>The new language tag</dd>
 *     <dt>prevVal</dt><dd>The current language tag</dd>
 * </dl>
 */
Y.Intl.publish("intl:langChange", {emitFacade:true});


}, '3.10.1', {"requires": ["intl-base", "event-custom"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/cookie/cookie.js
// ----------------------------------------------------------------------------------------

YUI.add('cookie', function (Y, NAME) {

/**
 * Utilities for cookie management
 * @module cookie
 */

    //shortcuts
    var L       = Y.Lang,
        O       = Y.Object,
        NULL    = null,

        //shortcuts to functions
        isString    = L.isString,
        isObject    = L.isObject,
        isUndefined = L.isUndefined,
        isFunction  = L.isFunction,
        encode      = encodeURIComponent,
        decode      = decodeURIComponent,

        //shortcut to document
        doc         = Y.config.doc;

    /*
     * Throws an error message.
     */
    function error(message){
        throw new TypeError(message);
    }

    /*
     * Checks the validity of a cookie name.
     */
    function validateCookieName(name){
        if (!isString(name) || name === ""){
            error("Cookie name must be a non-empty string.");
        }
    }

    /*
     * Checks the validity of a subcookie name.
     */
    function validateSubcookieName(subName){
        if (!isString(subName) || subName === ""){
            error("Subcookie name must be a non-empty string.");
        }
    }

    /**
     * Cookie utility.
     * @class Cookie
     * @static
     */
    Y.Cookie = {

        //-------------------------------------------------------------------------
        // Private Methods
        //-------------------------------------------------------------------------

        /**
         * Creates a cookie string that can be assigned into document.cookie.
         * @param {String} name The name of the cookie.
         * @param {String} value The value of the cookie.
         * @param {Boolean} encodeValue True to encode the value, false to leave as-is.
         * @param {Object} options (Optional) Options for the cookie.
         * @return {String} The formatted cookie string.
         * @method _createCookieString
         * @private
         * @static
         */
        _createCookieString : function (name /*:String*/, value /*:Variant*/, encodeValue /*:Boolean*/, options /*:Object*/) /*:String*/ {

            options = options || {};

            var text /*:String*/ = encode(name) + "=" + (encodeValue ? encode(value) : value),
                expires = options.expires,
                path    = options.path,
                domain  = options.domain;


            if (isObject(options)){
                //expiration date
                if (expires instanceof Date){
                    text += "; expires=" + expires.toUTCString();
                }

                //path
                if (isString(path) && path !== ""){
                    text += "; path=" + path;
                }

                //domain
                if (isString(domain) && domain !== ""){
                    text += "; domain=" + domain;
                }

                //secure
                if (options.secure === true){
                    text += "; secure";
                }
            }

            return text;
        },

        /**
         * Formats a cookie value for an object containing multiple values.
         * @param {Object} hash An object of key-value pairs to create a string for.
         * @return {String} A string suitable for use as a cookie value.
         * @method _createCookieHashString
         * @private
         * @static
         */
        _createCookieHashString : function (hash /*:Object*/) /*:String*/ {
            if (!isObject(hash)){
                error("Cookie._createCookieHashString(): Argument must be an object.");
            }

            var text /*:Array*/ = [];

            O.each(hash, function(value, key){
                if (!isFunction(value) && !isUndefined(value)){
                    text.push(encode(key) + "=" + encode(String(value)));
                }
            });

            return text.join("&");
        },

        /**
         * Parses a cookie hash string into an object.
         * @param {String} text The cookie hash string to parse (format: n1=v1&n2=v2).
         * @return {Object} An object containing entries for each cookie value.
         * @method _parseCookieHash
         * @private
         * @static
         */
        _parseCookieHash : function (text) {

            var hashParts   = text.split("&"),
                hashPart    = NULL,
                hash        = {};

            if (text.length){
                for (var i=0, len=hashParts.length; i < len; i++){
                    hashPart = hashParts[i].split("=");
                    hash[decode(hashPart[0])] = decode(hashPart[1]);
                }
            }

            return hash;
        },

        /**
         * Parses a cookie string into an object representing all accessible cookies.
         * @param {String} text The cookie string to parse.
         * @param {Boolean} shouldDecode (Optional) Indicates if the cookie values should be decoded or not. Default is true.
         * @param {Object} options (Optional) Contains settings for loading the cookie.
         * @return {Object} An object containing entries for each accessible cookie.
         * @method _parseCookieString
         * @private
         * @static
         */
        _parseCookieString : function (text /*:String*/, shouldDecode /*:Boolean*/, options /*:Object*/) /*:Object*/ {

            var cookies /*:Object*/ = {};

            if (isString(text) && text.length > 0) {

                var decodeValue = (shouldDecode === false ? function(s){return s;} : decode),
                    cookieParts = text.split(/;\s/g),
                    cookieName  = NULL,
                    cookieValue = NULL,
                    cookieNameValue = NULL;

                for (var i=0, len=cookieParts.length; i < len; i++){
                    //check for normally-formatted cookie (name-value)
                    cookieNameValue = cookieParts[i].match(/([^=]+)=/i);
                    if (cookieNameValue instanceof Array){
                        try {
                            cookieName = decode(cookieNameValue[1]);
                            cookieValue = decodeValue(cookieParts[i].substring(cookieNameValue[1].length+1));
                        } catch (ex){
                            //intentionally ignore the cookie - the encoding is wrong
                        }
                    } else {
                        //means the cookie does not have an "=", so treat it as a boolean flag
                        cookieName = decode(cookieParts[i]);
                        cookieValue = "";
                    }
                    // don't overwrite an already loaded cookie if set by option
                    if (!isUndefined(options) && options.reverseCookieLoading) {
                        if (isUndefined(cookies[cookieName])) {
                            cookies[cookieName] = cookieValue;
                        }
                    } else {
                        cookies[cookieName] = cookieValue;
                    }
                }

            }

            return cookies;
        },

        /**
         * Sets the document object that the cookie utility uses for setting
         * cookies. This method is necessary to ensure that the cookie utility
         * unit tests can pass even when run on a domain instead of locally.
         * This method should not be used otherwise; you should use
         * <code>Y.config.doc</code> to change the document that the cookie
         * utility uses for everyday purposes.
         * @param {Object} newDoc The object to use as the document.
         * @return {void}
         * @method _setDoc
         * @private
         */
        _setDoc: function(newDoc){
            doc = newDoc;
        },

        //-------------------------------------------------------------------------
        // Public Methods
        //-------------------------------------------------------------------------

        /**
         * Determines if the cookie with the given name exists. This is useful for
         * Boolean cookies (those that do not follow the name=value convention).
         * @param {String} name The name of the cookie to check.
         * @return {Boolean} True if the cookie exists, false if not.
         * @method exists
         * @static
         */
        exists: function(name) {

            validateCookieName(name);   //throws error

            var cookies = this._parseCookieString(doc.cookie, true);

            return cookies.hasOwnProperty(name);
        },

        /**
         * Returns the cookie value for the given name.
         * @param {String} name The name of the cookie to retrieve.
         * @param {Function|Object} options (Optional) An object containing one or more
         *      cookie options: raw (true/false), reverseCookieLoading (true/false)
         *      and converter (a function).
         *      The converter function is run on the value before returning it. The
         *      function is not used if the cookie doesn't exist. The function can be
         *      passed instead of the options object for backwards compatibility. When
         *      raw is set to true, the cookie value is not URI decoded.
         * @return {Variant} If no converter is specified, returns a string or null if
         *      the cookie doesn't exist. If the converter is specified, returns the value
         *      returned from the converter or null if the cookie doesn't exist.
         * @method get
         * @static
         */
        get : function (name, options) {

            validateCookieName(name);   //throws error

            var cookies,
                cookie,
                converter;

            //if options is a function, then it's the converter
            if (isFunction(options)) {
                converter = options;
                options = {};
            } else if (isObject(options)) {
                converter = options.converter;
            } else {
                options = {};
            }

            cookies = this._parseCookieString(doc.cookie, !options.raw, options);
            cookie = cookies[name];

            //should return null, not undefined if the cookie doesn't exist
            if (isUndefined(cookie)) {
                return NULL;
            }

            if (!isFunction(converter)){
                return cookie;
            } else {
                return converter(cookie);
            }
        },

        /**
         * Returns the value of a subcookie.
         * @param {String} name The name of the cookie to retrieve.
         * @param {String} subName The name of the subcookie to retrieve.
         * @param {Function} converter (Optional) A function to run on the value before returning
         *      it. The function is not used if the cookie doesn't exist.
         * @param {Object} options (Optional) Containing one or more settings for cookie parsing.
         * @return {Variant} If the cookie doesn't exist, null is returned. If the subcookie
         *      doesn't exist, null if also returned. If no converter is specified and the
         *      subcookie exists, a string is returned. If a converter is specified and the
         *      subcookie exists, the value returned from the converter is returned.
         * @method getSub
         * @static
         */
        getSub : function (name /*:String*/, subName /*:String*/, converter /*:Function*/, options /*:Object*/) /*:Variant*/ {

            var hash /*:Variant*/ = this.getSubs(name, options);

            if (hash !== NULL) {

                validateSubcookieName(subName);   //throws error

                if (isUndefined(hash[subName])){
                    return NULL;
                }

                if (!isFunction(converter)){
                    return hash[subName];
                } else {
                    return converter(hash[subName]);
                }
            } else {
                return NULL;
            }

        },

        /**
         * Returns an object containing name-value pairs stored in the cookie with the given name.
         * @param {String} name The name of the cookie to retrieve.
         * @param {Object} options (Optional) Containing one or more settings for cookie parsing.
         * @return {Object} An object of name-value pairs if the cookie with the given name
         *      exists, null if it does not.
         * @method getSubs
         * @static
         */
        getSubs : function (name /*:String*/, options /*:Object*/) {

            validateCookieName(name);   //throws error

            var cookies = this._parseCookieString(doc.cookie, false, options);
            if (isString(cookies[name])){
                return this._parseCookieHash(cookies[name]);
            }
            return NULL;
        },

        /**
         * Removes a cookie from the machine by setting its expiration date to
         * sometime in the past.
         * @param {String} name The name of the cookie to remove.
         * @param {Object} options (Optional) An object containing one or more
         *      cookie options: path (a string), domain (a string),
         *      and secure (true/false). The expires option will be overwritten
         *      by the method.
         * @return {String} The created cookie string.
         * @method remove
         * @static
         */
        remove : function (name, options) {

            validateCookieName(name);   //throws error

            //set options
            options = Y.merge(options || {}, {
                expires: new Date(0)
            });

            //set cookie
            return this.set(name, "", options);
        },

        /**
         * Removes a sub cookie with a given name.
         * @param {String} name The name of the cookie in which the subcookie exists.
         * @param {String} subName The name of the subcookie to remove.
         * @param {Object} options (Optional) An object containing one or more
         *      cookie options: path (a string), domain (a string), expires (a Date object),
         *      removeIfEmpty (true/false), and secure (true/false). This must be the same
         *      settings as the original subcookie.
         * @return {String} The created cookie string.
         * @method removeSub
         * @static
         */
        removeSub : function(name, subName, options) {

            validateCookieName(name);   //throws error

            validateSubcookieName(subName);   //throws error

            options = options || {};

            //get all subcookies for this cookie
            var subs = this.getSubs(name);

            //delete the indicated subcookie
            if (isObject(subs) && subs.hasOwnProperty(subName)){
                delete subs[subName];

                if (!options.removeIfEmpty) {
                    //reset the cookie

                    return this.setSubs(name, subs, options);
                } else {
                    //reset the cookie if there are subcookies left, else remove
                    for (var key in subs){
                        if (subs.hasOwnProperty(key) && !isFunction(subs[key]) && !isUndefined(subs[key])){
                            return this.setSubs(name, subs, options);
                        }
                    }

                    return this.remove(name, options);
                }
            } else {
                return "";
            }

        },

        /**
         * Sets a cookie with a given name and value.
         * @param {String} name The name of the cookie to set.
         * @param {Variant} value The value to set for the cookie.
         * @param {Object} options (Optional) An object containing one or more
         *      cookie options: path (a string), domain (a string), expires (a Date object),
         *      secure (true/false), and raw (true/false). Setting raw to true indicates
         *      that the cookie should not be URI encoded before being set.
         * @return {String} The created cookie string.
         * @method set
         * @static
         */
        set : function (name, value, options) {

            validateCookieName(name);   //throws error

            if (isUndefined(value)){
                error("Cookie.set(): Value cannot be undefined.");
            }

            options = options || {};

            var text = this._createCookieString(name, value, !options.raw, options);
            doc.cookie = text;
            return text;
        },

        /**
         * Sets a sub cookie with a given name to a particular value.
         * @param {String} name The name of the cookie to set.
         * @param {String} subName The name of the subcookie to set.
         * @param {Variant} value The value to set.
         * @param {Object} options (Optional) An object containing one or more
         *      cookie options: path (a string), domain (a string), expires (a Date object),
         *      and secure (true/false).
         * @return {String} The created cookie string.
         * @method setSub
         * @static
         */
        setSub : function (name, subName, value, options) {

            validateCookieName(name);   //throws error

            validateSubcookieName(subName);   //throws error

            if (isUndefined(value)){
                error("Cookie.setSub(): Subcookie value cannot be undefined.");
            }

            var hash = this.getSubs(name);

            if (!isObject(hash)){
                hash = {};
            }

            hash[subName] = value;

            return this.setSubs(name, hash, options);

        },

        /**
         * Sets a cookie with a given name to contain a hash of name-value pairs.
         * @param {String} name The name of the cookie to set.
         * @param {Object} value An object containing name-value pairs.
         * @param {Object} options (Optional) An object containing one or more
         *      cookie options: path (a string), domain (a string), expires (a Date object),
         *      and secure (true/false).
         * @return {String} The created cookie string.
         * @method setSubs
         * @static
         */
        setSubs : function (name, value, options) {

            validateCookieName(name);   //throws error

            if (!isObject(value)){
                error("Cookie.setSubs(): Cookie value must be an object.");
            }

            var text /*:String*/ = this._createCookieString(name, this._createCookieHashString(value), false, options);
            doc.cookie = text;
            return text;
        }

    };


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/image-loader.js
// ----------------------------------------------------------------------------------------

/**
 * Image loader
 * @module squarespace-image-loader
 */

/*global resizeToParent, render, getRenderDimensions */ // hoisted in a way jshint can't follow

YUI.add('squarespace-image-loader', function(Y) {

  if (!window.ImageLoader) {
    console.error("ImageLoader is not available. Broken rollup?");
  }

  Y.namespace('Squarespace').Loader = Y.Base.create("Loader", Y.Base, [], {
    initializer: function() {
      if (this.get('frames')) {
        this._processFrames();
      }

      if (this.get('img')) {
        this._processImages();
      }
    },

    _processFrames: function() {
      this._getNodeList('frames').each(function(frame) {
        if (frame.getAttribute('data-embed')) {
          frame.resizeToParent({
            scale: 'contain',
            sizeOnly: true
          });
        }
      });
    },

    _processImages: function() {
      this._getNodeList('img').each(function(img) {
        var alreadyHasLoader = false; // because i still want it to refresh the values.
        if (img.loader) {
          alreadyHasLoader = true;
        }

        img.plug(Y.Squarespace.Loader2, this.get('loaderOptions') || {});

        if (alreadyHasLoader) {
          img.fire('refresh');
        }
      }, this);
    },

    _getNodeList: function(attr) {
      var value = this.get(attr);

      if (Y.Lang.isString(value)) {
        return Y.all(value);
      } else if(!value.size) {
        return new Y.NodeList(value);
      } else {
        return value;
      }
    }

  }, {
    ATTRS: {
      frames: {},
      img: {},
      loaderOptions: {}
    }
  });

  Y.namespace('Squarespace').Loader2 = Y.Base.create("Loader2", Y.Plugin.Base, [], {

    initializer: function() {

      var node = this.get('host');
      var _maxTries = 100;
      var _currentTry = 0;
      function _check() {
        if (!node.inDoc() && (++_currentTry < _maxTries)) {
          Y.later(10, this, _check);
        } else {
          this.load();
        }
      }

      // we make sure that we fire the initial "refresh" only when the element is in the document.
      _check.call(this);

      // refresh on host load.
      this.on('refresh', this.load, this);
      node.on('refresh', this.load, this);

    },

    load: function() {
      var host = this.get('host');
      if (!!host.getAttribute('src') && host.get('complete')) {
        host.fire('loaded');
      }
      host.on('load', function() {
        if (host.getDOMNode() === null || !host.inDoc()) {
          console.warn('Invalid host. Bailing.');
          return;
        }
        host.removeClass('loading').addClass('loaded');
        host.fire('loaded');
      }, this);

      if (host.getDOMNode() === null || !host.inDoc()) {
        console.warn('Invalid host. Bailing.');
        return;
      }

      ImageLoader.load(host.getDOMNode(), Y.merge(this.getAttrs(), {
        load: this.get('load')
      }));
    },

    getDimensionForValue: function(dimension, value) {
      return ImageLoader.getDimensionForValue(dimension, value, ImageLoader._getDataFromNode(this.get('host').getDOMNode()));
    },

    getBareElement: function() {
      var img = this.get('host');
      var imgEl = Y.Node.create('<img />');
      imgEl.setAttribute('data-src', img.getAttribute('data-src'));
      imgEl.setAttribute('data-image-dimensions', img.getAttribute('data-image-dimensions'));
      imgEl.setAttribute('data-image-focal-point', img.getAttribute('data-image-focal-point'));

      return imgEl;
    },

    destructor: function() {

    }

  }, {
    NS: 'loader',
    ATTRS: {
      stretch: {

      },

      load: {
        value: true
      },

      source: {

      },

      fitAlignment: {

      },

      fit: {
        value: false,
        setter: function(val) {
          if (val) { this.set('mode', 'fit'); }
        }
      },

      fill: {
        value: false,
        setter: function(val) {
          if (val) { this.set('mode', 'fill'); }
        }
      },

      focalPoint: {
        setter: function(val) {
          ImageLoader.load(this.get('host').getDOMNode(), {
            focalPoint: val.x + ',' + val.y
          });

          return val;
        }
      },

      mode: {
        validator: function(val) {
          return ['fit','fill','none',null].indexOf(val) !== -1;
        }
      },

      refreshOnResize: {
        value: false
      }
    }
  });

  Y.namespace('Squarespace').ImageLoadManager = new (Y.Base.create("ImageLoadManager", Y.Base, [], {

    refreshAll: function() {
      Y.all('img[data-src]').each(function(imgEl) {
        imgEl.fire('refresh');
      });
    }

  }))();

  Y.augment(Y.Node, Class.create({
    refresh: function() {
      this.fire('refresh');
    }
  }));

}, '1.0', {
  requires: [
    'base',
    'plugin',
    'node',
    'squarespace-imageloader'
  ]
});


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-move/event-move.js
// ----------------------------------------------------------------------------------------

YUI.add('event-move', function (Y, NAME) {

/**
 * Adds lower level support for "gesturemovestart", "gesturemove" and "gesturemoveend" events, which can be used to create drag/drop
 * interactions which work across touch and mouse input devices. They correspond to "touchstart", "touchmove" and "touchend" on a touch input
 * device, and "mousedown", "mousemove", "mouseup" on a mouse based input device.
 *
 * <p>Documentation for the gesturemove triplet of events can be found on the <a href="../classes/YUI.html#event_gesturemove">YUI</a> global,
 * along with the other supported events.</p>

 @example

     YUI().use('event-move', function (Y) {
         Y.one('#myNode').on('gesturemovestart', function (e) {
         });
         Y.one('#myNode').on('gesturemove', function (e) {
         });
         Y.one('#myNode').on('gesturemoveend', function (e) {
         });
     });

 * @module event-gestures
 * @submodule event-move
 */


 var GESTURE_MAP = Y.Event._GESTURE_MAP,
     EVENT = {
         start: GESTURE_MAP.start,
         end: GESTURE_MAP.end,
         move: GESTURE_MAP.move
     },
    START = "start",
    MOVE = "move",
    END = "end",

    GESTURE_MOVE = "gesture" + MOVE,
    GESTURE_MOVE_END = GESTURE_MOVE + END,
    GESTURE_MOVE_START = GESTURE_MOVE + START,

    _MOVE_START_HANDLE = "_msh",
    _MOVE_HANDLE = "_mh",
    _MOVE_END_HANDLE = "_meh",

    _DEL_MOVE_START_HANDLE = "_dmsh",
    _DEL_MOVE_HANDLE = "_dmh",
    _DEL_MOVE_END_HANDLE = "_dmeh",

    _MOVE_START = "_ms",
    _MOVE = "_m",

    MIN_TIME = "minTime",
    MIN_DISTANCE = "minDistance",
    PREVENT_DEFAULT = "preventDefault",
    BUTTON = "button",
    OWNER_DOCUMENT = "ownerDocument",

    CURRENT_TARGET = "currentTarget",
    TARGET = "target",

    NODE_TYPE = "nodeType",
    SUPPORTS_POINTER = Y.config.win && ("msPointerEnabled" in Y.config.win.navigator),
    MS_TOUCH_ACTION_COUNT = 'msTouchActionCount',
    MS_INIT_TOUCH_ACTION = 'msInitTouchAction',

    _defArgsProcessor = function(se, args, delegate) {
        var iConfig = (delegate) ? 4 : 3,
            config = (args.length > iConfig) ? Y.merge(args.splice(iConfig,1)[0]) : {};

        if (!(PREVENT_DEFAULT in config)) {
            config[PREVENT_DEFAULT] = se.PREVENT_DEFAULT;
        }

        return config;
    },

    _getRoot = function(node, subscriber) {
        return subscriber._extra.root || (node.get(NODE_TYPE) === 9) ? node : node.get(OWNER_DOCUMENT);
    },

    //Checks to see if the node is the document, and if it is, returns the documentElement.
    _checkDocumentElem = function(node) {
        var elem = node.getDOMNode();
        if (node.compareTo(Y.config.doc) && elem.documentElement) {
            return elem.documentElement;
        }
        else {
            return false;
        }
    },

    _normTouchFacade = function(touchFacade, touch, params) {
        touchFacade.pageX = touch.pageX;
        touchFacade.pageY = touch.pageY;
        touchFacade.screenX = touch.screenX;
        touchFacade.screenY = touch.screenY;
        touchFacade.clientX = touch.clientX;
        touchFacade.clientY = touch.clientY;
        touchFacade[TARGET] = touchFacade[TARGET] || touch[TARGET];
        touchFacade[CURRENT_TARGET] = touchFacade[CURRENT_TARGET] || touch[CURRENT_TARGET];

        touchFacade[BUTTON] = (params && params[BUTTON]) || 1; // default to left (left as per vendors, not W3C which is 0)
    },

    /*
    In IE10 touch mode, gestures will not work properly unless the -ms-touch-action CSS property is set to something other than 'auto'. Read http://msdn.microsoft.com/en-us/library/windows/apps/hh767313.aspx for more info. To get around this, we set -ms-touch-action: none which is the same as e.preventDefault() on touch environments. This tells the browser to fire DOM events for all touch events, and not perform any default behavior.

    The user can over-ride this by setting a more lenient -ms-touch-action property on a node (such as pan-x, pan-y, etc.) via CSS when subscribing to the 'gesturemovestart' event.
    */
    _setTouchActions = function (node) {
        var elem = _checkDocumentElem(node) || node.getDOMNode(),
            num = node.getData(MS_TOUCH_ACTION_COUNT);

        //Checks to see if msTouchAction is supported.
        if (SUPPORTS_POINTER) {
            if (!num) {
                num = 0;
                node.setData(MS_INIT_TOUCH_ACTION, elem.style.msTouchAction);
            }
            elem.style.msTouchAction = Y.Event._DEFAULT_TOUCH_ACTION;
            num++;
            node.setData(MS_TOUCH_ACTION_COUNT, num);
        }
    },

    /*
    Resets the element's -ms-touch-action property back to the original value, This is called on detach() and detachDelegate().
    */
    _unsetTouchActions = function (node) {
        var elem = _checkDocumentElem(node) || node.getDOMNode(),
            num = node.getData(MS_TOUCH_ACTION_COUNT),
            initTouchAction = node.getData(MS_INIT_TOUCH_ACTION);

        if (SUPPORTS_POINTER) {
            num--;
            node.setData(MS_TOUCH_ACTION_COUNT, num);
            if (num === 0 && elem.style.msTouchAction !== initTouchAction) {
                elem.style.msTouchAction = initTouchAction;
            }
        }
    },

    _prevent = function(e, preventDefault) {
        if (preventDefault) {
            // preventDefault is a boolean or a function
            if (!preventDefault.call || preventDefault(e)) {
                e.preventDefault();
            }
        }
    },

    define = Y.Event.define;
    Y.Event._DEFAULT_TOUCH_ACTION = 'none';

/**
 * Sets up a "gesturemovestart" event, that is fired on touch devices in response to a single finger "touchstart",
 * and on mouse based devices in response to a "mousedown". The subscriber can specify the minimum time
 * and distance thresholds which should be crossed before the "gesturemovestart" is fired and for the mouse,
 * which button should initiate a "gesturemovestart". This event can also be listened for using node.delegate().
 *
 * <p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,
 * however if you want to pass the context and arguments as additional signature arguments to on/delegate,
 * you need to provide a null value for the configuration object, e.g: <code>node.on("gesturemovestart", fn, null, context, arg1, arg2, arg3)</code></p>
 *
 * @event gesturemovestart
 * @for YUI
 * @param type {string} "gesturemovestart"
 * @param fn {function} The method the event invokes. It receives the event facade of the underlying DOM event (mousedown or touchstart.touches[0]) which contains position co-ordinates.
 * @param cfg {Object} Optional. An object which specifies:
 *
 * <dl>
 * <dt>minDistance (defaults to 0)</dt>
 * <dd>The minimum distance threshold which should be crossed before the gesturemovestart is fired</dd>
 * <dt>minTime (defaults to 0)</dt>
 * <dd>The minimum time threshold for which the finger/mouse should be help down before the gesturemovestart is fired</dd>
 * <dt>button (no default)</dt>
 * <dd>In the case of a mouse input device, if the event should only be fired for a specific mouse button.</dd>
 * <dt>preventDefault (defaults to false)</dt>
 * <dd>Can be set to true/false to prevent default behavior as soon as the touchstart or mousedown is received (that is before minTime or minDistance thresholds are crossed, and so before the gesturemovestart listener is notified) so that things like text selection and context popups (on touch devices) can be
 * prevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it (for example, DragDrop can determine if the target is a valid handle or not before preventing default).</dd>
 * </dl>
 *
 * @return {EventHandle} the detach handle
 */

define(GESTURE_MOVE_START, {

    on: function (node, subscriber, ce) {

        //Set -ms-touch-action on IE10 and set preventDefault to true
        _setTouchActions(node);

        subscriber[_MOVE_START_HANDLE] = node.on(EVENT[START],
            this._onStart,
            this,
            node,
            subscriber,
            ce);
    },

    delegate : function(node, subscriber, ce, filter) {

        var se = this;

        subscriber[_DEL_MOVE_START_HANDLE] = node.delegate(EVENT[START],
            function(e) {
                se._onStart(e, node, subscriber, ce, true);
            },
            filter);
    },

    detachDelegate : function(node, subscriber, ce, filter) {
        var handle = subscriber[_DEL_MOVE_START_HANDLE];

        if (handle) {
            handle.detach();
            subscriber[_DEL_MOVE_START_HANDLE] = null;
        }

        _unsetTouchActions(node);
    },

    detach: function (node, subscriber, ce) {
        var startHandle = subscriber[_MOVE_START_HANDLE];

        if (startHandle) {
            startHandle.detach();
            subscriber[_MOVE_START_HANDLE] = null;
        }

        _unsetTouchActions(node);
    },

    processArgs : function(args, delegate) {
        var params = _defArgsProcessor(this, args, delegate);

        if (!(MIN_TIME in params)) {
            params[MIN_TIME] = this.MIN_TIME;
        }

        if (!(MIN_DISTANCE in params)) {
            params[MIN_DISTANCE] = this.MIN_DISTANCE;
        }

        return params;
    },

    _onStart : function(e, node, subscriber, ce, delegate) {

        if (delegate) {
            node = e[CURRENT_TARGET];
        }

        var params = subscriber._extra,
            fireStart = true,
            minTime = params[MIN_TIME],
            minDistance = params[MIN_DISTANCE],
            button = params.button,
            preventDefault = params[PREVENT_DEFAULT],
            root = _getRoot(node, subscriber),
            startXY;

        if (e.touches) {
            if (e.touches.length === 1) {
                _normTouchFacade(e, e.touches[0], params);
            } else {
                fireStart = false;
            }
        } else {
            fireStart = (button === undefined) || (button === e.button);
        }


        if (fireStart) {

            _prevent(e, preventDefault);

            if (minTime === 0 || minDistance === 0) {
                this._start(e, node, ce, params);

            } else {

                startXY = [e.pageX, e.pageY];

                if (minTime > 0) {


                    params._ht = Y.later(minTime, this, this._start, [e, node, ce, params]);

                    params._hme = root.on(EVENT[END], Y.bind(function() {
                        this._cancel(params);
                    }, this));
                }

                if (minDistance > 0) {


                    params._hm = root.on(EVENT[MOVE], Y.bind(function(em) {
                        if (Math.abs(em.pageX - startXY[0]) > minDistance || Math.abs(em.pageY - startXY[1]) > minDistance) {
                            this._start(e, node, ce, params);
                        }
                    }, this));
                }
            }
        }
    },

    _cancel : function(params) {
        if (params._ht) {
            params._ht.cancel();
            params._ht = null;
        }
        if (params._hme) {
            params._hme.detach();
            params._hme = null;
        }
        if (params._hm) {
            params._hm.detach();
            params._hm = null;
        }
    },

    _start : function(e, node, ce, params) {

        if (params) {
            this._cancel(params);
        }

        e.type = GESTURE_MOVE_START;


        node.setData(_MOVE_START, e);
        ce.fire(e);
    },

    MIN_TIME : 0,
    MIN_DISTANCE : 0,
    PREVENT_DEFAULT : false
});

/**
 * Sets up a "gesturemove" event, that is fired on touch devices in response to a single finger "touchmove",
 * and on mouse based devices in response to a "mousemove".
 *
 * <p>By default this event is only fired when the same node
 * has received a "gesturemovestart" event. The subscriber can set standAlone to true, in the configuration properties,
 * if they want to listen for this event without an initial "gesturemovestart".</p>
 *
 * <p>By default this event sets up it's internal "touchmove" and "mousemove" DOM listeners on the document element. The subscriber
 * can set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p>
 *
 * <p>This event can also be listened for using node.delegate().</p>
 *
 * <p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,
 * however if you want to pass the context and arguments as additional signature arguments to on/delegate,
 * you need to provide a null value for the configuration object, e.g: <code>node.on("gesturemove", fn, null, context, arg1, arg2, arg3)</code></p>
 *
 * @event gesturemove
 * @for YUI
 * @param type {string} "gesturemove"
 * @param fn {function} The method the event invokes. It receives the event facade of the underlying DOM event (mousemove or touchmove.touches[0]) which contains position co-ordinates.
 * @param cfg {Object} Optional. An object which specifies:
 * <dl>
 * <dt>standAlone (defaults to false)</dt>
 * <dd>true, if the subscriber should be notified even if a "gesturemovestart" has not occured on the same node.</dd>
 * <dt>root (defaults to document)</dt>
 * <dd>The node to which the internal DOM listeners should be attached.</dd>
 * <dt>preventDefault (defaults to false)</dt>
 * <dd>Can be set to true/false to prevent default behavior as soon as the touchmove or mousemove is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>
 * </dl>
 *
 * @return {EventHandle} the detach handle
 */
define(GESTURE_MOVE, {

    on : function (node, subscriber, ce) {

        _setTouchActions(node);
        var root = _getRoot(node, subscriber, EVENT[MOVE]),

            moveHandle = root.on(EVENT[MOVE],
                this._onMove,
                this,
                node,
                subscriber,
                ce);

        subscriber[_MOVE_HANDLE] = moveHandle;

    },

    delegate : function(node, subscriber, ce, filter) {

        var se = this;

        subscriber[_DEL_MOVE_HANDLE] = node.delegate(EVENT[MOVE],
            function(e) {
                se._onMove(e, node, subscriber, ce, true);
            },
            filter);
    },

    detach : function (node, subscriber, ce) {
        var moveHandle = subscriber[_MOVE_HANDLE];

        if (moveHandle) {
            moveHandle.detach();
            subscriber[_MOVE_HANDLE] = null;
        }

        _unsetTouchActions(node);
    },

    detachDelegate : function(node, subscriber, ce, filter) {
        var handle = subscriber[_DEL_MOVE_HANDLE];

        if (handle) {
            handle.detach();
            subscriber[_DEL_MOVE_HANDLE] = null;
        }

        _unsetTouchActions(node);

    },

    processArgs : function(args, delegate) {
        return _defArgsProcessor(this, args, delegate);
    },

    _onMove : function(e, node, subscriber, ce, delegate) {

        if (delegate) {
            node = e[CURRENT_TARGET];
        }

        var fireMove = subscriber._extra.standAlone || node.getData(_MOVE_START),
            preventDefault = subscriber._extra.preventDefault;


        if (fireMove) {

            if (e.touches) {
                if (e.touches.length === 1) {
                    _normTouchFacade(e, e.touches[0]);
                } else {
                    fireMove = false;
                }
            }

            if (fireMove) {

                _prevent(e, preventDefault);


                e.type = GESTURE_MOVE;
                ce.fire(e);
            }
        }
    },

    PREVENT_DEFAULT : false
});

/**
 * Sets up a "gesturemoveend" event, that is fired on touch devices in response to a single finger "touchend",
 * and on mouse based devices in response to a "mouseup".
 *
 * <p>By default this event is only fired when the same node
 * has received a "gesturemove" or "gesturemovestart" event. The subscriber can set standAlone to true, in the configuration properties,
 * if they want to listen for this event without a preceding "gesturemovestart" or "gesturemove".</p>
 *
 * <p>By default this event sets up it's internal "touchend" and "mouseup" DOM listeners on the document element. The subscriber
 * can set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p>
 *
 * <p>This event can also be listened for using node.delegate().</p>
 *
 * <p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,
 * however if you want to pass the context and arguments as additional signature arguments to on/delegate,
 * you need to provide a null value for the configuration object, e.g: <code>node.on("gesturemoveend", fn, null, context, arg1, arg2, arg3)</code></p>
 *
 *
 * @event gesturemoveend
 * @for YUI
 * @param type {string} "gesturemoveend"
 * @param fn {function} The method the event invokes. It receives the event facade of the underlying DOM event (mouseup or touchend.changedTouches[0]).
 * @param cfg {Object} Optional. An object which specifies:
 * <dl>
 * <dt>standAlone (defaults to false)</dt>
 * <dd>true, if the subscriber should be notified even if a "gesturemovestart" or "gesturemove" has not occured on the same node.</dd>
 * <dt>root (defaults to document)</dt>
 * <dd>The node to which the internal DOM listeners should be attached.</dd>
 * <dt>preventDefault (defaults to false)</dt>
 * <dd>Can be set to true/false to prevent default behavior as soon as the touchend or mouseup is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>
 * </dl>
 *
 * @return {EventHandle} the detach handle
 */
define(GESTURE_MOVE_END, {

    on : function (node, subscriber, ce) {
        _setTouchActions(node);
        var root = _getRoot(node, subscriber),

            endHandle = root.on(EVENT[END],
                this._onEnd,
                this,
                node,
                subscriber,
                ce);

        subscriber[_MOVE_END_HANDLE] = endHandle;
    },

    delegate : function(node, subscriber, ce, filter) {

        var se = this;

        subscriber[_DEL_MOVE_END_HANDLE] = node.delegate(EVENT[END],
            function(e) {
                se._onEnd(e, node, subscriber, ce, true);
            },
            filter);
    },

    detachDelegate : function(node, subscriber, ce, filter) {
        var handle = subscriber[_DEL_MOVE_END_HANDLE];

        if (handle) {
            handle.detach();
            subscriber[_DEL_MOVE_END_HANDLE] = null;
        }

        _unsetTouchActions(node);

    },

    detach : function (node, subscriber, ce) {
        var endHandle = subscriber[_MOVE_END_HANDLE];

        if (endHandle) {
            endHandle.detach();
            subscriber[_MOVE_END_HANDLE] = null;
        }

        _unsetTouchActions(node);
    },

    processArgs : function(args, delegate) {
        return _defArgsProcessor(this, args, delegate);
    },

    _onEnd : function(e, node, subscriber, ce, delegate) {

        if (delegate) {
            node = e[CURRENT_TARGET];
        }

        var fireMoveEnd = subscriber._extra.standAlone || node.getData(_MOVE) || node.getData(_MOVE_START),
            preventDefault = subscriber._extra.preventDefault;

        if (fireMoveEnd) {

            if (e.changedTouches) {
                if (e.changedTouches.length === 1) {
                    _normTouchFacade(e, e.changedTouches[0]);
                } else {
                    fireMoveEnd = false;
                }
            }

            if (fireMoveEnd) {

                _prevent(e, preventDefault);

                e.type = GESTURE_MOVE_END;
                ce.fire(e);

                node.clearData(_MOVE_START);
                node.clearData(_MOVE);
            }
        }
    },

    PREVENT_DEFAULT : false
});


}, '3.10.1', {"requires": ["node-base", "event-touch", "event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/ui-base.js
// ----------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Basic User Interface Elements
// ------------------------------------------------------------------------------------------------

YUI.add('squarespace-ui-base', function(Y) {

  // Enable HTML5 postMessage support events in YUI
  Y.mix(Y.Node.DOM_EVENTS, {
      message: true
  });


  Y.namespace("Squarespace");


  Y.Squarespace.DIALOG_ZINDEX_BASE  = 30000;
  Y.Anim._intervalTime = 10;


  // ------------------------------------------------------------------
  // Y.ANIM OVERRIDE TO PROTECT AGAINST
  // DOM NODES BEING REMOVED BY OTHER COMPONENTS WHILE
  // IT IS ANIMATING.
  //
  // FROM: http://yuilibrary.com/yui/docs/api/files/anim_js_anim.js.html#l112
  // ------------------------------------------------------------------

  var NUM = Number;
  Y.Anim.DEFAULT_SETTER = function(anim, att, from, to, elapsed, duration, fn, unit) {
    var node = anim._node,
      domNode = node._node,
      val = fn(elapsed, NUM(from), NUM(to) - NUM(from), duration);

    if (node._node === null) {
      console.warn('Could not find the animating DOMNode. Might have been destroyed. Bailing out for safety.');
      return;
    }

    if (domNode) {
      if ('style' in domNode && (att in domNode.style || att in Y.DOM.CUSTOM_STYLES)) {
        unit = unit || '';
        node.setStyle(att, val + unit);
      } else if ('attributes' in domNode && att in domNode.attributes) {
        node.setAttribute(att, val);
      } else if (att in domNode) {
        domNode[att] = val;
      }
    } else if (node.set) {
      node.set(att, val);
    } else if (att in node) {
      node[att] = val;
    }
};

  // --------------------------------------------------------------------------------------------------------------------------------------
  // Squarespace Debugging
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.Debug = {

    dumpDDs: function() {

      for (var i = 0; i < Y.DD.DDM.targets.length; ++i) {
        var dd = Y.DD.DDM.targets[i];
        console.log(i, dd.get("node").get("className"));
      }

    }

  };

  //------------------------------------------------------------------------------------------------
  // Drag Drop Behavior Plugin
  //------------------------------------------------------------------------------------------------

  // A plugin class designed to animate Widget's show and hide methods.
  var P = function(config) {
      Y.Squarespace.DDBehavior.superclass.constructor.apply(this, arguments);
  };

  // Define Static properties NAME (to identify the class) and NS (to identify the namespace)
  P.NAME = 'DDBehavior';
  P.NS = 'ddb';
  P.ATTRS =  { host: { }, validHandleClass: { } };

  // Extend Plugin.Base
  Y.extend(P, Y.Plugin.Base, {

    initializer: function(config) {

      var host = this.get("host");

      for (var n in config.behaviors) {
        if (n.indexOf("drop:") != -1 && host.target) {
          host.target.on(n, config.behaviors[n], config.context);
        } else {
          host.on(n, config.behaviors[n], config.context);
        }
      }

    }

  });

  Y.Squarespace.DDBehavior = P;

  //------------------------------------------------------------------------------------------------
  // Text Shrink
  //------------------------------------------------------------------------------------------------

  Y.Squarespace.TextShrink = Y.Base.create("TextShrink", Y.Plugin.Base, [], {

    initializer: function() {

      var el = this.get('host');
      this.padding = {
        left: 0,
        right: 0
      };

      // default parent
      if (this.get('parentEl') == null) {
        this.set('parentEl', el.ancestor());
      }

      // setupEl
      el.setAttribute('data-shrink-original-spacing', parseInt(el.getStyle('letterSpacing')));
      el.setAttribute('data-shrink-original-size', parseInt(el.getStyle('fontSize')));

      this.padding.left = parseInt(el.getStyle('paddingLeft'));
      this.padding.right = parseInt(el.getStyle('paddingRight'));

      // register?
      if (Y.Squarespace.Management) {
        this._tweakEvent = Y.Squarespace.Management.on('tweak', this.refresh, this);
      }

      Y.on('domready', this.refresh, this);
      this._resizeEvent = Y.on('resize', this.refresh, Y.config.win, this);

      this.shrink();

    },

    shrink: function() {

      var el = this.get('host');

      // processEl()
      el.removeClass('data-shrink-ready');

      el.setStyle('width', (el.get('offsetWidth') - this.padding.left - this.padding.right) + 'px');
      el.setStyle('paddingLeft', '0px');
      el.setStyle('paddingRight', '0px');

      // testZeroSpacing();
      el.setStyle('letterSpacing', '0px');

      if (!this.isOverflowing()) {
        el.setStyle('letterSpacing', el.getAttribute('data-shrink-original-spacing') + 'px');
      }

      // adjust
      this._adjust();

      // reset
      this._resetDimensions();

      el.addClass('data-shrink-ready');

    },

    refresh: function() {
      var el = this.get('host');

      this._resetDimensions();

      // save new values
      el.setAttribute('data-shrink-original-spacing', parseInt(el.getStyle('letterSpacing')));
      el.setAttribute('data-shrink-original-size', parseInt(el.getStyle('fontSize')));

      // reset
      el.setStyles({
        letterSpacing: '',
        fontSize: ''
      });

      // process
      this.shrink();
    },

    isOverflowing: function(removeTrailingSpace) {

      var width = this._getWidths(removeTrailingSpace);

      if (Math.abs(width.el - width.parentEl) <= 3) {
        width.el = width.parentEl = Math.min(width.el, width.parentEl);
      }

      return width.el > width.parentEl;

    },

    _adjust: function(removeTrailingSpace) {

      var el = this.get('host');
      var width = this._getWidths();

      if (this.isOverflowing(removeTrailingSpace)) {

        var letterSpacing = parseInt(el.getStyle('letterSpacing'));

        if (!isNaN(letterSpacing) && letterSpacing > 0) {
          el.setStyle('letterSpacing', (letterSpacing - 1) + 'px');
          this._adjust(true);
        } else {
          var fontSize = parseInt(el.getStyle('fontSize'));
          fontSize = (width.parentEl / width.el) * fontSize;
          this._setFontSize(fontSize);
        }
      }

      return true;

    },

    _setFontSize: function(size) {

      var el = this.get('host');
      var minFontSize = this.get('minFontSize');
      if (minFontSize && size < minFontSize) {
        size = minFontSize;
      }
      el.setStyle('fontSize', size + 'px');

    },

    _resetDimensions: function() {

      var el = this.get('host');
      el.setStyles({
        width: '',
        paddingLeft: '',
        paddingRight: ''
      });

    },

    _getWidths: function(removeTrailingSpace) {

      var el = this.get('host'),
          parentEl = this.get('parentEl'),
          elWidth = el.get('scrollWidth'),
          parentWidth = parentEl.get('offsetWidth') - parseInt(parentEl.getStyle('paddingLeft')) - parseInt(parentEl.getStyle('paddingRight')) - this.padding.left - this.padding.right;

      // el may not have a scrollwidth depending on how the dom is being initialized when this is called
      if (!elWidth) {
        elWidth = el.get('offsetWidth');
      }

      if (!parentWidth) {
        console.warn('[TextShrink] Parent has no width.', parentEl);
      }

      if (removeTrailingSpace) {
        elWidth -= el.getStyle('letterSpacing');
      }

      // console.log("width.el " + elWidth + " width.parentEl " + parentWidth);

      return { parentEl: parentWidth, el: elWidth };

    },

    destructor: function() {
      this._tweakEvent && this._tweakEvent.detach();
      this._resizeEvent && this._resizeEvent.detach();
    }

  }, {
    ATTRS: {
      minFontSize: {
        value: null
      },
      parentEl: {
        value: null // default will be
      }
    },
    NS: 'textshrink'

  });


  //------------------------------------------------------------------------------------------------
  // Simple Flexible Grid
  //------------------------------------------------------------------------------------------------

  Y.Squarespace.SimpleFlexibleGrid = Y.Base.create("SimpleFlexibleGrid", Y.Plugin.Base, [], {

    initializer: function() {
      this._stylesheetEl = Y.Node.create('<style></style>');
      this.get('host').append(this._stylesheetEl);

      this._resizeEvent = Y.on('resize', this.syncUI, Y.config.win, this);

      this.syncUI();
    },

    syncUI: function() {
      var numOfBoxes;
      if (this.get('minWidth')) {
        numOfBoxes = Math.floor(this.get('container').get('offsetWidth') / this.get('minWidth'));
      } else { // max width is expected
        numOfBoxes = Math.ceil(this.get('container').get('offsetWidth') / this.get('maxWidth'));
      }

      this._stylesheetEl.set('innerHTML', this.get('selector') + '{width:' + (100/numOfBoxes) + '% !important;}');
      this.get('host').fire('simpleFlexibleGridSyncUI');
    },

    destructor: function() {
      this._stylesheetEl.remove();
      this._resizeEvent.detach();
    }

  }, {
    ATTRS: {
      container: {

      },
      selector: {

      },
      maxWidth: {

      },
      minWidth: {

      }
    },
    NS: 'simple-flexible-grid'
  });


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Mouse & Touch Tracking
  // --------------------------------------------------------------------------------------------------------------------------------------
  Y.Squarespace.Mouse = {
     lastX: 100,
     lastY: 100
  };

  Y.on(Y.UA.mobile ? "touchmove" : "mousemove", function(e) {
    Y.Squarespace.Mouse.lastX = e.pageX;
    Y.Squarespace.Mouse.lastY = e.pageY;
  }, Y.one(document.body));


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Image Helper
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.Image = {

    loadAndFit: function(node, imageSrc) {

      var img = new Image();
      img.src = imageSrc;

      Y.one(img).on("load", function(e, node, loadImg) {
        node.set("src", loadImg.src);
        node.resizeToParent({ scale: "cover" });
      }, this, node, img);

    },

    rotate: function(node, toAngle, fromAngle) {

      var containerWidth = node.get('parentNode').get('offsetWidth');
      var containerHeight = node.get('parentNode').get('offsetHeight');

      var imageWidth = node.get('offsetWidth');
      var imageHeight = node.get('offsetHeight');

      var landscape = Y.Squarespace.LoaderUtils.evaluateModeDimensions({
        mode: 'fit',
        containerWidth: containerWidth,
        containerHeight: containerHeight,
        data: {
          dimensions: {
            width: imageWidth,
            height: imageHeight
          }
        }
      });

      var portrait = Y.Squarespace.LoaderUtils.evaluateModeDimensions({
        mode: 'fit',
        containerWidth: containerHeight,
        containerHeight: containerWidth,
        data: {
          dimensions: {
            width: imageWidth,
            height: imageHeight
          }
        }
      });

      var fromDimensions, toDimensions;
      if( fromAngle % 180 === 0 ) {
        fromDimensions = landscape;
        toDimensions = portrait;
      } else {
        fromDimensions = portrait;
        toDimensions = landscape;
      }

      var anim = new Y.Anim({
        node: node,

        from: {
          rotate: fromAngle,
          width: fromDimensions.width,
          height: fromDimensions.height,

          left: ( containerWidth - fromDimensions.width ) / 2,
          top: ( containerHeight - fromDimensions.height ) / 2
        },

        to: {
          rotate: toAngle,
          width: toDimensions.width,
          height: toDimensions.height,

          top: ( containerHeight - toDimensions.height ) / 2,
          left: ( containerWidth - toDimensions.width ) / 2
        },

        easing: Y.Easing.easeBothStrong,
        duration: 0.3
      });

      anim.run();

    },

    straighten: function(node, originalWidth, originalHeight, deg) {

      var degForRad = ( deg < 0 ? 360 - deg : deg ) % 360, calculated = degForRad;
      if (degForRad >= 90) {
        calculated = degForRad % 90 - 90;
      }
      if (degForRad >= 180) {
        calculated = -1 * degForRad % 180 - 180;
      }
      if (degForRad >= 270) {
        calculated = degForRad % 270 - 90;
      }

      var radian = Math.abs(calculated) * ( Math.PI / 180 );
      var scale;

      if( originalHeight > originalWidth ) {
        scale = ( originalWidth * Math.cos(radian) + originalHeight * Math.sin(radian) ) / originalWidth;
      } else {
        scale = ( originalHeight * Math.cos(radian) + originalWidth * Math.sin(radian) ) / originalHeight;
      }

      node.setStyle( 'transform', 'rotate(' + deg + 'deg) scale(' + Math.abs(scale) + ')' );

    }

  };

  // --------------------------------------------------------------------------------------------------------------------------------------
  // Positioning Helper
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.Position = Class.create({

    initialize: function(params) {

      this.EDGE_MARGIN = 20;

      this.avoidElX = params.avoidElX;
      this.avoidElY = params.avoidElY;

      this.xdir = params.xdir;
      this.ydir = params.ydir;
      this.x = params.x;
      this.y = params.y;
      this.xo = (params.xo ? params.xo : 0); // x offset
      this.yo = (params.yo ? params.yo : 0); // y offset
      this.w = params.w;
      this.h = params.h;

      this.initialX = this.getX();
      this.initialY = this.getY();

    },

    setX: function(x) { this.x = x; },
    setY: function(y) { this.y = y; },

    getX: function() { return this.x + this.getXO(); },
    getY: function() { return this.y + this.getYO(); },

    getXAdj: function() { return this.initialX - this.getX(); },
    getYAdj: function() { return this.initialY - this.getY(); },

    getXO: function() { return ((this.avoidElX && this.xdir == "right") ? this.avoidElX.get("offsetWidth") : 0) + this.xo; },
    getYO: function() { return ((this.avoidElY && this.ydir == "top") ? -this.avoidElY.get("offsetHeight") : 0) + this.yo; },

    isRightViolation: function() { return ((this.x + this.w - Math.abs(this.getXO()) + this.EDGE_MARGIN) > Y.one(document.body).get("winWidth")); },
    isLeftViolation: function() { return ((this.x - Math.abs(this.getXO()) - this.EDGE_MARGIN) < 0); },
    isTopViolation: function() { return ((this.y - Math.abs(this.getYO()) - this.EDGE_MARGIN) < Y.one(document.body).get("docScrollY")); },
    isBottomViolation: function() { return ((this.y + this.h - Math.abs(this.getYO()) + this.EDGE_MARGIN) > (Y.one(document.body).get("winHeight") + Y.one(document.body).get("docScrollY"))); },

    reflectFix: function() {

      // corrects a position to ensure that we aren't overlapping with window edges, given our dimensions
      // on violation, reflect the object over the x/y axis to correct position

      if (this.xdir == "right" && this.isRightViolation()) { // right
        this.xdir = "left";
        this.getX = function() { return this.x - this.w - this.getXO() + 11; }; // ############## +11 HACK?
      } else if (this.xdir == "left" && this.isLeftViolation()) { // left
        this.xdir = "right";
        this.getX = function() { return this.x + this.w + this.getXO(); };
      }

      if (this.ydir == "bottom" && this.isBottomViolation()) { // bottom
        this.ydir = "top";
        this.getY = function() { return this.y - this.h - this.getYO(); };
        console.log("bottom violation .. now " + this.getY());
      } else if (this.ydir == "top" && this.isTopViolation()) { // top
        this.ydir = "bottom";
        this.getY = function() { return this.y + this.h + this.getYO(); };
        console.log("top violation");
      }

      if ((this.getY() - this.EDGE_MARGIN) < 0) { // top
        this.getY = function() { return Y.one(document.body).get("winHeight") - this.h - this.EDGE_MARGIN; };
        this.ydir = "bottom";
      } else if ((this.getY() + this.h + this.EDGE_MARGIN) > (Y.one(document.body).get("winHeight") + Y.one(document.body).get("docScrollY"))) { // bottom
        this.getY = function() { return Y.one(document.body).get("winHeight") + Y.one(document.body).get("docScrollY") - this.EDGE_MARGIN - this.h; };
        this.ydir = "top";
      }

      if ((this.getX() - this.EDGE_MARGIN) < 0) { // left
        this.getX = function() { return this.EDGE_MARGIN; };
        this.ydir = "left";
      } else if ((this.getX() + this.w + this.EDGE_MARGIN) > (Y.one(document.body).get("winWidth"))) { // right
        this.getX = function() { return Y.one(document.body).get("winWidth") - this.w - this.EDGE_MARGIN; };
        this.ydir = "right";
      }

      // double check -- the logic above is great and all.
      // maybe a little too great.
      // just check to see nothings off screenY, and make sure it appears on screen.
      if (this.getY() < Y.one(document.body).get("docScrollY")) {
        console.log('fixing y offscreen issues.');
        this.yo = (Y.one(document.body).get("docScrollY") + this.EDGE_MARGIN) - this.y;
      }

    },

    nudgeFix: function() {

      // corrects a position to ensure that we aren't overlapping with window edges, given our dimensions
      // on violation, nudge the element to push it within the window box

      if (this.isRightViolation()) { // right
        this.getX = function() { return Y.one(document.body).get("winWidth") + Y.one(document.body).get("docScrollX") - this.w - this.EDGE_MARGIN; };
      } else if (this.isLeftViolation()) { // left
        this.getX = function() { return this.EDGE_MARGIN; };
      }

      if (this.isBottomViolation()) { // bottom
        this.getY = function() { return Y.one(document.body).get("winHeight") + Y.one(document.body).get("docScrollY") - this.h - this.EDGE_MARGIN; };
      } else if (this.isTopViolation()) { // top
        this.getY = function() { return this.EDGE_MARGIN; };
      }

    },

    overflowFix: function() {

      // console.log( this.isRightViolation(), this.isLeftViolation(), this.isTopViolation(), this.isBottomViolation(), Y.one(document.body).get("docScrollY"));

      if (this.isRightViolation()) { // right
        this.x = Y.one(document.body).get("winWidth") + Y.one(document.body).get("docScrollX") - this.w - this.EDGE_MARGIN;
      } else if (this.isLeftViolation()) { // left
        this.x = this.EDGE_MARGIN;
      }

      if (this.isBottomViolation()) { // bottom
        this.y = Y.one(document.body).get("winHeight") + Y.one(document.body).get("docScrollY") - this.h - this.EDGE_MARGIN;
      } else if ((this.y - Math.abs(this.getXO()) - this.EDGE_MARGIN) < 0) { // top
        this.y = this.EDGE_MARGIN;
      }

    }

  });


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Tooltips
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.ToolTipManager = {

    canShow: true,

    disableTooltips: function() {

      this.canShow = false;

      if (this.currentTip) {
        this.currentTip.hide();
        this.currentTip = null;
      }

    },

    enableTooltips: function() {

      this.canShow = true;

    }

  };

  Y.Squarespace.ToolTip = Class.create({

    initialize: function(params) {

      this.params = params;

      // resolve target
      var targetEls = Y.all(this.params.target);
      if (targetEls.size() == 0) {
        console.warn("Couldn't find ToolTip target: " + this.params.target);
        return;
      }

      // defaults
      if (this.params.showTimeout === undefined) { this.params.showTimeout = 1200; }
      if (this.params.width === undefined) { this.params.width = 250; }
      if (this.params.style === undefined) { this.params.style = "info"; }
      this.mouseOffset = 15;
      this.events = [ ];

      targetEls.each(function(n) {

        this.events.push(n.on("mousemove", function(e) {

          this.lastX = e.pageX;
          this.lastY = e.pageY;

          this.move();

          if (this.showTimer) { return; }

          this.showTimer = Y.later(this.params.showTimeout, this, this.show);

        }, this));

        this.events.push(n.on("mouseout", function(e) {

          if (this.showTimer) {
            this.showTimer.cancel();
            this.showTimer = null;
          }

          this.hide();

        }, this));

        this.events.push(n.on("click", function(e) { // in case tip somehow gets orphaned

          if (!this.params.clickToShow) {
            this.hide();
          } else {
            this.show();
            e.halt(); // only halt if we're using the click
          }

        }, this));

      }, this);

      this.events.push(Y.Global.on("manager:change-mode", function(e) {

        this.hide();

      }, this));

    },

    destroy: function() {

      for (var i = 0; i < this.events.length; ++i) {
        this.events[i].detach();
      }

      if (this.el) {
        this.el.remove();
        this.el = null;
      }

      this.events = [ ];
      this.destroyed = true;
      this.shown = false;

    },

    move: function() {

      if (!this.el) { return; }

      this.position.x = this.lastX;
      this.position.y = this.lastY;

      if (this.a) {

        this.el.setStyles({
          left: this.position.getX() + "px"
        });

      } else {

        this.el.setStyles({
          left: this.position.getX() + "px",
          top: this.position.getY() + "px"
        });

      }

    },

    show: function() {

      if (this.el || this.destroyed || this.shown) { return; }
      if (!Y.Squarespace.ToolTipManager.canShow && !this.params.dialogTooltip) { return; }

      this.el = Y.DB.DIV("sqsp-tooltip " + this.params.style,
        Y.DB.DIV("title", { html: this.params.title }),
        (this.params.body ? Y.DB.DIV("description", { html : this.params.body }) : null)
      );

      Y.one(document.body).append(this.el);

      // animate in

      this.position = new Y.Squarespace.Position({
        xdir: "right",
        ydir: "bottom",
        x: this.lastX,
        y: this.lastY,
        xo: this.mouseOffset,
        yo: this.mouseOffset,
        w: this.el.get("offsetWidth"),
        h: this.el.get("offsetHeight")
      });

      this.position.reflectFix();

      this.el.setStyles({
        left: this.position.getX() + "px",
        top: (this.position.getY() - this.position.yo) + "px",
        width: (this.params.width) + "px",
        zIndex: 1000000,
        opacity: 0
      });

      if (this.params.icon) {
        this.el.setStyle(backgroundImage, 'url(' + this.params.icon + ')');
      }

      this.shown = true;

      this.a = new Y.Anim({ node : this.el, to: { top: this.position.getY(), opacity: 1 }, duration: 0.3, easing: Y.Easing.easeOutStrong});
      this.a.on("end", function() {
        this.a = null;
      }, this);
      this.a.run();

      Y.Squarespace.ToolTipManager.currentTip = this;

    },

    hide: function() {

      if (!this.el) { return; }

      var a = new Y.Anim({ node : this.el, to: { top: (this.position.getY() + 15), opacity: 0 }, duration: 0.3, easing: Y.Easing.easeOutStrong});
      a.on("end", function() {
        this.get("node").remove();
      });
      a.run();

      this.el = null;
      this.a = null;
      this.shown = false;

    }

  });


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Confirmation Dialogs
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.CURRENT_CONFIRMATION_DIALOG = null;


  Y.Squarespace.ConfirmationDialog = Class.create({

    defaultOpts: {
      width: 230,
      className: 'question',
      position: 'mouse',
      extreme: false,
      escToCancel: true,
      style: 'proceedOrCancel',
      confirmText: "Confirm",
      cancelText: "Cancel",

      showSaveOverlay: true,

      screenOverlayOpacity: 0.5,
      showScreenOverlay: true
    },

    initialize: function(params) {

      this.params = Y.merge( this.defaultOpts, params );

      this.finished = false;
      this.ignoreBodyClicks = true;


      // set the zindex
      if (!this.params.zIndex) {
        Y.Squarespace.DIALOG_ZINDEX_BASE += 10;
        this.zIndex = Y.Squarespace.DIALOG_ZINDEX_BASE;
      } else {
        this.zIndex = this.params.zIndex;
      }

    },

    getFields: function() {
      if (this.params.fields)
        return this.params.fields;
      else
        return [];
    },

    getButtons: function() {

      if (this.params.style == "confirmOrReject") {
        var buttons = [];
        if (!this.params.hideCancel) {
          buttons.push(Y.DB.DIV("cancel", { html: this.params.cancelText }));
        }
        buttons.push(Y.DB.INPUT("reject",  { type: "button", value: this.params.rejectText }));
        buttons.push(Y.DB.INPUT("proceed", { type: "button", value: this.params.confirmText }));
        return buttons;
      } else if (this.params.style == "proceedOrCancel") {
        return [ Y.DB.DIV("cancel", { html: this.params.cancelText }), Y.DB.INPUT("proceed", { type: "button", value: this.params.confirmText }) ];
      } else if (this.params.style == "confirmOnly") {
        return [ Y.DB.INPUT("proceed", { type: "button", value: this.params.confirmText })];
      }

    },

    showChoice: function(title, message, confirmText, onSuccess, rejectText, onReject, scope) {

      this.params.style = "confirmOrReject";
      this.params.confirmText = confirmText;
      this.params.rejectText = rejectText;
      this.params.onReject = onReject;
      this.show(title, message, onSuccess, scope);

    },

    showScreenOverlay: function() {

      if( this.overlayEl ) {
        this.fire('overlay-shown');
      } else {

        var vw = Y.one(document).get("winWidth");
        var vh = Y.one(document).get("winHeight");

        this.overlayEl = Y.DB.DIV("dialog-screen-overlay " + (this.params.extreme ? "extreme" : ""));
        this.overlayEl.setStyles({
          height: vh + "px",
          width: vw + "px"
        });

        this.overlayEl.setStyle("zIndex", (this.zIndex+10));

        Y.one(document.body).append(this.overlayEl);

        var a = new Y.Anim({ node : this.overlayEl, to: { opacity: this.params.screenOverlayOpacity }, duration: 0.1, easing: Y.Easing.easeOutStrong});
        a.on('end', function() {
          this.fire('overlay-shown');
        }, this);
        a.run();
      }

    },

    hideScreenOverlay: function() {

      if( this.overlayEl ) {

        var a = new Y.Anim({ node : this.overlayEl, to: { opacity: 0 }, duration: 0.1, easing: Y.Easing.easeOutStrong});
        a.on('end', function() {
          this.fire('overlay-hidden');
          if (this.overlayEl) {
            this.overlayEl.remove();
            delete this.overlayEl;
          }
        }, this);
        a.run();

      } else {
        this.fire('overlay-hidden');
      }

    },

    show: function(title, message, onSuccess, scope) {

      if (this.finished) { return; }

      if (!onSuccess) { onSuccess = this.params.onSuccess || function() {}; }
      if (!scope) { scope = this.params.scope || this; }
      this.params.confirmText = this.params.confirmText || title;
      if (Y.Squarespace.CURRENT_CONFIRMATION_DIALOG) { Y.Squarespace.CURRENT_CONFIRMATION_DIALOG.hide(); }

      if (this.params.escToCancel) {
        Y.Squarespace.CURRENT_CONFIRMATION_DIALOG = this;
      }

      if(title) {
        this.params.title = title;
      }

      if(message) {
        this.params.message = message;
      }

      if(scope) {
        this.params.scope = scope;
      }

      if(onSuccess) {
        this.params.onSuccess = onSuccess;
      }

      // associate with dialog object

      // display a save overlay on the parent dialog (overlay on top of the whole editingdialog window)
      if (this.params.showSaveOverlay ) {

        if( this.params.scope && this.params.scope.on && this.params.scope.showSaveOverlay) {

          this.params.scope.on("close", this.answer, this, null, false);
          this.params.scope.on("cancel", this.answer, this, null, false);

          this.params.scope.showSaveOverlay(true);

        }

      }

      var showDialog = Y.bind(function() {


        // close target

        Y.Squarespace.EscManager.addTarget(this);

        // construct element

        this.el = Y.DB.DIV("sqsp-tooltip clear " + this.params.className, { style: "width: " + this.params.width + "px" },
          (this.params.spinner !== undefined ? Y.DB.DIV("spinner") : ''),
          Y.DB.DIV("title", { html: this.params.title }),
          (this.params.message !== undefined ? Y.DB.DIV("description", { html : this.params.message }) : ''),
          (this.getFields() ?
            Y.DB.DIV("fields",
              this.getFields()
            ) : null),
          (this.getButtons() ?
            Y.DB.DIV("buttons",
              this.getButtons()
            ) : null)
        );
        // trap clicks at the wrapper
        this.el.on("click", function (e) {
          e.stopPropagation();
        }, this);

        var cb = this.el.one(".cancel");
        if (cb) { cb.on("click", this.answer, this, false); }

        if (this.getButtons()) {
          if (this.el.one(".proceed")) { this.el.one(".proceed").on("click", this.answer, this, true, "proceed"); }
          if (this.el.one(".reject"))  { this.el.one(".reject").on("click",  this.answer, this, true, "reject"); }
        }

        if (this.params.clickToClose) {
          this.el.once("click", this.hide, this, true);
        }

        Y.one(document.body).append(this.el);

        // position

        var x, y;

        if (this.params.position == "mouse") {

          x = Y.Squarespace.Mouse.lastX;
          y = Y.Squarespace.Mouse.lastY;

          this.position = new Y.Squarespace.Position({
            xdir: "right",
            ydir: "bottom",
            x: x,
            y: y,
            xo: -150,
            yo: -80,
            w: this.el.get("offsetWidth"),
            h: this.el.get("offsetHeight")
          });

          this.position.nudgeFix();

          this.el.setStyles({
            position: "absolute",
            left: (this.position.getX()) + "px",
            top: this.position.getY() + "px",
            zIndex: 1000000,
            opacity: 0
          });

        } else if (this.params.position == "anchor" && this.params.anchorEl) {

          var anchorEl = Y.one(this.params.anchorEl);

          x = anchorEl.getX();
          y = anchorEl.getY();

          this.position = new Y.Squarespace.Position({
            xdir: "right",
            ydir: "bottom",
            x: x,
            y: y,
            xo: -150,
            yo: -80,
            w: this.el.get("offsetWidth"),
            h: this.el.get("offsetHeight")
          });

          this.position.nudgeFix();

          this.el.setStyles({
            position: "absolute",
            left: this.position.getX() + "px",
            top:  this.position.getY() + "px",
            zIndex: 1000000,
            opacity: 0
          });

        } else if (this.params.position == "center") {

          var y = (Y.one(document.body).get("winHeight")/2 - this.el.get("offsetHeight")/2),
              x = (Y.one(document.body).get("winWidth")/2  - this.el.get("offsetWidth")/2);

          this.el.setStyles({
            position: "fixed",
            left: x + "px",
            top: y + "px",
            zIndex: 1000000,
            opacity: 0
          });
        } else {

          if (this.params.position.indexOf("top") != -1) {

            y = 20;

          } else {

            y = (Y.one(document.body).get("winHeight") - this.el.get("offsetHeight")) - 20;

          }

          if (this.params.position.indexOf("right") != -1) {

            x = (Y.one(document.body).get("winWidth") - this.el.get("offsetWidth")) - 20;

          } else {

            x = 20;

            Y.all(".config-panel").each(function(n) {
              x += n.get("offsetWidth");
            });

          }

          // for notification UI
          if (this.params.position == 'lower-left') {
            this.el.setStyles({
              position: "fixed",
              left: (parseInt(Y.one('.config-panel.root').getComputedStyle('width'), 10) + 10) + "px",
              bottom: "20px",
              zIndex: 1000000,
              opacity: 0
            });
          }
          else if (this.params.position == 'top-center') {
            var x = (Y.one(document.body).get("winWidth")/2  - this.el.get("offsetWidth")/2);
            this.el.setStyles({
              position: "fixed",
              left: x + "px",
              top: "20px",
              zIndex: 1000000,
              opacity: 0
            });
          }
          else if (this.params.position.indexOf("bottom") != -1) {
            this.el.setStyles({
              position: "fixed",
              left: x + "px",
              bottom: "20px",
              zIndex: 1000000,
              opacity: 0
            });

          } else {

            this.el.setStyles({
              position: "fixed",
              left: x + "px",
              top: y + "px",
              zIndex: 1000000,
              opacity: 0
            });

          }

        }

        // animate in

        var a = Y.Squarespace.Transitions.getTransition({
          el: this.el,
          name: 'scale',
          direction: 'in'
        });

        if (this.el.one(".proceed")) {
          this.el.one(".proceed").focus();
        }

        a.run();

        // start pulse loop

        // if (this.getButtons()) {

        //   this.pulseAnim = new Y.Anim({ node : this.el.one(".proceed"), to: { opacity: 0.6 }, duration: .9 });
        //          this.pulseAnim.setAttrs({
        //            "direction": "alternate",
        //            "iterations": "infinite"
        //          })
        //          this.pulseAnim.run();
        //
        // }

        // auto hide?

        if (this.params.autoHide) {
          this.hideTimer = Y.later(this.params.autoHide, this, this.hide);
        }

      }, this);


      // If we are to display the screen overlay,
      // show the dialog only /after/ that has completed,
      // so that we do not animate anything while a large,
      // expensive, opacity animation is running.
      //
      // Otherwise, show it immediately.
      if( this.params.showScreenOverlay ) {
        this.showScreenOverlay();
        this.once('overlay-shown', showDialog);
      } else {
        showDialog();
      }

    },

    setCenter: function(position) {
      this.el.setStyles({ left: position.left - this.el.get('offsetWidth') / 2,
                          top: position.top   - this.el.get('offsetHeight') / 2 });
    },

    answer: function(e, confirmed, answer) {

      if (this.finished) { return; }

      if (e) { e.halt(); }

      this.hide(confirmed);

      if (confirmed) {
        if (answer == "proceed") {
          if (this.params.scope) {
            this.params.onSuccess.apply(this.params.scope);
          } else {
            this.params.onSuccess();
          }
        } else {
          if (this.params.scope) {
            this.params.onReject.apply(this.params.scope);
          } else {
            this.params.onReject();
          }
        }
      } else {

        if( this.params.onCancel ) {
          this.params.onCancel.apply( this.params.scope || this );
        }

      }

    },

    close: function() {

      this.hide(false);

    },

    hide: function(confirmed) {

      this.finished = true;

      // stop anim

      if (this.pulseAnim) { this.pulseAnim.stop(); }
      if (this.hideTimer) { this.hideTimer.cancel(); this.hideTimer = null; }

      // associated dialog object events

      if( this.params.showSaveOverlay ) {
        if (this.params.scope && this.params.scope.on && this.params.scope.hideSaveOverlay) {
          this.params.scope.hideSaveOverlay(0.3);
        }
      }

      var hideDialog = Y.bind(function() {
        // remove close target

        if (Y.Squarespace.EscManager)
          Y.Squarespace.EscManager.removeTarget(this);

        // hide the element

        var a = Y.Squarespace.Transitions.getTransition({
          el: this.el,
          name: 'scale',
          direction: 'out'
        });

        a.on("end", function(e, el) {
          if (el) {
            el.remove();
          }
          this.fire('hidden');
        }, this, this.el);

        a.run();

        this.el = null;
        this.a = null;

        if (this.params.escToCancel) {
          Y.Squarespace.CURRENT_CONFIRMATION_DIALOG = null;
        }

      }, this);

      this.once('overlay-hidden', hideDialog);
      this.hideScreenOverlay();

    }

  });

  Y.augment(Y.Squarespace.ConfirmationDialog, Y.EventTarget);


  Y.Squarespace.Alert = Class.extend(Y.Squarespace.ConfirmationDialog, {

    initialize: function(params) {

      if (!params) { params = { }; }
      params.className = "alert";
      params.showScreenOverlay = false;

      Y.Squarespace.Alert.prototype.superclass.initialize.call(this, params);

    },

    getButtons: function() {
      return [Y.DB.INPUT("proceed", { type: "button", value: "Ok" })];
    }

  });

  Y.Squarespace.Notice = Class.extend(Y.Squarespace.ConfirmationDialog, {

    initialize: function(params) {

      if (!params) { params = { }; }
      params.className = "okay";
      params.showScreenOverlay = false;

      Y.Squarespace.Alert.prototype.superclass.initialize.call(this, params);

    },

    getButtons: function() {
      return [Y.DB.INPUT("proceed", { type: "button", value: "Ok" })];
    }

  });

  Y.Squarespace.Information = Class.extend(Y.Squarespace.ConfirmationDialog, {

    initialize: function(params) {

      if (!params) { params = { }; }

      params = Y.merge({
        className: "okay",
        autoHide: 2000,
        clickToClose: true,
        escToCancel: false,
        showScreenOverlay: false
      }, params);

      Y.Squarespace.Alert.prototype.superclass.initialize.call(this, params);

    },

    getButtons: function() {
      return null;
    }

  });

  Y.Squarespace.Loading = Class.extend(Y.Squarespace.ConfirmationDialog, {

    initialize: function(params) {

      if (!params) { params = { }; }
      params.className = "loading";
      params.clickToClose = false;
      params.escToCancel = false;
      params.spinner = true;

      Y.Squarespace.Loading.prototype.superclass.initialize.call(this, params);
    },

    show: function(title, message, onSuccess, scope) {
      this._super(title, message, onSuccess, scope);
    },

    hide: function(delayMillis) {
      if (delayMillis === undefined)
        delayMillis = 0;

      setTimeout(Y.bind(this._super, this), delayMillis);
    },

    getButtons: function() {
      return null;
    }
  });

  Y.Squarespace.OptionConfirmationDialog = Class.extend(Y.Squarespace.ConfirmationDialog, {

    initialize: function(params) {

      if (!params) { params = { }; }
      params.clickToClose = false;
      params.escToCancel = false;

      Y.Squarespace.Loading.prototype.superclass.initialize.call(this, params);
    },

    getFields: function() {
      this.active = true;

      var config = this.params.optionConfig;

      this.checkEl = Y.DB.DIV("field-wrapper check-field-wrapper clear thin", (config.padding ? { style: "padding-top: " + config.padding[0] + "; padding-bottom: " + config.padding[1] + ";" } : null),
          Y.DB.DIV("check-element " + (this.active ? "active" : ""),
            ((config.title) ? Y.DB.DIV("field-title", { html: config.title }) : null),
            (config.description ?
              Y.DB.DIV("field-description-wrapper",
                Y.DB.DIV("field-description", { html: config.description })
              ) : null)
          )
      );

      this.checkEl.on("click", this.onClick, this);

      return [ this.checkEl ];
    },

    onClick: function(e) {
      this.setValue(!this.active);
    },

    getValue: function() {
      return this.active;
    },

    setValue: function (v) {

      this.active = v;

      if (this.active) {
        this.checkEl.one(".check-element").addClass("active");
      } else {
        this.checkEl.one(".check-element").removeClass("active");
      }

    }


  });

  // --------------------------------------------------------------------------------------------------------------------------------------
  // Lightbox
  // --------------------------------------------------------------------------------------------------------------------------------------

  // showing -> overlay-visible -> content-ready -> content-visible -> hiding -> hidden

  Y.Squarespace.Lightbox = Class.create({

    defaultOpts: {
      overlayShowDuration: 0.35,
      contentShowDuration: 0.6,
      margin: 0,
      opacity: 1,
      transition: 'fade',
      clickAnywhereToExit: true,
      name: null,
      content: '<div>&nbsp;</div>',
      theme: 'black',
      overlayStyle: 'orb' // other possibilites include: plain, orb
    },

    name: 'Lightbox',

    initialize: function(params) {

      this.enabled = true;

      this.params = Y.merge( this.defaultOpts, params );

      // if (!this.params.overlayShowDuration) { this.params.overlayShowDuration = 0.35; }
      // if (!this.params.contentShowDuration) { this.params.contentShowDuration = 0.6; }
      // if (!this.params.margin) { this.params.margin = 0; }
      // if (!this.params.opacity) { this.params.opacity = 1; }
      if (!this.params.transition) { this.params.transition = 'fade'; }
      if (!this.params.zIndex) { Y.Squarespace.DIALOG_ZINDEX_BASE += 10; this.params.zIndex = Y.Squarespace.DIALOG_ZINDEX_BASE; }

      this.events = [];
    },

    enable: function() {
      this.enabled = true;
      this.overlayEl.setStyle("display", "block");
    },

    disable: function() {
      this.enabled = false;
      this.overlayEl.setStyle("display", "none");
    },

    getContentEl: function() {
      return this.contentEl;
    },

    show: function() {

      var vw = Y.one(document).get("winWidth");
      var vh = Y.one(document).get("winHeight");

      var lightboxClass = 'sqs-lightbox' + (this.params.name ? ' sqs-lightbox-' + this.params.name : '');

      // load content
      this.contentEl = Y.DB.DIV(lightboxClass,
        (Y.Lang.isString(this.params.content) ? {html: this.params.content} : this.params.content)
      );

      this.contentEl.setStyles({
        "position" : "fixed",
        "opacity" : "0",
        "overflow" : "hidden",
        "zIndex": (this.params.zIndex)
      });

      // events

      this.events.push(Y.on("resize", this.position, Y.one(window), this));

      // close target

      if (!this.params.disableNormalClose) {
        Y.Squarespace.EscManager.addTarget(this);
      }

      Y.one(document.body).append(this.contentEl);

      // show overlay
      if (!this.params.contentOnly) {

        var overlayClass = 'sqs-lightbox-overlay' + (this.params.name ? ' sqs-lightbox-overlay-' + this.params.name : '') + ' ' + this.params.theme;

        if (this.params.name) { overlayClass += ' sqs-lightbox-overlay-' + this.params.name; }
        if (this.params.overlayStyle) { overlayClass += ' sqs-lightbox-overlay-style-' + this.params.overlayStyle; }

        this.overlayEl = Y.DB.DIV(overlayClass);
        this.overlayEl.setStyles({
          "zIndex": this.params.zIndex-1
        });

        Y.one(document.body).append(this.overlayEl);

        this.fire("showing");

        this.a = Y.Squarespace.Transitions.getTransition({
          el: this.overlayEl,
          opacity: this.params.opacity,
          name: 'fade',
          direction: 'in',
          duration: this.params.overlayShowDuration
        });

        this.a.on("end", function() {
          this.fire("overlay-visible");
          this.a = null;
          this._showContent();
        }, this);
        this.a.run();

        // events

        if (!this.params.disableNormalClose) {
          this.events.push(Y.on("click", this.close, this.overlayEl, this));
        }

      } else {

        this._showContent();

      }

      // click to exit

      if (this.params.clickAnywhereToExit) {
        this.events.push( Y.on("click", this.hide, this.contentEl, this) );
      }

    },

    position: function() {

      if (!this.enabled) { return; }

      var verticalWidth = Y.one(document).get("winWidth");
      var verticalHeight = Y.one(document).get("winHeight");

      var width, height;

      if (verticalWidth < this.naturalW + (this.params.margin * 2)) {
        width = verticalWidth - (this.params.margin * 2);
      } else {
        width = this.naturalW;
      }

      if (verticalHeight < this.naturalH + (this.params.margin * 2)) {
        height = verticalHeight - (this.params.margin * 2);
      } else {
        height = this.naturalH;
      }

      var offsetLeft = ( verticalWidth - width ) / 2;
      var offsetTop = ( verticalHeight - height ) / 2;

      // contentAttached
      if (this.contentAttached) {

        this.contentEl.setStyles({
          "left": offsetLeft + "px",
          "top": offsetTop + "px",
          "width": width + "px"
        });
        if (!this.params.noHeightConstrain) {
          this.contentEl.setStyles({
            "height": height + "px"
          });
        }

        // resize target
        if (this.resizeTarget) {
          this.resizeTarget.resizeToParent({ scale: "contain" });
        }

      }

      // if (this.overlayEl) {

      //   this.overlayEl.setStyles({
      //     "height": "100%",
      //     "width": "100%"
      //   });
      //
      // }

      this.fire('position', {
        width: width,
        height: height,
        verticalWidth: verticalWidth,
        verticalHeight: verticalHeight,

        maxWidth: verticalWidth - ( this.params.margin * 2 ),
        maxHeight: verticalHeight - ( this.params.margin * 2 )
      });

    },

    _showContent: function() {

      // add
      this.contentAttached = true;

      // resize to parent
      this.resizeTarget = this.contentEl.one(".resize-target");

      // measure
      this.naturalW = this.contentEl.one("*").get("offsetWidth");
      this.naturalH = this.contentEl.one("*").get("offsetHeight");

      this.position();

      // show
      this.fire("content-ready");

      var a = Y.Squarespace.Transitions.getTransition({
        el: this.contentEl,
        name: this.params.transition,
        direction: 'in',
        duration: this.params.contentShowDuration
      });

      a.on("end", function() {
        this.fire("content-visible");
      }, this);

      a.run();

    },

    close: function(e) {

      if( !this.params.clickAnywhereToExit ) {
        if( !e || this.overlayEl.compareTo(e.target) ) {
          return;
        }

      }

      this.hide();
    },

    hide: function() {

      if (!this.enabled) { return; }
      if (this.a) { this.a.stop(); }
      this.a = null;

      this.fire("hiding");

      // remove close target

      Y.Squarespace.EscManager.removeTarget(this);

      // hide

      if (this.overlayEl) {

        // overlay

        var a = Y.Squarespace.Transitions.getTransition({
          el: this.overlayEl,
          name: 'fade',
          direction: 'out',
          duration: this.params.overlayShowDuration
        });

        if (this.params.overlayShowDuration > this.params.contentShowDuration) {
          this.a = a; // this is the animation that should trigger the destroy
        }

        a.run();

      }

      // content
      var a = Y.Squarespace.Transitions.getTransition({
        el: this.contentEl,
        name: this.params.transition,
        direction: 'out',
        duration: this.params.contentShowDuration
      });

      // no overlay destroy -- trigger destroy from content
      if (!this.a) { this.a = a; }

      a.run();

      // hacky -- there's a small chance for a race condition here if durations are stupidly small -- but why would they be..
      this.a.on("end", function() {

        this.destroy();
        this.fire("hidden");

      }, this);

    },

    destroy: function() {

      for (var i = 0; i < this.events.length; ++i) {
        this.events[i].detach();
      }

      if (this.contentEl)
        this.contentEl.remove();
      if (this.overlayEl)
        this.overlayEl.remove();

      this.contentEl = null;
      this.overlayEl = null;
      this.events = [ ];

    }

  });

  Y.augment(Y.Squarespace.Lightbox, Y.EventTarget);


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Standard Transitions
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.CustomAnim = Class.create({

    initialize: function(params) {
      this.params = params;
    },

    cancel: function() {

    },

    stop: function() {

    }

  });

  Y.augment(Y.Squarespace.CustomAnim, Y.EventTarget);
  Y.augment(Y.Squarespace.CustomAnim, Y.Attribute);

  Y.Squarespace.Transitions = {

    STANDARD_DURATION: 0.3,

    getTransition: function(params) {

      if (!params.el || !params.el._node) {
        console.warn("ui-base: [Transitions] You're trying to animate a non-existent element, returning blank animation");
        return new Y.Anim();
      }

      if (!params.duration) {
        params.duration = Y.Squarespace.Transitions.STANDARD_DURATION;
      }

      return Y.Squarespace.Transitions.transitionsByName[params.name](params);

    },

    transitionsByName: {

      'fade': function(params) {

        return new Y.Anim({ node : params.el, to: { opacity: (params.opacity == null ? (params.direction == "in" ? 1 : 0 ) : params.opacity) }, duration: Y.Squarespace.Transitions.STANDARD_DURATION, easing: Y.Easing.easeOutStrong});

      },

      'scale': function(params) {

        return new (Class.extend(Y.Squarespace.CustomAnim, {

          run: function() {

            if (!params.opacity) { params.opacity = 1; }
            if (params.duration == null) { params.duration = Y.Squarespace.Transitions.STANDARD_DURATION; }

            var el = this.params.el;

            if (this.params.direction == "in") {

              el.setStyles({
                "transform": "scale(.95)",
                opacity: 0
              });

              Y.later(10, el, el.setStyles, {
                "transitionProperty": "transform, opacity",
                "transitionDuration": params.duration + "s",
                "transitionTimingFunction": "ease-out",
                "backface-visibility": "hidden"
              });

              Y.later(20, el, el.setStyles, {
                "transform": "scale(1)",
                "opacity": params.opacity
                });

            } else {

              el.setStyles({
                "transform": "scale(1)",
                opacity: params.opacity
              });

              Y.later(10, el, el.setStyles, {
                "transitionProperty": "transform, opacity",
                "transitionDuration": params.duration + "s",
                "transitionTimingFunction": "ease-out",
                "backfaceVisibility": "hidden"
              });

              Y.later(20, el, el.setStyles, {
                "transform": "scale(.95)",
                "opacity": 0
                });

            }

            Y.later((params.duration * 1000) + 100, this, function() { this.fire("end", { _event: true }); });

          }

        }))(params);

      },

      'none': function(params) {

        return new (Class.extend(Y.Squarespace.CustomAnim, {

          run: function() {

            if (this.params.direction == "in") {

              this.el.setStyle('opacity', 1);

            } else {

              this.el.setStyle('opacity', 0);

            }

            this.fire("end");

          }

        }))(params);

      }


    }

  };


  // --------------------------------------------------------------------------------------------------------------------------------------
  // Basic Effects
  // --------------------------------------------------------------------------------------------------------------------------------------

  Y.Squarespace.Effects = {

    bounce: function(el) {

      el.setStyles({
        "transform": "scale(1)"
      });

      Y.later(10, el, el.setStyles, {
        "transitionProperty": "transform, opacity",
        "transitionDuration": ".2s",
        "transitionTimingFunction": "ease-out",
        "backfaceVisibility": "hidden"
        });

      Y.later(20, el, el.setStyles, {
        "transform": "scale(1.3)"
        });

      Y.later(200, el, el.setStyles, {
        "transform": "scale(1)"
        });

    },

    focus: function(el) {

      el.setStyle("outline", "4px solid rgba(99, 145, 0, 0.8)");

      var a = new Y.Anim({ node: el, to: { }, duration: 1.4, easing: Y.Easing.easeOutStrong});
      a.on("tween", function(e) {
        var p = (1 - (this.get("elapsedTime") / (this.get('duration')*1000)));
        this.get("node").setStyle("outline", "4px solid rgba(99, 145, 0, " + (p) + ")");
      });
      a.on("end", function() {
        this.get("node").setStyle("outline", "");
      });
      a.run();

    },

    blink: function(el) {

      var a = new Y.Anim({ node: el, to: { opacity: 0 }, duration: 0.6, easing: Y.Easing.easeOutStrong});
      a.on("end", function() {

        var a = new Y.Anim({ node: this.get("node"), to: { opacity: 1 }, duration: 0.6, easing: Y.Easing.easeOutStrong});
        a.on("end", function() {

        });
        a.run();

      });
      a.run();

    }

  };

  // Node Destroy Hack
  Y.Squarespace.NodeDestroyNotifier = Y.Base.create("NodeDestroyNotifier", Y.Plugin.Base, [], {
    destructor: function() {
      if (this.get('onDestroy')) {
        this.get('onDestroy').call(this.get('context') || this);
      }
    }
  }, {
    NS: 'nodedestroynotifier',
    ATTRS: {
      onDestroy: {},
      context: {}
    }
  });


  // Y.NODE EXTENSIONS
  Y.augment(Y.Node, Class.create({

    intersectXY: function(left, top) { // or x, y

      var region = this.get('region');

      return (
        region.left < left && left < region.right &&
        region.top < top && top < region.bottom
      );

    },

    forceClass: function(name, force) {

      this[force ? "addClass" : "removeClass"](name);

    },

    data: function(className) { // OLD DATA METHOD

      var n = this._node;

      if (className) {
        while (n) {
          if (n.data && n.className.indexOf(className) != -1) {
            return n.data;
          }
          n = n.parentNode;
        }
      } else {
        while (n) {
          if (n.data) { return n.data; }
          n = n.parentNode;
        }
      }

      return (null);

    },

    setNodeData: function(data) {  // OLD DATA METHOD

      this._node.data = data;

    }

  }));

  /*
   * ActionOverlay
   */
  Y.Squarespace.RelativeTimeDisplay = Y.Base.create('RelativeTimeDisplay', Y.Plugin.Base, [], {

    initializer: function() {

      this.timer = Y.later(this.get('interval'), this, this.syncUI, {}, true);
      this.syncUI();

    },

    syncUI: function() {
      // is it in the seconds range?
      var secondsDifference = Math.floor((new Date().getTime() - this.get('date').getTime()) / 1000);
      if (secondsDifference < 60) {
        if (secondsDifference === 0) {
          this.get('host').setContent('just now');
        } else {
          this.get('host').setContent('about ' + secondsDifference + ' seconds ago');
        }
      } else {
        this.get('host').setContent(Y.Squarespace.Utils.humanizeDate(this.get('date'), true));
      }

    },

    destructor: function() {
      this.timer.cancel();
    }

  }, {
    NS: 'RelativeTimeDisplay',
    CSS_NAMESPACE: 'sqs-action-overlay',
    ATTRS: {
      date: {
        valueFn: function() {
          return new Date();
        }
      },

      interval: {
        value: 5000
      }
    }
  });

  // hold an object positions on the screen, and then animate it
  // used to animate re-ordering images in the gallery manager
  Y.Squarespace.PositionAnimator = Y.Base.create("PositionAnimator", Y.Plugin.Base, [], {

    hold: function() {

      this.set('originalTop', this.get('host').get('offsetTop'));
      this.set('originalLeft', this.get('host').get('offsetLeft'));

      this.previousPosition = this.get('host').getStyle('position');

    },

    // release animation is randomized slightly unless uniform is true
    release: function(uniform) {

      // calculate the difference
      var offsetTop = this.get('host').get('offsetTop');
      var offsetLeft = this.get('host').get('offsetLeft');

      var duration = this.get('baseSpeed') + (uniform ? 0 : (Math.random() * 0.2));
      var delay = uniform ? 0 : 200 * Math.random();

      this.get('host').setStyles({
        position: 'relative',
        top: this.get('originalTop') - offsetTop,
        left: this.get('originalLeft') - offsetLeft
      });

      var ctx = this;

      var anim = this.get('host').anim({
        top: 0,
        left: 0
      }, {
        duration: duration,
        end: function() {
          if (!this.get('node')._node) { return; }
          this.get('node').setStyles({
            position: this.previousPosition,
            top: null,
            left: null
          });

          if (ctx.get('releasedFn')) {
            ctx.get('releasedFn')();
          }

          ctx.fire('released');
        }
      });

      Y.later(delay, anim, anim.run);

    },

    destructor: function() {

    }
  }, {
    NS: 'positionAnimator',
    ATTRS: {
      'originalTop': {},
      'originalLeft': {},
      'releasedFn': { value: false },
      'baseSpeed': { value: 0.2 }
    }
  });

}, '1.0', { requires: [
  'node',
  'base',
  'plugin',
  'anim',
  'event-custom',
  'attribute',
  'squarespace-dombuilder',
  'squarespace-ui-base-css',
  'squarespace-currency-symbols-css',
  'squarespace-spinner'
] });




// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/base-base/base-base.js
// ----------------------------------------------------------------------------------------

YUI.add('base-base', function (Y, NAME) {

    /**
     * The base module provides the Base class, which objects requiring attribute and custom event support can extend.
     * The module also provides two ways to reuse code - It augments Base with the Plugin.Host interface which provides
     * plugin support and also provides the BaseCore.build method which provides a way to build custom classes using extensions.
     *
     * @module base
     */

    /**
     * The base-base submodule provides the Base class without the Plugin support, provided by Plugin.Host,
     * and without the extension support provided by BaseCore.build.
     *
     * @module base
     * @submodule base-base
     */

    var AttributeCore   = Y.AttributeCore,
        AttributeExtras = Y.AttributeExtras,
        BaseCore        = Y.BaseCore,
        BaseObservable  = Y.BaseObservable;

    /**
     * <p>
     * A base class which objects requiring attributes and custom event support can
     * extend. Base also handles the chaining of initializer and destructor methods across
     * the hierarchy as part of object construction and destruction. Additionally, attributes configured
     * through the static <a href="#property_ATTRS">ATTRS</a> property for each class
     * in the hierarchy will be initialized by Base.
     * </p>
     *
     * <p>
     * The static <a href="#property_NAME">NAME</a> property of each class extending
     * from Base will be used as the identifier for the class, and is used by Base to prefix
     * all events fired by instances of that class.
     * </p>
     *
     * @class Base
     * @constructor
     * @uses BaseCore
     * @uses BaseObservable
     * @uses AttributeCore
     * @uses AttributeObservable
     * @uses AttributeExtras
     * @uses EventTarget
     *
     * @param {Object} config Object with configuration property name/value pairs. The object can be
     * used to provide default values for the objects published attributes.
     *
     * <p>
     * The config object can also contain the following non-attribute properties, providing a convenient
     * way to configure events listeners and plugins for the instance, as part of the constructor call:
     * </p>
     *
     * <dl>
     *   <dt>on</dt>
     *   <dd>An event name to listener function map, to register event listeners for the "on" moment of the event.
     *       A constructor convenience property for the <a href="Base.html#method_on">on</a> method.</dd>
     *   <dt>after</dt>
     *   <dd>An event name to listener function map, to register event listeners for the "after" moment of the event.
     *       A constructor convenience property for the <a href="Base.html#method_after">after</a> method.</dd>
     *   <dt>bubbleTargets</dt>
     *   <dd>An object, or array of objects, to register as bubble targets for bubbled events fired by this instance.
     *       A constructor convenience property for the <a href="EventTarget.html#method_addTarget">addTarget</a> method.</dd>
     *   <dt>plugins</dt>
     *   <dd>A plugin, or array of plugins to be plugged into the instance (see PluginHost's plug method for signature details).
     *       A constructor convenience property for the <a href="Plugin.Host.html#method_plug">plug</a> method.</dd>
     * </dl>
     */
    function Base() {
        BaseCore.apply(this, arguments);
        BaseObservable.apply(this, arguments);
        AttributeExtras.apply(this, arguments);
    }

    /**
     * The list of properties which can be configured for
     * each attribute (e.g. setter, getter, writeOnce, readOnly etc.)
     *
     * @property _ATTR_CFG
     * @type Array
     * @static
     * @private
     */
    Base._ATTR_CFG = BaseCore._ATTR_CFG.concat(BaseObservable._ATTR_CFG);

    /**
     * The array of non-attribute configuration properties supported by this class.
     *
     * `Base` supports "on", "after", "plugins" and "bubbleTargets" properties,
     * which are not set up as attributes.
     *
     * This property is primarily required so that when
     * <a href="#property__allowAdHocAttrs">`_allowAdHocAttrs`</a> is enabled by
     * a class, non-attribute configurations don't get added as ad-hoc attributes.
     *
     * @property _NON_ATTRS_CFG
     * @type Array
     * @static
     * @private
     */
    Base._NON_ATTRS_CFG = BaseCore._NON_ATTRS_CFG.concat(BaseObservable._NON_ATTRS_CFG);

    /**
     * <p>
     * The string to be used to identify instances of
     * this class, for example in prefixing events.
     * </p>
     * <p>
     * Classes extending Base, should define their own
     * static NAME property, which should be camelCase by
     * convention (e.g. MyClass.NAME = "myClass";).
     * </p>
     * @property NAME
     * @type String
     * @static
     */
    Base.NAME = 'base';

    /**
     * The default set of attributes which will be available for instances of this class, and
     * their configuration. In addition to the configuration properties listed by
     * Attribute's <a href="Attribute.html#method_addAttr">addAttr</a> method, the attribute
     * can also be configured with a "cloneDefaultValue" property, which defines how the statically
     * defined value field should be protected ("shallow", "deep" and false are supported values).
     *
     * By default if the value is an object literal or an array it will be "shallow" cloned, to
     * protect the default value.
     *
     * @property ATTRS
     * @type Object
     * @static
     */
    Base.ATTRS = AttributeCore.protectAttrs(BaseCore.ATTRS);

    /**
    Provides a way to safely modify a `Y.Base` subclass' static `ATTRS` after
    the class has been defined or created.

    Base-based classes cache information about the class hierarchy in order to
    efficiently create instances. This cache includes includes the aggregated
    `ATTRS` configs. If the static `ATTRS` configs need to be modified after the
    class has been defined or create, then use this method which will make sure
    to clear any cached data before making any modifications.

    @method modifyAttrs
    @param {Function} [ctor] The constructor function whose `ATTRS` should be
        modified. If a `ctor` function is not specified, then `this` is assumed
        to be the constructor which hosts the `ATTRS`.
    @param {Object} configs The collection of `ATTRS` configs to mix with the
        existing attribute configurations.
    @static
    @since 3.10.0
    **/
    Base.modifyAttrs = BaseCore.modifyAttrs;

    Y.mix(Base, BaseCore, false, null, 1);
    Y.mix(Base, AttributeExtras, false, null, 1);

    // Needs to be `true`, to overwrite methods from `BaseCore`.
    Y.mix(Base, BaseObservable, true, null, 1);

    // Fix constructor
    Base.prototype.constructor = Base;

    Y.Base = Base;


}, '3.10.1', {"requires": ["attribute-base", "base-core", "base-observable"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-event-delegate/node-event-delegate.js
// ----------------------------------------------------------------------------------------

YUI.add('node-event-delegate', function (Y, NAME) {

/**
 * Functionality to make the node a delegated event container
 * @module node
 * @submodule node-event-delegate
 */

/**
 * <p>Sets up a delegation listener for an event occurring inside the Node.
 * The delegated event will be verified against a supplied selector or
 * filtering function to test if the event references at least one node that
 * should trigger the subscription callback.</p>
 *
 * <p>Selector string filters will trigger the callback if the event originated
 * from a node that matches it or is contained in a node that matches it.
 * Function filters are called for each Node up the parent axis to the
 * subscribing container node, and receive at each level the Node and the event
 * object.  The function should return true (or a truthy value) if that Node
 * should trigger the subscription callback.  Note, it is possible for filters
 * to match multiple Nodes for a single event.  In this case, the delegate
 * callback will be executed for each matching Node.</p>
 *
 * <p>For each matching Node, the callback will be executed with its 'this'
 * object set to the Node matched by the filter (unless a specific context was
 * provided during subscription), and the provided event's
 * <code>currentTarget</code> will also be set to the matching Node.  The
 * containing Node from which the subscription was originally made can be
 * referenced as <code>e.container</code>.
 *
 * @method delegate
 * @param type {String} the event type to delegate
 * @param fn {Function} the callback function to execute.  This function
 *              will be provided the event object for the delegated event.
 * @param spec {String|Function} a selector that must match the target of the
 *              event or a function to test target and its parents for a match
 * @param context {Object} optional argument that specifies what 'this' refers to.
 * @param args* {any} 0..n additional arguments to pass on to the callback function.
 *              These arguments will be added after the event object.
 * @return {EventHandle} the detach handle
 * @for Node
 */
Y.Node.prototype.delegate = function(type) {

    var args = Y.Array(arguments, 0, true),
        index = (Y.Lang.isObject(type) && !Y.Lang.isArray(type)) ? 1 : 2;

    args.splice(index, 0, this._node);

    return Y.delegate.apply(Y, args);
};


}, '3.10.1', {"requires": ["node-base", "event-delegate"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/io-xdr/io-xdr.js
// ----------------------------------------------------------------------------------------

YUI.add('io-xdr', function (Y, NAME) {

/**
Extends IO to provide an alternate, Flash transport, for making
cross-domain requests.
@module io
@submodule io-xdr
@for IO
**/

// Helpful resources when working with the mess that is XDomainRequest:
// http://www.cypressnorth.com/blog/web-programming-and-development/internet-explorer-aborting-ajax-requests-fixed/
// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

/**
Fires when the XDR transport is ready for use.
@event io:xdrReady
**/
var E_XDR_READY = Y.publish('io:xdrReady', { fireOnce: true }),

/**
Map of stored configuration objects when using
Flash as the transport for cross-domain requests.

@property _cB
@private
@type {Object}
**/
_cB = {},

/**
Map of transaction simulated readyState values
when XDomainRequest is the transport.

@property _rS
@private
@type {Object}
**/
_rS = {},

// Document reference
d = Y.config.doc,
// Window reference
w = Y.config.win,
// XDomainRequest cross-origin request detection
xdr = w && w.XDomainRequest;

/**
Method that creates the Flash transport swf.

@method _swf
@private
@param {String} uri - location of io.swf.
@param {String} yid - YUI sandbox id.
@param {String} yid - IO instance id.
**/
function _swf(uri, yid, uid) {
    var o = '<object id="io_swf" type="application/x-shockwave-flash" data="' +
            uri + '" width="0" height="0">' +
            '<param name="movie" value="' + uri + '">' +
            '<param name="FlashVars" value="yid=' + yid + '&uid=' + uid + '">' +
            '<param name="allowScriptAccess" value="always">' +
            '</object>',
        c = d.createElement('div');

    d.body.appendChild(c);
    c.innerHTML = o;
}

/**
Creates a response object for XDR transactions, for success
and failure cases.

@method _data
@private
@param {Object} o - Transaction object generated by _create() in io-base.
@param {Boolean} u - Configuration xdr.use.
@param {Boolean} d - Configuration xdr.dataType.

@return {Object}
**/
function _data(o, u, d) {
    if (u === 'flash') {
        o.c.responseText = decodeURI(o.c.responseText);
    }
    if (d === 'xml') {
        o.c.responseXML = Y.DataType.XML.parse(o.c.responseText);
    }

    return o;
}

/**
Method for intiating an XDR transaction abort.

@method _abort
@private
@param {Object} o - Transaction object generated by _create() in io-base.
@param {Object} c - configuration object for the transaction.
**/
function _abort(o, c) {
    return o.c.abort(o.id, c);
}

/**
Method for determining if an XDR transaction has completed
and all data are received.

@method _isInProgress
@private
@param {Object} o - Transaction object generated by _create() in io-base.
**/
function _isInProgress(o) {
    return xdr ? _rS[o.id] !== 4 : o.c.isInProgress(o.id);
}

Y.mix(Y.IO.prototype, {

    /**
    Map of io transports.

    @property _transport
    @private
    @type {Object}
    **/
    _transport: {},

    /**
    Sets event handlers for XDomainRequest transactions.

    @method _ieEvt
    @private
    @static
    @param {Object} o - Transaction object generated by _create() in io-base.
    @param {Object} c - configuration object for the transaction.
    **/
    _ieEvt: function(o, c) {
        var io = this,
            i = o.id,
            t = 'timeout';

        o.c.onprogress = function() { _rS[i] = 3; };
        o.c.onload = function() {
            _rS[i] = 4;
            io.xdrResponse('success', o, c);
        };
        o.c.onerror = function() {
            _rS[i] = 4;
            io.xdrResponse('failure', o, c);
        };
        o.c.ontimeout = function() {
            _rS[i] = 4;
            io.xdrResponse(t, o, c);
        };
        o.c[t] = c[t] || 0;
    },

    /**
    Method for accessing the transport's interface for making a
    cross-domain transaction.

    @method xdr
    @param {String} uri - qualified path to transaction resource.
    @param {Object} o - Transaction object generated by _create() in io-base.
    @param {Object} c - configuration object for the transaction.
    **/
    xdr: function(uri, o, c) {
        var io = this;

        if (c.xdr.use === 'flash') {
            // The configuration object cannot be serialized safely
            // across Flash's ExternalInterface.
            _cB[o.id] = c;
            w.setTimeout(function() {
                try {
                    o.c.send(uri, { id: o.id,
                                    uid: o.uid,
                                    method: c.method,
                                    data: c.data,
                                    headers: c.headers });
                }
                catch(e) {
                    io.xdrResponse('transport error', o, c);
                    delete _cB[o.id];
                }
            }, Y.io.xdr.delay);
        }
        else if (xdr) {
            io._ieEvt(o, c);
            o.c.open(c.method || 'GET', uri);

            // Make async to protect against IE 8 oddities.
            setTimeout(function() {
                o.c.send(c.data);
            }, 0);
        }
        else {
            o.c.send(uri, o, c);
        }

        return {
            id: o.id,
            abort: function() {
                return o.c ? _abort(o, c) : false;
            },
            isInProgress: function() {
                return o.c ? _isInProgress(o.id) : false;
            },
            io: io
        };
    },

    /**
    Response controller for cross-domain requests when using the
    Flash transport or IE8's XDomainRequest object.

    @method xdrResponse
    @param {String} e Event name
    @param {Object} o Transaction object generated by _create() in io-base.
    @param {Object} c Configuration object for the transaction.
    @return {Object}
    **/
    xdrResponse: function(e, o, c) {
        c = _cB[o.id] ? _cB[o.id] : c;
        var io = this,
            m = xdr ? _rS : _cB,
            u = c.xdr.use,
            d = c.xdr.dataType;

        switch (e) {
            case 'start':
                io.start(o, c);
                break;
           //case 'complete':
                //This case is not used by Flash or XDomainRequest.
                //io.complete(o, c);
                //break;
            case 'success':
                io.success(_data(o, u, d), c);
                delete m[o.id];
                break;
            case 'timeout':
            case 'abort':
            case 'transport error':
                o.c = { status: 0, statusText: e };
            case 'failure':
                io.failure(_data(o, u, d), c);
                delete m[o.id];
                break;
        }
    },

    /**
    Fires event "io:xdrReady"

    @method _xdrReady
    @private
    @param {Number} yid - YUI sandbox id.
    @param {Number} uid - IO instance id.
    **/
    _xdrReady: function(yid, uid) {
        Y.fire(E_XDR_READY, yid, uid);
    },

    /**
    Initializes the desired transport.

    @method transport
    @param {Object} o - object of transport configurations.
    **/
    transport: function(c) {
        if (c.id === 'flash') {
            _swf(Y.UA.ie ? c.src + '?d=' + new Date().valueOf().toString() : c.src, Y.id, c.uid);
            Y.IO.transports.flash = function() { return d.getElementById('io_swf'); };
        }
    }
});

/**
Fires event "io:xdrReady"

@method xdrReady
@protected
@static
@param {Number} yid - YUI sandbox id.
@param {Number} uid - IO instance id.
**/
Y.io.xdrReady = function(yid, uid){
    var io = Y.io._map[uid];
    Y.io.xdr.delay = 0;
    io._xdrReady.apply(io, [yid, uid]);
};

Y.io.xdrResponse = function(e, o, c){
    var io = Y.io._map[o.uid];
    io.xdrResponse.apply(io, [e, o, c]);
};

Y.io.transport = function(c){
    var io = Y.io._map['io:0'] || new Y.IO();
    c.uid = io._uid;
    io.transport.apply(io, [c]);
};

/**
Delay value to calling the Flash transport, in the
event io.swf has not finished loading.  Once the E_XDR_READY
event is fired, this value will be set to 0.

@property delay
@static
@type {Number}
**/
Y.io.xdr = { delay : 100 };


}, '3.10.1', {"requires": ["io-base", "datatype-xml-parse"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-tap/event-tap.js
// ----------------------------------------------------------------------------------------

YUI.add('event-tap', function (Y, NAME) {

/**
The tap module provides a gesture events, "tap", which normalizes user interactions
across touch and mouse or pointer based input devices.  This can be used by application developers
to build input device agnostic components which behave the same in response to either touch or mouse based
interaction.

'tap' is like a touchscreen 'click', only it requires much less finger-down time since it listens to touch events,
but reverts to mouse events if touch is not supported.

@example

    YUI().use('event-tap', function (Y) {
        Y.one('#my-button').on('tap', function (e) {
        });
    });

@module event
@submodule event-tap
@author Andres Garza, matuzak and tilo mitra
@since 3.7.0

*/
var doc = Y.config.doc,
    GESTURE_MAP = Y.Event._GESTURE_MAP,
    SUPPORTS_TOUCHES = !!(doc && doc.createTouch),
    EVT_START = GESTURE_MAP.start,
    EVT_MOVE = GESTURE_MAP.move,
    EVT_END = GESTURE_MAP.end,
    EVT_CANCEL = GESTURE_MAP.cancel,
    EVT_TAP = 'tap',

    HANDLES = {
        START: 'Y_TAP_ON_START_HANDLE',
        MOVE: 'Y_TAP_ON_MOVE_HANDLE',
        END: 'Y_TAP_ON_END_HANDLE',
        CANCEL: 'Y_TAP_ON_CANCEL_HANDLE'
    };

function detachHelper(subscription, handles, subset, context) {

    handles = subset ? handles : [ handles.START, handles.MOVE, handles.END, handles.CANCEL ];

    Y.Array.each(handles, function (item, index, array) {
        var handle = subscription[item];
        if (handle) {
            handle.detach();
            subscription[item] = null;
        }
    });

}


/**
Sets up a "tap" event, that is fired on touch devices in response to a tap event (finger down, finder up).
This event can be used instead of listening for click events which have a 500ms delay on most touch devices.
This event can also be listened for using node.delegate().

@event tap
@param type {string} "tap"
@param fn {function} The method the event invokes. It receives the event facade of the underlying DOM event.
@for Event
@return {EventHandle} the detach handle
*/
Y.Event.define(EVT_TAP, {

    /**
    This function should set up the node that will eventually fire the event.

    Usage:

        node.on('tap', function (e) {
        });

    @method on
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @public
    @static
    **/
    on: function (node, subscription, notifier) {
        subscription[HANDLES.START] = node.on(EVT_START, this.touchStart, this, node, subscription, notifier);
    },

    /**
    Detaches all event subscriptions set up by the event-tap module

    @method detach
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @public
    @static
    **/
    detach: function (node, subscription, notifier) {
        detachHelper(subscription, HANDLES);
    },

    /**
    Event delegation for the 'tap' event. The delegated event will use a
    supplied selector or filtering function to test if the event references at least one
    node that should trigger the subscription callback.

    Usage:

        node.delegate('tap', function (e) {
        }, 'li a');

    @method delegate
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @param {String | Function} filter
    @public
    @static
    **/
    delegate: function (node, subscription, notifier, filter) {
        subscription[HANDLES.START] = node.delegate(EVT_START, function (e) {
            this.touchStart(e, node, subscription, notifier, true);
        }, filter, this);
    },

    /**
    Detaches the delegated event subscriptions set up by the event-tap module.
    Only used if you use node.delegate(...) instead of node.on(...);

    @method detachDelegate
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @public
    @static
    **/
    detachDelegate: function (node, subscription, notifier) {
        detachHelper(subscription, HANDLES);
    },


    /**
    Called when the monitor(s) are tapped on, either through touchstart or mousedown.

    @method touchStart
    @param {DOMEventFacade} event
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @param {Boolean} delegate
    @protected
    @static
    **/
    touchStart: function (event, node, subscription, notifier, delegate) {

        var context = {
                canceled: false
            };
        //move ways to quit early to the top.

        // no right clicks
        if (event.button && event.button === 3) {
            return;
        }

        // for now just support a 1 finger count (later enhance via config)
        if (event.touches && event.touches.length !== 1) {
            return;
        }

        context.node = delegate ? event.currentTarget : node;

        //There is a double check in here to support event simulation tests, in which
        //event.touches can be undefined when simulating 'touchstart' on touch devices.
        if (SUPPORTS_TOUCHES && event.touches) {
          context.startXY = [ event.touches[0].pageX, event.touches[0].pageY ];
        }
        else {
          context.startXY = [ event.pageX, event.pageY ];
        }

        //Possibly outdated issue: something is off with the move that it attaches it but never triggers the handler
        subscription[HANDLES.MOVE] = node.once(EVT_MOVE, this.touchMove, this, node, subscription, notifier, delegate, context);
        subscription[HANDLES.END] = node.once(EVT_END, this.touchEnd, this, node, subscription, notifier, delegate, context);
        subscription[HANDLES.CANCEL] = node.once(EVT_CANCEL, this.touchMove, this, node, subscription, notifier, delegate, context);
    },

    /**
    Called when the monitor(s) fires a touchmove or touchcancel event (or the mouse equivalent).
    This method detaches event handlers so that 'tap' is not fired.

    @method touchMove
    @param {DOMEventFacade} event
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @param {Boolean} delegate
    @param {Object} context
    @protected
    @static
    **/
    touchMove: function (event, node, subscription, notifier, delegate, context) {
        detachHelper(subscription, [ HANDLES.MOVE, HANDLES.END, HANDLES.CANCEL ], true, context);
        context.cancelled = true;

    },

    /**
    Called when the monitor(s) fires a touchend event (or the mouse equivalent).
    This method fires the 'tap' event if certain requirements are met.

    @method touchEnd
    @param {DOMEventFacade} event
    @param {Y.Node} node
    @param {Array} subscription
    @param {Boolean} notifier
    @param {Boolean} delegate
    @param {Object} context
    @protected
    @static
    **/
    touchEnd: function (event, node, subscription, notifier, delegate, context) {
        var startXY = context.startXY,
            endXY,
            clientXY;

        //There is a double check in here to support event simulation tests, in which
        //event.touches can be undefined when simulating 'touchstart' on touch devices.
        if (SUPPORTS_TOUCHES && event.changedTouches) {
          endXY = [ event.changedTouches[0].pageX, event.changedTouches[0].pageY ];
          clientXY = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];
        }
        else {
          endXY = [ event.pageX, event.pageY ];
          clientXY = [event.clientX, event.clientY];
        }

        detachHelper(subscription, [ HANDLES.MOVE, HANDLES.END, HANDLES.CANCEL ], true, context);

        // make sure mouse didn't move
        if (Math.abs(endXY[0] - startXY[0]) === 0 && Math.abs(endXY[1] - startXY[1]) === 0) {

            event.type = EVT_TAP;
            event.pageX = endXY[0];
            event.pageY = endXY[1];
            event.clientX = clientXY[0];
            event.clientY = clientXY[1];
            event.currentTarget = context.node;

            notifier.fire(event);
        }
    }
});


}, '3.10.1', {"requires": ["node-base", "event-base", "event-touch", "event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-easing/anim-easing.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-easing', function (Y, NAME) {

/*
TERMS OF USE - EASING EQUATIONS
Open source under the BSD License.
Copyright 2001 Robert Penner All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 * Neither the name of the author nor the names of contributors may be used to
    endorse or promote products derived from this software without specific prior
    written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * The easing module provides methods for customizing
 * how an animation behaves during each run.
 * @class Easing
 * @module anim
 * @submodule anim-easing
 */

var Easing = {

    /**
     * Uniform speed between points.
     * @for Easing
     * @method easeNone
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeNone: function (t, b, c, d) {
        return c*t/d + b;
    },

    /**
     * Begins slowly and accelerates towards end. (quadratic)
     * @method easeIn
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeIn: function (t, b, c, d) {
        return c*(t/=d)*t + b;
    },

    /**
     * Begins quickly and decelerates towards end.  (quadratic)
     * @method easeOut
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeOut: function (t, b, c, d) {
        return -c *(t/=d)*(t-2) + b;
    },

    /**
     * Begins slowly and decelerates towards end. (quadratic)
     * @method easeBoth
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeBoth: function (t, b, c, d) {
        if ((t /= d/2) < 1) {
            return c/2*t*t + b;
        }

        return -c/2 * ((--t)*(t-2) - 1) + b;
    },

    /**
     * Begins slowly and accelerates towards end. (quartic)
     * @method easeInStrong
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeInStrong: function (t, b, c, d) {
        return c*(t/=d)*t*t*t + b;
    },

    /**
     * Begins quickly and decelerates towards end.  (quartic)
     * @method easeOutStrong
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeOutStrong: function (t, b, c, d) {
        return -c * ((t=t/d-1)*t*t*t - 1) + b;
    },

    /**
     * Begins slowly and decelerates towards end. (quartic)
     * @method easeBothStrong
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    easeBothStrong: function (t, b, c, d) {
        if ((t /= d/2) < 1) {
            return c/2*t*t*t*t + b;
        }

        return -c/2 * ((t-=2)*t*t*t - 2) + b;
    },

    /**
     * Snap in elastic effect.
     * @method elasticIn
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} a Amplitude (optional)
     * @param {Number} p Period (optional)
     * @return {Number} The computed value for the current animation frame
     */

    elasticIn: function (t, b, c, d, a, p) {
        var s;
        if (t === 0) {
            return b;
        }
        if ( (t /= d) === 1 ) {
            return b+c;
        }
        if (!p) {
            p = d* 0.3;
        }

        if (!a || a < Math.abs(c)) {
            a = c;
            s = p/4;
        }
        else {
            s = p/(2*Math.PI) * Math.asin (c/a);
        }

        return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    },

    /**
     * Snap out elastic effect.
     * @method elasticOut
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} a Amplitude (optional)
     * @param {Number} p Period (optional)
     * @return {Number} The computed value for the current animation frame
     */
    elasticOut: function (t, b, c, d, a, p) {
        var s;
        if (t === 0) {
            return b;
        }
        if ( (t /= d) === 1 ) {
            return b+c;
        }
        if (!p) {
            p=d * 0.3;
        }

        if (!a || a < Math.abs(c)) {
            a = c;
            s = p / 4;
        }
        else {
            s = p/(2*Math.PI) * Math.asin (c/a);
        }

        return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    },

    /**
     * Snap both elastic effect.
     * @method elasticBoth
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} a Amplitude (optional)
     * @param {Number} p Period (optional)
     * @return {Number} The computed value for the current animation frame
     */
    elasticBoth: function (t, b, c, d, a, p) {
        var s;
        if (t === 0) {
            return b;
        }

        if ( (t /= d/2) === 2 ) {
            return b+c;
        }

        if (!p) {
            p = d*(0.3*1.5);
        }

        if ( !a || a < Math.abs(c) ) {
            a = c;
            s = p/4;
        }
        else {
            s = p/(2*Math.PI) * Math.asin (c/a);
        }

        if (t < 1) {
            return -0.5*(a*Math.pow(2,10*(t-=1)) *
                    Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        }
        return a*Math.pow(2,-10*(t-=1)) *
                Math.sin( (t*d-s)*(2*Math.PI)/p )*0.5 + c + b;
    },


    /**
     * Backtracks slightly, then reverses direction and moves to end.
     * @method backIn
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} s Overshoot (optional)
     * @return {Number} The computed value for the current animation frame
     */
    backIn: function (t, b, c, d, s) {
        if (s === undefined) {
            s = 1.70158;
        }
        if (t === d) {
            t -= 0.001;
        }
        return c*(t/=d)*t*((s+1)*t - s) + b;
    },

    /**
     * Overshoots end, then reverses and comes back to end.
     * @method backOut
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} s Overshoot (optional)
     * @return {Number} The computed value for the current animation frame
     */
    backOut: function (t, b, c, d, s) {
        if (typeof s === 'undefined') {
            s = 1.70158;
        }
        return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    },

    /**
     * Backtracks slightly, then reverses direction, overshoots end,
     * then reverses and comes back to end.
     * @method backBoth
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @param {Number} s Overshoot (optional)
     * @return {Number} The computed value for the current animation frame
     */
    backBoth: function (t, b, c, d, s) {
        if (typeof s === 'undefined') {
            s = 1.70158;
        }

        if ((t /= d/2 ) < 1) {
            return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        }
        return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    },

    /**
     * Bounce off of start.
     * @method bounceIn
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    bounceIn: function (t, b, c, d) {
        return c - Y.Easing.bounceOut(d-t, 0, c, d) + b;
    },

    /**
     * Bounces off end.
     * @method bounceOut
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    bounceOut: function (t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
                return c*(7.5625*t*t) + b;
        } else if (t < (2/2.75)) {
                return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;
        } else if (t < (2.5/2.75)) {
                return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;
        }
        return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;
    },

    /**
     * Bounces off start and end.
     * @method bounceBoth
     * @param {Number} t Time value used to compute current value
     * @param {Number} b Starting value
     * @param {Number} c Delta between start and end values
     * @param {Number} d Total length of animation
     * @return {Number} The computed value for the current animation frame
     */
    bounceBoth: function (t, b, c, d) {
        if (t < d/2) {
            return Y.Easing.bounceIn(t * 2, 0, c, d) * 0.5 + b;
        }
        return Y.Easing.bounceOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    }
};

Y.Easing = Easing;


}, '3.10.1', {"requires": ["anim-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/touch-event-listener.js
// ----------------------------------------------------------------------------------------

/**
 * Squarespace Touch Event Listener
 * @module squarespace-touch-event-listener
 *
 * Adapted from https://github.com/codecomputerlove/PhotoSwipe
 */

YUI.add('squarespace-touch-event-listener', function(Y) {

  Y.Squarespace.TouchEventListener = Class.create({
    el: null,
    captureSettings: null,

    touchStartPoint: null,
    touchEndPoint: null,
    touchStartTime: null,

    touchStartHandler: null,
    touchMoveHandler: null,
    touchEndHandler: null,

    swipeThreshold: null,
    swipeTimeThreshold: null,

    initialize: function(el, captureSettings) {
      this.el = el;
      this.captureSettings = {
        swipe: false,
        move: false,
        preventDefaultTouchEvents: true
      };

      this.captureSettings = Y.merge(this.captureSettings, captureSettings);
      this.swipeThreshold = 50;
      this.swipeTimeThreshold = 250;

      this.touchStartPoint = { x: 0, y: 0 };
      this.touchEndPoint = { x: 0, y: 0 };

      this.addEventHandlers();
    },

    addEventHandlers: function(){

      this.touchStartHandler = Y.bind(this.onTouchStart, this);
      this.touchMoveHandler = Y.bind(this.onTouchMove, this);
      this.touchEndHandler = Y.bind(this.onTouchEnd, this);

      this.el.on('touchstart', this.touchStartHandler)
      if (this.captureSettings.move){
        this.el.on('touchmove', this.touchMoveHandler);
      }
      this.el.on('touchend', this.touchEndHandler);
    },

    removeEventHandlers: function(){
      this.el.detachAll();
    },

    getTouchPoint: function(touches){
      return {
        x: touches[0].pageX,
        y: touches[0].pageY
      };
    },

    fireTouchEvent: function(e){
      var
        action,
        distX = 0,
        distY = 0,
        dist = 0,
        self,
        endTime,
        diffTime;

      distX = this.touchEndPoint.x - this.touchStartPoint.x;
      distY = this.touchEndPoint.y - this.touchStartPoint.y;
      dist = Math.sqrt( (distX * distX) + (distY * distY) );

      if (this.captureSettings.swipe){
        endTime = new Date();
        diffTime = endTime - this.touchStartTime;

        // See if there was a swipe gesture
        if (diffTime <= this.swipeTimeThreshold){

          if (window.Math.abs(distX) >= this.swipeThreshold){

            Y.fire('squarespace:ontouch', {
              type: Y.Squarespace.TouchEventListener.Types.onTouch,
              target: this,
              point: this.touchEndPoint,
              action: (distX < 0) ? Y.Squarespace.TouchEventListener.ActionTypes.swipeLeft : Y.Squarespace.TouchEventListener.ActionTypes.swipeRight,
              targetEl: e.target,
              currentTargetEl: e.currentTarget,
              touchEvent: e
            });
            return;
          }


          if (window.Math.abs(distY) >= this.swipeThreshold){
            Y.fire('squarespace:ontouch', {
              type: Y.Squarespace.TouchEventListener.Types.onTouch,
              target: this,
              point: this.touchEndPoint,
              action: (distY < 0) ? Y.Squarespace.TouchEventListener.ActionTypes.swipeUp  : Y.Squarespace.TouchEventListener.ActionTypes.swipeDown,
              targetEl: e.target,
              currentTargetEl: e.currentTarget,
              touchEvent: e
            });
            return;
          }
        }
      }


      if (dist > 1){
        Y.fire('squarespace:ontouch', {
          type: Y.Squarespace.TouchEventListener.Types.onTouch,
          target: this,
          action: Y.Squarespace.TouchEventListener.ActionTypes.touchMoveEnd,
          point: this.touchEndPoint,
          targetEl: e.target,
          currentTargetEl: e.currentTarget,
          touchEvent: e
        });
        return;
      } else {
        Y.fire('squarespace:ontouch', {
          type: Y.Squarespace.TouchEventListener.Types.onTouch,
          target: this,
          action: Y.Squarespace.TouchEventListener.ActionTypes.tapped,
          point: this.touchEndPoint,
          targetEl: e.target,
          currentTargetEl: e.currentTarget,
          touchEvent: e
        });
        return;
      }

    },

    onTouchStart: function(e){
      if (this.captureSettings.preventDefaultTouchEvents){
        e.preventDefault();
      }

      // No longer need mouse events
      // this.el.detach('mousedown', this.mouseDownHandler);

      var
        touchEvent = e,
        touches = touchEvent.touches;

      this.touchStartTime = new Date();
      this.touchStartPoint = this.getTouchPoint(touches);

      Y.fire('squarespace:ontouch', {
        type: Y.Squarespace.TouchEventListener.Types.onTouch,
        target: this,
        action: Y.Squarespace.TouchEventListener.ActionTypes.touchStart,
        point: this.touchStartPoint,
        targetEl: e.target,
        currentTargetEl: e.currentTarget,
        touchEvent: e
      });
    },

    onTouchMove: function(e){
      if (this.captureSettings.preventDefaultTouchEvents){
        e.preventDefault();
      }

      var
        touchEvent = e,
        touches = touchEvent.touches;

      Y.fire('squarespace:ontouch', {
        type: Y.Squarespace.TouchEventListener.Types.onTouch,
        target: this,
        action: Y.Squarespace.TouchEventListener.ActionTypes.touchMove,
        point: this.getTouchPoint(touches),
        targetEl: e.target,
        currentTargetEl: e.currentTarget,
        touchEvent: e
      });
    },

    onTouchEnd: function(e){
      if (this.isGesture && this.captureSettings.gesture){
        return;
      }

      if (this.captureSettings.preventDefaultTouchEvents){
        e.preventDefault();
      }

      // http://backtothecode.blogspot.com/2009/10/javascript-touch-and-gesture-events.html
      // iOS removed the current touch from e.touches on "touchend"
      // Need to look into e.changedTouches

      var
        touchEvent = e,
        touches = (touchEvent.changedTouches) ? touchEvent.changedTouches : touchEvent.touches;

      this.touchEndPoint = this.getTouchPoint(touches);

      Y.fire('squarespace:ontouch', {
        type: Y.Squarespace.TouchEventListener.Types.onTouch,
        target: this,
        action: Y.Squarespace.TouchEventListener.ActionTypes.touchEnd,
        point: this.touchEndPoint,
        targetEl: e.target,
        currentTargetEl: e.currentTarget,
        touchEvent: e
      });

      this.fireTouchEvent(e);
    }

  });

  Y.Squarespace.TouchEventListener.Types = {
    onTouch: 'onTouch'
  };

  Y.Squarespace.TouchEventListener.ActionTypes = {
    touchStart: 'touchStart',
    touchMove: 'touchMove',
    touchEnd: 'touchEnd',
    touchMoveEnd: 'touchMoveEnd',
    swipeLeft: 'swipeLeft',
    swipeRight: 'swipeRight',
    swipeUp: 'swipeUp',
    swipeDown: 'swipeDown',
    tapped: 'tapped'
  };

});






// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/widget-skin/widget-skin.js
// ----------------------------------------------------------------------------------------

YUI.add('widget-skin', function (Y, NAME) {

/**
 * Provides skin related utlility methods.
 *
 * @module widget
 * @submodule widget-skin
 */
var BOUNDING_BOX = "boundingBox",
    CONTENT_BOX = "contentBox",
    SKIN = "skin",
    _getClassName = Y.ClassNameManager.getClassName;

/**
 * Returns the name of the skin that's currently applied to the widget.
 *
 * Searches up the Widget's ancestor axis for, by default, a class
 * yui3-skin-(name), and returns the (name) portion. Otherwise, returns null.
 *
 * This is only really useful after the widget's DOM structure is in the
 * document, either by render or by progressive enhancement.
 *
 * @method getSkinName
 * @for Widget
 * @param {String} [skinPrefix] The prefix which the implementation uses for the skin
 * ("yui3-skin-" is the default).
 *
 * NOTE: skinPrefix will be used as part of a regular expression:
 *
 *     new RegExp('\\b' + skinPrefix + '(\\S+)')
 *
 * Although an unlikely use case, literal characters which may result in an invalid
 * regular expression should be escaped.
 *
 * @return {String} The name of the skin, or null, if a matching skin class is not found.
 */

Y.Widget.prototype.getSkinName = function (skinPrefix) {

    var root = this.get( CONTENT_BOX ) || this.get( BOUNDING_BOX ),
        match,
        search;

    skinPrefix = skinPrefix || _getClassName(SKIN, "");

    search = new RegExp( '\\b' + skinPrefix + '(\\S+)' );

    if ( root ) {
        root.ancestor( function ( node ) {
            match = node.get( 'className' ).match( search );
            return match;
        } );
    }

    return ( match ) ? match[1] : null;
};


}, '3.10.1', {"requires": ["widget-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-mousewheel/event-mousewheel.js
// ----------------------------------------------------------------------------------------

YUI.add('event-mousewheel', function (Y, NAME) {

/**
 * Adds mousewheel event support
 * @module event
 * @submodule event-mousewheel
 */
var DOM_MOUSE_SCROLL = 'DOMMouseScroll',
    fixArgs = function(args) {
        var a = Y.Array(args, 0, true), target;
        if (Y.UA.gecko) {
            a[0] = DOM_MOUSE_SCROLL;
            target = Y.config.win;
        } else {
            target = Y.config.doc;
        }

        if (a.length < 3) {
            a[2] = target;
        } else {
            a.splice(2, 0, target);
        }

        return a;
    };

/**
 * Mousewheel event.  This listener is automatically attached to the
 * correct target, so one should not be supplied.  Mouse wheel
 * direction and velocity is stored in the 'wheelDelta' field.
 * @event mousewheel
 * @param type {string} 'mousewheel'
 * @param fn {function} the callback to execute
 * @param context optional context object
 * @param args 0..n additional arguments to provide to the listener.
 * @return {EventHandle} the detach handle
 * @for YUI
 */
Y.Env.evt.plugins.mousewheel = {
    on: function() {
        return Y.Event._attach(fixArgs(arguments));
    },

    detach: function() {
        return Y.Event.detach.apply(Y.Event, fixArgs(arguments));
    }
};


}, '3.10.1', {"requires": ["node-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/shim-plugin/shim-plugin.js
// ----------------------------------------------------------------------------------------

YUI.add('shim-plugin', function (Y, NAME) {

    /**
     * Provides shimming support for Node via a Plugin.
     * This fixes SELECT bleedthrough for IE6 & Mac scrollbars
     * @module shim-plugin
     */

    /**
     * Node plugin which can be used to add shim support.
     *
     * @class Plugin.Shim
     * @param {Object} User configuration object
     */
    function Shim(config) {
        this.init(config);
    }

    /**
     * Default class used to mark the shim element
     *
     * @property CLASS_NAME
     * @type String
     * @static
     * @default "yui-node-shim"
     */
    // TODO: use ClassNameManager
    Shim.CLASS_NAME = 'yui-node-shim';

    /**
     * Default markup template used to generate the shim element.
     *
     * @property TEMPLATE
     * @type String
     * @static
     */
    Shim.TEMPLATE = '<iframe class="' + Shim.CLASS_NAME +
            '" frameborder="0" title="Node Stacking Shim"' +
            'src="javascript:false" tabindex="-1" role="presentation"' +
            'style="position:absolute; z-index:-1;"></iframe>';

    Shim.prototype = {
        init: function(config) {
            this._host = config.host;
            this.initEvents();
            this.insert();
            this.sync();
        },

        initEvents: function() {
            this._resizeHandle = this._host.on('resize', this.sync, this);
        },

        getShim: function() {
            return this._shim || (
                this._shim = Y.Node.create(
                    Shim.TEMPLATE,
                    this._host.get('ownerDocument')
                )
            );
        },

        insert: function() {
            var node = this._host;
            this._shim = node.insertBefore( this.getShim(),
                    node.get('firstChild'));
        },

        /**
         * Updates the size of the shim to fill its container
         * @method sync
         */
        sync: function() {
            var shim = this._shim,
                node = this._host;

            if (shim) {
                shim.setAttrs({
                    width: node.getStyle('width'),
                    height: node.getStyle('height')
                });
            }
        },

        /**
         * Removes the shim and destroys the plugin
         * @method destroy
         */
        destroy: function() {
            var shim = this._shim;
            if (shim) {
                shim.remove(true);
            }

            this._resizeHandle.detach();
        }
    };

    Shim.NAME = 'Shim';
    Shim.NS = 'shim';

    Y.namespace('Plugin');
    Y.Plugin.Shim = Shim;


}, '3.10.1', {"requires": ["node-style", "node-pluginhost"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/jsonp/jsonp.js
// ----------------------------------------------------------------------------------------

YUI.add('jsonp', function (Y, NAME) {

var isFunction = Y.Lang.isFunction;

/**
 * <p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience
 * method Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>
 *
 * <p>Both the constructor as well as the convenience function take two
 * parameters: a url string and a callback.</p>
 *
 * <p>The url provided must include the placeholder string
 * &quot;{callback}&quot; which will be replaced by a dynamically
 * generated routing function to pass the data to your callback function.
 * An example url might look like
 * &quot;http://example.com/service?callback={callback}&quot;.</p>
 *
 * <p>The second parameter can be a callback function that accepts the JSON
 * payload as its argument, or a configuration object supporting the keys:</p>
 * <ul>
 *   <li>on - map of callback subscribers
 *      <ul>
 *         <li>success - function handler for successful transmission</li>
 *         <li>failure - function handler for failed transmission</li>
 *         <li>timeout - function handler for transactions that timeout</li>
 *      </ul>
 *  </li>
 *  <li>format  - override function for inserting the proxy name in the url</li>
 *  <li>timeout - the number of milliseconds to wait before giving up</li>
 *  <li>context - becomes <code>this</code> in the callbacks</li>
 *  <li>args    - array of subsequent parameters to pass to the callbacks</li>
 *  <li>allowCache - use the same proxy name for all requests? (boolean)</li>
 * </ul>
 *
 * @module jsonp
 * @class JSONPRequest
 * @constructor
 * @param url {String} the url of the JSONP service
 * @param callback {Object|Function} the default callback configuration or
 *                                   success handler
 */
function JSONPRequest() {
    this._init.apply(this, arguments);
}

JSONPRequest.prototype = {
    /**
     * Set up the success and failure handlers and the regex pattern used
     * to insert the temporary callback name in the url.
     *
     * @method _init
     * @param url {String} the url of the JSONP service
     * @param callback {Object|Function} Optional success callback or config
     *                  object containing success and failure functions and
     *                  the url regex.
     * @protected
     */
    _init : function (url, callback) {
        this.url = url;

        /**
         * Map of the number of requests currently pending responses per
         * generated proxy.  Used to ensure the proxy is not flushed if the
         * request times out and there is a timeout handler and success
         * handler, and used by connections configured to allowCache to make
         * sure the proxy isn't deleted until the last response has returned.
         *
         * @property _requests
         * @private
         * @type {Object}
         */
        this._requests = {};

        /**
         * Map of the number of timeouts received from the destination url
         * by generated proxy.  Used to ensure the proxy is not flushed if the
         * request times out and there is a timeout handler and success
         * handler, and used by connections configured to allowCache to make
         * sure the proxy isn't deleted until the last response has returned.
         *
         * @property _timeouts
         * @private
         * @type {Object}
         */
        this._timeouts = {};

        // Accept a function, an object, or nothing
        callback = (isFunction(callback)) ?
            { on: { success: callback } } :
            callback || {};

        var subs = callback.on || {};

        if (!subs.success) {
            subs.success = this._defaultCallback(url, callback);
        }

        // Apply defaults and store
        this._config = Y.merge({
                context: this,
                args   : [],
                format : this._format,
                allowCache: false
            }, callback, { on: subs });
    },

    /**
     * Override this method to provide logic to default the success callback if
     * it is not provided at construction.  This is overridden by jsonp-url to
     * parse the callback from the url string.
     *
     * @method _defaultCallback
     * @param url {String} the url passed at construction
     * @param config {Object} (optional) the config object passed at
     *                        construction
     * @return {Function}
     */
    _defaultCallback: function () {},

    /**
     * Issues the JSONP request.
     *
     * @method send
     * @param args* {any} any additional arguments to pass to the url formatter
     *              beyond the base url and the proxy function name
     * @chainable
     */
    send : function () {
        var self   = this,
            args   = Y.Array(arguments, 0, true),
            config = self._config,
            proxy  = self._proxy || Y.guid(),
            url;

        // TODO: support allowCache as time value
        if (config.allowCache) {
            self._proxy = proxy;
        }

        if (self._requests[proxy] === undefined) {
            self._requests[proxy] = 0;
        }
        if (self._timeouts[proxy] === undefined) {
            self._timeouts[proxy] = 0;
        }
        self._requests[proxy]++;


        args.unshift(self.url, 'YUI.Env.JSONP.' + proxy);
        url = config.format.apply(self, args);

        if (!config.on.success) {
            return self;
        }

        function wrap(fn, isTimeout) {
            return (isFunction(fn)) ?
                function (data) {
                    var execute = true,
                        counter = '_requests';

                    //if (config.allowCache) {
                        // A lot of wrangling to make sure timeouts result in
                        // fewer success callbacks, but the proxy is properly
                        // cleaned up.
                        if (isTimeout) {
                            ++self._timeouts[proxy];
                            --self._requests[proxy];
                        } else {
                            if (!self._requests[proxy]) {
                                execute = false;
                                counter = '_timeouts';
                            }
                            --self[counter][proxy];
                        }
                    //}

                    if (!self._requests[proxy] && !self._timeouts[proxy]) {
                        delete YUI.Env.JSONP[proxy];
                    }

                    if (execute) {
                        fn.apply(config.context, [data].concat(config.args));
                    }
                } :
                null;
        }

        // Temporary un-sandboxed function alias
        // TODO: queuing
        YUI.Env.JSONP[proxy] = wrap(config.on.success);

        // Y.Get transactions block each other by design, but can easily
        //  be made non-blocking by just calling execute() on the transaction.
        // https://github.com/yui/yui3/pull/393#issuecomment-11961608
        Y.Get.js(url, {
            onFailure : wrap(config.on.failure),
            onTimeout : wrap(config.on.timeout, true),
            timeout   : config.timeout,
            charset   : config.charset,
            attributes: config.attributes,
            async     : config.async
        }).execute();

        return self;
    },

    /**
     * Default url formatter.  Looks for callback= in the url and appends it
     * if not present.  The supplied proxy name will be assigned to the query
     * param.  Override this method by passing a function as the
     * &quot;format&quot; property in the config object to the constructor.
     *
     * @method _format
     * @param url { String } the original url
     * @param proxy {String} the function name that will be used as a proxy to
     *      the configured callback methods.
     * @param args* {any} additional args passed to send()
     * @return {String} fully qualified JSONP url
     * @protected
     */
    _format: function (url, proxy) {
        return url.replace(/\{callback\}/, proxy);
    }
};

Y.JSONPRequest = JSONPRequest;

/**
 *
 * @method jsonp
 * @param url {String} the url of the JSONP service with the {callback}
 *          placeholder where the callback function name typically goes.
 * @param c {Function|Object} Callback function accepting the JSON payload
 *          as its argument, or a configuration object (see above).
 * @param args* {any} additional arguments to pass to send()
 * @return {JSONPRequest}
 * @static
 * @for YUI
 */
Y.jsonp = function (url,c) {
    var req = new Y.JSONPRequest(url,c);
    return req.send.apply(req, Y.Array(arguments, 2, true));
};

if (!YUI.Env.JSONP) {
    YUI.Env.JSONP = {};
}


}, '3.10.1', {"requires": ["get", "oop"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/node-core/node-core.js
// ----------------------------------------------------------------------------------------

YUI.add('node-core', function (Y, NAME) {

/**
 * The Node Utility provides a DOM-like interface for interacting with DOM nodes.
 * @module node
 * @main node
 * @submodule node-core
 */

/**
 * The Node class provides a wrapper for manipulating DOM Nodes.
 * Node properties can be accessed via the set/get methods.
 * Use `Y.one()` to retrieve Node instances.
 *
 * <strong>NOTE:</strong> Node properties are accessed using
 * the <code>set</code> and <code>get</code> methods.
 *
 * @class Node
 * @constructor
 * @param {DOMNode} node the DOM node to be mapped to the Node instance.
 * @uses EventTarget
 */

// "globals"
var DOT = '.',
    NODE_NAME = 'nodeName',
    NODE_TYPE = 'nodeType',
    OWNER_DOCUMENT = 'ownerDocument',
    TAG_NAME = 'tagName',
    UID = '_yuid',
    EMPTY_OBJ = {},

    _slice = Array.prototype.slice,

    Y_DOM = Y.DOM,

    Y_Node = function(node) {
        if (!this.getDOMNode) { // support optional "new"
            return new Y_Node(node);
        }

        if (typeof node == 'string') {
            node = Y_Node._fromString(node);
            if (!node) {
                return null; // NOTE: return
            }
        }

        var uid = (node.nodeType !== 9) ? node.uniqueID : node[UID];

        if (uid && Y_Node._instances[uid] && Y_Node._instances[uid]._node !== node) {
            node[UID] = null; // unset existing uid to prevent collision (via clone or hack)
        }

        uid = uid || Y.stamp(node);
        if (!uid) { // stamp failed; likely IE non-HTMLElement
            uid = Y.guid();
        }

        this[UID] = uid;

        /**
         * The underlying DOM node bound to the Y.Node instance
         * @property _node
         * @type DOMNode
         * @private
         */
        this._node = node;

        this._stateProxy = node; // when augmented with Attribute

        if (this._initPlugins) { // when augmented with Plugin.Host
            this._initPlugins();
        }
    },

    // used with previous/next/ancestor tests
    _wrapFn = function(fn) {
        var ret = null;
        if (fn) {
            ret = (typeof fn == 'string') ?
            function(n) {
                return Y.Selector.test(n, fn);
            } :
            function(n) {
                return fn(Y.one(n));
            };
        }

        return ret;
    };
// end "globals"

Y_Node.ATTRS = {};
Y_Node.DOM_EVENTS = {};

Y_Node._fromString = function(node) {
    if (node) {
        if (node.indexOf('doc') === 0) { // doc OR document
            node = Y.config.doc;
        } else if (node.indexOf('win') === 0) { // win OR window
            node = Y.config.win;
        } else {
            node = Y.Selector.query(node, null, true);
        }
    }

    return node || null;
};

/**
 * The name of the component
 * @static
 * @type String
 * @property NAME
 */
Y_Node.NAME = 'node';

/*
 * The pattern used to identify ARIA attributes
 */
Y_Node.re_aria = /^(?:role$|aria-)/;

Y_Node.SHOW_TRANSITION = 'fadeIn';
Y_Node.HIDE_TRANSITION = 'fadeOut';

/**
 * A list of Node instances that have been created
 * @private
 * @type Object
 * @property _instances
 * @static
 *
 */
Y_Node._instances = {};

/**
 * Retrieves the DOM node bound to a Node instance
 * @method getDOMNode
 * @static
 *
 * @param {Node | HTMLNode} node The Node instance or an HTMLNode
 * @return {HTMLNode} The DOM node bound to the Node instance.  If a DOM node is passed
 * as the node argument, it is simply returned.
 */
Y_Node.getDOMNode = function(node) {
    if (node) {
        return (node.nodeType) ? node : node._node || null;
    }
    return null;
};

/**
 * Checks Node return values and wraps DOM Nodes as Y.Node instances
 * and DOM Collections / Arrays as Y.NodeList instances.
 * Other return values just pass thru.  If undefined is returned (e.g. no return)
 * then the Node instance is returned for chainability.
 * @method scrubVal
 * @static
 *
 * @param {any} node The Node instance or an HTMLNode
 * @return {Node | NodeList | Any} Depends on what is returned from the DOM node.
 */
Y_Node.scrubVal = function(val, node) {
    if (val) { // only truthy values are risky
         if (typeof val == 'object' || typeof val == 'function') { // safari nodeList === function
            if (NODE_TYPE in val || Y_DOM.isWindow(val)) {// node || window
                val = Y.one(val);
            } else if ((val.item && !val._nodes) || // dom collection or Node instance
                    (val[0] && val[0][NODE_TYPE])) { // array of DOM Nodes
                val = Y.all(val);
            }
        }
    } else if (typeof val === 'undefined') {
        val = node; // for chaining
    } else if (val === null) {
        val = null; // IE: DOM null not the same as null
    }

    return val;
};

/**
 * Adds methods to the Y.Node prototype, routing through scrubVal.
 * @method addMethod
 * @static
 *
 * @param {String} name The name of the method to add
 * @param {Function} fn The function that becomes the method
 * @param {Object} context An optional context to call the method with
 * (defaults to the Node instance)
 * @return {any} Depends on what is returned from the DOM node.
 */
Y_Node.addMethod = function(name, fn, context) {
    if (name && fn && typeof fn == 'function') {
        Y_Node.prototype[name] = function() {
            var args = _slice.call(arguments),
                node = this,
                ret;

            if (args[0] && args[0]._node) {
                args[0] = args[0]._node;
            }

            if (args[1] && args[1]._node) {
                args[1] = args[1]._node;
            }
            args.unshift(node._node);

            ret = fn.apply(node, args);

            if (ret) { // scrub truthy
                ret = Y_Node.scrubVal(ret, node);
            }

            (typeof ret != 'undefined') || (ret = node);
            return ret;
        };
    } else {
    }
};

/**
 * Imports utility methods to be added as Y.Node methods.
 * @method importMethod
 * @static
 *
 * @param {Object} host The object that contains the method to import.
 * @param {String} name The name of the method to import
 * @param {String} altName An optional name to use in place of the host name
 * @param {Object} context An optional context to call the method with
 */
Y_Node.importMethod = function(host, name, altName) {
    if (typeof name == 'string') {
        altName = altName || name;
        Y_Node.addMethod(altName, host[name], host);
    } else {
        Y.Array.each(name, function(n) {
            Y_Node.importMethod(host, n);
        });
    }
};

/**
 * Retrieves a NodeList based on the given CSS selector.
 * @method all
 *
 * @param {string} selector The CSS selector to test against.
 * @return {NodeList} A NodeList instance for the matching HTMLCollection/Array.
 * @for YUI
 */

/**
 * Returns a single Node instance bound to the node or the
 * first element matching the given selector. Returns null if no match found.
 * <strong>Note:</strong> For chaining purposes you may want to
 * use <code>Y.all</code>, which returns a NodeList when no match is found.
 * @method one
 * @param {String | HTMLElement} node a node or Selector
 * @return {Node | null} a Node instance or null if no match found.
 * @for YUI
 */

/**
 * Returns a single Node instance bound to the node or the
 * first element matching the given selector. Returns null if no match found.
 * <strong>Note:</strong> For chaining purposes you may want to
 * use <code>Y.all</code>, which returns a NodeList when no match is found.
 * @method one
 * @static
 * @param {String | HTMLElement} node a node or Selector
 * @return {Node | null} a Node instance or null if no match found.
 * @for Node
 */
Y_Node.one = function(node) {
    var instance = null,
        cachedNode,
        uid;

    if (node) {
        if (typeof node == 'string') {
            node = Y_Node._fromString(node);
            if (!node) {
                return null; // NOTE: return
            }
        } else if (node.getDOMNode) {
            return node; // NOTE: return
        }

        if (node.nodeType || Y.DOM.isWindow(node)) { // avoid bad input (numbers, boolean, etc)
            uid = (node.uniqueID && node.nodeType !== 9) ? node.uniqueID : node._yuid;
            instance = Y_Node._instances[uid]; // reuse exising instances
            cachedNode = instance ? instance._node : null;
            if (!instance || (cachedNode && node !== cachedNode)) { // new Node when nodes don't match
                instance = new Y_Node(node);
                if (node.nodeType != 11) { // dont cache document fragment
                    Y_Node._instances[instance[UID]] = instance; // cache node
                }
            }
        }
    }

    return instance;
};

/**
 * The default setter for DOM properties
 * Called with instance context (this === the Node instance)
 * @method DEFAULT_SETTER
 * @static
 * @param {String} name The attribute/property being set
 * @param {any} val The value to be set
 * @return {any} The value
 */
Y_Node.DEFAULT_SETTER = function(name, val) {
    var node = this._stateProxy,
        strPath;

    if (name.indexOf(DOT) > -1) {
        strPath = name;
        name = name.split(DOT);
        // only allow when defined on node
        Y.Object.setValue(node, name, val);
    } else if (typeof node[name] != 'undefined') { // pass thru DOM properties
        node[name] = val;
    }

    return val;
};

/**
 * The default getter for DOM properties
 * Called with instance context (this === the Node instance)
 * @method DEFAULT_GETTER
 * @static
 * @param {String} name The attribute/property to look up
 * @return {any} The current value
 */
Y_Node.DEFAULT_GETTER = function(name) {
    var node = this._stateProxy,
        val;

    if (name.indexOf && name.indexOf(DOT) > -1) {
        val = Y.Object.getValue(node, name.split(DOT));
    } else if (typeof node[name] != 'undefined') { // pass thru from DOM
        val = node[name];
    }

    return val;
};

Y.mix(Y_Node.prototype, {
    DATA_PREFIX: 'data-',

    /**
     * The method called when outputting Node instances as strings
     * @method toString
     * @return {String} A string representation of the Node instance
     */
    toString: function() {
        var str = this[UID] + ': not bound to a node',
            node = this._node,
            attrs, id, className;

        if (node) {
            attrs = node.attributes;
            id = (attrs && attrs.id) ? node.getAttribute('id') : null;
            className = (attrs && attrs.className) ? node.getAttribute('className') : null;
            str = node[NODE_NAME];

            if (id) {
                str += '#' + id;
            }

            if (className) {
                str += '.' + className.replace(' ', '.');
            }

            // TODO: add yuid?
            str += ' ' + this[UID];
        }
        return str;
    },

    /**
     * Returns an attribute value on the Node instance.
     * Unless pre-configured (via `Node.ATTRS`), get hands
     * off to the underlying DOM node.  Only valid
     * attributes/properties for the node will be queried.
     * @method get
     * @param {String} attr The attribute
     * @return {any} The current value of the attribute
     */
    get: function(attr) {
        var val;

        if (this._getAttr) { // use Attribute imple
            val = this._getAttr(attr);
        } else {
            val = this._get(attr);
        }

        if (val) {
            val = Y_Node.scrubVal(val, this);
        } else if (val === null) {
            val = null; // IE: DOM null is not true null (even though they ===)
        }
        return val;
    },

    /**
     * Helper method for get.
     * @method _get
     * @private
     * @param {String} attr The attribute
     * @return {any} The current value of the attribute
     */
    _get: function(attr) {
        var attrConfig = Y_Node.ATTRS[attr],
            val;

        if (attrConfig && attrConfig.getter) {
            val = attrConfig.getter.call(this);
        } else if (Y_Node.re_aria.test(attr)) {
            val = this._node.getAttribute(attr, 2);
        } else {
            val = Y_Node.DEFAULT_GETTER.apply(this, arguments);
        }

        return val;
    },

    /**
     * Sets an attribute on the Node instance.
     * Unless pre-configured (via Node.ATTRS), set hands
     * off to the underlying DOM node.  Only valid
     * attributes/properties for the node will be set.
     * To set custom attributes use setAttribute.
     * @method set
     * @param {String} attr The attribute to be set.
     * @param {any} val The value to set the attribute to.
     * @chainable
     */
    set: function(attr, val) {
        var attrConfig = Y_Node.ATTRS[attr];

        if (this._setAttr) { // use Attribute imple
            this._setAttr.apply(this, arguments);
        } else { // use setters inline
            if (attrConfig && attrConfig.setter) {
                attrConfig.setter.call(this, val, attr);
            } else if (Y_Node.re_aria.test(attr)) { // special case Aria
                this._node.setAttribute(attr, val);
            } else {
                Y_Node.DEFAULT_SETTER.apply(this, arguments);
            }
        }

        return this;
    },

    /**
     * Sets multiple attributes.
     * @method setAttrs
     * @param {Object} attrMap an object of name/value pairs to set
     * @chainable
     */
    setAttrs: function(attrMap) {
        if (this._setAttrs) { // use Attribute imple
            this._setAttrs(attrMap);
        } else { // use setters inline
            Y.Object.each(attrMap, function(v, n) {
                this.set(n, v);
            }, this);
        }

        return this;
    },

    /**
     * Returns an object containing the values for the requested attributes.
     * @method getAttrs
     * @param {Array} attrs an array of attributes to get values
     * @return {Object} An object with attribute name/value pairs.
     */
    getAttrs: function(attrs) {
        var ret = {};
        if (this._getAttrs) { // use Attribute imple
            this._getAttrs(attrs);
        } else { // use setters inline
            Y.Array.each(attrs, function(v, n) {
                ret[v] = this.get(v);
            }, this);
        }

        return ret;
    },

    /**
     * Compares nodes to determine if they match.
     * Node instances can be compared to each other and/or HTMLElements.
     * @method compareTo
     * @param {HTMLElement | Node} refNode The reference node to compare to the node.
     * @return {Boolean} True if the nodes match, false if they do not.
     */
    compareTo: function(refNode) {
        var node = this._node;

        if (refNode && refNode._node) {
            refNode = refNode._node;
        }
        return node === refNode;
    },

    /**
     * Determines whether the node is appended to the document.
     * @method inDoc
     * @param {Node|HTMLElement} doc optional An optional document to check against.
     * Defaults to current document.
     * @return {Boolean} Whether or not this node is appended to the document.
     */
    inDoc: function(doc) {
        var node = this._node;
        doc = (doc) ? doc._node || doc : node[OWNER_DOCUMENT];
        if (doc.documentElement) {
            return Y_DOM.contains(doc.documentElement, node);
        }
    },

    getById: function(id) {
        var node = this._node,
            ret = Y_DOM.byId(id, node[OWNER_DOCUMENT]);
        if (ret && Y_DOM.contains(node, ret)) {
            ret = Y.one(ret);
        } else {
            ret = null;
        }
        return ret;
    },

   /**
     * Returns the nearest ancestor that passes the test applied by supplied boolean method.
     * @method ancestor
     * @param {String | Function} fn A selector string or boolean method for testing elements.
     * If a function is used, it receives the current node being tested as the only argument.
     * If fn is not passed as an argument, the parent node will be returned.
     * @param {Boolean} testSelf optional Whether or not to include the element in the scan
     * @param {String | Function} stopFn optional A selector string or boolean
     * method to indicate when the search should stop. The search bails when the function
     * returns true or the selector matches.
     * If a function is used, it receives the current node being tested as the only argument.
     * @return {Node} The matching Node instance or null if not found
     */
    ancestor: function(fn, testSelf, stopFn) {
        // testSelf is optional, check for stopFn as 2nd arg
        if (arguments.length === 2 &&
                (typeof testSelf == 'string' || typeof testSelf == 'function')) {
            stopFn = testSelf;
        }

        return Y.one(Y_DOM.ancestor(this._node, _wrapFn(fn), testSelf, _wrapFn(stopFn)));
    },

   /**
     * Returns the ancestors that pass the test applied by supplied boolean method.
     * @method ancestors
     * @param {String | Function} fn A selector string or boolean method for testing elements.
     * @param {Boolean} testSelf optional Whether or not to include the element in the scan
     * If a function is used, it receives the current node being tested as the only argument.
     * @return {NodeList} A NodeList instance containing the matching elements
     */
    ancestors: function(fn, testSelf, stopFn) {
        if (arguments.length === 2 &&
                (typeof testSelf == 'string' || typeof testSelf == 'function')) {
            stopFn = testSelf;
        }
        return Y.all(Y_DOM.ancestors(this._node, _wrapFn(fn), testSelf, _wrapFn(stopFn)));
    },

    /**
     * Returns the previous matching sibling.
     * Returns the nearest element node sibling if no method provided.
     * @method previous
     * @param {String | Function} fn A selector or boolean method for testing elements.
     * If a function is used, it receives the current node being tested as the only argument.
     * @return {Node} Node instance or null if not found
     */
    previous: function(fn, all) {
        return Y.one(Y_DOM.elementByAxis(this._node, 'previousSibling', _wrapFn(fn), all));
    },

    /**
     * Returns the next matching sibling.
     * Returns the nearest element node sibling if no method provided.
     * @method next
     * @param {String | Function} fn A selector or boolean method for testing elements.
     * If a function is used, it receives the current node being tested as the only argument.
     * @return {Node} Node instance or null if not found
     */
    next: function(fn, all) {
        return Y.one(Y_DOM.elementByAxis(this._node, 'nextSibling', _wrapFn(fn), all));
    },

    /**
     * Returns all matching siblings.
     * Returns all siblings if no method provided.
     * @method siblings
     * @param {String | Function} fn A selector or boolean method for testing elements.
     * If a function is used, it receives the current node being tested as the only argument.
     * @return {NodeList} NodeList instance bound to found siblings
     */
    siblings: function(fn) {
        return Y.all(Y_DOM.siblings(this._node, _wrapFn(fn)));
    },

    /**
     * Retrieves a single Node instance, the first element matching the given
     * CSS selector.
     * Returns null if no match found.
     * @method one
     *
     * @param {string} selector The CSS selector to test against.
     * @return {Node | null} A Node instance for the matching HTMLElement or null
     * if no match found.
     */
    one: function(selector) {
        return Y.one(Y.Selector.query(selector, this._node, true));
    },

    /**
     * Retrieves a NodeList based on the given CSS selector.
     * @method all
     *
     * @param {string} selector The CSS selector to test against.
     * @return {NodeList} A NodeList instance for the matching HTMLCollection/Array.
     */
    all: function(selector) {
        var nodelist;

        if (this._node) {
            nodelist = Y.all(Y.Selector.query(selector, this._node));
            nodelist._query = selector;
            nodelist._queryRoot = this._node;
        }

        return nodelist || Y.all([]);
    },

    // TODO: allow fn test
    /**
     * Test if the supplied node matches the supplied selector.
     * @method test
     *
     * @param {string} selector The CSS selector to test against.
     * @return {boolean} Whether or not the node matches the selector.
     */
    test: function(selector) {
        return Y.Selector.test(this._node, selector);
    },

    /**
     * Removes the node from its parent.
     * Shortcut for myNode.get('parentNode').removeChild(myNode);
     * @method remove
     * @param {Boolean} destroy whether or not to call destroy() on the node
     * after removal.
     * @chainable
     *
     */
    remove: function(destroy) {
        var node = this._node;

        if (node && node.parentNode) {
            node.parentNode.removeChild(node);
        }

        if (destroy) {
            this.destroy();
        }

        return this;
    },

    /**
     * Replace the node with the other node. This is a DOM update only
     * and does not change the node bound to the Node instance.
     * Shortcut for myNode.get('parentNode').replaceChild(newNode, myNode);
     * @method replace
     * @param {Node | HTMLNode} newNode Node to be inserted
     * @chainable
     *
     */
    replace: function(newNode) {
        var node = this._node;
        if (typeof newNode == 'string') {
            newNode = Y_Node.create(newNode);
        }
        node.parentNode.replaceChild(Y_Node.getDOMNode(newNode), node);
        return this;
    },

    /**
     * @method replaceChild
     * @for Node
     * @param {String | HTMLElement | Node} node Node to be inserted
     * @param {HTMLElement | Node} refNode Node to be replaced
     * @return {Node} The replaced node
     */
    replaceChild: function(node, refNode) {
        if (typeof node == 'string') {
            node = Y_DOM.create(node);
        }

        return Y.one(this._node.replaceChild(Y_Node.getDOMNode(node), Y_Node.getDOMNode(refNode)));
    },

    /**
     * Nulls internal node references, removes any plugins and event listeners.
     * Note that destroy() will not remove the node from its parent or from the DOM. For that
     * functionality, call remove(true).
     * @method destroy
     * @param {Boolean} recursivePurge (optional) Whether or not to remove listeners from the
     * node's subtree (default is false)
     *
     */
    destroy: function(recursive) {
        var UID = Y.config.doc.uniqueID ? 'uniqueID' : '_yuid',
            instance;

        this.purge(); // TODO: only remove events add via this Node

        if (this.unplug) { // may not be a PluginHost
            this.unplug();
        }

        this.clearData();

        if (recursive) {
            Y.NodeList.each(this.all('*'), function(node) {
                instance = Y_Node._instances[node[UID]];
                if (instance) {
                   instance.destroy();
                } else { // purge in case added by other means
                    Y.Event.purgeElement(node);
                }
            });
        }

        this._node = null;
        this._stateProxy = null;

        delete Y_Node._instances[this._yuid];
    },

    /**
     * Invokes a method on the Node instance
     * @method invoke
     * @param {String} method The name of the method to invoke
     * @param {Any}  a, b, c, etc. Arguments to invoke the method with.
     * @return Whatever the underly method returns.
     * DOM Nodes and Collections return values
     * are converted to Node/NodeList instances.
     *
     */
    invoke: function(method, a, b, c, d, e) {
        var node = this._node,
            ret;

        if (a && a._node) {
            a = a._node;
        }

        if (b && b._node) {
            b = b._node;
        }

        ret = node[method](a, b, c, d, e);
        return Y_Node.scrubVal(ret, this);
    },

    /**
    * @method swap
    * @description Swap DOM locations with the given node.
    * This does not change which DOM node each Node instance refers to.
    * @param {Node} otherNode The node to swap with
     * @chainable
    */
    swap: Y.config.doc.documentElement.swapNode ?
        function(otherNode) {
            this._node.swapNode(Y_Node.getDOMNode(otherNode));
        } :
        function(otherNode) {
            otherNode = Y_Node.getDOMNode(otherNode);
            var node = this._node,
                parent = otherNode.parentNode,
                nextSibling = otherNode.nextSibling;

            if (nextSibling === node) {
                parent.insertBefore(node, otherNode);
            } else if (otherNode === node.nextSibling) {
                parent.insertBefore(otherNode, node);
            } else {
                node.parentNode.replaceChild(otherNode, node);
                Y_DOM.addHTML(parent, node, nextSibling);
            }
            return this;
        },


    hasMethod: function(method) {
        var node = this._node;
        return !!(node && method in node &&
                typeof node[method] != 'unknown' &&
            (typeof node[method] == 'function' ||
                String(node[method]).indexOf('function') === 1)); // IE reports as object, prepends space
    },

    isFragment: function() {
        return (this.get('nodeType') === 11);
    },

    /**
     * Removes and destroys all of the nodes within the node.
     * @method empty
     * @chainable
     */
    empty: function() {
        this.get('childNodes').remove().destroy(true);
        return this;
    },

    /**
     * Returns the DOM node bound to the Node instance
     * @method getDOMNode
     * @return {DOMNode}
     */
    getDOMNode: function() {
        return this._node;
    }
}, true);

Y.Node = Y_Node;
Y.one = Y_Node.one;
/**
 * The NodeList module provides support for managing collections of Nodes.
 * @module node
 * @submodule node-core
 */

/**
 * The NodeList class provides a wrapper for manipulating DOM NodeLists.
 * NodeList properties can be accessed via the set/get methods.
 * Use Y.all() to retrieve NodeList instances.
 *
 * @class NodeList
 * @constructor
 * @param nodes {String|element|Node|Array} A selector, DOM element, Node, list of DOM elements, or list of Nodes with which to populate this NodeList.
 */

var NodeList = function(nodes) {
    var tmp = [];

    if (nodes) {
        if (typeof nodes === 'string') { // selector query
            this._query = nodes;
            nodes = Y.Selector.query(nodes);
        } else if (nodes.nodeType || Y_DOM.isWindow(nodes)) { // domNode || window
            nodes = [nodes];
        } else if (nodes._node) { // Y.Node
            nodes = [nodes._node];
        } else if (nodes[0] && nodes[0]._node) { // allow array of Y.Nodes
            Y.Array.each(nodes, function(node) {
                if (node._node) {
                    tmp.push(node._node);
                }
            });
            nodes = tmp;
        } else { // array of domNodes or domNodeList (no mixed array of Y.Node/domNodes)
            nodes = Y.Array(nodes, 0, true);
        }
    }

    /**
     * The underlying array of DOM nodes bound to the Y.NodeList instance
     * @property _nodes
     * @private
     */
    this._nodes = nodes || [];
};

NodeList.NAME = 'NodeList';

/**
 * Retrieves the DOM nodes bound to a NodeList instance
 * @method getDOMNodes
 * @static
 *
 * @param {NodeList} nodelist The NodeList instance
 * @return {Array} The array of DOM nodes bound to the NodeList
 */
NodeList.getDOMNodes = function(nodelist) {
    return (nodelist && nodelist._nodes) ? nodelist._nodes : nodelist;
};

NodeList.each = function(instance, fn, context) {
    var nodes = instance._nodes;
    if (nodes && nodes.length) {
        Y.Array.each(nodes, fn, context || instance);
    } else {
    }
};

NodeList.addMethod = function(name, fn, context) {
    if (name && fn) {
        NodeList.prototype[name] = function() {
            var ret = [],
                args = arguments;

            Y.Array.each(this._nodes, function(node) {
                var UID = (node.uniqueID && node.nodeType !== 9 ) ? 'uniqueID' : '_yuid',
                    instance = Y.Node._instances[node[UID]],
                    ctx,
                    result;

                if (!instance) {
                    instance = NodeList._getTempNode(node);
                }
                ctx = context || instance;
                result = fn.apply(ctx, args);
                if (result !== undefined && result !== instance) {
                    ret[ret.length] = result;
                }
            });

            // TODO: remove tmp pointer
            return ret.length ? ret : this;
        };
    } else {
    }
};

NodeList.importMethod = function(host, name, altName) {
    if (typeof name === 'string') {
        altName = altName || name;
        NodeList.addMethod(name, host[name]);
    } else {
        Y.Array.each(name, function(n) {
            NodeList.importMethod(host, n);
        });
    }
};

NodeList._getTempNode = function(node) {
    var tmp = NodeList._tempNode;
    if (!tmp) {
        tmp = Y.Node.create('<div></div>');
        NodeList._tempNode = tmp;
    }

    tmp._node = node;
    tmp._stateProxy = node;
    return tmp;
};

Y.mix(NodeList.prototype, {
    _invoke: function(method, args, getter) {
        var ret = (getter) ? [] : this;

        this.each(function(node) {
            var val = node[method].apply(node, args);
            if (getter) {
                ret.push(val);
            }
        });

        return ret;
    },

    /**
     * Retrieves the Node instance at the given index.
     * @method item
     *
     * @param {Number} index The index of the target Node.
     * @return {Node} The Node instance at the given index.
     */
    item: function(index) {
        return Y.one((this._nodes || [])[index]);
    },

    /**
     * Applies the given function to each Node in the NodeList.
     * @method each
     * @param {Function} fn The function to apply. It receives 3 arguments:
     * the current node instance, the node's index, and the NodeList instance
     * @param {Object} context optional An optional context to apply the function with
     * Default context is the current Node instance
     * @chainable
     */
    each: function(fn, context) {
        var instance = this;
        Y.Array.each(this._nodes, function(node, index) {
            node = Y.one(node);
            return fn.call(context || node, node, index, instance);
        });
        return instance;
    },

    batch: function(fn, context) {
        var nodelist = this;

        Y.Array.each(this._nodes, function(node, index) {
            var instance = Y.Node._instances[node[UID]];
            if (!instance) {
                instance = NodeList._getTempNode(node);
            }

            return fn.call(context || instance, instance, index, nodelist);
        });
        return nodelist;
    },

    /**
     * Executes the function once for each node until a true value is returned.
     * @method some
     * @param {Function} fn The function to apply. It receives 3 arguments:
     * the current node instance, the node's index, and the NodeList instance
     * @param {Object} context optional An optional context to execute the function from.
     * Default context is the current Node instance
     * @return {Boolean} Whether or not the function returned true for any node.
     */
    some: function(fn, context) {
        var instance = this;
        return Y.Array.some(this._nodes, function(node, index) {
            node = Y.one(node);
            context = context || node;
            return fn.call(context, node, index, instance);
        });
    },

    /**
     * Creates a documenFragment from the nodes bound to the NodeList instance
     * @method toFrag
     * @return {Node} a Node instance bound to the documentFragment
     */
    toFrag: function() {
        return Y.one(Y.DOM._nl2frag(this._nodes));
    },

    /**
     * Returns the index of the node in the NodeList instance
     * or -1 if the node isn't found.
     * @method indexOf
     * @param {Node | DOMNode} node the node to search for
     * @return {Int} the index of the node value or -1 if not found
     */
    indexOf: function(node) {
        return Y.Array.indexOf(this._nodes, Y.Node.getDOMNode(node));
    },

    /**
     * Filters the NodeList instance down to only nodes matching the given selector.
     * @method filter
     * @param {String} selector The selector to filter against
     * @return {NodeList} NodeList containing the updated collection
     * @see Selector
     */
    filter: function(selector) {
        return Y.all(Y.Selector.filter(this._nodes, selector));
    },


    /**
     * Creates a new NodeList containing all nodes at every n indices, where
     * remainder n % index equals r.
     * (zero-based index).
     * @method modulus
     * @param {Int} n The offset to use (return every nth node)
     * @param {Int} r An optional remainder to use with the modulus operation (defaults to zero)
     * @return {NodeList} NodeList containing the updated collection
     */
    modulus: function(n, r) {
        r = r || 0;
        var nodes = [];
        NodeList.each(this, function(node, i) {
            if (i % n === r) {
                nodes.push(node);
            }
        });

        return Y.all(nodes);
    },

    /**
     * Creates a new NodeList containing all nodes at odd indices
     * (zero-based index).
     * @method odd
     * @return {NodeList} NodeList containing the updated collection
     */
    odd: function() {
        return this.modulus(2, 1);
    },

    /**
     * Creates a new NodeList containing all nodes at even indices
     * (zero-based index), including zero.
     * @method even
     * @return {NodeList} NodeList containing the updated collection
     */
    even: function() {
        return this.modulus(2);
    },

    destructor: function() {
    },

    /**
     * Reruns the initial query, when created using a selector query
     * @method refresh
     * @chainable
     */
    refresh: function() {
        var doc,
            nodes = this._nodes,
            query = this._query,
            root = this._queryRoot;

        if (query) {
            if (!root) {
                if (nodes && nodes[0] && nodes[0].ownerDocument) {
                    root = nodes[0].ownerDocument;
                }
            }

            this._nodes = Y.Selector.query(query, root);
        }

        return this;
    },

    /**
     * Returns the current number of items in the NodeList.
     * @method size
     * @return {Int} The number of items in the NodeList.
     */
    size: function() {
        return this._nodes.length;
    },

    /**
     * Determines if the instance is bound to any nodes
     * @method isEmpty
     * @return {Boolean} Whether or not the NodeList is bound to any nodes
     */
    isEmpty: function() {
        return this._nodes.length < 1;
    },

    toString: function() {
        var str = '',
            errorMsg = this[UID] + ': not bound to any nodes',
            nodes = this._nodes,
            node;

        if (nodes && nodes[0]) {
            node = nodes[0];
            str += node[NODE_NAME];
            if (node.id) {
                str += '#' + node.id;
            }

            if (node.className) {
                str += '.' + node.className.replace(' ', '.');
            }

            if (nodes.length > 1) {
                str += '...[' + nodes.length + ' items]';
            }
        }
        return str || errorMsg;
    },

    /**
     * Returns the DOM node bound to the Node instance
     * @method getDOMNodes
     * @return {Array}
     */
    getDOMNodes: function() {
        return this._nodes;
    }
}, true);

NodeList.importMethod(Y.Node.prototype, [
     /**
      * Called on each Node instance. Nulls internal node references,
      * removes any plugins and event listeners
      * @method destroy
      * @param {Boolean} recursivePurge (optional) Whether or not to
      * remove listeners from the node's subtree (default is false)
      * @see Node.destroy
      */
    'destroy',

     /**
      * Called on each Node instance. Removes and destroys all of the nodes
      * within the node
      * @method empty
      * @chainable
      * @see Node.empty
      */
    'empty',

     /**
      * Called on each Node instance. Removes the node from its parent.
      * Shortcut for myNode.get('parentNode').removeChild(myNode);
      * @method remove
      * @param {Boolean} destroy whether or not to call destroy() on the node
      * after removal.
      * @chainable
      * @see Node.remove
      */
    'remove',

     /**
      * Called on each Node instance. Sets an attribute on the Node instance.
      * Unless pre-configured (via Node.ATTRS), set hands
      * off to the underlying DOM node.  Only valid
      * attributes/properties for the node will be set.
      * To set custom attributes use setAttribute.
      * @method set
      * @param {String} attr The attribute to be set.
      * @param {any} val The value to set the attribute to.
      * @chainable
      * @see Node.set
      */
    'set'
]);

// one-off implementation to convert array of Nodes to NodeList
// e.g. Y.all('input').get('parentNode');

/** Called on each Node instance
  * @method get
  * @see Node
  */
NodeList.prototype.get = function(attr) {
    var ret = [],
        nodes = this._nodes,
        isNodeList = false,
        getTemp = NodeList._getTempNode,
        instance,
        val;

    if (nodes[0]) {
        instance = Y.Node._instances[nodes[0]._yuid] || getTemp(nodes[0]);
        val = instance._get(attr);
        if (val && val.nodeType) {
            isNodeList = true;
        }
    }

    Y.Array.each(nodes, function(node) {
        instance = Y.Node._instances[node._yuid];

        if (!instance) {
            instance = getTemp(node);
        }

        val = instance._get(attr);
        if (!isNodeList) { // convert array of Nodes to NodeList
            val = Y.Node.scrubVal(val, instance);
        }

        ret.push(val);
    });

    return (isNodeList) ? Y.all(ret) : ret;
};

Y.NodeList = NodeList;

Y.all = function(nodes) {
    return new NodeList(nodes);
};

Y.Node.all = Y.all;
/**
 * @module node
 * @submodule node-core
 */

var Y_NodeList = Y.NodeList,
    ArrayProto = Array.prototype,
    ArrayMethods = {
        /** Returns a new NodeList combining the given NodeList(s)
          * @for NodeList
          * @method concat
          * @param {NodeList | Array} valueN Arrays/NodeLists and/or values to
          * concatenate to the resulting NodeList
          * @return {NodeList} A new NodeList comprised of this NodeList joined with the input.
          */
        'concat': 1,
        /** Removes the last from the NodeList and returns it.
          * @for NodeList
          * @method pop
          * @return {Node | null} The last item in the NodeList, or null if the list is empty.
          */
        'pop': 0,
        /** Adds the given Node(s) to the end of the NodeList.
          * @for NodeList
          * @method push
          * @param {Node | DOMNode} nodes One or more nodes to add to the end of the NodeList.
          */
        'push': 0,
        /** Removes the first item from the NodeList and returns it.
          * @for NodeList
          * @method shift
          * @return {Node | null} The first item in the NodeList, or null if the NodeList is empty.
          */
        'shift': 0,
        /** Returns a new NodeList comprising the Nodes in the given range.
          * @for NodeList
          * @method slice
          * @param {Number} begin Zero-based index at which to begin extraction.
          As a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence.
          * @param {Number} end Zero-based index at which to end extraction. slice extracts up to but not including end.
          slice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).
          As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.
          If end is omitted, slice extracts to the end of the sequence.
          * @return {NodeList} A new NodeList comprised of this NodeList joined with the input.
          */
        'slice': 1,
        /** Changes the content of the NodeList, adding new elements while removing old elements.
          * @for NodeList
          * @method splice
          * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
          * @param {Number} howMany An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.
          * {Node | DOMNode| element1, ..., elementN
          The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.
          * @return {NodeList} The element(s) removed.
          */
        'splice': 1,
        /** Adds the given Node(s) to the beginning of the NodeList.
          * @for NodeList
          * @method unshift
          * @param {Node | DOMNode} nodes One or more nodes to add to the NodeList.
          */
        'unshift': 0
    };


Y.Object.each(ArrayMethods, function(returnNodeList, name) {
    Y_NodeList.prototype[name] = function() {
        var args = [],
            i = 0,
            arg,
            ret;

        while (typeof (arg = arguments[i++]) != 'undefined') { // use DOM nodes/nodeLists
            args.push(arg._node || arg._nodes || arg);
        }

        ret = ArrayProto[name].apply(this._nodes, args);

        if (returnNodeList) {
            ret = Y.all(ret);
        } else {
            ret = Y.Node.scrubVal(ret);
        }

        return ret;
    };
});
/**
 * @module node
 * @submodule node-core
 */

Y.Array.each([
    /**
     * Passes through to DOM method.
     * @for Node
     * @method removeChild
     * @param {HTMLElement | Node} node Node to be removed
     * @return {Node} The removed node
     */
    'removeChild',

    /**
     * Passes through to DOM method.
     * @method hasChildNodes
     * @return {Boolean} Whether or not the node has any childNodes
     */
    'hasChildNodes',

    /**
     * Passes through to DOM method.
     * @method cloneNode
     * @param {Boolean} deep Whether or not to perform a deep clone, which includes
     * subtree and attributes
     * @return {Node} The clone
     */
    'cloneNode',

    /**
     * Passes through to DOM method.
     * @method hasAttribute
     * @param {String} attribute The attribute to test for
     * @return {Boolean} Whether or not the attribute is present
     */
    'hasAttribute',

    /**
     * Passes through to DOM method.
     * @method scrollIntoView
     * @chainable
     */
    'scrollIntoView',

    /**
     * Passes through to DOM method.
     * @method getElementsByTagName
     * @param {String} tagName The tagName to collect
     * @return {NodeList} A NodeList representing the HTMLCollection
     */
    'getElementsByTagName',

    /**
     * Passes through to DOM method.
     * @method focus
     * @chainable
     */
    'focus',

    /**
     * Passes through to DOM method.
     * @method blur
     * @chainable
     */
    'blur',

    /**
     * Passes through to DOM method.
     * Only valid on FORM elements
     * @method submit
     * @chainable
     */
    'submit',

    /**
     * Passes through to DOM method.
     * Only valid on FORM elements
     * @method reset
     * @chainable
     */
    'reset',

    /**
     * Passes through to DOM method.
     * @method select
     * @chainable
     */
     'select',

    /**
     * Passes through to DOM method.
     * Only valid on TABLE elements
     * @method createCaption
     * @chainable
     */
    'createCaption'

], function(method) {
    Y.Node.prototype[method] = function(arg1, arg2, arg3) {
        var ret = this.invoke(method, arg1, arg2, arg3);
        return ret;
    };
});

/**
 * Passes through to DOM method.
 * @method removeAttribute
 * @param {String} attribute The attribute to be removed
 * @chainable
 */
 // one-off implementation due to IE returning boolean, breaking chaining
Y.Node.prototype.removeAttribute = function(attr) {
    var node = this._node;
    if (node) {
        node.removeAttribute(attr, 0); // comma zero for IE < 8 to force case-insensitive
    }

    return this;
};

Y.Node.importMethod(Y.DOM, [
    /**
     * Determines whether the node is an ancestor of another HTML element in the DOM hierarchy.
     * @method contains
     * @param {Node | HTMLElement} needle The possible node or descendent
     * @return {Boolean} Whether or not this node is the needle its ancestor
     */
    'contains',
    /**
     * Allows setting attributes on DOM nodes, normalizing in some cases.
     * This passes through to the DOM node, allowing for custom attributes.
     * @method setAttribute
     * @for Node
     * @chainable
     * @param {string} name The attribute name
     * @param {string} value The value to set
     */
    'setAttribute',
    /**
     * Allows getting attributes on DOM nodes, normalizing in some cases.
     * This passes through to the DOM node, allowing for custom attributes.
     * @method getAttribute
     * @for Node
     * @param {string} name The attribute name
     * @return {string} The attribute value
     */
    'getAttribute',

    /**
     * Wraps the given HTML around the node.
     * @method wrap
     * @param {String} html The markup to wrap around the node.
     * @chainable
     * @for Node
     */
    'wrap',

    /**
     * Removes the node's parent node.
     * @method unwrap
     * @chainable
     */
    'unwrap',

    /**
     * Applies a unique ID to the node if none exists
     * @method generateID
     * @return {String} The existing or generated ID
     */
    'generateID'
]);

Y.NodeList.importMethod(Y.Node.prototype, [
/**
 * Allows getting attributes on DOM nodes, normalizing in some cases.
 * This passes through to the DOM node, allowing for custom attributes.
 * @method getAttribute
 * @see Node
 * @for NodeList
 * @param {string} name The attribute name
 * @return {string} The attribute value
 */

    'getAttribute',
/**
 * Allows setting attributes on DOM nodes, normalizing in some cases.
 * This passes through to the DOM node, allowing for custom attributes.
 * @method setAttribute
 * @see Node
 * @for NodeList
 * @chainable
 * @param {string} name The attribute name
 * @param {string} value The value to set
 */
    'setAttribute',

/**
 * Allows for removing attributes on DOM nodes.
 * This passes through to the DOM node, allowing for custom attributes.
 * @method removeAttribute
 * @see Node
 * @for NodeList
 * @param {string} name The attribute to remove
 */
    'removeAttribute',
/**
 * Removes the parent node from node in the list.
 * @method unwrap
 * @chainable
 */
    'unwrap',
/**
 * Wraps the given HTML around each node.
 * @method wrap
 * @param {String} html The markup to wrap around the node.
 * @chainable
 */
    'wrap',

/**
 * Applies a unique ID to each node if none exists
 * @method generateID
 * @return {String} The existing or generated ID
 */
    'generateID'
]);


}, '3.10.1', {"requires": ["dom-core", "selector"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/arraylist/arraylist.js
// ----------------------------------------------------------------------------------------

YUI.add('arraylist', function (Y, NAME) {

/**
 * Collection utilities beyond what is provided in the YUI core
 * @module collection
 * @submodule arraylist
 */

var YArray      = Y.Array,
    YArray_each = YArray.each,
    ArrayListProto;

/**
 * Generic ArrayList class for managing lists of items and iterating operations
 * over them.  The targeted use for this class is for augmentation onto a
 * class that is responsible for managing multiple instances of another class
 * (e.g. NodeList for Nodes).  The recommended use is to augment your class with
 * ArrayList, then use ArrayList.addMethod to mirror the API of the constituent
 * items on the list's API.
 *
 * The default implementation creates immutable lists, but mutability can be
 * provided via the arraylist-add submodule or by implementing mutation methods
 * directly on the augmented class's prototype.
 *
 * @class ArrayList
 * @constructor
 * @param items { Array } array of items this list will be responsible for
 */
function ArrayList( items ) {
    if ( items !== undefined ) {
        this._items = Y.Lang.isArray( items ) ? items : YArray( items );
    } else {
        // ||= to support lazy initialization from augment
        this._items = this._items || [];
    }
}

ArrayListProto = {
    /**
     * Get an item by index from the list.  Override this method if managing a
     * list of objects that have a different public representation (e.g. Node
     * instances vs DOM nodes).  The iteration methods that accept a user
     * function will use this method for access list items for operation.
     *
     * @method item
     * @param i { Integer } index to fetch
     * @return { mixed } the item at the requested index
     */
    item: function ( i ) {
        return this._items[i];
    },

    /**
     * <p>Execute a function on each item of the list, optionally providing a
     * custom execution context.  Default context is the item.</p>
     *
     * <p>The callback signature is <code>callback( item, index )</code>.</p>
     *
     * @method each
     * @param fn { Function } the function to execute
     * @param context { mixed } optional override 'this' in the function
     * @return { ArrayList } this instance
     * @chainable
     */
    each: function ( fn, context ) {
        YArray_each( this._items, function ( item, i ) {
            item = this.item( i );

            fn.call( context || item, item, i, this );
        }, this);

        return this;
    },

    /**
     * <p>Execute a function on each item of the list, optionally providing a
     * custom execution context.  Default context is the item.</p>
     *
     * <p>The callback signature is <code>callback( item, index )</code>.</p>
     *
     * <p>Unlike <code>each</code>, if the callback returns true, the
     * iteratation will stop.</p>
     *
     * @method some
     * @param fn { Function } the function to execute
     * @param context { mixed } optional override 'this' in the function
     * @return { Boolean } True if the function returned true on an item
     */
    some: function ( fn, context ) {
        return YArray.some( this._items, function ( item, i ) {
            item = this.item( i );

            return fn.call( context || item, item, i, this );
        }, this);
    },

    /**
     * Finds the first index of the needle in the managed array of items.
     *
     * @method indexOf
     * @param needle { mixed } The item to search for
     * @return { Integer } Array index if found.  Otherwise -1
     */
    indexOf: function ( needle ) {
        return YArray.indexOf( this._items, needle );
    },

    /**
     * How many items are in this list?
     *
     * @method size
     * @return { Integer } Number of items in the list
     */
    size: function () {
        return this._items.length;
    },

    /**
     * Is this instance managing any items?
     *
     * @method isEmpty
     * @return { Boolean } true if 1 or more items are being managed
     */
    isEmpty: function () {
        return !this.size();
    },

    /**
     * Provides an array-like representation for JSON.stringify.
     *
     * @method toJSON
     * @return { Array } an array representation of the ArrayList
     */
    toJSON: function () {
        return this._items;
    }
};
// Default implementation does not distinguish between public and private
// item getter
/**
 * Protected method for optimizations that may be appropriate for API
 * mirroring. Similar in functionality to <code>item</code>, but is used by
 * methods added with <code>ArrayList.addMethod()</code>.
 *
 * @method _item
 * @protected
 * @param i { Integer } Index of item to fetch
 * @return { mixed } The item appropriate for pass through API methods
 */
ArrayListProto._item = ArrayListProto.item;

// Mixed onto existing proto to preserve constructor NOT being an own property.
// This has bitten me when composing classes by enumerating, copying prototypes.
Y.mix(ArrayList.prototype, ArrayListProto);

Y.mix( ArrayList, {

    /**
     * <p>Adds a pass through method to dest (typically the prototype of a list
     * class) that calls the named method on each item in the list with
     * whatever parameters are passed in.  Allows for API indirection via list
     * instances.</p>
     *
     * <p>Accepts a single string name or an array of string names.</p>
     *
     * <pre><code>list.each( function ( item ) {
     *     item.methodName( 1, 2, 3 );
     * } );
     * // becomes
     * list.methodName( 1, 2, 3 );</code></pre>
     *
     * <p>Additionally, the pass through methods use the item retrieved by the
     * <code>_item</code> method in case there is any special behavior that is
     * appropriate for API mirroring.</p>
     *
     * <p>If the iterated method returns a value, the return value from the
     * added method will be an array of values with each value being at the
     * corresponding index for that item.  If the iterated method does not
     * return a value, the added method will be chainable.
     *
     * @method addMethod
     * @static
     * @param dest {Object} Object or prototype to receive the iterator method
     * @param name {String|String[]} Name of method of methods to create
     */
    addMethod: function ( dest, names ) {

        names = YArray( names );

        YArray_each( names, function ( name ) {
            dest[ name ] = function () {
                var args = YArray( arguments, 0, true ),
                    ret  = [];

                YArray_each( this._items, function ( item, i ) {
                    item = this._item( i );

                    var result = item[ name ].apply( item, args );

                    if ( result !== undefined && result !== item ) {
                        ret[i] = result;
                    }
                }, this);

                return ret.length ? ret : this;
            };
        } );
    }
} );

Y.ArrayList = ArrayList;


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/querystring-parse/querystring-parse.js
// ----------------------------------------------------------------------------------------

YUI.add('querystring-parse', function (Y, NAME) {

/**
 * The QueryString module adds support for serializing JavaScript objects into
 * query strings and parsing JavaScript objects from query strings format.
 *
 * The QueryString namespace is added to your YUI instance including static methods
 * `Y.QueryString.parse(..)` and `Y.QueryString.stringify(..)`.
 *
 * The `querystring` module is a alias for `querystring-parse` and
 * `querystring-stringify`.
 *
 * As their names suggest, `querystring-parse` adds support for parsing
 * Query String data (`Y.QueryString.parse`) and `querystring-stringify` for serializing
 * JavaScript data into Query Strings (`Y.QueryString.stringify`).  You may choose to
 * include either of the submodules individually if you don't need the
 * complementary functionality, or include the rollup for both.
 *
 * @module querystring
 * @main querystring
*/

/**
 * Provides Y.QueryString.parse method to accept Query Strings and return native
 * JavaScript objects.
 *
 * @module querystring
 * @submodule querystring-parse
*/

/**
 * The QueryString module adds support for serializing JavaScript objects into
 * query strings and parsing JavaScript objects from query strings format.
 * @class QueryString
 * @static
 */
var QueryString = Y.namespace("QueryString"),

// Parse a key=val string.
// These can get pretty hairy
// example flow:
// parse(foo[bar][][bla]=baz)
// return parse(foo[bar][][bla],"baz")
// return parse(foo[bar][], {bla : "baz"})
// return parse(foo[bar], [{bla:"baz"}])
// return parse(foo, {bar:[{bla:"baz"}]})
// return {foo:{bar:[{bla:"baz"}]}}
pieceParser = function (eq) {
    return function parsePiece (key, val) {

        var sliced, numVal, head, tail, ret;

        if (arguments.length !== 2) {
            // key=val, called from the map/reduce
            key = key.split(eq);
            return parsePiece(
                QueryString.unescape(key.shift()),
                QueryString.unescape(key.join(eq))
            );
        }
        key = key.replace(/^\s+|\s+$/g, '');
        if (Y.Lang.isString(val)) {
            val = val.replace(/^\s+|\s+$/g, '');
            // convert numerals to numbers
            if (!isNaN(val)) {
                numVal = +val;
                if (val === numVal.toString(10)) {
                    val = numVal;
                }
            }
        }
        sliced = /(.*)\[([^\]]*)\]$/.exec(key);
        if (!sliced) {
            ret = {};
            if (key) {
                ret[key] = val;
            }
            return ret;
        }
        // ["foo[][bar][][baz]", "foo[][bar][]", "baz"]
        tail = sliced[2];
        head = sliced[1];

        // array: key[]=val
        if (!tail) {
            return parsePiece(head, [val]);
        }

        // obj: key[subkey]=val
        ret = {};
        ret[tail] = val;
        return parsePiece(head, ret);
    };
},

// the reducer function that merges each query piece together into one set of params
mergeParams = function(params, addition) {
    return (
        // if it's uncontested, then just return the addition.
        (!params) ? addition
        // if the existing value is an array, then concat it.
        : (Y.Lang.isArray(params)) ? params.concat(addition)
        // if the existing value is not an array, and either are not objects, arrayify it.
        : (!Y.Lang.isObject(params) || !Y.Lang.isObject(addition)) ? [params].concat(addition)
        // else merge them as objects, which is a little more complex
        : mergeObjects(params, addition)
    );
},

// Merge two *objects* together. If this is called, we've already ruled
// out the simple cases, and need to do the for-in business.
mergeObjects = function(params, addition) {
    for (var i in addition) {
        if (i && addition.hasOwnProperty(i)) {
            params[i] = mergeParams(params[i], addition[i]);
        }
    }
    return params;
};

/**
 * Accept Query Strings and return native JavaScript objects.
 *
 * @method parse
 * @param qs {String} Querystring to be parsed into an object.
 * @param sep {String} (optional) Character that should join param k=v pairs together. Default: "&"
 * @param eq  {String} (optional) Character that should join keys to their values. Default: "="
 * @public
 * @static
 */
QueryString.parse = function (qs, sep, eq) {
    // wouldn't Y.Array(qs.split()).map(pieceParser(eq)).reduce(mergeParams) be prettier?
    return Y.Array.reduce(
        Y.Array.map(
            qs.split(sep || "&"),
            pieceParser(eq || "=")
        ),
        {},
        mergeParams
    );
};

/**
 * Provides Y.QueryString.unescape method to be able to override default decoding
 * method.  This is important in cases where non-standard delimiters are used, if
 * the delimiters would not normally be handled properly by the builtin
 * (en|de)codeURIComponent functions.
 * Default: replace "+" with " ", and then decodeURIComponent behavior.
 *
 * @method unescape
 * @param s {String} String to be decoded.
 * @public
 * @static
 **/
QueryString.unescape = function (s) {
    return decodeURIComponent(s.replace(/\+/g, ' '));
};




}, '3.10.1', {"requires": ["yui-base", "array-extras"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/selector-css3/selector-css3.js
// ----------------------------------------------------------------------------------------

YUI.add('selector-css3', function (Y, NAME) {

/**
 * The selector css3 module provides support for css3 selectors.
 * @module dom
 * @submodule selector-css3
 * @for Selector
 */

/*
    an+b = get every _a_th node starting at the _b_th
    0n+b = no repeat ("0" and "n" may both be omitted (together) , e.g. "0n+1" or "1", not "0+1"), return only the _b_th element
    1n+b =  get every element starting from b ("1" may may be omitted, e.g. "1n+0" or "n+0" or "n")
    an+0 = get every _a_th element, "0" may be omitted
*/

Y.Selector._reNth = /^(?:([\-]?\d*)(n){1}|(odd|even)$)*([\-+]?\d*)$/;

Y.Selector._getNth = function(node, expr, tag, reverse) {
    Y.Selector._reNth.test(expr);
    var a = parseInt(RegExp.$1, 10), // include every _a_ elements (zero means no repeat, just first _a_)
        n = RegExp.$2, // "n"
        oddeven = RegExp.$3, // "odd" or "even"
        b = parseInt(RegExp.$4, 10) || 0, // start scan from element _b_
        result = [],
        siblings = Y.DOM._children(node.parentNode, tag),
        op;

    if (oddeven) {
        a = 2; // always every other
        op = '+';
        n = 'n';
        b = (oddeven === 'odd') ? 1 : 0;
    } else if ( isNaN(a) ) {
        a = (n) ? 1 : 0; // start from the first or no repeat
    }

    if (a === 0) { // just the first
        if (reverse) {
            b = siblings.length - b + 1;
        }

        if (siblings[b - 1] === node) {
            return true;
        } else {
            return false;
        }

    } else if (a < 0) {
        reverse = !!reverse;
        a = Math.abs(a);
    }

    if (!reverse) {
        for (var i = b - 1, len = siblings.length; i < len; i += a) {
            if ( i >= 0 && siblings[i] === node ) {
                return true;
            }
        }
    } else {
        for (var i = siblings.length - b, len = siblings.length; i >= 0; i -= a) {
            if ( i < len && siblings[i] === node ) {
                return true;
            }
        }
    }
    return false;
};

Y.mix(Y.Selector.pseudos, {
    'root': function(node) {
        return node === node.ownerDocument.documentElement;
    },

    'nth-child': function(node, expr) {
        return Y.Selector._getNth(node, expr);
    },

    'nth-last-child': function(node, expr) {
        return Y.Selector._getNth(node, expr, null, true);
    },

    'nth-of-type': function(node, expr) {
        return Y.Selector._getNth(node, expr, node.tagName);
    },

    'nth-last-of-type': function(node, expr) {
        return Y.Selector._getNth(node, expr, node.tagName, true);
    },

    'last-child': function(node) {
        var children = Y.DOM._children(node.parentNode);
        return children[children.length - 1] === node;
    },

    'first-of-type': function(node) {
        return Y.DOM._children(node.parentNode, node.tagName)[0] === node;
    },

    'last-of-type': function(node) {
        var children = Y.DOM._children(node.parentNode, node.tagName);
        return children[children.length - 1] === node;
    },

    'only-child': function(node) {
        var children = Y.DOM._children(node.parentNode);
        return children.length === 1 && children[0] === node;
    },

    'only-of-type': function(node) {
        var children = Y.DOM._children(node.parentNode, node.tagName);
        return children.length === 1 && children[0] === node;
    },

    'empty': function(node) {
        return node.childNodes.length === 0;
    },

    'not': function(node, expr) {
        return !Y.Selector.test(node, expr);
    },

    'contains': function(node, expr) {
        var text = node.innerText || node.textContent || '';
        return text.indexOf(expr) > -1;
    },

    'checked': function(node) {
        return (node.checked === true || node.selected === true);
    },

    enabled: function(node) {
        return (node.disabled !== undefined && !node.disabled);
    },

    disabled: function(node) {
        return (node.disabled);
    }
});

Y.mix(Y.Selector.operators, {
    '^=': '^{val}', // Match starts with value
    '$=': '{val}$', // Match ends with value
    '*=': '{val}' // Match contains value as substring
});

Y.Selector.combinators['~'] = {
    axis: 'previousSibling'
};


}, '3.10.1', {"requires": ["selector-native", "selector-css2"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-synthetic/event-synthetic.js
// ----------------------------------------------------------------------------------------

YUI.add('event-synthetic', function (Y, NAME) {

/**
 * Define new DOM events that can be subscribed to from Nodes.
 *
 * @module event
 * @submodule event-synthetic
 */
var CustomEvent = Y.CustomEvent,
    DOMMap   = Y.Env.evt.dom_map,
    toArray  = Y.Array,
    YLang    = Y.Lang,
    isObject = YLang.isObject,
    isString = YLang.isString,
    isArray  = YLang.isArray,
    query    = Y.Selector.query,
    noop     = function () {};

/**
 * <p>The triggering mechanism used by SyntheticEvents.</p>
 *
 * <p>Implementers should not instantiate these directly.  Use the Notifier
 * provided to the event's implemented <code>on(node, sub, notifier)</code> or
 * <code>delegate(node, sub, notifier, filter)</code> methods.</p>
 *
 * @class SyntheticEvent.Notifier
 * @constructor
 * @param handle {EventHandle} the detach handle for the subscription to an
 *              internal custom event used to execute the callback passed to
 *              on(..) or delegate(..)
 * @param emitFacade {Boolean} take steps to ensure the first arg received by
 *              the subscription callback is an event facade
 * @private
 * @since 3.2.0
 */
function Notifier(handle, emitFacade) {
    this.handle     = handle;
    this.emitFacade = emitFacade;
}

/**
 * <p>Executes the subscription callback, passing the firing arguments as the
 * first parameters to that callback. For events that are configured with
 * emitFacade=true, it is common practice to pass the triggering DOMEventFacade
 * as the first parameter.  Barring a proper DOMEventFacade or EventFacade
 * (from a CustomEvent), a new EventFacade will be generated.  In that case, if
 * fire() is called with a simple object, it will be mixed into the facade.
 * Otherwise, the facade will be prepended to the callback parameters.</p>
 *
 * <p>For notifiers provided to delegate logic, the first argument should be an
 * object with a &quot;currentTarget&quot; property to identify what object to
 * default as 'this' in the callback.  Typically this is gleaned from the
 * DOMEventFacade or EventFacade, but if configured with emitFacade=false, an
 * object must be provided.  In that case, the object will be removed from the
 * callback parameters.</p>
 *
 * <p>Additional arguments passed during event subscription will be
 * automatically added after those passed to fire().</p>
 *
 * @method fire
 * @param e {EventFacade|DOMEventFacade|Object|any} (see description)
 * @param arg* {any} additional arguments received by all subscriptions
 * @private
 */
Notifier.prototype.fire = function (e) {
    // first arg to delegate notifier should be an object with currentTarget
    var args     = toArray(arguments, 0, true),
        handle   = this.handle,
        ce       = handle.evt,
        sub      = handle.sub,
        thisObj  = sub.context,
        delegate = sub.filter,
        event    = e || {},
        ret;

    if (this.emitFacade) {
        if (!e || !e.preventDefault) {
            event = ce._getFacade();

            if (isObject(e) && !e.preventDefault) {
                Y.mix(event, e, true);
                args[0] = event;
            } else {
                args.unshift(event);
            }
        }

        event.type    = ce.type;
        event.details = args.slice();

        if (delegate) {
            event.container = ce.host;
        }
    } else if (delegate && isObject(e) && e.currentTarget) {
        args.shift();
    }

    sub.context = thisObj || event.currentTarget || ce.host;
    ret = ce.fire.apply(ce, args);
    sub.context = thisObj; // reset for future firing

    // to capture callbacks that return false to stopPropagation.
    // Useful for delegate implementations
    return ret;
};

/**
 * Manager object for synthetic event subscriptions to aggregate multiple synths on the same node without colliding with actual DOM subscription entries in the global map of DOM subscriptions.  Also facilitates proper cleanup on page unload.
 *
 * @class SynthRegistry
 * @constructor
 * @param el {HTMLElement} the DOM element
 * @param yuid {String} the yuid stamp for the element
 * @param key {String} the generated id token used to identify an event type +
 *                     element in the global DOM subscription map.
 * @private
 */
function SynthRegistry(el, yuid, key) {
    this.handles = [];
    this.el      = el;
    this.key     = key;
    this.domkey  = yuid;
}

SynthRegistry.prototype = {
    constructor: SynthRegistry,

    // A few object properties to fake the CustomEvent interface for page
    // unload cleanup.  DON'T TOUCH!
    type      : '_synth',
    fn        : noop,
    capture   : false,

    /**
     * Adds a subscription from the Notifier registry.
     *
     * @method register
     * @param handle {EventHandle} the subscription
     * @since 3.4.0
     */
    register: function (handle) {
        handle.evt.registry = this;
        this.handles.push(handle);
    },

    /**
     * Removes the subscription from the Notifier registry.
     *
     * @method _unregisterSub
     * @param sub {Subscription} the subscription
     * @since 3.4.0
     */
    unregister: function (sub) {
        var handles = this.handles,
            events = DOMMap[this.domkey],
            i;

        for (i = handles.length - 1; i >= 0; --i) {
            if (handles[i].sub === sub) {
                handles.splice(i, 1);
                break;
            }
        }

        // Clean up left over objects when there are no more subscribers.
        if (!handles.length) {
            delete events[this.key];
            if (!Y.Object.size(events)) {
                delete DOMMap[this.domkey];
            }
        }
    },

    /**
     * Used by the event system's unload cleanup process.  When navigating
     * away from the page, the event system iterates the global map of element
     * subscriptions and detaches everything using detachAll().  Normally,
     * the map is populated with custom events, so this object needs to
     * at least support the detachAll method to duck type its way to
     * cleanliness.
     *
     * @method detachAll
     * @private
     * @since 3.4.0
     */
    detachAll : function () {
        var handles = this.handles,
            i = handles.length;

        while (--i >= 0) {
            handles[i].detach();
        }
    }
};

/**
 * <p>Wrapper class for the integration of new events into the YUI event
 * infrastructure.  Don't instantiate this object directly, use
 * <code>Y.Event.define(type, config)</code>.  See that method for details.</p>
 *
 * <p>Properties that MAY or SHOULD be specified in the configuration are noted
 * below and in the description of <code>Y.Event.define</code>.</p>
 *
 * @class SyntheticEvent
 * @constructor
 * @param cfg {Object} Implementation pieces and configuration
 * @since 3.1.0
 * @in event-synthetic
 */
function SyntheticEvent() {
    this._init.apply(this, arguments);
}

Y.mix(SyntheticEvent, {
    Notifier: Notifier,
    SynthRegistry: SynthRegistry,

    /**
     * Returns the array of subscription handles for a node for the given event
     * type.  Passing true as the third argument will create a registry entry
     * in the event system's DOM map to host the array if one doesn't yet exist.
     *
     * @method getRegistry
     * @param node {Node} the node
     * @param type {String} the event
     * @param create {Boolean} create a registration entry to host a new array
     *                  if one doesn't exist.
     * @return {Array}
     * @static
     * @protected
     * @since 3.2.0
     */
    getRegistry: function (node, type, create) {
        var el     = node._node,
            yuid   = Y.stamp(el),
            key    = 'event:' + yuid + type + '_synth',
            events = DOMMap[yuid];

        if (create) {
            if (!events) {
                events = DOMMap[yuid] = {};
            }
            if (!events[key]) {
                events[key] = new SynthRegistry(el, yuid, key);
            }
        }

        return (events && events[key]) || null;
    },

    /**
     * Alternate <code>_delete()</code> method for the CustomEvent object
     * created to manage SyntheticEvent subscriptions.
     *
     * @method _deleteSub
     * @param sub {Subscription} the subscription to clean up
     * @private
     * @since 3.2.0
     */
    _deleteSub: function (sub) {
        if (sub && sub.fn) {
            var synth = this.eventDef,
                method = (sub.filter) ? 'detachDelegate' : 'detach';

            this._subscribers = [];

            if (CustomEvent.keepDeprecatedSubs) {
                this.subscribers = {};
            }

            synth[method](sub.node, sub, this.notifier, sub.filter);
            this.registry.unregister(sub);

            delete sub.fn;
            delete sub.node;
            delete sub.context;
        }
    },

    prototype: {
        constructor: SyntheticEvent,

        /**
         * Construction logic for the event.
         *
         * @method _init
         * @protected
         */
        _init: function () {
            var config = this.publishConfig || (this.publishConfig = {});

            // The notification mechanism handles facade creation
            this.emitFacade = ('emitFacade' in config) ?
                                config.emitFacade :
                                true;
            config.emitFacade  = false;
        },

        /**
         * <p>Implementers MAY provide this method definition.</p>
         *
         * <p>Implement this function if the event supports a different
         * subscription signature.  This function is used by both
         * <code>on()</code> and <code>delegate()</code>.  The second parameter
         * indicates that the event is being subscribed via
         * <code>delegate()</code>.</p>
         *
         * <p>Implementations must remove extra arguments from the args list
         * before returning.  The required args for <code>on()</code>
         * subscriptions are</p>
         * <pre><code>[type, callback, target, context, argN...]</code></pre>
         *
         * <p>The required args for <code>delegate()</code>
         * subscriptions are</p>
         *
         * <pre><code>[type, callback, target, filter, context, argN...]</code></pre>
         *
         * <p>The return value from this function will be stored on the
         * subscription in the '_extra' property for reference elsewhere.</p>
         *
         * @method processArgs
         * @param args {Array} parmeters passed to Y.on(..) or Y.delegate(..)
         * @param delegate {Boolean} true if the subscription is from Y.delegate
         * @return {any}
         */
        processArgs: noop,

        /**
         * <p>Implementers MAY override this property.</p>
         *
         * <p>Whether to prevent multiple subscriptions to this event that are
         * classified as being the same.  By default, this means the subscribed
         * callback is the same function.  See the <code>subMatch</code>
         * method.  Setting this to true will impact performance for high volume
         * events.</p>
         *
         * @property preventDups
         * @type {Boolean}
         * @default false
         */
        //preventDups  : false,

        /**
         * <p>Implementers SHOULD provide this method definition.</p>
         *
         * Implementation logic for subscriptions done via <code>node.on(type,
         * fn)</code> or <code>Y.on(type, fn, target)</code>.  This
         * function should set up the monitor(s) that will eventually fire the
         * event.  Typically this involves subscribing to at least one DOM
         * event.  It is recommended to store detach handles from any DOM
         * subscriptions to make for easy cleanup in the <code>detach</code>
         * method.  Typically these handles are added to the <code>sub</code>
         * object.  Also for SyntheticEvents that leverage a single DOM
         * subscription under the hood, it is recommended to pass the DOM event
         * object to <code>notifier.fire(e)</code>.  (The event name on the
         * object will be updated).
         *
         * @method on
         * @param node {Node} the node the subscription is being applied to
         * @param sub {Subscription} the object to track this subscription
         * @param notifier {SyntheticEvent.Notifier} call notifier.fire(..) to
         *              trigger the execution of the subscribers
         */
        on: noop,

        /**
         * <p>Implementers SHOULD provide this method definition.</p>
         *
         * <p>Implementation logic for detaching subscriptions done via
         * <code>node.on(type, fn)</code>.  This function should clean up any
         * subscriptions made in the <code>on()</code> phase.</p>
         *
         * @method detach
         * @param node {Node} the node the subscription was applied to
         * @param sub {Subscription} the object tracking this subscription
         * @param notifier {SyntheticEvent.Notifier} the Notifier used to
         *              trigger the execution of the subscribers
         */
        detach: noop,

        /**
         * <p>Implementers SHOULD provide this method definition.</p>
         *
         * <p>Implementation logic for subscriptions done via
         * <code>node.delegate(type, fn, filter)</code> or
         * <code>Y.delegate(type, fn, container, filter)</code>.  Like with
         * <code>on()</code> above, this function should monitor the environment
         * for the event being fired, and trigger subscription execution by
         * calling <code>notifier.fire(e)</code>.</p>
         *
         * <p>This function receives a fourth argument, which is the filter
         * used to identify which Node's are of interest to the subscription.
         * The filter will be either a boolean function that accepts a target
         * Node for each hierarchy level as the event bubbles, or a selector
         * string.  To translate selector strings into filter functions, use
         * <code>Y.delegate.compileFilter(filter)</code>.</p>
         *
         * @method delegate
         * @param node {Node} the node the subscription is being applied to
         * @param sub {Subscription} the object to track this subscription
         * @param notifier {SyntheticEvent.Notifier} call notifier.fire(..) to
         *              trigger the execution of the subscribers
         * @param filter {String|Function} Selector string or function that
         *              accepts an event object and returns null, a Node, or an
         *              array of Nodes matching the criteria for processing.
         * @since 3.2.0
         */
        delegate       : noop,

        /**
         * <p>Implementers SHOULD provide this method definition.</p>
         *
         * <p>Implementation logic for detaching subscriptions done via
         * <code>node.delegate(type, fn, filter)</code> or
         * <code>Y.delegate(type, fn, container, filter)</code>.  This function
         * should clean up any subscriptions made in the
         * <code>delegate()</code> phase.</p>
         *
         * @method detachDelegate
         * @param node {Node} the node the subscription was applied to
         * @param sub {Subscription} the object tracking this subscription
         * @param notifier {SyntheticEvent.Notifier} the Notifier used to
         *              trigger the execution of the subscribers
         * @param filter {String|Function} Selector string or function that
         *              accepts an event object and returns null, a Node, or an
         *              array of Nodes matching the criteria for processing.
         * @since 3.2.0
         */
        detachDelegate : noop,

        /**
         * Sets up the boilerplate for detaching the event and facilitating the
         * execution of subscriber callbacks.
         *
         * @method _on
         * @param args {Array} array of arguments passed to
         *              <code>Y.on(...)</code> or <code>Y.delegate(...)</code>
         * @param delegate {Boolean} true if called from
         * <code>Y.delegate(...)</code>
         * @return {EventHandle} the detach handle for this subscription
         * @private
         * since 3.2.0
         */
        _on: function (args, delegate) {
            var handles  = [],
                originalArgs = args.slice(),
                extra    = this.processArgs(args, delegate),
                selector = args[2],
                method   = delegate ? 'delegate' : 'on',
                nodes, handle;

            // Can't just use Y.all because it doesn't support window (yet?)
            nodes = (isString(selector)) ?
                query(selector) :
                toArray(selector || Y.one(Y.config.win));

            if (!nodes.length && isString(selector)) {
                handle = Y.on('available', function () {
                    Y.mix(handle, Y[method].apply(Y, originalArgs), true);
                }, selector);

                return handle;
            }

            Y.Array.each(nodes, function (node) {
                var subArgs = args.slice(),
                    filter;

                node = Y.one(node);

                if (node) {
                    if (delegate) {
                        filter = subArgs.splice(3, 1)[0];
                    }

                    // (type, fn, el, thisObj, ...) => (fn, thisObj, ...)
                    subArgs.splice(0, 4, subArgs[1], subArgs[3]);

                    if (!this.preventDups ||
                        !this.getSubs(node, args, null, true))
                    {
                        handles.push(this._subscribe(node, method, subArgs, extra, filter));
                    }
                }
            }, this);

            return (handles.length === 1) ?
                handles[0] :
                new Y.EventHandle(handles);
        },

        /**
         * Creates a new Notifier object for use by this event's
         * <code>on(...)</code> or <code>delegate(...)</code> implementation
         * and register the custom event proxy in the DOM system for cleanup.
         *
         * @method _subscribe
         * @param node {Node} the Node hosting the event
         * @param method {String} "on" or "delegate"
         * @param args {Array} the subscription arguments passed to either
         *              <code>Y.on(...)</code> or <code>Y.delegate(...)</code>
         *              after running through <code>processArgs(args)</code> to
         *              normalize the argument signature
         * @param extra {any} Extra data parsed from
         *              <code>processArgs(args)</code>
         * @param filter {String|Function} the selector string or function
         *              filter passed to <code>Y.delegate(...)</code> (not
         *              present when called from <code>Y.on(...)</code>)
         * @return {EventHandle}
         * @private
         * @since 3.2.0
         */
        _subscribe: function (node, method, args, extra, filter) {
            var dispatcher = new Y.CustomEvent(this.type, this.publishConfig),
                handle     = dispatcher.on.apply(dispatcher, args),
                notifier   = new Notifier(handle, this.emitFacade),
                registry   = SyntheticEvent.getRegistry(node, this.type, true),
                sub        = handle.sub;

            sub.node   = node;
            sub.filter = filter;
            if (extra) {
                this.applyArgExtras(extra, sub);
            }

            Y.mix(dispatcher, {
                eventDef     : this,
                notifier     : notifier,
                host         : node,       // I forget what this is for
                currentTarget: node,       // for generating facades
                target       : node,       // for generating facades
                el           : node._node, // For category detach

                _delete      : SyntheticEvent._deleteSub
            }, true);

            handle.notifier = notifier;

            registry.register(handle);

            // Call the implementation's "on" or "delegate" method
            this[method](node, sub, notifier, filter);

            return handle;
        },

        /**
         * <p>Implementers MAY provide this method definition.</p>
         *
         * <p>Implement this function if you want extra data extracted during
         * processArgs to be propagated to subscriptions on a per-node basis.
         * That is to say, if you call <code>Y.on('xyz', fn, xtra, 'div')</code>
         * the data returned from processArgs will be shared
         * across the subscription objects for all the divs.  If you want each
         * subscription to receive unique information, do that processing
         * here.</p>
         *
         * <p>The default implementation adds the data extracted by processArgs
         * to the subscription object as <code>sub._extra</code>.</p>
         *
         * @method applyArgExtras
         * @param extra {any} Any extra data extracted from processArgs
         * @param sub {Subscription} the individual subscription
         */
        applyArgExtras: function (extra, sub) {
            sub._extra = extra;
        },

        /**
         * Removes the subscription(s) from the internal subscription dispatch
         * mechanism.  See <code>SyntheticEvent._deleteSub</code>.
         *
         * @method _detach
         * @param args {Array} The arguments passed to
         *                  <code>node.detach(...)</code>
         * @private
         * @since 3.2.0
         */
        _detach: function (args) {
            // Can't use Y.all because it doesn't support window (yet?)
            // TODO: Does Y.all support window now?
            var target = args[2],
                els    = (isString(target)) ?
                            query(target) : toArray(target),
                node, i, len, handles, j;

            // (type, fn, el, context, filter?) => (type, fn, context, filter?)
            args.splice(2, 1);

            for (i = 0, len = els.length; i < len; ++i) {
                node = Y.one(els[i]);

                if (node) {
                    handles = this.getSubs(node, args);

                    if (handles) {
                        for (j = handles.length - 1; j >= 0; --j) {
                            handles[j].detach();
                        }
                    }
                }
            }
        },

        /**
         * Returns the detach handles of subscriptions on a node that satisfy a
         * search/filter function.  By default, the filter used is the
         * <code>subMatch</code> method.
         *
         * @method getSubs
         * @param node {Node} the node hosting the event
         * @param args {Array} the array of original subscription args passed
         *              to <code>Y.on(...)</code> (before
         *              <code>processArgs</code>
         * @param filter {Function} function used to identify a subscription
         *              for inclusion in the returned array
         * @param first {Boolean} stop after the first match (used to check for
         *              duplicate subscriptions)
         * @return {EventHandle[]} detach handles for the matching subscriptions
         */
        getSubs: function (node, args, filter, first) {
            var registry = SyntheticEvent.getRegistry(node, this.type),
                handles  = [],
                allHandles, i, len, handle;

            if (registry) {
                allHandles = registry.handles;

                if (!filter) {
                    filter = this.subMatch;
                }

                for (i = 0, len = allHandles.length; i < len; ++i) {
                    handle = allHandles[i];
                    if (filter.call(this, handle.sub, args)) {
                        if (first) {
                            return handle;
                        } else {
                            handles.push(allHandles[i]);
                        }
                    }
                }
            }

            return handles.length && handles;
        },

        /**
         * <p>Implementers MAY override this to define what constitutes a
         * &quot;same&quot; subscription.  Override implementations should
         * consider the lack of a comparator as a match, so calling
         * <code>getSubs()</code> with no arguments will return all subs.</p>
         *
         * <p>Compares a set of subscription arguments against a Subscription
         * object to determine if they match.  The default implementation
         * compares the callback function against the second argument passed to
         * <code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>
         *
         * @method subMatch
         * @param sub {Subscription} the existing subscription
         * @param args {Array} the calling arguments passed to
         *                  <code>Y.on(...)</code> etc.
         * @return {Boolean} true if the sub can be described by the args
         *                  present
         * @since 3.2.0
         */
        subMatch: function (sub, args) {
            // Default detach cares only about the callback matching
            return !args[1] || sub.fn === args[1];
        }
    }
}, true);

Y.SyntheticEvent = SyntheticEvent;

/**
 * <p>Defines a new event in the DOM event system.  Implementers are
 * responsible for monitoring for a scenario whereby the event is fired.  A
 * notifier object is provided to the functions identified below.  When the
 * criteria defining the event are met, call notifier.fire( [args] ); to
 * execute event subscribers.</p>
 *
 * <p>The first parameter is the name of the event.  The second parameter is a
 * configuration object which define the behavior of the event system when the
 * new event is subscribed to or detached from.  The methods that should be
 * defined in this configuration object are <code>on</code>,
 * <code>detach</code>, <code>delegate</code>, and <code>detachDelegate</code>.
 * You are free to define any other methods or properties needed to define your
 * event.  Be aware, however, that since the object is used to subclass
 * SyntheticEvent, you should avoid method names used by SyntheticEvent unless
 * your intention is to override the default behavior.</p>
 *
 * <p>This is a list of properties and methods that you can or should specify
 * in the configuration object:</p>
 *
 * <dl>
 *   <dt><code>on</code></dt>
 *       <dd><code>function (node, subscription, notifier)</code> The
 *       implementation logic for subscription.  Any special setup you need to
 *       do to create the environment for the event being fired--E.g. native
 *       DOM event subscriptions.  Store subscription related objects and
 *       state on the <code>subscription</code> object.  When the
 *       criteria have been met to fire the synthetic event, call
 *       <code>notifier.fire(e)</code>.  See Notifier's <code>fire()</code>
 *       method for details about what to pass as parameters.</dd>
 *
 *   <dt><code>detach</code></dt>
 *       <dd><code>function (node, subscription, notifier)</code> The
 *       implementation logic for cleaning up a detached subscription. E.g.
 *       detach any DOM subscriptions added in <code>on</code>.</dd>
 *
 *   <dt><code>delegate</code></dt>
 *       <dd><code>function (node, subscription, notifier, filter)</code> The
 *       implementation logic for subscription via <code>Y.delegate</code> or
 *       <code>node.delegate</code>.  The filter is typically either a selector
 *       string or a function.  You can use
 *       <code>Y.delegate.compileFilter(selectorString)</code> to create a
 *       filter function from a selector string if needed.  The filter function
 *       expects an event object as input and should output either null, a
 *       matching Node, or an array of matching Nodes.  Otherwise, this acts
 *       like <code>on</code> DOM event subscriptions.  Store subscription
 *       related objects and information on the <code>subscription</code>
 *       object.  When the criteria have been met to fire the synthetic event,
 *       call <code>notifier.fire(e)</code> as noted above.</dd>
 *
 *   <dt><code>detachDelegate</code></dt>
 *       <dd><code>function (node, subscription, notifier)</code> The
 *       implementation logic for cleaning up a detached delegate subscription.
 *       E.g. detach any DOM delegate subscriptions added in
 *       <code>delegate</code>.</dd>
 *
 *   <dt><code>publishConfig</code></dt>
 *       <dd>(Object) The configuration object that will be used to instantiate
 *       the underlying CustomEvent. See Notifier's <code>fire</code> method
 *       for details.</dd>
 *
 *   <dt><code>processArgs</code></dt
 *       <dd>
 *          <p><code>function (argArray, fromDelegate)</code> Optional method
 *          to extract any additional arguments from the subscription
 *          signature.  Using this allows <code>on</code> or
 *          <code>delegate</code> signatures like
 *          <code>node.on(&quot;hover&quot;, overCallback,
 *          outCallback)</code>.</p>
 *          <p>When processing an atypical argument signature, make sure the
 *          args array is returned to the normal signature before returning
 *          from the function.  For example, in the &quot;hover&quot; example
 *          above, the <code>outCallback</code> needs to be <code>splice</code>d
 *          out of the array.  The expected signature of the args array for
 *          <code>on()</code> subscriptions is:</p>
 *          <pre>
 *              <code>[type, callback, target, contextOverride, argN...]</code>
 *          </pre>
 *          <p>And for <code>delegate()</code>:</p>
 *          <pre>
 *              <code>[type, callback, target, filter, contextOverride, argN...]</code>
 *          </pre>
 *          <p>where <code>target</code> is the node the event is being
 *          subscribed for.  You can see these signatures documented for
 *          <code>Y.on()</code> and <code>Y.delegate()</code> respectively.</p>
 *          <p>Whatever gets returned from the function will be stored on the
 *          <code>subscription</code> object under
 *          <code>subscription._extra</code>.</p></dd>
 *   <dt><code>subMatch</code></dt>
 *       <dd>
 *           <p><code>function (sub, args)</code>  Compares a set of
 *           subscription arguments against a Subscription object to determine
 *           if they match.  The default implementation compares the callback
 *           function against the second argument passed to
 *           <code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>
 *       </dd>
 * </dl>
 *
 * @method define
 * @param type {String} the name of the event
 * @param config {Object} the prototype definition for the new event (see above)
 * @param force {Boolean} override an existing event (use with caution)
 * @return {SyntheticEvent} the subclass implementation instance created to
 *              handle event subscriptions of this type
 * @static
 * @for Event
 * @since 3.1.0
 * @in event-synthetic
 */
Y.Event.define = function (type, config, force) {
    var eventDef, Impl, synth;

    if (type && type.type) {
        eventDef = type;
        force = config;
    } else if (config) {
        eventDef = Y.merge({ type: type }, config);
    }

    if (eventDef) {
        if (force || !Y.Node.DOM_EVENTS[eventDef.type]) {
            Impl = function () {
                SyntheticEvent.apply(this, arguments);
            };
            Y.extend(Impl, SyntheticEvent, eventDef);
            synth = new Impl();

            type = synth.type;

            Y.Node.DOM_EVENTS[type] = Y.Env.evt.plugins[type] = {
                eventDef: synth,

                on: function () {
                    return synth._on(toArray(arguments));
                },

                delegate: function () {
                    return synth._on(toArray(arguments), true);
                },

                detach: function () {
                    return synth._detach(toArray(arguments));
                }
            };

        }
    } else if (isString(type) || isArray(type)) {
        Y.Array.each(toArray(type), function (t) {
            Y.Node.DOM_EVENTS[t] = 1;
        });
    }

    return synth;
};


}, '3.10.1', {"requires": ["node-base", "event-custom-complex"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-key/event-key.js
// ----------------------------------------------------------------------------------------

YUI.add('event-key', function (Y, NAME) {

/**
 * Functionality to listen for one or more specific key combinations.
 * @module event
 * @submodule event-key
 */

var ALT      = "+alt",
    CTRL     = "+ctrl",
    META     = "+meta",
    SHIFT    = "+shift",

    trim     = Y.Lang.trim,

    eventDef = {
        KEY_MAP: {
            enter    : 13,
            esc      : 27,
            backspace: 8,
            tab      : 9,
            pageup   : 33,
            pagedown : 34
        },

        _typeRE: /^(up|down|press):/,
        _keysRE: /^(?:up|down|press):|\+(alt|ctrl|meta|shift)/g,

        processArgs: function (args) {
            var spec = args.splice(3,1)[0],
                mods = Y.Array.hash(spec.match(/\+(?:alt|ctrl|meta|shift)\b/g) || []),
                config = {
                    type: this._typeRE.test(spec) ? RegExp.$1 : null,
                    mods: mods,
                    keys: null
                },
                // strip type and modifiers from spec, leaving only keyCodes
                bits = spec.replace(this._keysRE, ''),
                chr, uc, lc, i;

            if (bits) {
                bits = bits.split(',');

                config.keys = {};

                // FIXME: need to support '65,esc' => keypress, keydown
                for (i = bits.length - 1; i >= 0; --i) {
                    chr = trim(bits[i]);

                    // catch sloppy filters, trailing commas, etc 'a,,'
                    if (!chr) {
                        continue;
                    }

                    // non-numerics are single characters or key names
                    if (+chr == chr) {
                        config.keys[chr] = mods;
                    } else {
                        lc = chr.toLowerCase();

                        if (this.KEY_MAP[lc]) {
                            config.keys[this.KEY_MAP[lc]] = mods;
                            // FIXME: '65,enter' defaults keydown for both
                            if (!config.type) {
                                config.type = "down"; // safest
                            }
                        } else {
                            // FIXME: Character mapping only works for keypress
                            // events. Otherwise, it uses String.fromCharCode()
                            // from the keyCode, which is wrong.
                            chr = chr.charAt(0);
                            uc  = chr.toUpperCase();

                            if (mods["+shift"]) {
                                chr = uc;
                            }

                            // FIXME: stupid assumption that
                            // the keycode of the lower case == the
                            // charCode of the upper case
                            // a (key:65,char:97), A (key:65,char:65)
                            config.keys[chr.charCodeAt(0)] =
                                (chr === uc) ?
                                    // upper case chars get +shift free
                                    Y.merge(mods, { "+shift": true }) :
                                    mods;
                        }
                    }
                }
            }

            if (!config.type) {
                config.type = "press";
            }

            return config;
        },

        on: function (node, sub, notifier, filter) {
            var spec   = sub._extra,
                type   = "key" + spec.type,
                keys   = spec.keys,
                method = (filter) ? "delegate" : "on";

            // Note: without specifying any keyCodes, this becomes a
            // horribly inefficient alias for 'keydown' (et al), but I
            // can't abort this subscription for a simple
            // Y.on('keypress', ...);
            // Please use keyCodes or just subscribe directly to keydown,
            // keyup, or keypress
            sub._detach = node[method](type, function (e) {
                var key = keys ? keys[e.which] : spec.mods;

                if (key &&
                    (!key[ALT]   || (key[ALT]   && e.altKey)) &&
                    (!key[CTRL]  || (key[CTRL]  && e.ctrlKey)) &&
                    (!key[META]  || (key[META]  && e.metaKey)) &&
                    (!key[SHIFT] || (key[SHIFT] && e.shiftKey)))
                {
                    notifier.fire(e);
                }
            }, filter);
        },

        detach: function (node, sub, notifier) {
            sub._detach.detach();
        }
    };

eventDef.delegate = eventDef.on;
eventDef.detachDelegate = eventDef.detach;

/**
 * <p>Add a key listener.  The listener will only be notified if the
 * keystroke detected meets the supplied specification.  The
 * specification is a string that is defined as:</p>
 *
 * <dl>
 *   <dt>spec</dt>
 *   <dd><code>[{type}:]{code}[,{code}]*</code></dd>
 *   <dt>type</dt>
 *   <dd><code>"down", "up", or "press"</code></dd>
 *   <dt>code</dt>
 *   <dd><code>{keyCode|character|keyName}[+{modifier}]*</code></dd>
 *   <dt>modifier</dt>
 *   <dd><code>"shift", "ctrl", "alt", or "meta"</code></dd>
 *   <dt>keyName</dt>
 *   <dd><code>"enter", "backspace", "esc", "tab", "pageup", or "pagedown"</code></dd>
 * </dl>
 *
 * <p>Examples:</p>
 * <ul>
 *   <li><code>Y.on("key", callback, "press:12,65+shift+ctrl", "#my-input");</code></li>
 *   <li><code>Y.delegate("key", preventSubmit, "#forms", "enter", "input[type=text]");</code></li>
 *   <li><code>Y.one("doc").on("key", viNav, "j,k,l,;");</code></li>
 * </ul>
 *
 * @event key
 * @for YUI
 * @param type {string} 'key'
 * @param fn {function} the function to execute
 * @param id {string|HTMLElement|collection} the element(s) to bind
 * @param spec {string} the keyCode and modifier specification
 * @param o optional context object
 * @param args 0..n additional arguments to provide to the listener.
 * @return {Event.Handle} the detach handle
 */
Y.Event.define('key', eventDef, true);


}, '3.10.1', {"requires": ["event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/util.js
// ----------------------------------------------------------------------------------------

/**
  Squarespace Utilities module, should really be split up into a bunch of separate modules
  It includes system-wide constants/enums at the top
  @module squarespace-util
  @requires yahoo, dom, event, element
  @namespace Squarespace
*/
/*globals google */
YUI.add('squarespace-util', function(Y) {

  var AFFILIATE_TRACKING_URL = '//squarespace.7eer.net/ifconv';
  Y.namespace('Squarespace.Constants');

  // ------------------------------------------------------------------------------------------------
  // Constants
  // ------------------------------------------------------------------------------------------------

  // These numbers matter. They are the response codes from
  // the SmugMug API. If you change them, ensure that they are
  // mapped properly from SmugMug error codes by the server.
  Y.Squarespace.SmugMugError = {
    INVALID_NICKNAME: 16,
    EXPIRED_TOKEN: 36,
    SERVICE_UNAVAILABLE: 98
  };

  Y.Squarespace.Constants = {
    hiddenNavigationName: '_hidden',
    README_PAGE_NAME: 'readme',
    MAX_SMUGMUG_GALLERY_COUNT: 20,
    MAX_SMUGMUG_GALLERY_SIZE: 50
  };

  Y.Squarespace.BetaFAQUrl = 'http://www.squarespace.com/beta-faq';
  Y.Squarespace.V6FAQUrl = 'http://help.squarespace.com/';

  Y.Squarespace.MediaProcessingErrors = {
    UPLOAD:       1,
    PROCESSING:   2
  };

  Y.Squarespace.FileUploadRequestState = {
    WAITING:    1,
    UPLOADING:  2,
    PROCESSING: 3,
    COMPLETE:   4,
    ERROR:      5
  };

  /**
    Reasons a file upload can be pre-emptively aborted.

    Used to validate files before queueing them for uploading.
    @property  FileUploadErrors
    @namespace Squarespace
  */
  Y.Squarespace.FileUploadErrors = {
    FILE_SIZE:       1,
    FILE_TYPE:       2,
    BATCH_QUANTITY:  3
  };

  /**
    Folder behavior
    with love.
    @property FolderBehavior
    @namespace Squarespace
  */
  Y.Squarespace.FolderBehavior = {
    INDEX:      1,
    REDIRECT:   2,
    NONE:       3
  };

  /**
    Content String Constants
    @property ContentStringConstants
    @namespace Squarespace
  */
  Y.Squarespace.ContentStringConstants = {
    'text':           Y.Squarespace.ContentConstants.TEXT,
    'image':          Y.Squarespace.ContentConstants.IMAGE,
    'quote':          Y.Squarespace.ContentConstants.QUOTE,
    'gallery':        Y.Squarespace.ContentConstants.GALLERY,
    'link':           Y.Squarespace.ContentConstants.LINK,
    'chat':           Y.Squarespace.ContentConstants.CHAT,
    'audio':          Y.Squarespace.ContentConstants.AUDIO,
    'video':          Y.Squarespace.ContentConstants.VIDEO,
    'review':         Y.Squarespace.ContentConstants.REVIEW,
    'store_item':     Y.Squarespace.ContentConstants.STORE_ITEM,
    'event':          Y.Squarespace.ContentConstants.EVENT,
    'thread':         Y.Squarespace.ContentConstants.THREAD,
    'tweet':          Y.Squarespace.ContentConstants.TWEET,
    'rss':            Y.Squarespace.ContentConstants.RSS,
    'geo':            Y.Squarespace.ContentConstants.CHECKIN,
    'delicious':      Y.Squarespace.ContentConstants.DELICIOUS,
    'kbarticle':        Y.Squarespace.ContentConstants.KBARTICLE
  };

  /**
    Strings for the Content Constants (a revesre lookup?)
    @property ContentConstantsString
    @namespace Squarespace
  */
  Y.Squarespace.ContentConstantsString = {};
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.TEXT] = 'text';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.IMAGE] = 'image';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.QUOTE] = 'quote';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.LINK] = 'link';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.CHAT] = 'chat';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.AUDIO] = 'audio';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.VIDEO] = 'video';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.REVIEW] = 'review';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.STORE_ITEM] = 'store_item';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.EVENT] = 'event';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.THREAD] = 'thread';
  Y.Squarespace.ContentConstantsString[Y.Squarespace.ContentConstants.GALLERY] = 'gallery';

  Y.Squarespace.ProductTypes = {
    PHYSICAL: 1,
    DIGITAL: 2,
    SERVICE: 3
  };

  Y.Squarespace.StoreStates = {
    LIVE : 1,
    TEST_MODE  : 2,
    NOT_CONNECTED : 3
  };

  Y.Squarespace.Variants = {
    SystemAttributes : [
      'sku', 'onSale', 'price', 'qtyInStock', 'salePrice', 'unlimited', 'dimensions', 'weight', 'length', 'width', 'height'
    ]
  };

  Y.Squarespace.PlanIds = {
    DOMAIN: 'domain',
    STANDARD: 'std',
    UNLIMITED: 'unltd',
    BUSINESS: 'bsnss'
  };

  // Restricting customer regions (currently only within USA)
  Y.Squarespace.RegionPolicies = {
    ALL_USA:         { value: 1, title: "Entire United States"},
    ONLY_CONTIGUOUS: { value: 2, title: "Only Contiguous 48 States" },
    INTERNATIONAL:   { value: 3, title: "International"}
  };

  Y.Squarespace.ChildGroups = {
    GENERIC:           null,
    DIGITAL_GOODS:    'digitalGoods'
  };

  /**
    File type constants
    @property FileTypes
    @namespace Squarespace
  */
  Y.Squarespace.FileTypes = {

    IMAGE:    1,
    AUDIO:    2,
    VIDEO:    3,
    DOCUMENT: 4,
    BINARY:   5

  };

  /**
     Job Message severity levels
     @property MessageLevels
     @namespace Squarespace
   */
  Y.Squarespace.MessageLevels = {
    TRACE:        1,
    DEBUG:        2,
    INFO:         3,
    WARN:         4,
    ERROR:        5
  };

  /**
    Collection type constants
    @property CollectionTypes
    @namespace Squarespace
  */
  Y.Squarespace.CollectionTypes = {

    GENERIC:          1,
    SUBSCRIPTION:     2,
    TWITTER:          3,
    FOURSQUARE:       4,
    INSTAGRAM:        5,
    GALLERY_BLOCK:    6,
    TEMPLATE_PAGE:    7,
    SPLASH_PAGE:      8,
    PAGE:             10,
    FIVEHUNDREDPIX:   11,
    FLICKR:           12,
    PRODUCT:          13,
    MOSAIC:           14

  };

  /*
   * global: Used by avatar, it creates a GlobalContentItem on the server.
   * transient: Used by ContentCollection.mainImage and Image Blocks. These don't belong to a collection
   * child: Used by the gallery post type, creates an item, but stores it with a parentItem.
   * item: This is the default mode.
   */
  Y.Squarespace.UploadModes = {
    TRANSIENT: 'transient',
    GLOBAL: 'global',
    CHILD: 'child',
    ITEM: 'item'
  };

  /**
    Constant that controls the max length of some
    user input
    @property  MaxTagLength
    @namespace Squarespace
   */
  Y.Squarespace.MaxTagLength = 50;

  /**
    Constant that controls the max length of some
    user input
    @property  MaxCategoryLength
    @namespace Squarespace
  */
  Y.Squarespace.MaxCategoryLength = 25;

  Y.Squarespace.WidgetTypesByString = {};
  for (var widgetType in Y.Squarespace.WidgetTypes) {
    Y.Squarespace.WidgetTypesByString[Y.Squarespace.WidgetTypes[widgetType]] = widgetType;
  }

  /**
    Collection sync status constants
    @property CollectionSyncStatus
    @namespace Squarespace
  */
  Y.Squarespace.CollectionSyncStatus = {

      PENDING:    'pending',
      SYNCED:     'synced'

  };

  /**
    Collection views constants
    @property CollectionView
    @namespace Squarespace
  */
  Y.Squarespace.CollectionView = {

    LIST:          'list',
    GRID:          'grid',
    PRODUCT:       'product'

  };

  /**
    Domain Status
    @property  DomainStatus
    @namespace Squarespace
  */
  Y.Squarespace.DomainStatus = {

    OK_V5:                     1,
    OK_V6:                     2,
    BAD_DOMAIN:                3,
    NOT_REGISTERED:            4,
    V5_V6_CONFLICT:            5,
    NEED_A_RECORD_ON_TLD:      6,
    NEED_CNAME_RECORD_ON_WWW:  7,
    BAD_MX_DETECTED:           8,
    CHECK_FAILED:              9,
    V6_CNAMED:                10

  };

  /**
    Coupon Types
    @property CommerceCouponTypes
    @namespace Squarespace
  */
  Y.Squarespace.CommerceCouponTypes = {
      ALL_ORDERS:      1,
      ORDERS_OVER:     2,
      CATEGORIES:      3,
      SINGLE_PRODUCT:  4
  };

  /**
    Discount types for coupons
    @property CommerceDiscountTypes
    @namespace Squarespace
  */
  Y.Squarespace.CommerceDiscountTypes = {
    FLAT:           1,
    PERCENTAGE:     2,
    FREE_SHIPPING:  3
  };

  /**
    Facebook Extended Permissions required
    @property  FacebookExtendedPermissions
    @namespace Squarespace
  */
  Y.Squarespace.FacebookExtendedPermissions = "user_checkins,offline_access,manage_pages,publish_stream";

  /**
    Magic password field value, used when a field has a password but
    we never use the real value. Server have the same constant to identify
    if value has changed or not.
    Not the most elegant approach, would be better to have some some more
    functionallity to identify a change then using constants.
  */
  Y.Squarespace.PasswordMask = '__MASKED_FIELD__';

  /**
    System-wide events.
    @property  Events
    @namespace Squarespace
  */
  Y.Squarespace.Events = {
    VIEW:                "View",
    LIKE:                "Like",
    SHARE:               "Share",
    CART_ADD:            "Cart Add",
    CHECKOUT_STARTED:    "Checkout Started",
    CHECKOUT_COMPLETED:  "Checkout Completed"
  };

  Y.Squarespace.REST_API_ROOT = "/api/rest/";

  /**
    Gallery Options
    Used to generate predicates & by the dialog.
    @property  GalleryOptions
    @namespace Squarespace

    @caution minor gotcha ahead
    Actual DF usage of this configuration is updated to a new-style select
    later by the module that consumes these options. Also, if we convert this to
    the new style, then we create a circular dependency between utils and df2.
    and then we have to refactor a bunch of code that's currently working
    fine as far as I know - jangel
  */
  Y.Squarespace.GalleryOptions = {
    'design': {
      title: 'Gallery Design',
      description: 'Gallery designs give you a variety of ways to display images.',

      type: 'select',
      defaultValue: 'slideshow',
      options: {
        'slideshow': {
          title: "Slideshow",
          values: {
            thumbnails: true
          }
        },
        'slider': {
          title: "Slider",
          values: {
            thumbnails: false
          }
        },
        'grid': {
          title: "Grid",
          values: {
            thumbnails: false,
            autoplay: false
          }
        },
        'stacked': {
          title: 'Stacked',
          values: {
            thumbnails: false,
            autoplay: false
          }
        }
        /*,
        'autocolumns': {
          title: "Auto Columns",
          values: {
            'autoplay': false,
            'controls': false,
            'indicators': false,
            'auto-crop': true,
            'square-thumbs': false,
            'thumbnails': true,
            'active-alignment': 'center',
            'thumbnails-per-row': 4,
            'padding': 20,
            'lightbox': true,
            'max-width': 30
          }
        },
        'standard': {
          title: "Standard",
          values: {
            'autoplay': false,
            'controls': false,
            'indicators': false,
            'auto-crop': true,
            'square-thumbs': false,
            'thumbnails': true,
            'active-alignment': 'center',
            'thumbnails-per-row': 4,
            'padding': 20,
            'lightbox': false,
            'max-width': 30
          }
        }
        */
      }
    },
    'autoplay': {
      type: 'boolean',
      title: 'Autoplay',
      description: 'Automatically transition to the next slide after a set duration.',
      defaultValue: false,
      onlyFor: [
        'design:slideshow',
        'design:slider',
        'design:standard'
      ]
    },
    'autoplay-duration': {
      type: 'slider',
      title: 'Autoplay Delay (Seconds)',
      description: 'Seconds between autoplay transitions.',
      min: 1,
      max: 10,
      defaultValue: 5,
      onlyFor: [
        'autoplay:true'
      ]
    },

    'controls': {
      type: 'boolean',
      defaultValue: false,
      title: 'Controls',
      description: 'Show the next and previous image controls.',
      onlyFor: [
        'design:slideshow',
        'design:slider',
        'design:standard'
      ]
    },
    'auto-crop': {
      type: 'boolean',
      title: 'Auto Crop',
      defaultValue: true,
      description: 'Auto crop the images.',
      onlyFor: [
        'design:slideshow',
        'design:standard'
      ]
    },
    'square-thumbs': {
      type: 'boolean',
      title: 'Square Thumbnails',
      description: 'Crop images into square thumbnails.',
      defaultValue: false,
      onlyFor: [
        'design:grid',
        'design:standard'
      ]
    },
    'thumbnails': {
      type: 'boolean',
      defaultValue: false,
      title: 'Thumbnails',
      description: 'Show thumbnails.',
      onlyFor: [
        'design:slideshow'
      ]
    },
    'thumbnail-strip-height': {
      type: 'slider',
      title: 'Thumbnail Strip Height',
      description: 'Select the thumbnail strip height.',
      min: 0,
      max: 200,
      defaultValue: 80,
      onlyFor: [
        'thumbnails:true'
      ]
    },
    'thumbnail-strip-margin': {
      type: 'slider',
      title: 'Thumbnail Strip Margin',
      description: 'Select the distance between the main image and the thumbnail strip.',
      min: 0,
      max: 60,
      defaultValue: 20,
      onlyFor: [
        'thumbnails:true'
      ]
    },

    'show-meta': {
      type: 'boolean',
      title: 'Show Title and Description',
      defaultValue: true,
      description: 'Display the title and description.',
      onlyFor: [
        'design:slideshow'
      ]
    },
    'meta-position': {
      title: 'Title and Description Position',
      description: 'Control the location of the Image\'s Title and Description.',
      type: 'select',
      padding: [10, 0],
      defaultValue: 'bottom',
      options: {
        "top": {title: "Top"},
        "top-left": {title: "Top Left"},
        "top-right": {title: "Top Right"},

        "center": {title: "Center"},

        "bottom": {title: "Bottom"},
        "bottom-left": {title: "Bottom Left"},
        "bottom-right": {title: "Bottom Right"}
      },
      onlyFor: [
        "show-meta:true"
      ]
    },
    'show-meta-on-hover': {
      type: 'boolean',
      title: 'Show on Hover',
      defaultValue: false,
      description: 'Show the title and description only on hover.',
      onlyFor: [
        'show-meta:true'
      ]
    },

    'active-alignment': {
      title: 'Active Alignment',
      description: 'Where does the active image align to in the slider.',
      type: 'select',
      defaultValue: 'center',
      options: {
        "left": {title: "Left"},
        "center": {title: "Center"},
        "right": {title: "Right"}
      },
      onlyFor: [
        "design:slider"
      ]
    },
    'thumbnails-per-row': {
      type: 'slider',
      title: 'Thumbnails Per Row',
      description: 'Choose the thumbnails per row.',
      min: 1,
      max: 10,
      defaultValue: 4,
      onlyFor: [
        'design:grid',
        'design:standard'
      ]
    },
    'padding': {
      type: 'slider',
      title: 'Padding',
      description: 'Padding around the gridded images.',
      min: 0,
      max: 50,
      defaultValue: 20,
      onlyFor: [
        'design:grid',
        'design:autocolumns',
        'design:standard'
      ]
    },
    'lightbox': {
      type: 'boolean',
      defaultValue: false,
      title: 'Lightbox',
      description: 'Clicking on the images will pop the image up in a lightbox.',
      onlyFor: [
        "design:grid",
        "design:autocolumns"
      ]
    },
    'max-width': {
      type: 'slider',
      title: 'Max Width',
      description: 'Maximum width for each column',
      min: 100,
      max: 300,
      defaultValue: 300,
      onlyFor: [
        "design:autocolumns"
      ]
    }
  };

  /**
    Returns whether a collection is synchronized
    @method isSynchronizedCollection
    @namespace Squarespace
    @param collection {Collection} The collection to check
    @return {Boolean} If the collection is synchronized
  */
  Y.Squarespace.isSynchronizedCollection = function(collection) {
    if (collection.getType() && collection.getType() >= 50) {
      return true;
    }
    return (collection.getConfiguration()["synchronized"]);
  };

  // -------------------------------------------------------------------------------------------------------------
  // Template Helpers
  // -------------------------------------------------------------------------------------------------------------

  Y.Squarespace.Template = Singleton.create({

    /**
     Utility to get the correct tweakJSON value
    */
    getTweakValue: function(key) {
      if (!!key) {
        return (Static.SQUARESPACE_CONTEXT.tweakJSON[key] || Static.SQUARESPACE_CONTEXT.tweakJSON[key.replace('@','').replace('.','')]);
      }
    }

  });

  /**
    A haphazard collection of utility functions
    @class Utils
    @static
    @namespace Squarespace
  */
  Y.Squarespace.Utils = {

    /**
      Give this a region (Y.Node.getRegion), and it'll draw it
    */
    drawRegion: function(region) {
      var regionEl = Y.one('.sqs-draw-region');
      if (!regionEl) {
        regionEl = Y.Node.create('<div class="sqs-draw-region" style="background:rgba(255,0,0,0.5);display:block;"></div>');
        Y.one('body').appendChild(regionEl);
      }

      if (region.hasOwnProperty('x') && region.x !== region.left) {
        console.warn('x and left do not match (x: ' + region.x + ', left: ' + region.left + ').');
      }

      if (region.hasOwnProperty('y') && region.y !== region.top) {
        console.warn('y and top do not match (y: ' + region.y + ', top: ' + region.top + ').');
      }

      if ((region.bottom - region.top) !== region.height) {
        console.warn('top -> bottom distance do not match height (diff: ' + (region.bottom - region.top) + ', height: ' + region.height + ').');
      }

      if ((region.right - region.left) !== region.width) {
        console.warn('left -> right distance do not match width  (diff: ' + (region.right - region.left) + ', width: ' + region.width + ').');
      }

      regionEl.setStyles({
        position: 'fixed',
        top: region.top,
        left: region.left,

        width: region.width,
        height: region.height,

        zIndex: Math.pow(10, 6)
      });
    },

    /*
     * Sign out of Squarespace.
     */
    logout: function() {

      if (this.LOGGING_OUT || !Static.SQUARESPACE_CONTEXT.authenticatedAccount) {
        return;
      }

      this.LOGGING_OUT = true;

      Y.Data.post({
        url: '/api/auth/Logout',
        secure: true,
        success: function(data) {

          // fire global event
          Y.Global.fire("squarespace:logout");

          // notify and bounce off of https
          document.location.href = "http://" + document.location.host + "/?logout=true";
          this.LOGGING_OUT = false;

        }
      }, this);

    },

    /*
     * Generate Bookmaklet Url
     */
    getBookmarkletUrl: function(collection) {
      /*jshint scripturl:true*/
      var bookmarkletUrl =
        // this has not been URL encoded, aside from a few
        // chars that HAD to be escaped for the code to work
        "javascript:(function () {" +
          // build data we might need in bookmarklet.js
          "var%20d = document," + // damn that space between
          "w       = window," +
          "ud      = 'https://" + Static.SQUARESPACE_CONTEXT.website.identifier + "." + Static.SQUARESPACE_CONTEXT.appDomain + "'," +
          "s       = '/sharer'," +
          "l       = d.location," +
          "ph      = 612," +
          "pw      = 800," +
          "cid     = '" + collection.get('id') + "'," +
          "mid     = '" + Static.SQUARESPACE_CONTEXT.authenticatedAccount.id + "'," +
          "e       = encodeURIComponent," +
          "p       = '?src=bm&v=2&u='+e(l.href)+'&t='+e(d.title)+'&cid='+e(cid)+'&mid='+e(mid);" +

          // Try to get the selection
          "try {" +
            "sel = ((w.getSelection && w.getSelection()) ||" +
                  "(d.getSelection && d.getSelection()) ||" +
                  "(d.selection && d.selection.createRange && d.selection.createRange().text));" +
          "}" +
          // access denied on https sites
          "catch(e){" +
            "sel = '';" +
          "}" +
          "p += '&sel='+e(sel);" +

          // FF hax (put it in a function to run 'later' if firefox)
          "a = function () {" +
            // popup window specs are here
            "if (!window.open(ud + s +p, 'sharer', 'status=0,resizable=0,width='+pw+',height='+ph+',top='+parseInt(((screen.height/2)-(ph/2))*.4)+',left='+((screen.width/2)-(pw/2))+',location=0,scrollbars=0,titlebar=0,toolbar=0')) {" +
              "l.href = ud + s + p;" +
            "}" +
          "};" +
          "if (/Firefox/.test(navigator.userAgent)) {" +
            "setTimeout(a, 0);" +
          "}" +
          "else {" +
            "a();" +
          "}" +
        "})();" +
        // void(0) returns undefined, ensuring overall execution
        // is falsy, preventing nav stuff
        "void(0);";
      /*jshint scripturl:false*/

      // remove readability spaces
      return bookmarkletUrl.replace(/\s/g, '');
    },

    /**
      Measures the size of a node, which may or may not be in the DOM. This method
      is capable of finding the size a node will be once its in the dom, without
      affecting the current flow of the document
      @method measureNode
      @return Object An object with height and width properties
    */
    measureNode: function(node) {

      var inFlow = node.inDoc();

      // how was this working before?
      // node = node.cloneNode(true);

      // original node must be in the dom for this
      // to work
      if (!inFlow) {
        node.setStyle('visibility', 'hidden');
        Y.one('body').appendChild(node);
      }

      // measure an absolute copy
      var proxy = node.cloneNode(true);
      proxy.setStyles({
        'visibility': 'hidden',
        'display'   : 'block',
        'position'  : 'absolute'
      });
      node.insert(proxy, 'after');

      var height = proxy.get("offsetHeight"),
          width  = proxy.get("offsetWidth");

      proxy.remove(true);

      // remove the node if we added it to the dom
      if (!inFlow) {
        node.remove();
        node.setStyle('visibility', null);
      }

      return {
        height: height,
        width : width
      };

    },

    /**
     * Utility to Lightbox an asset
     * @param objectId {String} The objectId of the ContentItem
     */
    lightboxAsset: function(objectId) {
      Y.Data.get({
        url: '/api/commondata/GetItem',
        data: {
          itemId: objectId
        },
        success: function(response) {

          Y.use('squarespace-gallery-ng', function(Y) {
            (new Y.Squarespace.Lightbox2({
              content: Y.Node.create('<img data-image="' + response.item.assetUrl + '" data-image-dimensions="' + response.item.originalSize + '" />')
            })).render();
          });

        }
      });
    },

    /**
      Reverse the keys and values of an object.
      @method reverseMap
      @param obj {Object} The Object to reverse.
      @return A new Object with the keys and values reversed.
    */
    reverseMap: function(obj) {
      return Y.Array.hash(Y.Object.values(obj), Y.Object.keys(obj));
    },

    /**
      Pre-processing for our super spcial flavor of markdown, mostly for comments.
      @method preFormatMarkdown
      @param body { String } Input text
      @return String ready to be parsed into markdown.
    */
    preFormatMarkdown: function(body) {

      // \n -> <br />
      // \n\n -> \n\n
      var format = function(n, i, arr) {

        if(n === '\n' && arr[i-1] !== '\n' && arr[i+1] !== '\n') {
          return '<br />';
        } else {
          return n;
        }
      };
      if(!body) {
        return '';
      } else {
        return Y.Array.map(body.split(''), format).join('');
      }
    },


    /**
      Returns true if the current user has the specified AccessPermission
      @method userHasAccessPermission
      @param permissions {[AccessPermission]}
    */
    userHasAccessPermission: function(permission) {
      if (!Static.SQUARESPACE_CONTEXT.accessPermissions) {
        return false;
      }
      return Y.Array.indexOf(Static.SQUARESPACE_CONTEXT.accessPermissions, permission) >= 0;
    },

    /**
      Returns true if the current has Squarespace administration access (Employee only)
      @method isSquarespaceAdmin
    */
    isSquarespaceAdmin: function() {
      return this.userHasAccessPermission(Y.Squarespace.AccessPermissions.ADMIN);
    },

    /**
      Creates a URL/classname/id friendly version of a string.
      This is a convenience wrapper around the createUrl function
      @method slugify
      @param string {String} The string to convert
      @return {String} The slug
    */
    slugify: function(string) { return this.createUrl(string); },

    /**
      Creates a properly encoded URL string
      @method createUrl
      @param val {String} What to url encode
      @param suffix {String} An extension to append to the url (optional)
      @param useDate {Boolean} Set to true to prepend a date to the url (optional)
      @return {String} The url encoded value
    */
    createUrl: function(val, suffix, useDate) {

      var v = val;

      if (suffix) { v += suffix; }
      if (useDate) { v = Y.Squarespace.Utils.dateFormat(useDate, { format: "%m/%d/%y" }) + "/" + v; }

      v = v.replace(/\//g, "");
      return this.createUrlWithSlash(v);

    },

    createUrlWithSlash: function(val) {
      val = val.trim()
        .replace(new RegExp("[ ]+", "g"), " ")
        .replace(new RegExp("[ ]", "g"), "-")
        .replace(new RegExp("[^a-zA-Z0-9/\\-]", "g"), "")
        .replace(new RegExp("[\\.\\-]{2,}", "g"), "-")
        .replace(new RegExp("[\\.\\/]{2,}", "g"), "/")
        .toLowerCase();

        return val;
    },

    /**
      Randomly generates a GUID
      @method getGuid
      @return {String} A GUID
    */
    getGuid: function() {

      /*jshint bitwise:false */
      var S4 = function() {
         return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
      };
      /*jshint bitwise:true */

      return S4()+S4()+S4()+S4()+S4();

    },

    /**
      Generate a random int suitable for use as a
      request argument for cache busting
      @method getRandomRev
      @return {int} An 8 digit random value
    */
    getRandomRev: function() {
      return Math.floor(Math.random() * 99999999 + 1);
    },

    /**
      Extracts the domain from a url.
      @method getDomainFromUrl
      @param url {String} The url to extract from
      @return {String} The domain
    */
    getDomainFromUrl: function(url) {

      return url.match(/:\/\/(www\.)?(.[^\/:]+)/)[2];

    },

    /**
      Converts a relative URL into an absolute URL
      @method makeRelativeUrlAbsolute
      @param url {String} URL to convert
      @return {String} The absolute form of the passed in url
    */
    makeRelativeUrlAbsolute: function(url) {

      if (url.indexOf("/") === 0) {
        var docpath = document.location.href;
        if (docpath.indexOf("http://") === 0) {
          return docpath.substring(0, docpath.indexOf("/", 8)) + url;
        }
        if (docpath.indexOf("https://") === 0) {
          return docpath.substring(0, docpath.indexOf("/", 9)) + url;
        }
      }

      return url;

    },

    /**
      Converts all dates into a human readable format
      Operates in conjunction with JSON-Template formatter "timesince"
      @method humanizeAllDates
      @param className {String} The class of the elements containing the dates to convert
    */
    humanizeAllDates: function(className) {


      Y.all(className).each(function(n) {

        var d = parseInt(n.getAttribute("data-date"), 10);
        if (!d) {
          console.warn("Invalid date on node: ", n);
          return;
        }

        n.set("innerHTML", Y.Squarespace.Utils.humanizeDate(d));

      });

      Y.later(3000, this, Y.Squarespace.Utils.humanizeAllDates, className);

    },

    /**
      Converts a date into a humman readable format.
      @method humanizeDate
      @param d {Date|String|Integer} The date to convert
      @return {String} Humanized timestamp string (e.g. "less than a minute ago", or "5 years ago")
    */
    humanizeDate: function(d, showSeconds) {

      if (d instanceof Date) {
        d = d.getTime();
      }

      var t = parseInt(new Date().getTime() - parseInt(d, 10), 10) + (new Date().getTimezoneOffset()*60), fv;

      var years   = Math.floor(t / (1000 * 60 * 60 * 24 * 365));
      var months  = Math.floor(t / (1000 * 60 * 60 * 24 * 30));
      var weeks   = Math.floor(t / (1000 * 60 * 60 * 24 * 7));
      var days    = Math.floor(t / (1000 * 60 * 60 * 24));
      var hours   = Math.floor(t / (1000 * 60 * 60));
      var minutes = Math.floor(t / (1000 * 60));
      var seconds = Math.floor(t / (1000));

      var plur = function(c, l) {
        return "about " + (c == 1 ? ((l === "hour" ? "an " : "a ") + l) : (c + " " + l + "s")) + " ago";
      };

      if (years > 0) { fv = plur(years, "year"); }
      else if (months > 0) { fv = plur(months, "month"); }
      else if (weeks > 0) { fv = plur(weeks, "week"); }
      else if (days > 0) { fv = plur(days, "day"); }
      else if (hours > 0) { fv = plur(hours, "hour"); }
      else if (minutes > 0) { fv = plur(minutes, "minute"); }
      else if (showSeconds) { fv = plur(seconds, "second"); }
      else { fv = "less than a minute ago"; }

      return fv;

    },

    /*
     * time is in MS
     */
    humanizeDuration: function(time) {
      var timeInSec         = Math.round(time / 1000);
      var minutesPart       = Math.floor(timeInSec / 60);
      var secondsPart       = timeInSec - minutesPart * 60;
      var secondsPartString = (secondsPart < 10 ? '0' : '') + secondsPart;
      return minutesPart + ':' + secondsPartString;
    },

    /**
       Wrapper function arount YUI DataType.Date format function
       This function adjust the oDate to the timezone set in settings

       This looks complicated ... and it is a bit complicated. The root cause is
       that from javascript you can't render a date in an arbitrary TimeZone, only
       the browsers timezone.

       The basic operation is to remove the browsers timeZone offset and add
       the websites timezone, this will shift the time so that is looks like
       website timezone.

       Unfortunatly this breaks when we have future and past date that is in
       a different Daylight Time Saving period then now. So there is some extra
       logic to identify that and compensate.

       This is still not perfect since daylight saving starts at different times
       in diffenent timezones. Just from javascript it's imposible to know when
       it starts in an arbitrary TimeZone. So if the browser is locale America/New York
       and the site is set to locale Europe/London then this will be wrong for 2
       weeks when US has DST and UK have not yet moved over :(

       @method dateFormat
    */
    dateFormat: function(oDate, oConfig) {

      if (!oDate) {
        oDate = new Date();
      } else if (!Y.Lang.isDate(oDate) && Y.Lang.isNumber(oDate)) {
        oDate = new Date(oDate);
      } else if (isNaN(oDate.getTime())) {
        return 'Invalid Date';
      }

      // Copy the Date into new Object
      // DO NOT mutate original Date object -- causes bugs
      // where it needs the actual epoch time elsewhere (such as when saving dates)
      oDate = new Date(oDate.getTime());
      if (!Static.SQUARESPACE_CONTEXT.website.timeZoneOffset) {
        console.warn("No website timezone set.  Dates are in GMT.");
      } else {
        var offsetToSiteTimezone = Y.Squarespace.Utils.getTimeOffsetToWebsiteTimezone(oDate);
        oDate.setMinutes(oDate.getMinutes() + offsetToSiteTimezone);
      }
      return Y.DataType.Date.format(oDate, oConfig);
    },

    /**
     * Helper method to calculate the browsers offset to the website
     * timezone for a specific time.
     *
     * not perfect since daylight saving starts at different times
     * in diffenent timezones. Just from javascript it's imposible to know when
     * it starts in an arbitrary TimeZone. So if the browser is locale America/New York
     * and the site is set to locale Europe/London then this will be wrong for 2
     * weeks when US has DST and UK have not yet moved over :(
     */
    getTimeOffsetToWebsiteTimezone: function(time) {
      if (!Y.Lang.isDate(time)) {
        if (Y.Lang.isNumber(time)) {
          time = new Date(time);
        } else {
          throw 'Invalid argument';
        }
      }
      var now = new Date();
      var offsetToSiteTimezone = time.getTimezoneOffset() + parseInt(Static.SQUARESPACE_CONTEXT.website.timeZoneOffset, 10)/60000;
      if (time.isDST() && !now.isDST()) {
        offsetToSiteTimezone += time.stdTimezoneOffset() - time.getTimezoneOffset();
      } else if (!time.isDST() && now.isDST()) {
        offsetToSiteTimezone -= now.stdTimezoneOffset() - now.getTimezoneOffset();
      }
      return offsetToSiteTimezone;
    },

    /**
     * Calculate number of days (as in date day) it is between two dates.
     */
    calculateFullDayOffset: function(date1, date2) {
      var date1Year = parseInt(Y.Squarespace.Utils.dateFormat(date1, {format: '%Y'}), 10);
      var date2Year = parseInt(Y.Squarespace.Utils.dateFormat(date2, {format: '%Y'}), 10);

      var date1DayOfYear = parseInt(Y.Squarespace.Utils.dateFormat(date1, {format: '%j'}), 10);
      var date2DayOfYear = parseInt(Y.Squarespace.Utils.dateFormat(date2, {format: '%j'}), 10);

      // 365 is not always correct but an approximation :/
      // TODO fix leap year
      return (date2DayOfYear - date1DayOfYear) + (date2Year - date1Year) * 365;
    },


    humanizeBinarySize: function(bits) {
      if (bits < 1000)
        return "~1KB";
      else if (bits < 1000000)
        return (bits / 1000).toFixed(0) + 'KB';
      else return (bits / 1000000).toFixed(0) + 'MB';
    },

    /**
     Gives us cents as a number
    */
    convertToCents: function(dollars) {
      var dollarsString = String(dollars).replace(/[^\d\.]/g,'');

      if (dollarsString === '') {
        return 0;
      }

      var moneyArray = dollarsString.split('.');
      var moneyString = moneyArray[0];
      var cents;

      if (moneyArray.length>1) {
        moneyString += '.' + moneyArray[1].substr(0,2);
      }

      cents = Math.round ( parseFloat(moneyString, 10) * 100 );

      return cents;
    },


    /**
     Takes a variant and generates a descriptor string (e.g. "Small / Red / Cotton")
    */
    variantFormat: function(variant) {
      var visibleAttrs = [];
      for (var attr in variant) {

        if (Y.Squarespace.Variants.SystemAttributes.indexOf(attr) == -1 && (typeof variant[attr] != "object"))
          visibleAttrs.push(variant[attr]);
      }
      return visibleAttrs.join(" / ");
    },

    /**
      Gives the names of the visible attrs (e.g. "Color / Size")
    */
    variantFormatAttributes: function(variant) {
      var visibleAttrs = [];
      for (var attr in variant) {

        if (Y.Squarespace.Variants.SystemAttributes.indexOf(attr) == -1 && (typeof variant[attr] != "object"))
          visibleAttrs.push(attr);
      }
      return visibleAttrs.join(" / ");
    },

    /**
      Checks if the browser is a supported browser or not. This is a client side check. There is also a server side check.
      Before the server set a value in static context, problem with this is that this was cached between browsers.
      @method getVideoHTML
      @return {boolean}
    */
    advancedBrowserCheck: function() {
      return !Y.UA.ie || Y.UA.ie >= 9;
    },

    /**
      Simple check to see if it is production or not
      Should be done in a more stable way if server pass down specific data.
      @method isProductionEnvironment
    */
    isProductionEnvironment: function() {
      if (
        Static.SQUARESPACE_CONTEXT.appDomain &&
        (Static.SQUARESPACE_CONTEXT.appDomain.indexOf("sqsp.com") != -1 || Static.SQUARESPACE_CONTEXT.appDomain.indexOf("squarespace.com") != -1)
      ) {
        return true;
      }

      return false;
    },

    /**
      Convenient method to check if beta features should be enabled or not.
      @method isBetaFeatureEnabled
    */
    isBetaFeatureEnabled: function() {
      var betaFeatureActive = Y.Cookie.get("betaFeatureActive");
      // any reason this couldn't just be? -jangel
      // return (betaFeatureActive !== "false") ? Y.Squarespace.Utils.isSquarespaceAdmin() : false;
      if (betaFeatureActive !== "false") {
        betaFeatureActive = true; // default to on
      } else {
        betaFeatureActive = false;
      }
      if (!betaFeatureActive) {
        return false;
      }

      return Y.Squarespace.Utils.isSquarespaceAdmin();
    },

    /**
      Simple method to check if cookies are turned off
      in the browser
      @method areCookiesEnabled
    */
    areCookiesEnabled: function() {
      if (Y.Lang.isUndefined(this._cookiesEnabled)) {
        var testCookieName = 'pWVMhBGAwMLSLoNIGdAn';
        Y.Cookie.set(testCookieName, true);
        this._cookiesEnabled = !!Y.Cookie.get(testCookieName);
      }
      return this._cookiesEnabled;
    },

    areRealTimeRatesEnabled: function() {
      return Y.Squarespace.Utils.isBetaFeatureEnabled();
    },

    areServiceProductsAndProductFormsEnabled: function() {
      var IDENTIFIER_WHITE_LIST = [
        'lukes-lobster',
        'chris-owens',
        'tanmanphotography',
        'roberto-saldivar',
        'mark-lynch-03cg',
        'darren-freak',
        'orla-sheridan-s51s',
        'joanna-breugem',
        'nabtest',
        'miamidistrict',
        'tiara-cloud-xj5c',
        'clsacc-trial-1',
        'luke-rutherford-qsqc',
        'liana-delaurent-koa6',
        'alix-filer-hkm1',
        'morning-star-ldzi',
        'julie-mcbarron',
        'computational-thinkers',
        'cory-parker',
        'amy-monroe',
        'laprosette',
        'paul-gorman',
        'swann-cardot-q7hx',
        'jonathan-delarosa',
        'jason-james-886j',
        'filomena-tasoluk',
        'roberto-saldivar-didy',
        'mycheckengine',
        'thomas-hoover',
        'val-wright',
        'elitetravive',
        'jay-parkin-h8y1',
        'ysu',
        'andrew-hunt-l612',
        'justin-sutter-9lxk',
        'beer-dreamer'
      ];

      return Y.Squarespace.Utils.isBetaFeatureEnabled() ||
             IDENTIFIER_WHITE_LIST.indexOf(Static.SQUARESPACE_CONTEXT.website.identifier) !== -1;
    },

    isNewslettersEnabled: function() {
      if (Static.SQUARESPACE_CONTEXT.websiteSettings.newslettersEnabled) {
        // double protecting this so only specific websites and peple that have
        // access to beta features can see this
        if (this.isBetaFeatureEnabled()) {
          return true;
        }
      }
      return false;
    },

    isSmugMugEnabled: function() {
      // TODO: Fully remove this upon sniffing around the code some more....
      return true;
    },

    /**
      Uses all available contexts to attempt to resolve an item,
      @method findItemById
    */
    findItemById: function(id) {
      if (Static.SQUARESPACE_CONTEXT.item && Static.SQUARESPACE_CONTEXT.item.id == id) {
        return Static.SQUARESPACE_CONTEXT.item;
      }
      if (Static.SQUARESPACE_CONTEXT.itemsById) {
        return Static.SQUARESPACE_CONTEXT.itemsById[id];
      }
      return null;
    },

    isSystemVariantOption: function(optionName) {
      return (Y.Squarespace.Variants.SystemAttributes.indexOf(optionName) !== -1);
    },

    isInIframe: function() {
      return window.top !== window.self;
    }

  };

  // ------------------------------------------------------------------------------------------------
  // Images
  // ------------------------------------------------------------------------------------------------
  /**
    A collection of rendering functions, mainly for images
    @class Rendering
    @static
    @namespace Squarespace
  */
  Y.Squarespace.Rendering = {

    getWidthForHeight: function(oWidth, oHeight, height) {
      return ( oWidth / oHeight ) * height;
    },

    getHeightForWidth: function(oWidth, oHeight, width) {
      return ( oHeight / oWidth ) * width;
    },

    getDimensionsFromNode: function(node) {
      var val = node.getAttribute('data-image-dimensions');

      if (!val) {
        return {
          width: null,
          height: null
        };
      } else if (Y.Lang.isString(val)) {
        val = val.split('x');
        return {
          width : parseInt(val[0], 10),
          height: parseInt(val[1], 10)
        };
      }
    },

    getSquarespaceSizeForWidth: function(width) {

      // if( width > 1500 ) {
      //  return "original";
      // } else
      if (width > 1000) {
        return "1500w";
      } else if (width > 750) {
        return "1000w";
      } else if (width > 500) {
        return "750w";
      } else if (width > 300) {
        return "500w";
      } else if (width > 100) {
        return "300w";
      } else {
        return "100w";
      }

    },

    splitScriptsAndHTML: function(html) {

      var SCRIPT_START_TAG = "<script>";
      var SCRIPT_END_TAG = "</script>";

      var sidx = html.indexOf(SCRIPT_START_TAG), eidx = -1;
      var cleanHTML = "";
      var script = "";
      var cidx = 0;

      while (1) {

        eidx = html.indexOf(SCRIPT_END_TAG, cidx);

        // can't find end -- give up
        if (eidx == -1 || sidx == -1) {
          return { html: html, script: '' };
        }

        // save script
        var scriptFrag = html.substring(sidx + SCRIPT_START_TAG.length, eidx);
        script += scriptFrag;

        // save cleaned html
        cleanHTML += html.substring(cidx, sidx);
        cidx = eidx + SCRIPT_END_TAG.length;

        // next tag
        sidx = html.indexOf(SCRIPT_START_TAG, cidx);
        if (sidx == -1) {
          if (script.length == 0) {
            script = null;
          }
          cleanHTML += html.substring(cidx);
          return { html: cleanHTML, script: script };
        }

      }

    },

    getPixelSize: function(input, dimension) {
      var _input = input.split('x');
      return parseInt(_input[0], 10) * parseInt(_input[1], 10);
    },

    scaleEmbed: function(embed, newWidth) {

      var h = new RegExp("height=\"([0-9]+)\"").exec(embed);
      if (!h) { return embed; }
      h = parseInt(h[1], 10);

      var w = new RegExp("width=\"([0-9]+)\"").exec(embed);
      if (!w) { return embed; }
      w = parseInt(w[1], 10);

      var r = (newWidth/w);
      var newHeight = h * r;

      return embed.replace(new RegExp("height=\"([0-9]+)\""), "height=\"" + newHeight + "\"").replace(new RegExp("width=\"([0-9]+)\""), "width=\"" + newWidth + "\"");

    },

    createGrayscaleMap: function(map) {

      map.mapTypes.set('custom', new google.maps.StyledMapType([
        {
          featureType: "landscape.man_made",
          elementType: "all",
          stylers: [
            { lightness: 51 }
          ]
        },{
          featureType: "poi",
          elementType: "all",
          stylers: [
            { visibility: "off" }
          ]
        },{
          featureType: "road.local",
          elementType: "all",
          stylers: [
            { gamma: 2.51 }
          ]
        },{
          featureType: "road.arterial",
          elementType: "all",
          stylers: [
            { gamma: 1.9 }
          ]
        },{
          featureType: "water",
          elementType: "all",
          stylers: [
            { gamma: 1.36 }
          ]
        },{
          featureType: "road.highway",
          elementType: "all",
          stylers: [
            { gamma: 1.33 }
          ]
        },{
          featureType: "transit.station.rail",
          elementType: "all",
          stylers: [
            { visibility: "simplified" }
          ]
        },{
          featureType: "transit.station.bus",
          elementType: "all",
          stylers: [
            { visibility: "simplified" }
          ]
        },{
          featureType: "transit",
          elementType: "all",
          stylers: [
            { gamma: 1.2 },
            { hue: "#0033ff" }
          ]
        },{
          featureType: "administrative.neighborhood",
          elementType: "labels",
          stylers: [
            { gamma: 1.43 }
          ]
        },{
          featureType: "water",
          elementType: "all",
          stylers: [
            { lightness: -47 }
          ]
        },{
          featureType: "all",
          elementType: "all",
          stylers: [
            { saturation: -100 }
          ]
        },{
          featureType: "road.arterial",
          elementType: "labels",
          stylers: [
            { lightness: 23 }
          ]
        }
      ], { name: "Custom" }));

      map.setMapTypeId('custom');

    },

    getIconUrl: function(name, size, style) {
      return '/universal/images-v6/icons/icon-' + name + '-' + size + '-' + style + '.png';
    },

    onMapConfigure: function(n) {
      n = Y.one(n);

      if (!n) { return; }

      var layout_data = n.getAncestorData("layout-engine"),
          manager_data = n.getAncestorData("manager");

      if (!layout_data) { return; }
      if (!manager_data) { return; }

      layout_data.lm.configureBlock(null, manager_data.boundingEl);
    },

    renderMap: function(contentEl, value) {
      value = Y.merge({
        location: {
          mapLat: 40.720882,
          mapLng: -74.000988,
          mapZoom: 12
        },
        vSize: 12
      }, value);

      if (!contentEl) {
        console.error("Page map node missing...");
        return;
      }

      var node = contentEl._node; // unbox

      if (node.__map) {
        google.maps.event.trigger(node.__map, 'resize');
      } else {
        contentEl.addClass("page-map");
        contentEl.set("innerHTML", "&nbsp;");

        var doDraw = Y.bind(function() {
          var isEditable = Y.one('body').hasClass("squarespace-editable") ? false : true;
          node.__geocoder = new google.maps.Geocoder();

          node.__map = new google.maps.Map(node, {
            zoom: value.location.mapZoom,
            center: new google.maps.LatLng(value.location.mapLat, value.location.mapLng),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            draggable: isEditable,
            scrollwheel: isEditable,
            disableDefaultUI: !isEditable
          });

          Y.Squarespace.Rendering.createGrayscaleMap(node.__map);

          var vLoc = value.location;
          var address;
          if (vLoc.addressLine1 || vLoc.addressLine2) {
            address = vLoc.addressLine1 + " " + vLoc.addressLine2;
            if (vLoc.addressCountry) {
              address += ", " + vLoc.addressCountry;
            }
          } else {
            address = value.location.mapLat + "," + value.location.mapLng;
          }
          if (vLoc.addressTitle) {
            address = vLoc.addressTitle + " " + address;
          }

          if (value.location.markerLat && value.location.markerLng) {
            var loc = new google.maps.LatLng(value.location.markerLat, value.location.markerLng);
            node.__marker = new google.maps.Marker({
              map: node.__map,
              animation: google.maps.Animation.DROP,
              draggable: isEditable,
              position: loc,
              title: address
            });

            google.maps.event.addListener(node.__marker, 'click', Y.bind(function(loc, map) {
              var loc = loc.toUrlValue();
              var zoom = map.getZoom();
              var queryString = Y.QueryString.stringify({
                sll: loc,
                q: address,
                z: zoom
              });

              window.open("http://maps.google.com/maps?" + queryString);
            }, this, loc, node.__map));
          }

          node.startEditing = function() {
            node.__map.setOptions({
              draggable: true,
              scrollwheel: true,
              disableDefaultUI: false
            });
            if (node.__marker) {
              node.__marker.setOptions({draggable: true});
            }
          };

          node.stopEditing = function() {
            node.__map.setOptions({
              draggable: false,
              scrollwheel: false,
              disableDefaultUI: true
            });
            if (node.__marker) {
              node.__marker.setOptions({draggable: false});
            }
          };

          Y.one(node).fire('maps-loaded');
          google.maps.event.addListener(node.__map, 'rightclick', Y.bind(this.onMapConfigure, this, node));
        }, this);

        if (!Y.Squarespace.GoogleMap.loaded) {
          node.__loadingMap = true;
          Y.Squarespace.GoogleMap.on('load-success', function() {
            node.__loadingMap = false;
            doDraw();
          });
          Y.Squarespace.GoogleMap.load();
        }
        else {
          doDraw();
        }
      }

    }

  };

  // ------------------------------------------------------------------------------------------------
  // Email utils
  // ------------------------------------------------------------------------------------------------

  Y.Squarespace.EmailUtils = {
    // Keep this regex the same as the one in ValidationUtils.java.
    VALID_EMAIL_REGEX: new RegExp("^([a-zA-Z0-9_\\.\\-\\+])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$"),

    isValid: function(email) {
      if (email.length < 3 || email.length > 256) {
        return false;
      }

      return this.VALID_EMAIL_REGEX.test(email);
    }

  };


  // ------------------------------------------------------------------------------------------------
  // Marketing Tracking
  // ------------------------------------------------------------------------------------------------
  var addImpactRadiusIframe = function(queryString) {
    var irFrame = Y.Node.create('<iframe width="1" height="1" frameborder="0" scrolling="no" src="' + AFFILIATE_TRACKING_URL + '?' + queryString + '"></iframe>');

    Y.one('body').append(irFrame);
  };

  Y.Squarespace.Marketing = {

    /**
      Track a signup from an affiliate source. Configuration object
      is used as a query string to pass parameters to Impact Radius.
     *
      Make sure these values are exactly what you want Impact Radius to see.
     */
    trackAffiliateSignup: function(configuration) {

      // There are two separate campaigns here becuase marketing is merging
      // two of into one. Do not change these values without talking to them.
      var campaign1 = Y.merge({
        cid: 1291,
        irchannel: 2895
      }, configuration);
      var qString1 = Y.QueryString.stringify(campaign1);

      var campaign2 = Y.merge({
        cid: 362,
        irchannel: 794
      }, configuration);
      var qString2 = Y.QueryString.stringify(campaign2);

      addImpactRadiusIframe(qString1);
      addImpactRadiusIframe(qString2);
    },

    /**
      Track a purchase from an affiliate source. Configuration object
      is used as a query string to pass parameters to Impact Radius.
     *
      Make sure these values are exactly what you want Impact Radius to see.
     */
    trackAffiliatePurchase: function(configuration) {

      // There are two separate campaigns here becuase marketing is merging
      // two of into one. Do not change these values without talking to them.
      var campaign1 = Y.merge({
        cid: 1291,
        irchannel: 2959,
        qty1: 1
      }, configuration);
      var qString1 = Y.QueryString.stringify(campaign1);

      var campaign2 = Y.merge({
        cid: 362,
        irchannel: 795,
        qty1: 1
      }, configuration);
      var qString2 = Y.QueryString.stringify(campaign2);

      addImpactRadiusIframe(qString1);
      addImpactRadiusIframe(qString2);
    },

    trackLanding: function() {

      var urlParams = Y.QueryString.parse(document.location.search.substring(1));
      var validParams = ["source", "campaign", "subcampaign", "channel", "subchannel", "refer", "variation", "mkwid"];

      var data = {
        "landing" : document.location.href,
        "refer" : document.referrer,
        "rk" : parseInt(Math.random() * 99999999, 10)
      };

      if (navigator.language) {
        data["lang"] = navigator.language.toLowerCase();
      } else if (navigator.browserLanguage) {
        data["lang"] = navigator.browserLanguage.toLowerCase();
      }

      if (self.screen) {
        data["screen"] = screen.width + "x" + screen.height;
      }

      for (var i = 0; i < validParams.length; ++i) {
        var p = validParams[i];
        if (p in urlParams) { data[p] = urlParams[p]; }
      }

      var image = new Image(1, 1);
      image.src = "/api/track/Track?" + Y.QueryString.stringify(data);

    }

  };

  // ------------------------------------------------------------------------------------------------
  // Analytics
  // ------------------------------------------------------------------------------------------------

  Y.Squarespace.Analytics = {

    /*
      Hit is called on every page load, and attempts to track a hit to content based on context.
     */
    hit: function() {

      // track a basic hit based on the Squarespace context
      if (Static.SQUARESPACE_CONTEXT.item) {

        Y.Squarespace.Analytics.view("item", Static.SQUARESPACE_CONTEXT.item);

      } else if (Static.SQUARESPACE_CONTEXT.collection) {

        Y.Squarespace.Analytics.view("collection", Static.SQUARESPACE_CONTEXT.collection);

      }

    },

    /*
      View is a convenience function that will record a view event, and attempt to infer proper titles, tags, etc from the item viewed.
      type should be either "item" or a "collection"
     */
    view: function(type, o) {

      Y.Squarespace.Analytics.track(Y.Squarespace.Events.VIEW, {
        type: type,
        title: o.title,
        url: o.fullUrl,
        tags: o.tags,
        categories: o.categories
      });

    },


    // ------------------------------------------------------------------------------------------
    // Low-level Calls
    // ------------------------------------------------------------------------------------------

    track: function(event, data) {
      // this mixpanel tracking call is for user mixpanel integration, not Squarespace mixpanel integration (which happens from the server)
      // It is possible for window.mixpanel to exist, but not have a track() method yet
      if (Y.Lang.isValue(window.mixpanel) && Y.Lang.isValue(window.mixpanel.track)) {
        mixpanel.track(event, data);
      }
    },

    traceInternal: function(type, data) {

      // Y.Data.post({
      //   url: '/api/events/Trace',
      //   data: {
      //     type: type,
      //     data: JSON.stringify(data)
      //   }
      // });

    },

    trackInternal: function(event, data, callback) {

      if (!data) {
        data = { };
      }

      // augment core context data if present
      if (Static.SQUARESPACE_CONTEXT.website) {
        data.websiteId = Static.SQUARESPACE_CONTEXT.website.id;
      }
      if (Static.SQUARESPACE_CONTEXT.templateId) {
        data.templateId = Static.SQUARESPACE_CONTEXT.templateId;
      }

      if ( data.pagePath == undefined ) {
        data.pagePath = (window.location ? window.location.pathname : "");
      }

      // optional callback on event end (success and failure)
      var event_handlers = {};
      if ( callback != undefined ) {
        event_handlers.end = callback;
      }
      // record
      Y.io("/api/events/RecordEvent", {
        data: { event: event, data: Y.JSON.stringify(data) },
        on: event_handlers
      });
    }

  };


  // ------------------------------------------------------------------------------------------------
  // Data
  // ------------------------------------------------------------------------------------------------
  /**
    A collection of data methods for interacting with AJAX requests
    @class Data
    @static
  */

  if (Y.io) {

    // Intialize flash transport correctly. Technically our stuff should be
    // waiting on io:xdrReady but the only place this is used (so far) is in
    // comments and in the interest of simplicity I'm presuming the swf
    // download will happen while people are reading article.

    if (!(Y.UA.gecko || Y.UA.webkit || Y.UA.ie >= 10)) {
      Y.on("domready", function() {
        Y.Data.TRANSPORT_READY = false;
        Y.io.transport({ id: 'flash', src: '/universal/flash/yui3-3.10.1-io.swf' });
      });
    }

    Y.on('io:xdrReady', function(event) {
      Y.Data.TRANSPORT_READY = true;
    });

  }

  Y.Data = {

    DEBUG: (function() {
      if (Y.Cookie) {
        return Y.Cookie.get("SQUARESPACE_DEBUG") == "true"; // munch munch.
      } else {
        return false;
      }
    })(),

    TRANSPORT_READY: true,

    addCrumb: function(url) {
      var crumb = Y.Cookie.get('crumb');
      if (crumb) {
        var split = url.split('?');
        var params = (split[1] ? Y.QueryString.parse(split[1]) : {});
        params.crumb = crumb;
        url = split[0]+ '?' + Y.QueryString.stringify(params);
      }
      return url;
    },

    addResourceDomain: function(url) {
      if (Static.SQUARESPACE_CONTEXT && Static.SQUARESPACE_CONTEXT.resourceDomain) {

        // If we reach this branch because of a crumb-fail, prevent the resource domain
        // from being prepended twice.
        // Also prevent domain from being prepended if we are already using an absolute URL
        if (!url.startsWith('http') && !url.startsWith(Static.SQUARESPACE_CONTEXT.resourceDomain)) {
          url = Static.SQUARESPACE_CONTEXT.resourceDomain + url;
        }
      }
      return url;
    },

    sendForm: function(form, config, context) {

      if (!config.data) { config.data = { }; }

      var fd = form.getData();
      for (var k in fd) {
        var v = fd[k];
        if (Y.Lang.isUndefined(v) || Y.Lang.isNull(v)) {
          continue;
        } else if (Y.Lang.isObject(v) && !Y.Lang.isArray(v)) { // don't encode arrays to account for getStringArrayParam() etc
          config.data[k] = Y.JSON.stringify(v);
        } else {
          config.data[k] = v;
        }
      }

      var dialog = { dialog: form };

      if (typeof config.failure == "function") {
        //copy over failure method
        dialog.failure = config.failure;
      }
      config.failure = dialog;

      this.post(config, context);

    },

    cleanObjectForConsole: function(data) {

      var cleanObject = {};

      for( var entry in data ) {

        var json = false;

        if( Y.Lang.isString(data[entry]) ) {

          try {
            json = data[entry] ? JSON.parse( data[entry] ) : null; // test prevents uncatchable error in firefox
          } catch(e) {}

          if( json && Y.Lang.isObject(json) ) {
            cleanObject[entry] = json;
          } else {
            cleanObject[entry] =data[entry];
          }

        } else {
          cleanObject[entry] = data[entry];
        }

      }

      return cleanObject;

    },

    get:  function(config, context) { this._go("GET", config, context); },
    post: function(config, context) { this._go("POST", config, context); },
    put: function(config, context) { this._go("PUT", config, context); },
    del: function(config, context) { this._go("DELETE", config, context); },

    _go: function(method, config, context) { // normal form post/get

      config.context = context;
      config.method = method;

      if (Y.Data.DEBUG) {

        if (config.url.endsWith("/")) {
          console.warn("[Data]: URL ends with a slash, it probably shouldn't: " + config.url);
        }

        if (config.data) {
          console.log("[Data] SEND:  " + config.url +  " (" + config.method + "): ", Y.clone(config.data));
        } else {
          console.log("[Data] SEND:  " + config.url +  " (" + config.method + ")");
        }

      }

      if (!config.success) { config.success = this._genericSuccess; }
      if (!config.responseFormat) { config.responseFormat = 'json'; }
      if (config.secure && Static.SQUARESPACE_CONTEXT) {
        var secureDomain = Static.SQUARESPACE_CONTEXT.secureDomain;

        var validDomains = ['sqsp.com','squarespace.com','squarespace.net', 'sqsp6.com'];
        var totallyValid = false;
        for (var i = 0; i < validDomains.length; i++) {
          if (window.location.host.indexOf(validDomains[i]) !== -1) {
            totallyValid = true;
          }
        }

        // check that https is being used
        if (!window.location.protocol.startsWith("https")) {
          totallyValid = false;
        }

        if (!totallyValid && !config.url.startsWith(secureDomain)) {
        // if (secureDomain && secureDomain !== "" && !config.url.startsWith(secureDomain)) {
          // rewrite URL to point to the secure domain
          config.url = secureDomain + config.url;
        }

        if (!totallyValid) {
          // we need to indicate that this is a cross domain request
          // to the underlying YUI transport
          config.xdr = {};
          config.xdr.credentials = true;
        }
      }

      for (var k in config.data) {
        if (Y.Lang.isUndefined(config.data[k])) {
          delete config.data[k];
          // console.log("Removing undefined field " + k + " = " + Y.Lang.isUndefined(config.data[k]));
        }
      }


      if (config.testResponse) {

        if (config.testResponseDelay) {

          Y.later(config.testResponseDelay, this, function() {
            Y.Data._connectionSuccessRouter(config, true, { responseText: Y.JSON.stringify(config.testResponse) });
          });

        } else {

          Y.Data._connectionSuccessRouter(config, true, { responseText: Y.JSON.stringify(config.testResponse) });

        }

      } else {
        var call = Y.bind(function() {
          config._url = config.url; // save the original url before adding crumb
          config.url = this.addResourceDomain(this.addCrumb(config.url));

          // Clean up the data
          if (method == 'POST') {

            // If the config data is an object
            if (Y.Lang.isObject(config.data)) {

              // Clean up the properties appropriatly.
              for (var k in config.data) {
                var v = config.data[k];
                if (Y.Lang.isObject(v) && !Y.Lang.isArray(v)) {
                  // console.log('sanitized "' + k + '" param: ' + v + ' -> ' + Y.JSON.stringify(v));
                  config.data[k] = Y.JSON.stringify(v);
                }
              }
            }

          }

          var ioConfig = {
            method: method,
            /*jshint jshint:false */
            // this is legal but jshint doesn't think it is
            arguments: config.arguments,
            /*jshint jshint:true */
            data: config.data,
            on: {
              success: Y.bind(Y.Data._connectionSuccessRouter, Y.Data, config),
              failure: Y.bind(Y.Data._connectionFailureRouter, Y.Data, config)
            }
          };

          if (config.xdr) {
            // this is a crossdomain request
            if (Y.UA.ie && Y.UA.ie < 10) {
              if (!Y.Data.TRANSPORT_READY) {
                // Flash has not been initialized, very slow or flash not installed
                Y.later(1, this, function() {
                  console.error("Flash initialization not done, can not make requests");
                  new Y.Squarespace.Alert().show('Server Request Failed', "It looks like you don't have Flash installed. Please <a target=\"_blank\" href=\"http://get.adobe.com/flashplayer/\">download and install the Flash Plugin here</a>");
                });
                return;
              }
              config.xdr.use = 'flash'; // IE8/9's XDR can't change content-type and backend NEEDS that.
            }
            ioConfig.xdr = config.xdr;
            ioConfig.headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'};
            ioConfig.data = Y.QueryString.stringify(config.data);
          }

          if (config.queue) {
            Y.io.queue(config.url, ioConfig);
          } else {
            Y.io(config.url, ioConfig);
          }

        }, Y.Data);

        // TESTING !!!!!!!!!!!!!
        //if (method === "POST") {
        //  config.testResponseDelay = Math.random() * 4000;
        //}

        if(config.testResponseDelay) {
          Y.later(config.testResponseDelay, this, call);

        } else {

          call();
        }
      }

    },

    _genericSuccess: function(data) {


    },

    _connectionSuccessRouter: function(config, status, data, args) {

      if (config.responseFormat == 'json') {

        var json;

        try {
          json = Y.JSON.parse(data.responseText);
        }
        catch (e) {
          this._error(config, { error: "Internal Error: Unable to parse server response from (" + config.url + ") as JSON: " + data.responseText });
          return;
        }

        if (json.error) {

          this._error(config, json, args);

        } else {

          if (Y.Data.DEBUG) {
            console.log("[Data] RECV:  " + config.url +  " (" + config.method + "): ", json);
          }

          config.success.apply(config.context, [ json, args ]);

        }

      } else if (config.responseFormat == 'raw') {

        if (Y.Data.DEBUG) {
          console.log("[Data] RECV:  " + config.url +  " (" + config.method + "): ", {response: data.responseText});
        }

        config.success.apply(config.context, [ data.responseText, args ]);

      }

    },

    _connectionFailureRouter: function(config, status, data, args) {

      if (!data || data.readyState !== 4) { return; } //readyState check: http://stackoverflow.com/questions/7287706/ie-9-javascript-error-c00c023f

      // TODO: This seriously needs to not be a whitelist.
      if (data.status == 500 || data.status == 401) {

        if (config.responseFormat == 'json') {

          var json;

          try {
            json = Y.JSON.parse(data.responseText);
          }
          catch (e) {
            this._error(config, { error: "Internal Error: Unable to parse server response from (" + config.url + ") as JSON: " + data.responseText });
            return;
          }

          if (json.error) {

            this._error(config, json, args);
            return;

          }

        }

      }

      // normalize network errors
      this._error(config, {
        error: "Unable to connect to host.",
        errorKey: (Y.Lang.isFunction(window.btoa) ? btoa(config.url) : ''),
        network: true
      });

    },

    _error: function(config, json, args) {

      if (Y.Data.DEBUG) {
        console.error("[Data] ERROR: " + config.url +  " (" + config.method + "): ", json);
      }

      // show error using the appropriate style

      if (json.loginRequired) {

        var doLogin = function() {
          // standard error -- login is required to access this endpoint
          if (window.SQUARESPACE_LOGIN) {
            window.SQUARESPACE_LOGIN.fire("login-required");
          } else {
            console.error("Session timed out -- login required.");
          }
        };

        if (Y.Lang.isFunction(config.failure)) {

          if (config.loginHasPriorityOnFailure) {
            doLogin();
          }

          config.failure.apply(config.context, [ json, args ]);

        } else {
          doLogin();
        }

      } else if (json.authorizationFail) {

        // standard error -- you are not authorized to access this endpoint
        new Y.Squarespace.SystemError(config.url, json, "json").show();

      } else if (json.crumbFail && config._retry !== true && Y.Squarespace.Utils.areCookiesEnabled()) {

        // standard error -- crumb not correct -- retry
        Y.Cookie.set("crumb", json.crumb, { path: "/" });
        config._retry = true;
        config.url = config._url;
        console.log("crumb check failed, will attemt a retry");
        this._go(config.method, config, config.context);

      }  else if (typeof(config.failure) == "function") {

        // user defined error callback

        config.failure.apply(config.context, [ json, args ]);

      } else if (config.failure && config.failure.dialog && json.errors) {

        // dialogsystem errors -- route to dialog

        config.failure.dialog.showErrors(json.errors);
        if (config.failure.failure) {
          config.failure.failure.apply(config.context, [ json, args ]);
        }

      } else {

        // huge red unknown error
        new Y.Squarespace.SystemError(config.url, json, "json").show();

      }

    }

  };

  /**
    Puts that big red error on the screen
    @class SystemError
    @namespace Squarespace
    @constructor
    @param url {String} The url requested that caused the error
    @param data {Object} The server response
  */
  Y.Squarespace.SystemError = Class.create({

    initialize: function(url, data, format) {

      this.url = url;
      this.data = data;
      this.format = format;
      this.clearable = true;
      window.__clearError = Y.bind(this.clear, this);

    },

    clear: function() {
      Y.one(".system-error").remove();
      Y.one(".dialog-screen-overlay.error-overlay").remove();
    },

    show: function() {

      var error;

      if (this.data.cleaned) {

        error = '<div style="font-weight: normal; font-size: 22px; margin-top: -2px;">Something Went Wrong!</div><div style="font-weight: normal; font-size: 13px; padding-top: 5px;">Our system has encountered an error.  This exception has been automatically logged and reported.  We will return shortly.</div>';

      } else if (this.data.network) {

        error = '<div style="font-weight: normal; font-size: 17px;">Unable to connect to Squarespace.  Please try again.</div>';

        // SIX-7937 - lets try to record the error, if network is down we won't see anything though ...
        try {
          Y.Squarespace.Analytics.trackInternal('system_network_error', {
            urlRequested: url
          });
        } catch(e) {
          console.error('network error', e);
        }

      } else {

        error = '<div style="font-weight: normal; font-size: 17px;">' + this.url + ' &nbsp;<span style="color: #888;">(' + this.format.toUpperCase() + ')</span></div><br/><pre>' + this.data.error.replace(new RegExp("\n", "g"), "<br/>") + '</pre>';

        console.error("SERVER: " + this.data.error);

      }

      // don't visually stack errors forever -- of any type

      if (Y.one(".system-error")) {
        return;  // don't keep piling these up
      }

      // error

      var clearButton = '';
      if (this.clearable) {
        clearButton = '<input type="button" value="Clear" onclick="window.__clearError();"/>';
      }

      this.errorEl = Y.DB.DIV("system-error", { html: error + '<br/><br/><input type="button" value="Reload Page" onclick="document.location.reload();"/> &nbsp; ' + clearButton + '<br/><br/><br/>' + (this.data.errorKey ? '<span style="color: #777; font-size: 10px;">' + this.data.errorKey : ""),
                   style: 'position: absolute; -webkit-user-select: text; left: 25px; top: 25px; right: 25px; font-size: 12px; color: #fff; padding: 26px 20px 20px 80px; background: transparent url(/universal/images-v6/error-x.png) 12px 12px no-repeat; border-radius: 5px; overflow: hidden; z-index: 10000001;' });

      Y.one(document.body).append(this.errorEl);

      // and a lovely little overlay

      this.overlayEl = Y.DB.DIV("dialog-screen-overlay error-overlay");
      this.overlayEl.setStyles({
        zIndex: 10000000
      });

      Y.one(document.body).append(this.overlayEl);

      var a = new Y.Anim({ node : this.overlayEl, to: { opacity: 1 }, duration: 0.35, easing: Y.Easing.easeOutStrong});
      a.run();

    }


  });


  // ------------------------------------------------------------------------------------------------
  // Escaping/Formatting
  // ------------------------------------------------------------------------------------------------
  /**
    A collection of functions for escaping strings
    @class Escaping
    @static
    @namespace Squarespace
  */
  Y.Squarespace.Escaping = {

    escapeForHtml: function(s) {

      if (!s) {
        return s;
      }

      return s.replace(/&/g,'&amp;').
               replace(/>/g,'&gt;').
               replace(/</g,'&lt;');

    },

    escapeForHtmlTag: function(s) {

      if (!s) {
        return s;
      }

      return s.replace(/&/g,'&amp;').
               replace(/>/g,'&gt;').
               replace(/</g,'&lt;').
               replace(/"/g,'&quot;');

    }

  };


  // ------------------------------------------------------------------------------------------------
  // Misc
  // ------------------------------------------------------------------------------------------------
  /**
    A haphazard collection of miscellaneous functions
    @class Lang
    @static
    @namespace Squarespace
  */
  Y.namespace('Squarespace.Lang').isPercentage = function(str) {
      return ( Y.Lang.isString(str) && str.search('%') > 0 );
  };

    /**
     ?
     @method getMaxId
     @param set {Object} ?
    */
  Y.namespace('Squarespace.Lang').getMaxId = function(set) {
      var max = 0;
      for (var i in set) { i = parseInt(i, 10); if (i > max) { max = i; } }
      return (max);
  };

  /**
    A Squarespace brand Google map wrapper.
    Uses JSONP to load Google Maps on demand.
    @class GoogleMap
    @static
    @namespace Squarespace
  */
  Y.Squarespace.GoogleMap = {
    loadStarted: false,
    loaded: false,
    source: '//maps.google.com/maps/api/js',
    sensor: false,
    timeout: 30000,

    load: function() {
      if (this.loaded) {
        this.fire("load-success");
        return;
      }

      if (!this.loadStarted) {
        this.loadStarted = true;

        var url = this.source + '?' + 'callback={callback}' + '&sensor=' + (this.sensor ? 'true' : 'false');

        Y.jsonp(url, {
          context: this,
          on: {
            failure: function() {
              this.fire("load-failure");
            },
            success: function() {
              this.loaded = true;
              this.fire("load-success");
            },
            timeout: function() {
              this.fire("load-timeout");
            }
          },
          timeout: this.timeout
        });
      }
    }
  };
  Y.augment(Y.Squarespace.GoogleMap, Y.EventTarget);

  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  // Bail out here if we're loading in the template engine
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////

  if (!Y.Base) { return; }
  // All functions below here are browser only

  // WORKAROUND: YUI 3.5.0 anim cannot handle animating rgba values. These can sneak in via the tweak layer.
  // Instead of erroring out, monkeypatch Y.Color to coerce to non-alpha rgb.
  if (Y.Color) { // util.js is loaded on server side but anim isn't
    var oldToRGB = Y.Color.toRGB;

    Y.Color.re_RGBA = /^rgba\(([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+),\s*(\d+(?:\.\d+)?)\)$/i;

    Y.Color.toRGB = function(val) {

      if (Y.Color.re_RGBA.exec(val)) {

        return 'rgb('+RegExp.$1 + ','+ RegExp.$2 + ',' + RegExp.$3 + ')';

      } else {

        return oldToRGB(val);

      }

    };
  }

  // Y.SQSAnim -- handles .run() calls after the node is destroyed a lot better.
  Y.SQSAnim = Y.Base.create("SQSAnim", Y.Anim, [], {
    run: function() {
      if (this.get('destroyed') || this.get('node')._node === null || !this.get('node').inDoc()) {
        this.fire('end');
        return this;
      } else {
        return Y.Anim.prototype.run.call(this);
      }
    }
  });



  // Core/frontend node extensions (more/backend in ui-base)
  Y.augment(Y.Node, Class.create({
    getAncestorData: function(key) {
      var n = this;

      while (n) {
        var d = n.getData(key);
        if (d) { return d; }
        n = n.ancestor();
      }

      return (null);
    },

    anim: function(properties, options, ctx) {
      options = Y.merge({
        node: this,
        duration: 0.3,
        easing: Y.Easing.easeOutStrong,
        to: properties
      }, options);

      if (this.activeAnim) { this.activeAnim.stop(true); }

      this.activeAnim = new Y.SQSAnim(options);
      this.activeAnim.on('end', function() {
        delete this.activeAnim;
      }, this);

      // bind extra events
      if (options.end) { this.activeAnim.on('end', options.end, ctx || options.context); }
      if (options.start) { this.activeAnim.on('start', options.start, ctx || options.context); }

      // node destroy hack
      // listen for when this node gets destroyed
      if (!this.nodedestroynotifier) {
        this.plug(Y.Squarespace.NodeDestroyNotifier, {
          destroy: function() {
            this.activeAnim.stop(true);
            this.activeAnim.destroy();
          },
          context: this
        });
      }

      return this.activeAnim;
    },

    getAdjustedDimensions: function(settings) {

      // var debug = new Y.Squarespace.Debugger({name: 'getAdjustedDimensions', uid: true});

      // SCALE = {contain | cover}
      // contain -- forces the element size to be contained in the node -- will re-center the element if necessary
      // cover -- ensures the node completely covers the parent node

      var el = this;

      if( !settings ) { settings = {}; }
      if( !settings.scale ) { settings.scale = 'cover'; }
      if( !settings.align ) { settings.align = 'center'; }

      var parent = el.get('parentNode');
      var actualDimensions = this.getAttribute('data-image-dimensions');
      var imageWidth, imageHeight;

      // debug.log('parentNode', JSON.stringify({
      //   offsetWidth: parent.get('offsetWidth'),
      //   computedStyle: parent.getComputedStyle('width'),
      //   style: parent.getStyle('width')
      // }, null, 2));

      if (actualDimensions) {

        // Clean up dimensions data
        actualDimensions = actualDimensions.split('x');
        actualDimensions = { width: parseInt(actualDimensions[0],10), height: parseInt(actualDimensions[1],10) };

        imageWidth = actualDimensions.width;
        imageHeight = actualDimensions.height;

      } else {

        // store
        if( !el.getData('width') && !el.getData('height') ) {
          el.setData('width', settings && settings.width ? parseInt(settings.width, 10) : el.getAttribute('width') || el.get('offsetWidth') );
          el.setData('height', settings && settings.height ? parseInt(settings.height, 10) : el.getAttribute('height') || el.get('offsetHeight') );
        }

        // dude, don't tell me it's a percentage
        if (Y.Squarespace.Lang.isPercentage(el.getData('width'))) {
          imageWidth = parent.get('offsetWidth') * (parseInt(el.getData('width'), 10) / 100);
        } else {
          imageWidth = parseInt( el.getData('width'), 10 );
        }

        if (Y.Squarespace.Lang.isPercentage(el.getData('height'))) {
          imageHeight = parent.get('offsetHeight') * (parseInt(el.getData('height'), 10) / 100);
        } else {
          imageHeight = parseInt( el.getData('height'), 10 );
        }

      }

      var parentWidth = settings.containerWidth || parent.get('offsetWidth')  - (parent.get('offsetWidth') - parent.get('clientWidth'));
      var parentHeight = settings.containerHeight || parent.get('offsetHeight') - (parent.get('offsetHeight') - parent.get('clientHeight'));

      var imageRatio = imageWidth / imageHeight;
      var parentRatio = parentWidth / parentHeight;

      var top;
      var left;

      var ratio;

      // debug.log('init', JSON.stringify({
      //   imageWidth: imageWidth,
      //   imageHeight: imageHeight,
      //   parentWidth: parentWidth,
      //   parentHeight: parentHeight,
      //   imageRatio: imageRatio,
      //   parentRatio: parentRatio
      // }, null, 2));

      // Set the parent to overflow none, if the overflow isn't already.
      if( settings.scale && parent.getStyle('overflow') != 'hidden' ) {
        parent.setStyle('overflow', 'hidden');
      }

      // Calculate the ratio

      if (settings.sizeOnly) {
        ratio = parentWidth / imageWidth; // never rely on height -- we want to push the height as appropriate
      } else if (settings.scale === 'contain') {
        ratio = imageRatio > parentRatio ? parentWidth / imageWidth : parentHeight / imageHeight;
      } else {
        ratio = imageRatio > parentRatio ? parentHeight / imageHeight : parentWidth / imageWidth;
      }

      var newWidth = imageWidth;
      var newHeight = imageHeight;

      // And now the meat & bones
      if( settings.scale == 'contain' ) {

        newWidth  = imageWidth * ratio;
        newHeight = imageHeight * ratio;

        // debug.log('contain', JSON.stringify({
        //   newWidth: newWidth,
        //   newHeight: newHeight
        // }, null, 2));

        top  = newHeight < parentHeight ? ( parentHeight - newHeight ) / 2 : 0;  // always set to center
        left = newWidth < parentWidth   ? ( parentWidth - newWidth ) / 2 : 0; // yep -- center

        if( settings.align.indexOf('left') != -1 ) {
          left = 0;
        } else if( settings.align.indexOf('right') != '-1' ) {
          left = ( parentWidth - newWidth );
        }

        if( settings.align.indexOf('top') != -1 ) {
          top = 0;
        } else if( settings.align.indexOf('bottom') != -1 ) {
          top = ( parentHeight - newHeight );
        }

        // offsets
        newWidth -= (this.get('offsetWidth') - this.get('clientWidth'));
        newHeight -= (this.get('offsetHeight') - this.get('clientHeight'));

        // debug.log('contain', JSON.stringify({
        //   top: top,
        //   left: left
        // }, null, 2));

      } else if( settings.scale == 'cover' ) {

        newWidth  = imageWidth * ratio;
        newHeight = imageHeight * ratio;

        // debug.log('contain', JSON.stringify({
        //   newWidth: newWidth,
        //   newHeight: newHeight
        // }, null, 2));

        top = newHeight > parentHeight ? ( newHeight - parentHeight ) / -2 : 0;
        left = newWidth > parentWidth ? ( newWidth - parentWidth ) / -2 : 0;

        // If there's some focalPoint data, use it.
        if( settings.focalPoint ) {

          /*
          // offsets
          var offsetX = newWidth - parentWidth;
          var offsetY = newHeight - parentHeight;

          left = -1 * parseInt( offsetX * settings.focalPoint[0], 10 );
          top = -1 * parseInt( offsetY * settings.focalPoint[1], 10 );
          */

          left = Math.min( Math.max( ( parentWidth / 2 ) - ( newWidth * settings.focalPoint[0] ), (parentWidth-newWidth) ), 0 );
          top = Math.min( Math.max( ( parentHeight / 2 ) - ( newHeight * settings.focalPoint[1] ), (parentHeight-newHeight) ), 0 );

        }

        // debug.log('cover', JSON.stringify({
        //   top: top,
        //   left: left
        // }, null, 2));

      }

      // console.log("resizeToParent " + this.get("tagName") + " (" + settings.scale + ")", "top", top, "left", left, "newWidth", newWidth, "newHeight", newHeight);

      return {
        top: top,
        left: left,
        width: newWidth,
        height: newHeight
      };

    },

    reflow: function() {
      console.warn('reflow is deprecated.');
      // this.setStyle('display', 'none');
      // this.get('offsetHeight');
      // this.setStyle('display', null);
    },

    resizeToParent: function(settings) {

      var dimensions = this.getAdjustedDimensions(settings);
      var position = this.getStyle("position");


      if (settings.sizeOnly) {

        // Set the styles.
        this.setStyles({
          'width': dimensions.width,
          'height': dimensions.height
        });

        var embedEl = this.one('embed');

        if (embedEl) {
          this.one('embed').setStyles({
            'width': dimensions.width,
            'height': dimensions.height
          });
        }

        // fix the zIndex issue
        if (this.test('iframe')) {
          var src = this.getAttribute('src');

          if (src) {
            if (src.indexOf('?') != -1) {
              var _src = src.split('?');
              if (_src[1].indexOf('wmode=transparent') == -1) {
                this.setAttribute('src', _src[0] + '?wmode=transparent&' + _src[1]);
              }
            } else {
              this.setAttribute('src', src + '?wmode=transparent');
            }
          }
        }

        if (embedEl && embedEl.getAttribute('wmode') != 'transparent') {
          this.one('embed').setAttribute('wmode', 'transparent');
        }

      } else {

        /*
          This is to fix strange numerical precision errors that were causing
          problems with setStyles in Firefox. For example, dimensions.left
          could be a value like 1.4210854715202004e-14. Doing setStyles with
          this value is ignored and the style is not actually set.
         *
          Really, we do not need more than 5 significant digits for this operation,
          so we can safely convert to fixed-point notation.
         */
        var precision = 5;

        // Set the styles.
        this.setStyles({
          'position': (position !== 'relative' && position !== 'absolute' ? 'relative' : position),
          'top': dimensions.top.toFixed(precision),
          'left': dimensions.left.toFixed(precision),
          'width': dimensions.width.toFixed(precision),
          'height': dimensions.height.toFixed(precision)
        });

      }

    },

    width: function() {
      return this.get('offsetWidth');
    },

    height: function() {
      return this.get('offsetHeight');
    },

    setWidth: function(width) {
      this.setStyle('width', width);
    },

    setHeight: function(height) {
      this.setStyle('height', height);
    }


  }));

  /*
    Scroll lock is a utility designed to lock the scrolling in a element.
    There's a dope demo at: /universal/test/scroll-lock/index.html
   */

  Y.Squarespace.ScrollLock = Y.Base.create("ScrollLock", Y.Plugin.Base, [], {
    initializer: function (config) {
      var node = this.get("host").getDOMNode();

      // store this
      this.listener = function(e) {

        // stop propogation
        e.stopPropagation();

        // if the element doesn't have a scrollTop (meaning it doesn't have a scroll bar -- prevent)
        if (!Y.Lang.isNumber(node.scrollTop)) {
          e.preventDefault();
          return false;
        }

        // evaluate the max scroll top
        // #1: store the current scrolltop
        // #2: set the scroll top to a really high number
        // #3: record the scrolltop value (it'll be the max scrolltop)
        // #4: reset the scrolltop.
        var currentScrollTop = node.scrollTop;
        node.scrollTop = 99999999;
        var maxScrollTop = node.scrollTop;
        node.scrollTop = currentScrollTop;

        // prevent the default behavior (scrolling the element behind it) if:
        // #1: if scroll is trying to go up, and the element is already scrolled all the way to the top
        // #2: if the scroll is trying to go down, and the element is already scrolled all the way to the bottom

        var distanceMoved = e.wheelDelta || -e.detail; // detail is for wheel and DOMMouseScroll

        if (
          currentScrollTop <= 0 && distanceMoved > 0 ||
          currentScrollTop >= maxScrollTop && distanceMoved < 0
        ) {
          e.preventDefault();
          return false;
        }
      };

      // we're adding the listener at a low-level.
      if (node.addEventListener) {
        node.addEventListener('mousewheel', this.listener);        // webkit
        node.addEventListener('DOMMouseScroll', this.listener);    // FF
        node.addEventListener('MozMousePixelScroll', this.listener);
      } else if (node.attachEvent) {
        node.attachEvent('onmousewheel', this.listener);
      }
    },

    destructor: function() {
      var node = this.get("host").getDOMNode();
      if (node.removeEventListener) {
        node.removeEventListener('mousewheel', this.listener);
        node.removeEventListener('DOMMouseScroll', this.listener);
        node.removeEventListener('MozMousePixelScroll', this.listener);
      } else if (node.detachEvent) {
        node.detachEvent('onmousewheel', this.listener);
      }
    }
  },
  // Static properties
  {
    NS: "ScrollLock",
    ATTRS: {}
  });

  // ------------------------------------------------------------------------------------------------
  // Cross-browser CSS3 vendor hooks
  // ------------------------------------------------------------------------------------------------

  // This ensures that setStyle/setStyles with vendor prefixed properties generates the
  // vendor-appropriate CSS.
   var VENDOR_CAMEL_PREFIXES = ['Webkit', 'Moz', 'O', 'ms'],
       EXPAND_PROPS = ['transition', 'transitionProperty', 'transitionDuration', 'backfaceVisibility', 'userSelect', 'borderBottomLeftRadius', 'borderBottomRightRadius'];

  Y.Array.each(VENDOR_CAMEL_PREFIXES, function(prefix){
    Y.Array.each(EXPAND_PROPS, function(property){
      var vendorProp = prefix + property.charAt(0).toUpperCase() + property.slice(1);
      if(vendorProp in Y.config.doc.documentElement.style) {
        Y.DOM.CUSTOM_STYLES[property] = {
          set: function(node, val, style) {
            style[vendorProp] = val;
          },
          get: function(node, style) {
            Y.DOM.getComputedStyle(node, vendorProp);
          }
        };
      }
    });
  });

  // resize emitter first resize:start and resize:end events.
  // helpful if you want to do something when a resize ends.
  Y.Squarespace.ResizeEmitter = Y.Base.create("ResizeEmitter", Y.Base, [], {
    initializer: function() {

      var currentlyResizing = false;

      this.resizeEvent = Y.on('resize', function() {
        if (!currentlyResizing) {
          this.fire('resize:start');
        }

        currentlyResizing = true;

        if (this.timer) {
          this.timer.cancel();
        }

        this.timer = Y.later(this.get('timeout'), this, function() {
          this.fire('resize:end');
          currentlyResizing = false;
        });

        this.fire('resize');

      }, Y.config.win, this);

    },

    destructor: function() {

      if (this.timer) {
        this.timer.cancel();
      }

      this.resizeEvent.detach();
      // this.resizeEvent.destroy();
    }
  }, {
    ATTRS: {
      timeout: {
        value: 300
      }
    }
  });

  // --------------------------------------------------------------------------------
  // You know when you place a breakpoint, and then the browser
  // decides it needs to put you through 15 degrees of hell where you
  // spend half your time clicking "play" on the y.io failure.
  //
  // yeah, this is for that.
  // --------------------------------------------------------------------------------

  Y.IO.prototype._destroy = function(transaction) {
    if (Y.config.win && !transaction.notify && !transaction.xdr) {
      if (!transaction.upload && transaction.c) {
        transaction.c.onreadystatechange = null;
      } else if (transaction.upload) {
        transaction.c.upload.onprogress = null;
        transaction.c.onload = null;
        transaction.c.onerror = null;
      } else if ((Y.UA.ie && Y.UA.ie < 10) && !transaction.e) {
        // IE, when using XMLHttpRequest as an ActiveX Object, will throw
        // a "Type Mismatch" error if the event handler is set to "null".
        transaction.c.abort();
      }
    }

    transaction = transaction.c = null;
  };

  // ------------------------------------------------------------------------------------------------
  // EU Cookie Garbage
  // ------------------------------------------------------------------------------------------------

  Y.on("domready", function() {

    if (!Static.EU_COOKIE_POLICY) { return; }

    var cookiesOk = Y.Cookie.get("EU_COOKIES");

    // if the user has not accepted EU cookies, or has declined them -- remove cookies

    if (cookiesOk == null || cookiesOk == false) {
      Y.Cookie.remove("SS_MATTR");
      Y.Cookie.remove("SS_MID");
      Y.Cookie.remove("SS_lastvisit");
      Y.Cookie.remove("user_segment");
    }

    // if the user has not accepted or declined, prompt

    if (cookiesOk == null) {

      var pos, exp = new Date();
      exp.setTime(new Date().getTime() + (1000 * 60 * 60 * 24 * 30)); // expire in a month

      if (Static.EU_COOKIE_POLICY == "bottom-left") {
        pos = 'bottom: 0px; left: 0px;';
      } else if (Static.EU_COOKIE_POLICY == "bottom-right") {
        pos = 'bottom: 0px; right: 0px;';
      } else if (Static.EU_COOKIE_POLICY == "top-right") {
        pos = 'top: 0px; right: 0px;';
      } else { // if (Static.EU_COOKIE_POLICY == "top-left") { -- default
        pos = 'top: 0px; left: 0px;';
      }

      var cookieEl = Y.Node.create('<div class="cookie-notice" style="z-index: 300000;padding: 20px; background: #eee; color: #333; font-size: 12px; border: 1px solid #ccc; position: absolute; ' + pos + '">We would like to place cookies on your computer to help us make this website better.<br/><button class="accept" style="padding: 5px; margin-top: 5px;">I wish to accept cookies from this website.</button> <button class="decline" style="padding: 5px; margin-left: 5px;">Decline</button></div>');

      cookieEl.one(".accept").on("click", function() {
        Y.Cookie.set("EU_COOKIES", true, { expires: exp });
        Y.one(".cookie-notice").remove();
      });

      cookieEl.one(".decline").on("click", function() {
        Y.Cookie.set("EU_COOKIES", false, { expires: exp });
        Y.one(".cookie-notice").remove();
      });

      Y.one(document.body).append(cookieEl);

    }

  });

}, '1.0', { requires: [
  'event',
  'node',
  'base',
  'selector',
  'plugin',
  'anim',
  'io',
  'yui-later',
  'json',
  'jsonp',
  'cookie',
  'querystring',
  'squarespace-enum',
  'squarespace-logger'
]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-mouseenter/event-mouseenter.js
// ----------------------------------------------------------------------------------------

YUI.add('event-mouseenter', function (Y, NAME) {

/**
 * <p>Adds subscription and delegation support for mouseenter and mouseleave
 * events.  Unlike mouseover and mouseout, these events aren't fired from child
 * elements of a subscribed node.</p>
 *
 * <p>This avoids receiving three mouseover notifications from a setup like</p>
 *
 * <pre><code>div#container > p > a[href]</code></pre>
 *
 * <p>where</p>
 *
 * <pre><code>Y.one('#container').on('mouseover', callback)</code></pre>
 *
 * <p>When the mouse moves over the link, one mouseover event is fired from
 * #container, then when the mouse moves over the p, another mouseover event is
 * fired and bubbles to #container, causing a second notification, and finally
 * when the mouse moves over the link, a third mouseover event is fired and
 * bubbles to #container for a third notification.</p>
 *
 * <p>By contrast, using mouseenter instead of mouseover, the callback would be
 * executed only once when the mouse moves over #container.</p>
 *
 * @module event
 * @submodule event-mouseenter
 */

var domEventProxies = Y.Env.evt.dom_wrappers,
    contains = Y.DOM.contains,
    toArray = Y.Array,
    noop = function () {},

    config = {
        proxyType: "mouseover",
        relProperty: "fromElement",

        _notify: function (e, property, notifier) {
            var el = this._node,
                related = e.relatedTarget || e[property];

            if (el !== related && !contains(el, related)) {
                notifier.fire(new Y.DOMEventFacade(e, el,
                    domEventProxies['event:' + Y.stamp(el) + e.type]));
            }
        },

        on: function (node, sub, notifier) {
            var el = Y.Node.getDOMNode(node),
                args = [
                    this.proxyType,
                    this._notify,
                    el,
                    null,
                    this.relProperty,
                    notifier];

            sub.handle = Y.Event._attach(args, { facade: false });
            // node.on(this.proxyType, notify, null, notifier);
        },

        detach: function (node, sub) {
            sub.handle.detach();
        },

        delegate: function (node, sub, notifier, filter) {
            var el = Y.Node.getDOMNode(node),
                args = [
                    this.proxyType,
                    noop,
                    el,
                    null,
                    notifier
                ];

            sub.handle = Y.Event._attach(args, { facade: false });
            sub.handle.sub.filter = filter;
            sub.handle.sub.relProperty = this.relProperty;
            sub.handle.sub._notify = this._filterNotify;
        },

        _filterNotify: function (thisObj, args, ce) {
            args = args.slice();
            if (this.args) {
                args.push.apply(args, this.args);
            }

            var currentTarget = Y.delegate._applyFilter(this.filter, args, ce),
                related = args[0].relatedTarget || args[0][this.relProperty],
                e, i, len, ret, ct;

            if (currentTarget) {
                currentTarget = toArray(currentTarget);

                for (i = 0, len = currentTarget.length && (!e || !e.stopped); i < len; ++i) {
                    ct = currentTarget[0];
                    if (!contains(ct, related)) {
                        if (!e) {
                            e = new Y.DOMEventFacade(args[0], ct, ce);
                            e.container = Y.one(ce.el);
                        }
                        e.currentTarget = Y.one(ct);

                        // TODO: where is notifier? args? this.notifier?
                        ret = args[1].fire(e);

                        if (ret === false) {
                            break;
                        }
                    }
                }
            }

            return ret;
        },

        detachDelegate: function (node, sub) {
            sub.handle.detach();
        }
    };

Y.Event.define("mouseenter", config, true);
Y.Event.define("mouseleave", Y.merge(config, {
    proxyType: "mouseout",
    relProperty: "toElement"
}), true);


}, '3.10.1', {"requires": ["event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/zen.js
// ----------------------------------------------------------------------------------------

/**
 * This module is based off of Kris Zyp's 'put-selector'. https://github.com/kriszyp/put-selector
 *
 * It's been adapted to use YUI's Node/NodeList class and renamed to `zen`
 * since it works very much like the `zencoding` editor plugins and I find
 * `put` to be a bit too generic. Please note the syntax is not exactly the same
 * as the Zen coding syntax, especially with regards to the use of spaces, child selectors,
 * and the "<" symbol to traverse up node hierarchy.
 *
 * Summary:
 *   This module defines a fast lightweight function for updating and creating new elements
 *   terse, CSS selector-based syntax. The single function from this module creates
 *   new DOM elements and updates existing elements. See README.md for more information.
 * @module squarespace-zen
 */

/*jshint loopfunc:true */

YUI.add('squarespace-zen', function(Y){
    var selectorParse = /(?:\s*([-+ ,<>]))?\s*(\.|!|#)?([-\w$]+)?(?:\[([^\]=]+)=?['"]?([^\]'"]*)['"]?\])?/g,
        fragmentFasterHeuristic = /[\-+,> ]/, // if it has any of these combinators, it is probably going to be faster with a document fragment
        doc = Y.config.doc;

    function insertTextNode(element, text){
        element.appendChild(doc.createTextNode(text));
    }

    function zen(topReferenceElement){

        var ieCreateElement;
        var argument;

        if (typeof("ieCreateElement") == "undefined") {
            try{
                ieCreateElement = 1;
                zen('i', {name:'a'});
            }catch(e){
                ieCreateElement = 0;
            }
        }

        var fragment, returnValue, lastSelectorArg, nextSibling, referenceElement, current,
            args = arguments;
        if (topReferenceElement._node) {
            topReferenceElement = topReferenceElement._node;
        }
        function insertLastElement() {
            // we perform insertBefore actions after the element is fully created to work properly with
            // <input> tags in older versions of IE that require type attributes
            //  to be set before it is attached to a parent.
            // We also handle top level as a document fragment actions in a complex creation
            // are done on a detached DOM which is much faster
            // Also if there is a parse error, we generally error out before doing any DOM operations (more atomic)
            if (current && referenceElement && current !== referenceElement) {
                var targetElement = referenceElement;
                if (referenceElement === topReferenceElement) {
                    // top level may use fragment for faster access, create it if we really want it
                    fragment = fragment || (fragmentFasterHeuristic.test(argument) && doc.createDocumentFragment());
                    if (fragment) { targetElement = fragment; }
                }
                // regardless of whether we frag or not, do the insert
                targetElement.insertBefore(current, nextSibling || null);
            }
        }

        for(var i = 0; i < args.length; i++){
            argument = args[i];
            if(typeof argument == "object"){
                if(argument._node){
                    // Handle passing in of Y.Node instances
                    current = argument._node;
                }
                if(argument.nodeType){
                    current = argument;
                    insertLastElement();
                    referenceElement = argument._node || argument;
                    nextSibling = 0;
                }else{
                    // an object hash
                    for(var key in argument){
                        current[key] = argument[key];
                    }
                }
            }else if(lastSelectorArg === i - 1){
                // a text node should be created
                // take a scalar value, use createTextNode so it is properly escaped
                // createTextNode is generally several times faster than doing an escaped innerHTML insertion: http://jsperf.com/createtextnode-vs-innerhtml/2
                insertTextNode(current, argument);
            }else{
                if(i < 1){
                    // if we are starting with a selector, there is no top element
                    topReferenceElement = null;
                }
                lastSelectorArg = i;
                var leftoverCharacters = argument.replace(selectorParse, function(t, combinator, prefix, value, attrName, attrValue){
                    if(combinator){
                        // insert the last current object
                        insertLastElement();
                        if(combinator == '-' || combinator == '+'){
                            // + or - combinator,
                            // TODO: add support for >- as a means of indicating before the first child?
                            referenceElement = (nextSibling = (current || referenceElement)).parentNode;
                            if (referenceElement == null) {
                                referenceElement = fragment = fragment || doc.createDocumentFragment();
                                fragment.appendChild(current);
                                nextSibling = current;
                            }
                            current = null;
                            if(combinator == "+"){
                                nextSibling = nextSibling.nextSibling;
                            }// else a - operator, again not in CSS, but obvious in it's meaning (create next element before the current/referenceElement)
                        }else{
                            if(combinator == "<"){
                                // parent combinator (not really in CSS, but theorized, and obvious in it's meaning)
                                referenceElement = (current || referenceElement).parentNode;
                            if (referenceElement == null) {
                                referenceElement = fragment = fragment || doc.createDocumentFragment();
                                fragment.appendChild(current);
                                current = fragment;
                            } else {
                                current = referenceElement;
                            }
                            }else{
                                if(combinator == ","){
                                    // comma combinator, start a new selector
                                    referenceElement = topReferenceElement;
                                }else if(current){
                                    // else descendent or child selector (doesn't matter, treated the same),
                                    referenceElement = current;
                                }
                                current = null;
                            }
                            nextSibling = 0;
                        }
                        if(current){
                            referenceElement = current;
                        }
                    }
                    var tag = !prefix && value;
                    if(tag || (!current && (prefix || attrName))){
                        if(tag == "$"){
                            // this is a variable to be replaced with a text node
                            insertTextNode(referenceElement, args[++i]);
                        }else{
                            // Need to create an element
                            tag = tag || zen.defaultTag;
                            var ieInputName = ieCreateElement && args[i +1] && args[i +1].name;
                            if(ieInputName){
                                // in IE, we have to use the crazy non-standard createElement to create input's that have a name
                                tag = '<' + tag + ' name="' + ieInputName + '">';
                            }
                            current = doc.createElement(tag);
                        }
                    }
                    if(prefix){
                        if(value == "$"){
                            value = args[++i];
                        }
                        if(prefix == "#"){
                            // #id was specified
                            current.id = value;
                        }else{
                            // we are in the className addition and removal branch
                            var currentClassName = current.className;
                            // remove the className (needed for addition or removal)
                            // see http://jsperf.com/remove-class-name-algorithm/2 for some tests on this
                            var removed = currentClassName && (" " + currentClassName + " ").replace(" " + value + " ", " ");
                            if(prefix == "."){
                                // addition, add the className
                                current.className = currentClassName ? (removed + value).substring(1) : value;
                            }else{
                                // else a '!' class removal
                                if(argument == "!"){
                                    // special signal to delete this element
                                    Y.one(current).destroy(true).remove(); // This cleans up events, data, etc
                                }else{
                                    // we already have removed the class, just need to trim
                                    removed = removed.substring(1, removed.length - 1);
                                    // only assign if it changed, this can save a lot of time
                                    if(removed != currentClassName){
                                        current.className = removed;
                                    }
                                }
                            }
                            // CSS class removal
                        }
                    }
                    if(attrName){
                        if(attrValue == "$"){
                            attrValue = args[++i];
                        }
                        // [name=value]
                        if(attrName == "style"){
                            // handle the special case of setAttribute not working in old IE
                            current.style.cssText = attrValue;
                        }else{
                            current[attrName.charAt(0) == "!" ? (attrName = attrName.substring(1)) && 'removeAttribute' : 'setAttribute'](attrName, attrValue === '' ? attrName : attrValue);
                        }
                    }
                    return '';
                });
                if(leftoverCharacters){
                    throw new SyntaxError("Unexpected char " + leftoverCharacters + " in " + argument);
                }
                insertLastElement();
                referenceElement = returnValue = current || referenceElement;
            }
        }
        if(topReferenceElement && fragment){
            // we now insert the top level elements for the fragment if it exists
            topReferenceElement.appendChild(fragment);
        }
        return Y.one(returnValue);
    }
    zen.defaultTag = "div";
    zen.setDocument = function(document, newFragmentHeuristic){
        doc = document;
        fragmentFasterHeuristic = newFragmentHeuristic || fragmentFasterHeuristic;
    };

    // Plug into YUI
    /**
    * @method zen
    * @param {String} The put selector template to use to create a node or document
    * fragment
    * @return {Object} The node or document fragment based off the given put selector
    *   template string
    */
    Y.zen = zen;
    if (Y.Node){
        Y.Node.addMethod('zen', function(){
            return zen.apply(null, arguments);
        });
        Y.NodeList.importMethod(Y.Node.prototype, 'zen');
    }
}, '1.0', {requires:[
    'node'
]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/anim-xy/anim-xy.js
// ----------------------------------------------------------------------------------------

YUI.add('anim-xy', function (Y, NAME) {

/**
 * Adds support for the <code>xy</code> property in <code>from</code> and
 * <code>to</code> attributes.
 * @module anim
 * @submodule anim-xy
 */

var NUM = Number;

Y.Anim.behaviors.xy = {
    set: function(anim, att, from, to, elapsed, duration, fn) {
        anim._node.setXY([
            fn(elapsed, NUM(from[0]), NUM(to[0]) - NUM(from[0]), duration),
            fn(elapsed, NUM(from[1]), NUM(to[1]) - NUM(from[1]), duration)
        ]);
    },
    get: function(anim) {
        return anim._node.getXY();
    }
};



}, '3.10.1', {"requires": ["anim-base", "node-screen"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-custom-base/event-custom-base.js
// ----------------------------------------------------------------------------------------

YUI.add('event-custom-base', function (Y, NAME) {

/**
 * Custom event engine, DOM event listener abstraction layer, synthetic DOM
 * events.
 * @module event-custom
 */

Y.Env.evt = {
    handles: {},
    plugins: {}
};


/**
 * Custom event engine, DOM event listener abstraction layer, synthetic DOM
 * events.
 * @module event-custom
 * @submodule event-custom-base
 */

/**
 * Allows for the insertion of methods that are executed before or after
 * a specified method
 * @class Do
 * @static
 */

var DO_BEFORE = 0,
    DO_AFTER = 1,

DO = {

    /**
     * Cache of objects touched by the utility
     * @property objs
     * @static
     * @deprecated Since 3.6.0. The `_yuiaop` property on the AOP'd object
     * replaces the role of this property, but is considered to be private, and
     * is only mentioned to provide a migration path.
     *
     * If you have a use case which warrants migration to the _yuiaop property,
     * please file a ticket to let us know what it's used for and we can see if
     * we need to expose hooks for that functionality more formally.
     */
    objs: null,

    /**
     * <p>Execute the supplied method before the specified function.  Wrapping
     * function may optionally return an instance of the following classes to
     * further alter runtime behavior:</p>
     * <dl>
     *     <dt></code>Y.Do.Halt(message, returnValue)</code></dt>
     *         <dd>Immediatly stop execution and return
     *         <code>returnValue</code>.  No other wrapping functions will be
     *         executed.</dd>
     *     <dt></code>Y.Do.AlterArgs(message, newArgArray)</code></dt>
     *         <dd>Replace the arguments that the original function will be
     *         called with.</dd>
     *     <dt></code>Y.Do.Prevent(message)</code></dt>
     *         <dd>Don't execute the wrapped function.  Other before phase
     *         wrappers will be executed.</dd>
     * </dl>
     *
     * @method before
     * @param fn {Function} the function to execute
     * @param obj the object hosting the method to displace
     * @param sFn {string} the name of the method to displace
     * @param c The execution context for fn
     * @param arg* {mixed} 0..n additional arguments to supply to the subscriber
     * when the event fires.
     * @return {string} handle for the subscription
     * @static
     */
    before: function(fn, obj, sFn, c) {
        var f = fn, a;
        if (c) {
            a = [fn, c].concat(Y.Array(arguments, 4, true));
            f = Y.rbind.apply(Y, a);
        }

        return this._inject(DO_BEFORE, f, obj, sFn);
    },

    /**
     * <p>Execute the supplied method after the specified function.  Wrapping
     * function may optionally return an instance of the following classes to
     * further alter runtime behavior:</p>
     * <dl>
     *     <dt></code>Y.Do.Halt(message, returnValue)</code></dt>
     *         <dd>Immediatly stop execution and return
     *         <code>returnValue</code>.  No other wrapping functions will be
     *         executed.</dd>
     *     <dt></code>Y.Do.AlterReturn(message, returnValue)</code></dt>
     *         <dd>Return <code>returnValue</code> instead of the wrapped
     *         method's original return value.  This can be further altered by
     *         other after phase wrappers.</dd>
     * </dl>
     *
     * <p>The static properties <code>Y.Do.originalRetVal</code> and
     * <code>Y.Do.currentRetVal</code> will be populated for reference.</p>
     *
     * @method after
     * @param fn {Function} the function to execute
     * @param obj the object hosting the method to displace
     * @param sFn {string} the name of the method to displace
     * @param c The execution context for fn
     * @param arg* {mixed} 0..n additional arguments to supply to the subscriber
     * @return {string} handle for the subscription
     * @static
     */
    after: function(fn, obj, sFn, c) {
        var f = fn, a;
        if (c) {
            a = [fn, c].concat(Y.Array(arguments, 4, true));
            f = Y.rbind.apply(Y, a);
        }

        return this._inject(DO_AFTER, f, obj, sFn);
    },

    /**
     * Execute the supplied method before or after the specified function.
     * Used by <code>before</code> and <code>after</code>.
     *
     * @method _inject
     * @param when {string} before or after
     * @param fn {Function} the function to execute
     * @param obj the object hosting the method to displace
     * @param sFn {string} the name of the method to displace
     * @param c The execution context for fn
     * @return {string} handle for the subscription
     * @private
     * @static
     */
    _inject: function(when, fn, obj, sFn) {
        // object id
        var id = Y.stamp(obj), o, sid;

        if (!obj._yuiaop) {
            // create a map entry for the obj if it doesn't exist, to hold overridden methods
            obj._yuiaop = {};
        }

        o = obj._yuiaop;

        if (!o[sFn]) {
            // create a map entry for the method if it doesn't exist
            o[sFn] = new Y.Do.Method(obj, sFn);

            // re-route the method to our wrapper
            obj[sFn] = function() {
                return o[sFn].exec.apply(o[sFn], arguments);
            };
        }

        // subscriber id
        sid = id + Y.stamp(fn) + sFn;

        // register the callback
        o[sFn].register(sid, fn, when);

        return new Y.EventHandle(o[sFn], sid);
    },

    /**
     * Detach a before or after subscription.
     *
     * @method detach
     * @param handle {string} the subscription handle
     * @static
     */
    detach: function(handle) {
        if (handle.detach) {
            handle.detach();
        }
    }
};

Y.Do = DO;

//////////////////////////////////////////////////////////////////////////

/**
 * Contains the return value from the wrapped method, accessible
 * by 'after' event listeners.
 *
 * @property originalRetVal
 * @static
 * @since 3.2.0
 */

/**
 * Contains the current state of the return value, consumable by
 * 'after' event listeners, and updated if an after subscriber
 * changes the return value generated by the wrapped function.
 *
 * @property currentRetVal
 * @static
 * @since 3.2.0
 */

//////////////////////////////////////////////////////////////////////////

/**
 * Wrapper for a displaced method with aop enabled
 * @class Do.Method
 * @constructor
 * @param obj The object to operate on
 * @param sFn The name of the method to displace
 */
DO.Method = function(obj, sFn) {
    this.obj = obj;
    this.methodName = sFn;
    this.method = obj[sFn];
    this.before = {};
    this.after = {};
};

/**
 * Register a aop subscriber
 * @method register
 * @param sid {string} the subscriber id
 * @param fn {Function} the function to execute
 * @param when {string} when to execute the function
 */
DO.Method.prototype.register = function (sid, fn, when) {
    if (when) {
        this.after[sid] = fn;
    } else {
        this.before[sid] = fn;
    }
};

/**
 * Unregister a aop subscriber
 * @method delete
 * @param sid {string} the subscriber id
 * @param fn {Function} the function to execute
 * @param when {string} when to execute the function
 */
DO.Method.prototype._delete = function (sid) {
    delete this.before[sid];
    delete this.after[sid];
};

/**
 * <p>Execute the wrapped method.  All arguments are passed into the wrapping
 * functions.  If any of the before wrappers return an instance of
 * <code>Y.Do.Halt</code> or <code>Y.Do.Prevent</code>, neither the wrapped
 * function nor any after phase subscribers will be executed.</p>
 *
 * <p>The return value will be the return value of the wrapped function or one
 * provided by a wrapper function via an instance of <code>Y.Do.Halt</code> or
 * <code>Y.Do.AlterReturn</code>.
 *
 * @method exec
 * @param arg* {any} Arguments are passed to the wrapping and wrapped functions
 * @return {any} Return value of wrapped function unless overwritten (see above)
 */
DO.Method.prototype.exec = function () {

    var args = Y.Array(arguments, 0, true),
        i, ret, newRet,
        bf = this.before,
        af = this.after,
        prevented = false;

    // execute before
    for (i in bf) {
        if (bf.hasOwnProperty(i)) {
            ret = bf[i].apply(this.obj, args);
            if (ret) {
                switch (ret.constructor) {
                    case DO.Halt:
                        return ret.retVal;
                    case DO.AlterArgs:
                        args = ret.newArgs;
                        break;
                    case DO.Prevent:
                        prevented = true;
                        break;
                    default:
                }
            }
        }
    }

    // execute method
    if (!prevented) {
        ret = this.method.apply(this.obj, args);
    }

    DO.originalRetVal = ret;
    DO.currentRetVal = ret;

    // execute after methods.
    for (i in af) {
        if (af.hasOwnProperty(i)) {
            newRet = af[i].apply(this.obj, args);
            // Stop processing if a Halt object is returned
            if (newRet && newRet.constructor === DO.Halt) {
                return newRet.retVal;
            // Check for a new return value
            } else if (newRet && newRet.constructor === DO.AlterReturn) {
                ret = newRet.newRetVal;
                // Update the static retval state
                DO.currentRetVal = ret;
            }
        }
    }

    return ret;
};

//////////////////////////////////////////////////////////////////////////

/**
 * Return an AlterArgs object when you want to change the arguments that
 * were passed into the function.  Useful for Do.before subscribers.  An
 * example would be a service that scrubs out illegal characters prior to
 * executing the core business logic.
 * @class Do.AlterArgs
 * @constructor
 * @param msg {String} (optional) Explanation of the altered return value
 * @param newArgs {Array} Call parameters to be used for the original method
 *                        instead of the arguments originally passed in.
 */
DO.AlterArgs = function(msg, newArgs) {
    this.msg = msg;
    this.newArgs = newArgs;
};

/**
 * Return an AlterReturn object when you want to change the result returned
 * from the core method to the caller.  Useful for Do.after subscribers.
 * @class Do.AlterReturn
 * @constructor
 * @param msg {String} (optional) Explanation of the altered return value
 * @param newRetVal {any} Return value passed to code that invoked the wrapped
 *                      function.
 */
DO.AlterReturn = function(msg, newRetVal) {
    this.msg = msg;
    this.newRetVal = newRetVal;
};

/**
 * Return a Halt object when you want to terminate the execution
 * of all subsequent subscribers as well as the wrapped method
 * if it has not exectued yet.  Useful for Do.before subscribers.
 * @class Do.Halt
 * @constructor
 * @param msg {String} (optional) Explanation of why the termination was done
 * @param retVal {any} Return value passed to code that invoked the wrapped
 *                      function.
 */
DO.Halt = function(msg, retVal) {
    this.msg = msg;
    this.retVal = retVal;
};

/**
 * Return a Prevent object when you want to prevent the wrapped function
 * from executing, but want the remaining listeners to execute.  Useful
 * for Do.before subscribers.
 * @class Do.Prevent
 * @constructor
 * @param msg {String} (optional) Explanation of why the termination was done
 */
DO.Prevent = function(msg) {
    this.msg = msg;
};

/**
 * Return an Error object when you want to terminate the execution
 * of all subsequent method calls.
 * @class Do.Error
 * @constructor
 * @param msg {String} (optional) Explanation of the altered return value
 * @param retVal {any} Return value passed to code that invoked the wrapped
 *                      function.
 * @deprecated use Y.Do.Halt or Y.Do.Prevent
 */
DO.Error = DO.Halt;


//////////////////////////////////////////////////////////////////////////

/**
 * Custom event engine, DOM event listener abstraction layer, synthetic DOM
 * events.
 * @module event-custom
 * @submodule event-custom-base
 */


// var onsubscribeType = "_event:onsub",
var YArray = Y.Array,

    AFTER = 'after',
    CONFIGS = [
        'broadcast',
        'monitored',
        'bubbles',
        'context',
        'contextFn',
        'currentTarget',
        'defaultFn',
        'defaultTargetOnly',
        'details',
        'emitFacade',
        'fireOnce',
        'async',
        'host',
        'preventable',
        'preventedFn',
        'queuable',
        'silent',
        'stoppedFn',
        'target',
        'type'
    ],

    CONFIGS_HASH = YArray.hash(CONFIGS),

    nativeSlice = Array.prototype.slice,

    YUI3_SIGNATURE = 9,
    YUI_LOG = 'yui:log',

    mixConfigs = function(r, s, ov) {
        var p;

        for (p in s) {
            if (CONFIGS_HASH[p] && (ov || !(p in r))) {
                r[p] = s[p];
            }
        }

        return r;
    };

/**
 * The CustomEvent class lets you define events for your application
 * that can be subscribed to by one or more independent component.
 *
 * @param {String} type The type of event, which is passed to the callback
 * when the event fires.
 * @param {object} defaults configuration object.
 * @class CustomEvent
 * @constructor
 */

 /**
 * The type of event, returned to subscribers when the event fires
 * @property type
 * @type string
 */

/**
 * By default all custom events are logged in the debug build, set silent
 * to true to disable debug outpu for this event.
 * @property silent
 * @type boolean
 */

Y.CustomEvent = function(type, defaults) {

    this._kds = Y.CustomEvent.keepDeprecatedSubs;

    this.id = Y.guid();

    this.type = type;
    this.silent = this.logSystem = (type === YUI_LOG);

    if (this._kds) {
        /**
         * The subscribers to this event
         * @property subscribers
         * @type Subscriber {}
         * @deprecated
         */

        /**
         * 'After' subscribers
         * @property afters
         * @type Subscriber {}
         * @deprecated
         */
        this.subscribers = {};
        this.afters = {};
    }

    if (defaults) {
        mixConfigs(this, defaults, true);
    }
};

/**
 * Static flag to enable population of the <a href="#property_subscribers">`subscribers`</a>
 * and  <a href="#property_subscribers">`afters`</a> properties held on a `CustomEvent` instance.
 *
 * These properties were changed to private properties (`_subscribers` and `_afters`), and
 * converted from objects to arrays for performance reasons.
 *
 * Setting this property to true will populate the deprecated `subscribers` and `afters`
 * properties for people who may be using them (which is expected to be rare). There will
 * be a performance hit, compared to the new array based implementation.
 *
 * If you are using these deprecated properties for a use case which the public API
 * does not support, please file an enhancement request, and we can provide an alternate
 * public implementation which doesn't have the performance cost required to maintiain the
 * properties as objects.
 *
 * @property keepDeprecatedSubs
 * @static
 * @for CustomEvent
 * @type boolean
 * @default false
 * @deprecated
 */
Y.CustomEvent.keepDeprecatedSubs = false;

Y.CustomEvent.mixConfigs = mixConfigs;

Y.CustomEvent.prototype = {

    constructor: Y.CustomEvent,

    /**
     * Monitor when an event is attached or detached.
     *
     * @property monitored
     * @type boolean
     */

    /**
     * If 0, this event does not broadcast.  If 1, the YUI instance is notified
     * every time this event fires.  If 2, the YUI instance and the YUI global
     * (if event is enabled on the global) are notified every time this event
     * fires.
     * @property broadcast
     * @type int
     */

    /**
     * Specifies whether this event should be queued when the host is actively
     * processing an event.  This will effect exectution order of the callbacks
     * for the various events.
     * @property queuable
     * @type boolean
     * @default false
     */

    /**
     * This event has fired if true
     *
     * @property fired
     * @type boolean
     * @default false;
     */

    /**
     * An array containing the arguments the custom event
     * was last fired with.
     * @property firedWith
     * @type Array
     */

    /**
     * This event should only fire one time if true, and if
     * it has fired, any new subscribers should be notified
     * immediately.
     *
     * @property fireOnce
     * @type boolean
     * @default false;
     */

    /**
     * fireOnce listeners will fire syncronously unless async
     * is set to true
     * @property async
     * @type boolean
     * @default false
     */

    /**
     * Flag for stopPropagation that is modified during fire()
     * 1 means to stop propagation to bubble targets.  2 means
     * to also stop additional subscribers on this target.
     * @property stopped
     * @type int
     */

    /**
     * Flag for preventDefault that is modified during fire().
     * if it is not 0, the default behavior for this event
     * @property prevented
     * @type int
     */

    /**
     * Specifies the host for this custom event.  This is used
     * to enable event bubbling
     * @property host
     * @type EventTarget
     */

    /**
     * The default function to execute after event listeners
     * have fire, but only if the default action was not
     * prevented.
     * @property defaultFn
     * @type Function
     */

    /**
     * The function to execute if a subscriber calls
     * stopPropagation or stopImmediatePropagation
     * @property stoppedFn
     * @type Function
     */

    /**
     * The function to execute if a subscriber calls
     * preventDefault
     * @property preventedFn
     * @type Function
     */

    /**
     * The subscribers to this event
     * @property _subscribers
     * @type Subscriber []
     * @private
     */

    /**
     * 'After' subscribers
     * @property _afters
     * @type Subscriber []
     * @private
     */

    /**
     * If set to true, the custom event will deliver an EventFacade object
     * that is similar to a DOM event object.
     * @property emitFacade
     * @type boolean
     * @default false
     */

    /**
     * Supports multiple options for listener signatures in order to
     * port YUI 2 apps.
     * @property signature
     * @type int
     * @default 9
     */
    signature : YUI3_SIGNATURE,

    /**
     * The context the the event will fire from by default.  Defaults to the YUI
     * instance.
     * @property context
     * @type object
     */
    context : Y,

    /**
     * Specifies whether or not this event's default function
     * can be cancelled by a subscriber by executing preventDefault()
     * on the event facade
     * @property preventable
     * @type boolean
     * @default true
     */
    preventable : true,

    /**
     * Specifies whether or not a subscriber can stop the event propagation
     * via stopPropagation(), stopImmediatePropagation(), or halt()
     *
     * Events can only bubble if emitFacade is true.
     *
     * @property bubbles
     * @type boolean
     * @default true
     */
    bubbles : true,

    /**
     * Returns the number of subscribers for this event as the sum of the on()
     * subscribers and after() subscribers.
     *
     * @method hasSubs
     * @return Number
     */
    hasSubs: function(when) {
        var s = 0,
            a = 0,
            subs = this._subscribers,
            afters = this._afters,
            sib = this.sibling;

        if (subs) {
            s = subs.length;
        }

        if (afters) {
            a = afters.length;
        }

        if (sib) {
            subs = sib._subscribers;
            afters = sib._afters;

            if (subs) {
                s += subs.length;
            }

            if (afters) {
                a += afters.length;
            }
        }

        if (when) {
            return (when === 'after') ? a : s;
        }

        return (s + a);
    },

    /**
     * Monitor the event state for the subscribed event.  The first parameter
     * is what should be monitored, the rest are the normal parameters when
     * subscribing to an event.
     * @method monitor
     * @param what {string} what to monitor ('detach', 'attach', 'publish').
     * @return {EventHandle} return value from the monitor event subscription.
     */
    monitor: function(what) {
        this.monitored = true;
        var type = this.id + '|' + this.type + '_' + what,
            args = nativeSlice.call(arguments, 0);
        args[0] = type;
        return this.host.on.apply(this.host, args);
    },

    /**
     * Get all of the subscribers to this event and any sibling event
     * @method getSubs
     * @return {Array} first item is the on subscribers, second the after.
     */
    getSubs: function() {

        var sibling = this.sibling,
            subs = this._subscribers,
            afters = this._afters,
            siblingSubs,
            siblingAfters;

        if (sibling) {
            siblingSubs = sibling._subscribers;
            siblingAfters = sibling._afters;
        }

        if (siblingSubs) {
            if (subs) {
                subs = subs.concat(siblingSubs);
            } else {
                subs = siblingSubs.concat();
            }
        } else {
            if (subs) {
                subs = subs.concat();
            } else {
                subs = [];
            }
        }

        if (siblingAfters) {
            if (afters) {
                afters = afters.concat(siblingAfters);
            } else {
                afters = siblingAfters.concat();
            }
        } else {
            if (afters) {
                afters = afters.concat();
            } else {
                afters = [];
            }
        }

        return [subs, afters];
    },

    /**
     * Apply configuration properties.  Only applies the CONFIG whitelist
     * @method applyConfig
     * @param o hash of properties to apply.
     * @param force {boolean} if true, properties that exist on the event
     * will be overwritten.
     */
    applyConfig: function(o, force) {
        mixConfigs(this, o, force);
    },

    /**
     * Create the Subscription for subscribing function, context, and bound
     * arguments.  If this is a fireOnce event, the subscriber is immediately
     * notified.
     *
     * @method _on
     * @param fn {Function} Subscription callback
     * @param [context] {Object} Override `this` in the callback
     * @param [args] {Array} bound arguments that will be passed to the callback after the arguments generated by fire()
     * @param [when] {String} "after" to slot into after subscribers
     * @return {EventHandle}
     * @protected
     */
    _on: function(fn, context, args, when) {


        var s = new Y.Subscriber(fn, context, args, when);

        if (this.fireOnce && this.fired) {
            if (this.async) {
                setTimeout(Y.bind(this._notify, this, s, this.firedWith), 0);
            } else {
                this._notify(s, this.firedWith);
            }
        }

        if (when === AFTER) {
            if (!this._afters) {
                this._afters = [];
                this._hasAfters = true;
            }
            this._afters.push(s);
        } else {
            if (!this._subscribers) {
                this._subscribers = [];
                this._hasSubs = true;
            }
            this._subscribers.push(s);
        }

        if (this._kds) {
            if (when === AFTER) {
                this.afters[s.id] = s;
            } else {
                this.subscribers[s.id] = s;
            }
        }

        return new Y.EventHandle(this, s);
    },

    /**
     * Listen for this event
     * @method subscribe
     * @param {Function} fn The function to execute.
     * @return {EventHandle} Unsubscribe handle.
     * @deprecated use on.
     */
    subscribe: function(fn, context) {
        var a = (arguments.length > 2) ? nativeSlice.call(arguments, 2) : null;
        return this._on(fn, context, a, true);
    },

    /**
     * Listen for this event
     * @method on
     * @param {Function} fn The function to execute.
     * @param {object} context optional execution context.
     * @param {mixed} arg* 0..n additional arguments to supply to the subscriber
     * when the event fires.
     * @return {EventHandle} An object with a detach method to detch the handler(s).
     */
    on: function(fn, context) {
        var a = (arguments.length > 2) ? nativeSlice.call(arguments, 2) : null;

        if (this.monitored && this.host) {
            this.host._monitor('attach', this, {
                args: arguments
            });
        }
        return this._on(fn, context, a, true);
    },

    /**
     * Listen for this event after the normal subscribers have been notified and
     * the default behavior has been applied.  If a normal subscriber prevents the
     * default behavior, it also prevents after listeners from firing.
     * @method after
     * @param {Function} fn The function to execute.
     * @param {object} context optional execution context.
     * @param {mixed} arg* 0..n additional arguments to supply to the subscriber
     * when the event fires.
     * @return {EventHandle} handle Unsubscribe handle.
     */
    after: function(fn, context) {
        var a = (arguments.length > 2) ? nativeSlice.call(arguments, 2) : null;
        return this._on(fn, context, a, AFTER);
    },

    /**
     * Detach listeners.
     * @method detach
     * @param {Function} fn  The subscribed function to remove, if not supplied
     *                       all will be removed.
     * @param {Object}   context The context object passed to subscribe.
     * @return {int} returns the number of subscribers unsubscribed.
     */
    detach: function(fn, context) {
        // unsubscribe handle
        if (fn && fn.detach) {
            return fn.detach();
        }

        var i, s,
            found = 0,
            subs = this._subscribers,
            afters = this._afters;

        if (subs) {
            for (i = subs.length; i >= 0; i--) {
                s = subs[i];
                if (s && (!fn || fn === s.fn)) {
                    this._delete(s, subs, i);
                    found++;
                }
            }
        }

        if (afters) {
            for (i = afters.length; i >= 0; i--) {
                s = afters[i];
                if (s && (!fn || fn === s.fn)) {
                    this._delete(s, afters, i);
                    found++;
                }
            }
        }

        return found;
    },

    /**
     * Detach listeners.
     * @method unsubscribe
     * @param {Function} fn  The subscribed function to remove, if not supplied
     *                       all will be removed.
     * @param {Object}   context The context object passed to subscribe.
     * @return {int|undefined} returns the number of subscribers unsubscribed.
     * @deprecated use detach.
     */
    unsubscribe: function() {
        return this.detach.apply(this, arguments);
    },

    /**
     * Notify a single subscriber
     * @method _notify
     * @param {Subscriber} s the subscriber.
     * @param {Array} args the arguments array to apply to the listener.
     * @protected
     */
    _notify: function(s, args, ef) {


        var ret;

        ret = s.notify(args, this);

        if (false === ret || this.stopped > 1) {
            return false;
        }

        return true;
    },

    /**
     * Logger abstraction to centralize the application of the silent flag
     * @method log
     * @param {string} msg message to log.
     * @param {string} cat log category.
     */
    log: function(msg, cat) {
    },

    /**
     * Notifies the subscribers.  The callback functions will be executed
     * from the context specified when the event was created, and with the
     * following parameters:
     *   <ul>
     *   <li>The type of event</li>
     *   <li>All of the arguments fire() was executed with as an array</li>
     *   <li>The custom object (if any) that was passed into the subscribe()
     *       method</li>
     *   </ul>
     * @method fire
     * @param {Object*} arguments an arbitrary set of parameters to pass to
     *                            the handler.
     * @return {boolean} false if one of the subscribers returned false,
     *                   true otherwise.
     *
     */
    fire: function() {

        // push is the fastest way to go from arguments to arrays
        // for most browsers currently
        // http://jsperf.com/push-vs-concat-vs-slice/2

        var args = [];
        args.push.apply(args, arguments);

        return this._fire(args);
    },

    /**
     * Private internal implementation for `fire`, which is can be used directly by
     * `EventTarget` and other event module classes which have already converted from
     * an `arguments` list to an array, to avoid the repeated overhead.
     *
     * @method _fire
     * @private
     * @param {Array} args The array of arguments passed to be passed to handlers.
     * @return {boolean} false if one of the subscribers returned false, true otherwise.
     */
    _fire: function(args) {

        if (this.fireOnce && this.fired) {
            return true;
        } else {

            // this doesn't happen if the event isn't published
            // this.host._monitor('fire', this.type, args);

            this.fired = true;

            if (this.fireOnce) {
                this.firedWith = args;
            }

            if (this.emitFacade) {
                return this.fireComplex(args);
            } else {
                return this.fireSimple(args);
            }
        }
    },

    /**
     * Set up for notifying subscribers of non-emitFacade events.
     *
     * @method fireSimple
     * @param args {Array} Arguments passed to fire()
     * @return Boolean false if a subscriber returned false
     * @protected
     */
    fireSimple: function(args) {
        this.stopped = 0;
        this.prevented = 0;
        if (this.hasSubs()) {
            var subs = this.getSubs();
            this._procSubs(subs[0], args);
            this._procSubs(subs[1], args);
        }
        if (this.broadcast) {
            this._broadcast(args);
        }
        return this.stopped ? false : true;
    },

    // Requires the event-custom-complex module for full funcitonality.
    fireComplex: function(args) {
        args[0] = args[0] || {};
        return this.fireSimple(args);
    },

    /**
     * Notifies a list of subscribers.
     *
     * @method _procSubs
     * @param subs {Array} List of subscribers
     * @param args {Array} Arguments passed to fire()
     * @param ef {}
     * @return Boolean false if a subscriber returns false or stops the event
     *              propagation via e.stopPropagation(),
     *              e.stopImmediatePropagation(), or e.halt()
     * @private
     */
    _procSubs: function(subs, args, ef) {
        var s, i, l;

        for (i = 0, l = subs.length; i < l; i++) {
            s = subs[i];
            if (s && s.fn) {
                if (false === this._notify(s, args, ef)) {
                    this.stopped = 2;
                }
                if (this.stopped === 2) {
                    return false;
                }
            }
        }

        return true;
    },

    /**
     * Notifies the YUI instance if the event is configured with broadcast = 1,
     * and both the YUI instance and Y.Global if configured with broadcast = 2.
     *
     * @method _broadcast
     * @param args {Array} Arguments sent to fire()
     * @private
     */
    _broadcast: function(args) {
        if (!this.stopped && this.broadcast) {

            var a = args.concat();
            a.unshift(this.type);

            if (this.host !== Y) {
                Y.fire.apply(Y, a);
            }

            if (this.broadcast === 2) {
                Y.Global.fire.apply(Y.Global, a);
            }
        }
    },

    /**
     * Removes all listeners
     * @method unsubscribeAll
     * @return {int} The number of listeners unsubscribed.
     * @deprecated use detachAll.
     */
    unsubscribeAll: function() {
        return this.detachAll.apply(this, arguments);
    },

    /**
     * Removes all listeners
     * @method detachAll
     * @return {int} The number of listeners unsubscribed.
     */
    detachAll: function() {
        return this.detach();
    },

    /**
     * Deletes the subscriber from the internal store of on() and after()
     * subscribers.
     *
     * @method _delete
     * @param s subscriber object.
     * @param subs (optional) on or after subscriber array
     * @param index (optional) The index found.
     * @private
     */
    _delete: function(s, subs, i) {
        var when = s._when;

        if (!subs) {
            subs = (when === AFTER) ? this._afters : this._subscribers;
            i = YArray.indexOf(subs, s, 0);
        }

        if (subs) {
            if (s && subs[i] === s) {
                subs.splice(i, 1);

                if (subs.length === 0) {
                    if (when === AFTER) {
                        this._hasAfters = false;
                    } else {
                        this._hasSubs = false;
                    }
                }
            }
        }

        if (this._kds) {
            if (when === AFTER) {
                delete this.afters[s.id];
            } else {
                delete this.subscribers[s.id];
            }
        }

        if (this.monitored && this.host) {
            this.host._monitor('detach', this, {
                ce: this,
                sub: s
            });
        }

        if (s) {
            s.deleted = true;
        }
    }
};
/**
 * Stores the subscriber information to be used when the event fires.
 * @param {Function} fn       The wrapped function to execute.
 * @param {Object}   context  The value of the keyword 'this' in the listener.
 * @param {Array} args*       0..n additional arguments to supply the listener.
 *
 * @class Subscriber
 * @constructor
 */
Y.Subscriber = function(fn, context, args, when) {

    /**
     * The callback that will be execute when the event fires
     * This is wrapped by Y.rbind if obj was supplied.
     * @property fn
     * @type Function
     */
    this.fn = fn;

    /**
     * Optional 'this' keyword for the listener
     * @property context
     * @type Object
     */
    this.context = context;

    /**
     * Unique subscriber id
     * @property id
     * @type String
     */
    this.id = Y.guid();

    /**
     * Additional arguments to propagate to the subscriber
     * @property args
     * @type Array
     */
    this.args = args;

    this._when = when;

    /**
     * Custom events for a given fire transaction.
     * @property events
     * @type {EventTarget}
     */
    // this.events = null;

    /**
     * This listener only reacts to the event once
     * @property once
     */
    // this.once = false;

};

Y.Subscriber.prototype = {
    constructor: Y.Subscriber,

    _notify: function(c, args, ce) {
        if (this.deleted && !this.postponed) {
            if (this.postponed) {
                delete this.fn;
                delete this.context;
            } else {
                delete this.postponed;
                return null;
            }
        }
        var a = this.args, ret;
        switch (ce.signature) {
            case 0:
                ret = this.fn.call(c, ce.type, args, c);
                break;
            case 1:
                ret = this.fn.call(c, args[0] || null, c);
                break;
            default:
                if (a || args) {
                    args = args || [];
                    a = (a) ? args.concat(a) : args;
                    ret = this.fn.apply(c, a);
                } else {
                    ret = this.fn.call(c);
                }
        }

        if (this.once) {
            ce._delete(this);
        }

        return ret;
    },

    /**
     * Executes the subscriber.
     * @method notify
     * @param args {Array} Arguments array for the subscriber.
     * @param ce {CustomEvent} The custom event that sent the notification.
     */
    notify: function(args, ce) {
        var c = this.context,
            ret = true;

        if (!c) {
            c = (ce.contextFn) ? ce.contextFn() : ce.context;
        }

        // only catch errors if we will not re-throw them.
        if (Y.config && Y.config.throwFail) {
            ret = this._notify(c, args, ce);
        } else {
            try {
                ret = this._notify(c, args, ce);
            } catch (e) {
                Y.error(this + ' failed: ' + e.message, e);
            }
        }

        return ret;
    },

    /**
     * Returns true if the fn and obj match this objects properties.
     * Used by the unsubscribe method to match the right subscriber.
     *
     * @method contains
     * @param {Function} fn the function to execute.
     * @param {Object} context optional 'this' keyword for the listener.
     * @return {boolean} true if the supplied arguments match this
     *                   subscriber's signature.
     */
    contains: function(fn, context) {
        if (context) {
            return ((this.fn === fn) && this.context === context);
        } else {
            return (this.fn === fn);
        }
    },

    valueOf : function() {
        return this.id;
    }

};
/**
 * Return value from all subscribe operations
 * @class EventHandle
 * @constructor
 * @param {CustomEvent} evt the custom event.
 * @param {Subscriber} sub the subscriber.
 */
Y.EventHandle = function(evt, sub) {

    /**
     * The custom event
     *
     * @property evt
     * @type CustomEvent
     */
    this.evt = evt;

    /**
     * The subscriber object
     *
     * @property sub
     * @type Subscriber
     */
    this.sub = sub;
};

Y.EventHandle.prototype = {
    batch: function(f, c) {
        f.call(c || this, this);
        if (Y.Lang.isArray(this.evt)) {
            Y.Array.each(this.evt, function(h) {
                h.batch.call(c || h, f);
            });
        }
    },

    /**
     * Detaches this subscriber
     * @method detach
     * @return {int} the number of detached listeners
     */
    detach: function() {
        var evt = this.evt, detached = 0, i;
        if (evt) {
            if (Y.Lang.isArray(evt)) {
                for (i = 0; i < evt.length; i++) {
                    detached += evt[i].detach();
                }
            } else {
                evt._delete(this.sub);
                detached = 1;
            }

        }

        return detached;
    },

    /**
     * Monitor the event state for the subscribed event.  The first parameter
     * is what should be monitored, the rest are the normal parameters when
     * subscribing to an event.
     * @method monitor
     * @param what {string} what to monitor ('attach', 'detach', 'publish').
     * @return {EventHandle} return value from the monitor event subscription.
     */
    monitor: function(what) {
        return this.evt.monitor.apply(this.evt, arguments);
    }
};

/**
 * Custom event engine, DOM event listener abstraction layer, synthetic DOM
 * events.
 * @module event-custom
 * @submodule event-custom-base
 */

/**
 * EventTarget provides the implementation for any object to
 * publish, subscribe and fire to custom events, and also
 * alows other EventTargets to target the object with events
 * sourced from the other object.
 * EventTarget is designed to be used with Y.augment to wrap
 * EventCustom in an interface that allows events to be listened to
 * and fired by name.  This makes it possible for implementing code to
 * subscribe to an event that either has not been created yet, or will
 * not be created at all.
 * @class EventTarget
 * @param opts a configuration object
 * @config emitFacade {boolean} if true, all events will emit event
 * facade payloads by default (default false)
 * @config prefix {String} the prefix to apply to non-prefixed event names
 */

var L = Y.Lang,
    PREFIX_DELIMITER = ':',
    CATEGORY_DELIMITER = '|',
    AFTER_PREFIX = '~AFTER~',
    WILD_TYPE_RE = /(.*?)(:)(.*?)/,

    _wildType = Y.cached(function(type) {
        return type.replace(WILD_TYPE_RE, "*$2$3");
    }),

    /**
     * If the instance has a prefix attribute and the
     * event type is not prefixed, the instance prefix is
     * applied to the supplied type.
     * @method _getType
     * @private
     */
    _getType = function(type, pre) {

        if (type === null) { type = '*'; }

        if (!pre || type.indexOf(PREFIX_DELIMITER) > -1) {
            return type;
        }

        return pre + PREFIX_DELIMITER + type;
    },

    /**
     * Returns an array with the detach key (if provided),
     * and the prefixed event name from _getType
     * Y.on('detachcategory| menu:click', fn)
     * @method _parseType
     * @private
     */
    _parseType = Y.cached(function(type, pre) {

        var t = type, detachcategory, after, i;

        if (!L.isString(t)) {
            return t;
        }

        i = t.indexOf(AFTER_PREFIX);

        if (i > -1) {
            after = true;
            t = t.substr(AFTER_PREFIX.length);
        }

        i = t.indexOf(CATEGORY_DELIMITER);

        if (i > -1) {
            detachcategory = t.substr(0, (i));
            t = t.substr(i+1);
            if (t === '*') {
                t = null;
            }
        }

        // detach category, full type with instance prefix, is this an after listener, short type
        return [detachcategory, (pre) ? _getType(t, pre) : t, after, t];
    }),

    ET = function(opts) {

        var etState = this._yuievt,
            etConfig;

        if (!etState) {
            etState = this._yuievt = {
                events: {},    // PERF: Not much point instantiating lazily. We're bound to have events
                targets: null, // PERF: Instantiate lazily, if user actually adds target,
                config: {
                    host: this,
                    context: this
                },
                chain: Y.config.chain
            };
        }

        etConfig = etState.config;

        if (opts) {
            mixConfigs(etConfig, opts, true);

            if (opts.chain !== undefined) {
                etState.chain = opts.chain;
            }

            if (opts.prefix) {
                etConfig.prefix = opts.prefix;
            }
        }
    };

ET.prototype = {

    constructor: ET,

    /**
     * Listen to a custom event hosted by this object one time.
     * This is the equivalent to <code>on</code> except the
     * listener is immediatelly detached when it is executed.
     * @method once
     * @param {String} type The name of the event
     * @param {Function} fn The callback to execute in response to the event
     * @param {Object} [context] Override `this` object in callback
     * @param {Any} [arg*] 0..n additional arguments to supply to the subscriber
     * @return {EventHandle} A subscription handle capable of detaching the
     *                       subscription
     */
    once: function() {
        var handle = this.on.apply(this, arguments);
        handle.batch(function(hand) {
            if (hand.sub) {
                hand.sub.once = true;
            }
        });
        return handle;
    },

    /**
     * Listen to a custom event hosted by this object one time.
     * This is the equivalent to <code>after</code> except the
     * listener is immediatelly detached when it is executed.
     * @method onceAfter
     * @param {String} type The name of the event
     * @param {Function} fn The callback to execute in response to the event
     * @param {Object} [context] Override `this` object in callback
     * @param {Any} [arg*] 0..n additional arguments to supply to the subscriber
     * @return {EventHandle} A subscription handle capable of detaching that
     *                       subscription
     */
    onceAfter: function() {
        var handle = this.after.apply(this, arguments);
        handle.batch(function(hand) {
            if (hand.sub) {
                hand.sub.once = true;
            }
        });
        return handle;
    },

    /**
     * Takes the type parameter passed to 'on' and parses out the
     * various pieces that could be included in the type.  If the
     * event type is passed without a prefix, it will be expanded
     * to include the prefix one is supplied or the event target
     * is configured with a default prefix.
     * @method parseType
     * @param {String} type the type
     * @param {String} [pre=this._yuievt.config.prefix] the prefix
     * @since 3.3.0
     * @return {Array} an array containing:
     *  * the detach category, if supplied,
     *  * the prefixed event type,
     *  * whether or not this is an after listener,
     *  * the supplied event type
     */
    parseType: function(type, pre) {
        return _parseType(type, pre || this._yuievt.config.prefix);
    },

    /**
     * Subscribe a callback function to a custom event fired by this object or
     * from an object that bubbles its events to this object.
     *
     * Callback functions for events published with `emitFacade = true` will
     * receive an `EventFacade` as the first argument (typically named "e").
     * These callbacks can then call `e.preventDefault()` to disable the
     * behavior published to that event's `defaultFn`.  See the `EventFacade`
     * API for all available properties and methods. Subscribers to
     * non-`emitFacade` events will receive the arguments passed to `fire()`
     * after the event name.
     *
     * To subscribe to multiple events at once, pass an object as the first
     * argument, where the key:value pairs correspond to the eventName:callback,
     * or pass an array of event names as the first argument to subscribe to
     * all listed events with the same callback.
     *
     * Returning `false` from a callback is supported as an alternative to
     * calling `e.preventDefault(); e.stopPropagation();`.  However, it is
     * recommended to use the event methods whenever possible.
     *
     * @method on
     * @param {String} type The name of the event
     * @param {Function} fn The callback to execute in response to the event
     * @param {Object} [context] Override `this` object in callback
     * @param {Any} [arg*] 0..n additional arguments to supply to the subscriber
     * @return {EventHandle} A subscription handle capable of detaching that
     *                       subscription
     */
    on: function(type, fn, context) {

        var yuievt = this._yuievt,
            parts = _parseType(type, yuievt.config.prefix), f, c, args, ret, ce,
            detachcategory, handle, store = Y.Env.evt.handles, after, adapt, shorttype,
            Node = Y.Node, n, domevent, isArr;

        // full name, args, detachcategory, after
        this._monitor('attach', parts[1], {
            args: arguments,
            category: parts[0],
            after: parts[2]
        });

        if (L.isObject(type)) {

            if (L.isFunction(type)) {
                return Y.Do.before.apply(Y.Do, arguments);
            }

            f = fn;
            c = context;
            args = nativeSlice.call(arguments, 0);
            ret = [];

            if (L.isArray(type)) {
                isArr = true;
            }

            after = type._after;
            delete type._after;

            Y.each(type, function(v, k) {

                if (L.isObject(v)) {
                    f = v.fn || ((L.isFunction(v)) ? v : f);
                    c = v.context || c;
                }

                var nv = (after) ? AFTER_PREFIX : '';

                args[0] = nv + ((isArr) ? v : k);
                args[1] = f;
                args[2] = c;

                ret.push(this.on.apply(this, args));

            }, this);

            return (yuievt.chain) ? this : new Y.EventHandle(ret);
        }

        detachcategory = parts[0];
        after = parts[2];
        shorttype = parts[3];

        // extra redirection so we catch adaptor events too.  take a look at this.
        if (Node && Y.instanceOf(this, Node) && (shorttype in Node.DOM_EVENTS)) {
            args = nativeSlice.call(arguments, 0);
            args.splice(2, 0, Node.getDOMNode(this));
            return Y.on.apply(Y, args);
        }

        type = parts[1];

        if (Y.instanceOf(this, YUI)) {

            adapt = Y.Env.evt.plugins[type];
            args  = nativeSlice.call(arguments, 0);
            args[0] = shorttype;

            if (Node) {
                n = args[2];

                if (Y.instanceOf(n, Y.NodeList)) {
                    n = Y.NodeList.getDOMNodes(n);
                } else if (Y.instanceOf(n, Node)) {
                    n = Node.getDOMNode(n);
                }

                domevent = (shorttype in Node.DOM_EVENTS);

                // Captures both DOM events and event plugins.
                if (domevent) {
                    args[2] = n;
                }
            }

            // check for the existance of an event adaptor
            if (adapt) {
                handle = adapt.on.apply(Y, args);
            } else if ((!type) || domevent) {
                handle = Y.Event._attach(args);
            }

        }

        if (!handle) {
            ce = yuievt.events[type] || this.publish(type);
            handle = ce._on(fn, context, (arguments.length > 3) ? nativeSlice.call(arguments, 3) : null, (after) ? 'after' : true);

            // TODO: More robust regex, accounting for category
            if (type.indexOf("*:") !== -1) {
                this._hasSiblings = true;
            }
        }

        if (detachcategory) {
            store[detachcategory] = store[detachcategory] || {};
            store[detachcategory][type] = store[detachcategory][type] || [];
            store[detachcategory][type].push(handle);
        }

        return (yuievt.chain) ? this : handle;

    },

    /**
     * subscribe to an event
     * @method subscribe
     * @deprecated use on
     */
    subscribe: function() {
        return this.on.apply(this, arguments);
    },

    /**
     * Detach one or more listeners the from the specified event
     * @method detach
     * @param type {string|Object}   Either the handle to the subscriber or the
     *                        type of event.  If the type
     *                        is not specified, it will attempt to remove
     *                        the listener from all hosted events.
     * @param fn   {Function} The subscribed function to unsubscribe, if not
     *                          supplied, all subscribers will be removed.
     * @param context  {Object}   The custom object passed to subscribe.  This is
     *                        optional, but if supplied will be used to
     *                        disambiguate multiple listeners that are the same
     *                        (e.g., you subscribe many object using a function
     *                        that lives on the prototype)
     * @return {EventTarget} the host
     */
    detach: function(type, fn, context) {

        var evts = this._yuievt.events,
            i,
            Node = Y.Node,
            isNode = Node && (Y.instanceOf(this, Node));

        // detachAll disabled on the Y instance.
        if (!type && (this !== Y)) {
            for (i in evts) {
                if (evts.hasOwnProperty(i)) {
                    evts[i].detach(fn, context);
                }
            }
            if (isNode) {
                Y.Event.purgeElement(Node.getDOMNode(this));
            }

            return this;
        }

        var parts = _parseType(type, this._yuievt.config.prefix),
        detachcategory = L.isArray(parts) ? parts[0] : null,
        shorttype = (parts) ? parts[3] : null,
        adapt, store = Y.Env.evt.handles, detachhost, cat, args,
        ce,

        keyDetacher = function(lcat, ltype, host) {
            var handles = lcat[ltype], ce, i;
            if (handles) {
                for (i = handles.length - 1; i >= 0; --i) {
                    ce = handles[i].evt;
                    if (ce.host === host || ce.el === host) {
                        handles[i].detach();
                    }
                }
            }
        };

        if (detachcategory) {

            cat = store[detachcategory];
            type = parts[1];
            detachhost = (isNode) ? Y.Node.getDOMNode(this) : this;

            if (cat) {
                if (type) {
                    keyDetacher(cat, type, detachhost);
                } else {
                    for (i in cat) {
                        if (cat.hasOwnProperty(i)) {
                            keyDetacher(cat, i, detachhost);
                        }
                    }
                }

                return this;
            }

        // If this is an event handle, use it to detach
        } else if (L.isObject(type) && type.detach) {
            type.detach();
            return this;
        // extra redirection so we catch adaptor events too.  take a look at this.
        } else if (isNode && ((!shorttype) || (shorttype in Node.DOM_EVENTS))) {
            args = nativeSlice.call(arguments, 0);
            args[2] = Node.getDOMNode(this);
            Y.detach.apply(Y, args);
            return this;
        }

        adapt = Y.Env.evt.plugins[shorttype];

        // The YUI instance handles DOM events and adaptors
        if (Y.instanceOf(this, YUI)) {
            args = nativeSlice.call(arguments, 0);
            // use the adaptor specific detach code if
            if (adapt && adapt.detach) {
                adapt.detach.apply(Y, args);
                return this;
            // DOM event fork
            } else if (!type || (!adapt && Node && (type in Node.DOM_EVENTS))) {
                args[0] = type;
                Y.Event.detach.apply(Y.Event, args);
                return this;
            }
        }

        // ce = evts[type];
        ce = evts[parts[1]];
        if (ce) {
            ce.detach(fn, context);
        }

        return this;
    },

    /**
     * detach a listener
     * @method unsubscribe
     * @deprecated use detach
     */
    unsubscribe: function() {
        return this.detach.apply(this, arguments);
    },

    /**
     * Removes all listeners from the specified event.  If the event type
     * is not specified, all listeners from all hosted custom events will
     * be removed.
     * @method detachAll
     * @param type {String}   The type, or name of the event
     */
    detachAll: function(type) {
        return this.detach(type);
    },

    /**
     * Removes all listeners from the specified event.  If the event type
     * is not specified, all listeners from all hosted custom events will
     * be removed.
     * @method unsubscribeAll
     * @param type {String}   The type, or name of the event
     * @deprecated use detachAll
     */
    unsubscribeAll: function() {
        return this.detachAll.apply(this, arguments);
    },

    /**
     * Creates a new custom event of the specified type.  If a custom event
     * by that name already exists, it will not be re-created.  In either
     * case the custom event is returned.
     *
     * @method publish
     *
     * @param type {String} the type, or name of the event
     * @param opts {object} optional config params.  Valid properties are:
     *
     *  <ul>
     *    <li>
     *   'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)
     *    </li>
     *    <li>
     *   'bubbles': whether or not this event bubbles (true)
     *              Events can only bubble if emitFacade is true.
     *    </li>
     *    <li>
     *   'context': the default execution context for the listeners (this)
     *    </li>
     *    <li>
     *   'defaultFn': the default function to execute when this event fires if preventDefault was not called
     *    </li>
     *    <li>
     *   'emitFacade': whether or not this event emits a facade (false)
     *    </li>
     *    <li>
     *   'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'
     *    </li>
     *    <li>
     *   'fireOnce': if an event is configured to fire once, new subscribers after
     *   the fire will be notified immediately.
     *    </li>
     *    <li>
     *   'async': fireOnce event listeners will fire synchronously if the event has already
     *    fired unless async is true.
     *    </li>
     *    <li>
     *   'preventable': whether or not preventDefault() has an effect (true)
     *    </li>
     *    <li>
     *   'preventedFn': a function that is executed when preventDefault is called
     *    </li>
     *    <li>
     *   'queuable': whether or not this event can be queued during bubbling (false)
     *    </li>
     *    <li>
     *   'silent': if silent is true, debug messages are not provided for this event.
     *    </li>
     *    <li>
     *   'stoppedFn': a function that is executed when stopPropagation is called
     *    </li>
     *
     *    <li>
     *   'monitored': specifies whether or not this event should send notifications about
     *   when the event has been attached, detached, or published.
     *    </li>
     *    <li>
     *   'type': the event type (valid option if not provided as the first parameter to publish)
     *    </li>
     *  </ul>
     *
     *  @return {CustomEvent} the custom event
     *
     */
    publish: function(type, opts) {

        var ret,
            etState = this._yuievt,
            etConfig = etState.config,
            pre = etConfig.prefix;

        if (typeof type === "string")  {
            if (pre) {
                type = _getType(type, pre);
            }
            ret = this._publish(type, etConfig, opts);
        } else {
            ret = {};

            Y.each(type, function(v, k) {
                if (pre) {
                    k = _getType(k, pre);
                }
                ret[k] = this._publish(k, etConfig, v || opts);
            }, this);

        }

        return ret;
    },

    /**
     * Returns the fully qualified type, given a short type string.
     * That is, returns "foo:bar" when given "bar" if "foo" is the configured prefix.
     *
     * NOTE: This method, unlike _getType, does no checking of the value passed in, and
     * is designed to be used with the low level _publish() method, for critical path
     * implementations which need to fast-track publish for performance reasons.
     *
     * @method _getFullType
     * @private
     * @param {String} type The short type to prefix
     * @return {String} The prefixed type, if a prefix is set, otherwise the type passed in
     */
    _getFullType : function(type) {

        var pre = this._yuievt.config.prefix;

        if (pre) {
            return pre + PREFIX_DELIMITER + type;
        } else {
            return type;
        }
    },

    /**
     * The low level event publish implementation. It expects all the massaging to have been done
     * outside of this method. e.g. the `type` to `fullType` conversion. It's designed to be a fast
     * path publish, which can be used by critical code paths to improve performance.
     *
     * @method _publish
     * @private
     * @param {String} fullType The prefixed type of the event to publish.
     * @param {Object} etOpts The EventTarget specific configuration to mix into the published event.
     * @param {Object} ceOpts The publish specific configuration to mix into the published event.
     * @return {CustomEvent} The published event. If called without `etOpts` or `ceOpts`, this will
     * be the default `CustomEvent` instance, and can be configured independently.
     */
    _publish : function(fullType, etOpts, ceOpts) {

        var ce,
            etState = this._yuievt,
            etConfig = etState.config,
            host = etConfig.host,
            context = etConfig.context,
            events = etState.events;

        ce = events[fullType];

        // PERF: Hate to pull the check out of monitor, but trying to keep critical path tight.
        if ((etConfig.monitored && !ce) || (ce && ce.monitored)) {
            this._monitor('publish', fullType, {
                args: arguments
            });
        }

        if (!ce) {
            // Publish event
            ce = events[fullType] = new Y.CustomEvent(fullType, etOpts);

            if (!etOpts) {
                ce.host = host;
                ce.context = context;
            }
        }

        if (ceOpts) {
            mixConfigs(ce, ceOpts, true);
        }

        return ce;
    },

    /**
     * This is the entry point for the event monitoring system.
     * You can monitor 'attach', 'detach', 'fire', and 'publish'.
     * When configured, these events generate an event.  click ->
     * click_attach, click_detach, click_publish -- these can
     * be subscribed to like other events to monitor the event
     * system.  Inividual published events can have monitoring
     * turned on or off (publish can't be turned off before it
     * it published) by setting the events 'monitor' config.
     *
     * @method _monitor
     * @param what {String} 'attach', 'detach', 'fire', or 'publish'
     * @param eventType {String|CustomEvent} The prefixed name of the event being monitored, or the CustomEvent object.
     * @param o {Object} Information about the event interaction, such as
     *                  fire() args, subscription category, publish config
     * @private
     */
    _monitor: function(what, eventType, o) {
        var monitorevt, ce, type;

        if (eventType) {
            if (typeof eventType === "string") {
                type = eventType;
                ce = this.getEvent(eventType, true);
            } else {
                ce = eventType;
                type = eventType.type;
            }

            if ((this._yuievt.config.monitored && (!ce || ce.monitored)) || (ce && ce.monitored)) {
                monitorevt = type + '_' + what;
                o.monitored = what;
                this.fire.call(this, monitorevt, o);
            }
        }
    },

    /**
     * Fire a custom event by name.  The callback functions will be executed
     * from the context specified when the event was created, and with the
     * following parameters.
     *
     * If the custom event object hasn't been created, then the event hasn't
     * been published and it has no subscribers.  For performance sake, we
     * immediate exit in this case.  This means the event won't bubble, so
     * if the intention is that a bubble target be notified, the event must
     * be published on this object first.
     *
     * The first argument is the event type, and any additional arguments are
     * passed to the listeners as parameters.  If the first of these is an
     * object literal, and the event is configured to emit an event facade,
     * that object is mixed into the event facade and the facade is provided
     * in place of the original object.
     *
     * @method fire
     * @param type {String|Object} The type of the event, or an object that contains
     * a 'type' property.
     * @param arguments {Object*} an arbitrary set of parameters to pass to
     * the handler.  If the first of these is an object literal and the event is
     * configured to emit an event facade, the event facade will replace that
     * parameter after the properties the object literal contains are copied to
     * the event facade.
     * @return {EventTarget} the event host
     */
    fire: function(type) {

        var typeIncluded = (typeof type === "string"),
            argCount = arguments.length,
            t = type,
            yuievt = this._yuievt,
            etConfig = yuievt.config,
            pre = etConfig.prefix,
            ret,
            ce,
            ce2,
            args;

        if (typeIncluded && argCount <= 2) {

            // PERF: Try to avoid slice/iteration for the common signatures

            if (argCount === 2) {
                args = [arguments[1]]; // fire("foo", {})
            } else {
                args = []; // fire("foo")
            }

        } else {
            args = nativeSlice.call(arguments, ((typeIncluded) ? 1 : 0));
        }

        if (!typeIncluded) {
            t = (type && type.type);
        }

        if (pre) {
            t = _getType(t, pre);
        }

        ce = yuievt.events[t];

        if (this._hasSiblings) {
            ce2 = this.getSibling(t, ce);

            if (ce2 && !ce) {
                ce = this.publish(t);
            }
        }

        // PERF: trying to avoid function call, since this is a critical path
        if ((etConfig.monitored && (!ce || ce.monitored)) || (ce && ce.monitored)) {
            this._monitor('fire', (ce || t), {
                args: args
            });
        }

        // this event has not been published or subscribed to
        if (!ce) {
            if (yuievt.hasTargets) {
                return this.bubble({ type: t }, args, this);
            }

            // otherwise there is nothing to be done
            ret = true;
        } else {

            if (ce2) {
                ce.sibling = ce2;
            }

            ret = ce._fire(args);
        }

        return (yuievt.chain) ? this : ret;
    },

    getSibling: function(type, ce) {
        var ce2;

        // delegate to *:type events if there are subscribers
        if (type.indexOf(PREFIX_DELIMITER) > -1) {
            type = _wildType(type);
            ce2 = this.getEvent(type, true);
            if (ce2) {
                ce2.applyConfig(ce);
                ce2.bubbles = false;
                ce2.broadcast = 0;
            }
        }

        return ce2;
    },

    /**
     * Returns the custom event of the provided type has been created, a
     * falsy value otherwise
     * @method getEvent
     * @param type {String} the type, or name of the event
     * @param prefixed {String} if true, the type is prefixed already
     * @return {CustomEvent} the custom event or null
     */
    getEvent: function(type, prefixed) {
        var pre, e;

        if (!prefixed) {
            pre = this._yuievt.config.prefix;
            type = (pre) ? _getType(type, pre) : type;
        }
        e = this._yuievt.events;
        return e[type] || null;
    },

    /**
     * Subscribe to a custom event hosted by this object.  The
     * supplied callback will execute after any listeners add
     * via the subscribe method, and after the default function,
     * if configured for the event, has executed.
     *
     * @method after
     * @param {String} type The name of the event
     * @param {Function} fn The callback to execute in response to the event
     * @param {Object} [context] Override `this` object in callback
     * @param {Any} [arg*] 0..n additional arguments to supply to the subscriber
     * @return {EventHandle} A subscription handle capable of detaching the
     *                       subscription
     */
    after: function(type, fn) {

        var a = nativeSlice.call(arguments, 0);

        switch (L.type(type)) {
            case 'function':
                return Y.Do.after.apply(Y.Do, arguments);
            case 'array':
            //     YArray.each(a[0], function(v) {
            //         v = AFTER_PREFIX + v;
            //     });
            //     break;
            case 'object':
                a[0]._after = true;
                break;
            default:
                a[0] = AFTER_PREFIX + type;
        }

        return this.on.apply(this, a);

    },

    /**
     * Executes the callback before a DOM event, custom event
     * or method.  If the first argument is a function, it
     * is assumed the target is a method.  For DOM and custom
     * events, this is an alias for Y.on.
     *
     * For DOM and custom events:
     * type, callback, context, 0-n arguments
     *
     * For methods:
     * callback, object (method host), methodName, context, 0-n arguments
     *
     * @method before
     * @return detach handle
     */
    before: function() {
        return this.on.apply(this, arguments);
    }

};

Y.EventTarget = ET;

// make Y an event target
Y.mix(Y, ET.prototype);
ET.call(Y, { bubbles: false });

YUI.Env.globalEvents = YUI.Env.globalEvents || new ET();

/**
 * Hosts YUI page level events.  This is where events bubble to
 * when the broadcast config is set to 2.  This property is
 * only available if the custom event module is loaded.
 * @property Global
 * @type EventTarget
 * @for YUI
 */
Y.Global = YUI.Env.globalEvents;

// @TODO implement a global namespace function on Y.Global?

/**
`Y.on()` can do many things:

<ul>
    <li>Subscribe to custom events `publish`ed and `fire`d from Y</li>
    <li>Subscribe to custom events `publish`ed with `broadcast` 1 or 2 and
        `fire`d from any object in the YUI instance sandbox</li>
    <li>Subscribe to DOM events</li>
    <li>Subscribe to the execution of a method on any object, effectively
    treating that method as an event</li>
</ul>

For custom event subscriptions, pass the custom event name as the first argument
and callback as the second. The `this` object in the callback will be `Y` unless
an override is passed as the third argument.

    Y.on('io:complete', function () {
        Y.MyApp.updateStatus('Transaction complete');
    });

To subscribe to DOM events, pass the name of a DOM event as the first argument
and a CSS selector string as the third argument after the callback function.
Alternately, the third argument can be a `Node`, `NodeList`, `HTMLElement`,
array, or simply omitted (the default is the `window` object).

    Y.on('click', function (e) {
        e.preventDefault();

        // proceed with ajax form submission
        var url = this.get('action');
        ...
    }, '#my-form');

The `this` object in DOM event callbacks will be the `Node` targeted by the CSS
selector or other identifier.

`on()` subscribers for DOM events or custom events `publish`ed with a
`defaultFn` can prevent the default behavior with `e.preventDefault()` from the
event object passed as the first parameter to the subscription callback.

To subscribe to the execution of an object method, pass arguments corresponding to the call signature for
<a href="../classes/Do.html#methods_before">`Y.Do.before(...)`</a>.

NOTE: The formal parameter list below is for events, not for function
injection.  See `Y.Do.before` for that signature.

@method on
@param {String} type DOM or custom event name
@param {Function} fn The callback to execute in response to the event
@param {Object} [context] Override `this` object in callback
@param {Any} [arg*] 0..n additional arguments to supply to the subscriber
@return {EventHandle} A subscription handle capable of detaching the
                      subscription
@see Do.before
@for YUI
**/

/**
Listen for an event one time.  Equivalent to `on()`, except that
the listener is immediately detached when executed.

See the <a href="#methods_on">`on()` method</a> for additional subscription
options.

@see on
@method once
@param {String} type DOM or custom event name
@param {Function} fn The callback to execute in response to the event
@param {Object} [context] Override `this` object in callback
@param {Any} [arg*] 0..n additional arguments to supply to the subscriber
@return {EventHandle} A subscription handle capable of detaching the
                      subscription
@for YUI
**/

/**
Listen for an event one time.  Equivalent to `once()`, except, like `after()`,
the subscription callback executes after all `on()` subscribers and the event's
`defaultFn` (if configured) have executed.  Like `after()` if any `on()` phase
subscriber calls `e.preventDefault()`, neither the `defaultFn` nor the `after()`
subscribers will execute.

The listener is immediately detached when executed.

See the <a href="#methods_on">`on()` method</a> for additional subscription
options.

@see once
@method onceAfter
@param {String} type The custom event name
@param {Function} fn The callback to execute in response to the event
@param {Object} [context] Override `this` object in callback
@param {Any} [arg*] 0..n additional arguments to supply to the subscriber
@return {EventHandle} A subscription handle capable of detaching the
                      subscription
@for YUI
**/

/**
Like `on()`, this method creates a subscription to a custom event or to the
execution of a method on an object.

For events, `after()` subscribers are executed after the event's
`defaultFn` unless `e.preventDefault()` was called from an `on()` subscriber.

See the <a href="#methods_on">`on()` method</a> for additional subscription
options.

NOTE: The subscription signature shown is for events, not for function
injection.  See <a href="../classes/Do.html#methods_after">`Y.Do.after`</a>
for that signature.

@see on
@see Do.after
@method after
@param {String} type The custom event name
@param {Function} fn The callback to execute in response to the event
@param {Object} [context] Override `this` object in callback
@param {Any} [args*] 0..n additional arguments to supply to the subscriber
@return {EventHandle} A subscription handle capable of detaching the
                      subscription
@for YUI
**/


}, '3.10.1', {"requires": ["oop"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/event-valuechange/event-valuechange.js
// ----------------------------------------------------------------------------------------

YUI.add('event-valuechange', function (Y, NAME) {

/**
Adds a synthetic `valuechange` event that fires when the `value` property of an
`<input>` or `<textarea>` node changes as a result of a keystroke, mouse
operation, or input method editor (IME) input event.

Usage:

    YUI().use('event-valuechange', function (Y) {
        Y.one('#my-input').on('valuechange', function (e) {
        });
    });

@module event-valuechange
**/

/**
Provides the implementation for the synthetic `valuechange` event. This class
isn't meant to be used directly, but is public to make monkeypatching possible.

Usage:

    YUI().use('event-valuechange', function (Y) {
        Y.one('#my-input').on('valuechange', function (e) {
        });
    });

@class ValueChange
@static
*/

var DATA_KEY = '_valuechange',
    VALUE    = 'value',

    config, // defined at the end of this file

// Just a simple namespace to make methods overridable.
VC = {
    // -- Static Constants -----------------------------------------------------

    /**
    Interval (in milliseconds) at which to poll for changes to the value of an
    element with one or more `valuechange` subscribers when the user is likely
    to be interacting with it.

    @property POLL_INTERVAL
    @type Number
    @default 50
    @static
    **/
    POLL_INTERVAL: 50,

    /**
    Timeout (in milliseconds) after which to stop polling when there hasn't been
    any new activity (keypresses, mouse clicks, etc.) on an element.

    @property TIMEOUT
    @type Number
    @default 10000
    @static
    **/
    TIMEOUT: 10000,

    // -- Protected Static Methods ---------------------------------------------

    /**
    Called at an interval to poll for changes to the value of the specified
    node.

    @method _poll
    @param {Node} node Node to poll.

    @param {Object} options Options object.
        @param {EventFacade} [options.e] Event facade of the event that
            initiated the polling.

    @protected
    @static
    **/
    _poll: function (node, options) {
        var domNode = node._node, // performance cheat; getValue() is a big hit when polling
            event   = options.e,
            newVal  = domNode && domNode.value,
            vcData  = node._data && node._data[DATA_KEY], // another perf cheat
            facade, prevVal;

        if (!domNode || !vcData) {
            VC._stopPolling(node);
            return;
        }

        prevVal = vcData.prevVal;

        if (newVal !== prevVal) {
            vcData.prevVal = newVal;

            facade = {
                _event       : event,
                currentTarget: (event && event.currentTarget) || node,
                newVal       : newVal,
                prevVal      : prevVal,
                target       : (event && event.target) || node
            };

            Y.Object.each(vcData.notifiers, function (notifier) {
                notifier.fire(facade);
            });

            VC._refreshTimeout(node);
        }
    },

    /**
    Restarts the inactivity timeout for the specified node.

    @method _refreshTimeout
    @param {Node} node Node to refresh.
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _refreshTimeout: function (node, notifier) {
        // The node may have been destroyed, so check that it still exists
        // before trying to get its data. Otherwise an error will occur.
        if (!node._node) {
            return;
        }

        var vcData = node.getData(DATA_KEY);

        VC._stopTimeout(node); // avoid dupes

        // If we don't see any changes within the timeout period (10 seconds by
        // default), stop polling.
        vcData.timeout = setTimeout(function () {
            VC._stopPolling(node, notifier);
        }, VC.TIMEOUT);

    },

    /**
    Begins polling for changes to the `value` property of the specified node. If
    polling is already underway for the specified node, it will not be restarted
    unless the `force` option is `true`

    @method _startPolling
    @param {Node} node Node to watch.
    @param {SyntheticEvent.Notifier} notifier

    @param {Object} options Options object.
        @param {EventFacade} [options.e] Event facade of the event that
            initiated the polling.
        @param {Boolean} [options.force=false] If `true`, polling will be
            restarted even if we're already polling this node.

    @protected
    @static
    **/
    _startPolling: function (node, notifier, options) {
        if (!node.test('input,textarea')) {
            return;
        }

        var vcData = node.getData(DATA_KEY);

        if (!vcData) {
            vcData = {prevVal: node.get(VALUE)};
            node.setData(DATA_KEY, vcData);
        }

        vcData.notifiers || (vcData.notifiers = {});

        // Don't bother continuing if we're already polling this node, unless
        // `options.force` is true.
        if (vcData.interval) {
            if (options.force) {
                VC._stopPolling(node, notifier); // restart polling, but avoid dupe polls
            } else {
                vcData.notifiers[Y.stamp(notifier)] = notifier;
                return;
            }
        }

        // Poll for changes to the node's value. We can't rely on keyboard
        // events for this, since the value may change due to a mouse-initiated
        // paste event, an IME input event, or for some other reason that
        // doesn't trigger a key event.
        vcData.notifiers[Y.stamp(notifier)] = notifier;

        vcData.interval = setInterval(function () {
            VC._poll(node, vcData, options);
        }, VC.POLL_INTERVAL);


        VC._refreshTimeout(node, notifier);
    },

    /**
    Stops polling for changes to the specified node's `value` attribute.

    @method _stopPolling
    @param {Node} node Node to stop polling on.
    @param {SyntheticEvent.Notifier} [notifier] Notifier to remove from the
        node. If not specified, all notifiers will be removed.
    @protected
    @static
    **/
    _stopPolling: function (node, notifier) {
        // The node may have been destroyed, so check that it still exists
        // before trying to get its data. Otherwise an error will occur.
        if (!node._node) {
            return;
        }

        var vcData = node.getData(DATA_KEY) || {};

        clearInterval(vcData.interval);
        delete vcData.interval;

        VC._stopTimeout(node);

        if (notifier) {
            vcData.notifiers && delete vcData.notifiers[Y.stamp(notifier)];
        } else {
            vcData.notifiers = {};
        }

    },

    /**
    Clears the inactivity timeout for the specified node, if any.

    @method _stopTimeout
    @param {Node} node
    @protected
    @static
    **/
    _stopTimeout: function (node) {
        var vcData = node.getData(DATA_KEY) || {};

        clearTimeout(vcData.timeout);
        delete vcData.timeout;
    },

    // -- Protected Static Event Handlers --------------------------------------

    /**
    Stops polling when a node's blur event fires.

    @method _onBlur
    @param {EventFacade} e
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onBlur: function (e, notifier) {
        VC._stopPolling(e.currentTarget, notifier);
    },

    /**
    Resets a node's history and starts polling when a focus event occurs.

    @method _onFocus
    @param {EventFacade} e
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onFocus: function (e, notifier) {
        var node   = e.currentTarget,
            vcData = node.getData(DATA_KEY);

        if (!vcData) {
            vcData = {};
            node.setData(DATA_KEY, vcData);
        }

        vcData.prevVal = node.get(VALUE);

        VC._startPolling(node, notifier, {e: e});
    },

    /**
    Starts polling when a node receives a keyDown event.

    @method _onKeyDown
    @param {EventFacade} e
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onKeyDown: function (e, notifier) {
        VC._startPolling(e.currentTarget, notifier, {e: e});
    },

    /**
    Starts polling when an IME-related keyUp event occurs on a node.

    @method _onKeyUp
    @param {EventFacade} e
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onKeyUp: function (e, notifier) {
        // These charCodes indicate that an IME has started. We'll restart
        // polling and give the IME up to 10 seconds (by default) to finish.
        if (e.charCode === 229 || e.charCode === 197) {
            VC._startPolling(e.currentTarget, notifier, {
                e    : e,
                force: true
            });
        }
    },

    /**
    Starts polling when a node receives a mouseDown event.

    @method _onMouseDown
    @param {EventFacade} e
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onMouseDown: function (e, notifier) {
        VC._startPolling(e.currentTarget, notifier, {e: e});
    },

    /**
    Called when the `valuechange` event receives a new subscriber.

    @method _onSubscribe
    @param {Node} node
    @param {Subscription} sub
    @param {SyntheticEvent.Notifier} notifier
    @param {Function|String} [filter] Filter function or selector string. Only
        provided for delegate subscriptions.
    @protected
    @static
    **/
    _onSubscribe: function (node, sub, notifier, filter) {
        var _valuechange, callbacks, nodes;

        callbacks = {
            blur     : VC._onBlur,
            focus    : VC._onFocus,
            keydown  : VC._onKeyDown,
            keyup    : VC._onKeyUp,
            mousedown: VC._onMouseDown
        };

        // Store a utility object on the notifier to hold stuff that needs to be
        // passed around to trigger event handlers, polling handlers, etc.
        _valuechange = notifier._valuechange = {};

        if (filter) {
            // If a filter is provided, then this is a delegated subscription.
            _valuechange.delegated = true;

            // Add a function to the notifier that we can use to find all
            // nodes that pass the delegate filter.
            _valuechange.getNodes = function () {
                return node.all('input,textarea').filter(filter);
            };

            // Store the initial values for each descendant of the container
            // node that passes the delegate filter.
            _valuechange.getNodes().each(function (child) {
                if (!child.getData(DATA_KEY)) {
                    child.setData(DATA_KEY, {prevVal: child.get(VALUE)});
                }
            });

            notifier._handles = Y.delegate(callbacks, node, filter, null,
                notifier);
        } else {
            // This is a normal (non-delegated) event subscription.

            if (!node.test('input,textarea')) {
                return;
            }

            if (!node.getData(DATA_KEY)) {
                node.setData(DATA_KEY, {prevVal: node.get(VALUE)});
            }

            notifier._handles = node.on(callbacks, null, null, notifier);
        }
    },

    /**
    Called when the `valuechange` event loses a subscriber.

    @method _onUnsubscribe
    @param {Node} node
    @param {Subscription} subscription
    @param {SyntheticEvent.Notifier} notifier
    @protected
    @static
    **/
    _onUnsubscribe: function (node, subscription, notifier) {
        var _valuechange = notifier._valuechange;

        notifier._handles && notifier._handles.detach();

        if (_valuechange.delegated) {
            _valuechange.getNodes().each(function (child) {
                VC._stopPolling(child, notifier);
            });
        } else {
            VC._stopPolling(node, notifier);
        }
    }
};

/**
Synthetic event that fires when the `value` property of an `<input>` or
`<textarea>` node changes as a result of a user-initiated keystroke, mouse
operation, or input method editor (IME) input event.

Unlike the `onchange` event, this event fires when the value actually changes
and not when the element loses focus. This event also reports IME and
multi-stroke input more reliably than `oninput` or the various key events across
browsers.

For performance reasons, only focused nodes are monitored for changes, so
programmatic value changes on nodes that don't have focus won't be detected.

@example

    YUI().use('event-valuechange', function (Y) {
        Y.one('#my-input').on('valuechange', function (e) {
        });
    });

@event valuechange
@param {String} prevVal Previous value prior to the latest change.
@param {String} newVal New value after the latest change.
@for YUI
**/

config = {
    detach: VC._onUnsubscribe,
    on    : VC._onSubscribe,

    delegate      : VC._onSubscribe,
    detachDelegate: VC._onUnsubscribe,

    publishConfig: {
        emitFacade: true
    }
};

Y.Event.define('valuechange', config);
Y.Event.define('valueChange', config); // deprecated, but supported for backcompat

Y.ValueChange = VC;


}, '3.10.1', {"requires": ["event-focus", "event-synthetic"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/gallery.js
// ----------------------------------------------------------------------------------------

/**
* Gallery
* @module squarespace-gallery
*/
YUI.add('squarespace-gallery', function(Y) {

  Y.namespace('Squarespace');

  var DEBUG = false;

  Y.augment(Y.Node, Class.create({
    outerWidth: function( includeMargin ) {
      var marginLeft = parseFloat( this.getComputedStyle('marginLeft') );
      var marginRight = parseFloat( this.getComputedStyle('marginRight') );

      return this.get('offsetWidth') + marginLeft + marginRight;
    },
    outerHeight: function( includeMargin ) {
      var marginTop = parseFloat( this.getComputedStyle('marginTop') );
      var marginBottom = parseFloat( this.getComputedStyle('marginBottom') );

      return this.get('offsetHeight') + marginTop + marginBottom;
    }
  }));


  Y.Squarespace.Gallery = Class.create({

    // Default options
    defaultOpts: {
      previous: false,              // selector for "previous" element
      next: false,                  // selector for "next" element

      itemSelector: false,          // the itemSelector. Default: children
      startIndex: 0,                // Initial slide index
      loop: false,                  // Does this gallery loop around?

      design: 'off',                 // No design -- this will use Y.Squarespace.GalleryDesigns.off
      designOptions: {},             // Design options get passed to the new instance of the design.

      autoplay: false,
      autoplayOptions: {
        timeout: 1000,
        resumeAfter: 1000,
        randomize: false
      },

      currentIndex: false,          // selector to display the current index
      totalSlides: false,           // selector to display the total slides,

      linked: false,                // array of linked galleries.

      keyboard: {                   // object of keyboard bindings.
        previous: 'down:37',
        next: 'down:39'
      },

      renderWithCanvas: false,

      nextGeneration: false,

      loaderOptions: {

      },

      updateContainerHeight: false,

      focusOnClick: false

    },

    getContainer: function() {
      return this.elems.container;
    },

    getSlide: function(i) {
      return this.elems.slides.item(i);
    },

    getCurrentSlide: function() {
      return this.elems.slides.item(this.data.currentIndex);
    },

    getCurrentSlideId: function() {
      return this.getCurrentSlide().getAttribute('data-slide-id') || this.data.currentIndex;
    },

    getSlides: function() {
      return this.elems.slides;
    },

    initialize: function(params) {

      // Before they merge, check if keyboard is a boolean & true, and unset it then (we'll use our keyboard settings)
      if( Y.Lang.isBoolean(params.keyboard) && params.keyboard ) {
        delete params.keyboard;
      }

      // Merge the params
      this.params = Y.merge( this.defaultOpts, params );
      this.elems = {};

      var $gallery = Y.one( this.params.slideshowElement );

      // Check if it's null
      if( Y.Lang.isNull($gallery) ) { throw new Error("No gallery '" + this.params.slideshowElement + "' container found."); }

      // And then get the $slides
      var $slides = ( this.params.itemSelector ? $gallery.all( this.params.itemSelector ) : $gallery.get('children') );

      // Save the elements
      this.elems.container = $gallery;
      this.elems.slides = $slides;

      // Don't create two instances.
      if (this.getContainer().getData('galleryInstance')) {
        this.getContainer().getData('galleryInstance')._debug.warn('This node already has a gallery instance binded. Enhance your chill.');
        return;
      }

      // Debugger
      this._debug = new Y.Squarespace.Debugger({name: 'Gallery', uid: true});

      this.getContainer().setData('galleryInstance', this);

      // Check if there's a history hash
      this.history = new Y.HistoryHash();

      // History
      if (this.params.historyHash || this.history.get('itemId')) {
        this.history = new Y.HistoryHash();

        var currentHistoryHash = this.history.get('itemId') || this.history.get(this.params.historyHash);
        var currentIndex;
        if (currentHistoryHash) {
          this.elems.slides.each(function(slide, n) {
            if (slide.getAttribute('data-slide-id') == currentHistoryHash) {
              currentIndex = n;
            }
          });

          if (!Y.Lang.isNumber(currentIndex)) {
            currentIndex = parseInt(this.history.get(this.params.historyHash), 10);
          }

          if (!!this.history.get('itemId')) {
            this.history.replaceValue('itemId', null);
          }

          if (Y.Lang.isNumber(currentIndex)) {
            this.params.startIndex = currentIndex;
          }
        }
      }

      // Save some info
      this.data = {
        currentIndex: this.params.startIndex,
        totalSlides: $slides.size()
      };

      // Store events
      this.events = [];

      // Check that slides exist
      if( this.data.totalSlides <= 0 ) {
        // throw new Error("No slides found.");
        return false;
      }

      // Check the design, save the design, set the gallery in the design, set the design options
      if( !Y.Squarespace.GalleryDesigns[this.params.design] ) {
        var available_designs = [];
        for( var design in Y.Squarespace.GalleryDesigns ) {
          available_designs.push( design );
        }

        throw new Error("Design '" + this.params.design + "' not found. Currently loaded designs: [" + available_designs.join(', ') + "].");
      }

      // Initiate the design
      this.design = new (Y.Squarespace.GalleryDesigns[ this.params.design ])();
      this.design.gallery = this;
      this.design.options = Y.merge( this.design.options, this.params.designOptions );

      // Bind the events
      if( this.params.previous ) {
        this.events.push(

          Y.all( this.params.previous ).on('click', function(e) {
            e.halt();
            this.previousSlide();
          }, this)

        );
      }

      if( this.params.next ) {
        this.events.push(

          Y.all( this.params.next ).on('click', function(e) {
            e.halt();
            this.nextSlide();
          }, this)

        );
      }

      if (this.params.focusOnClick) {
        $slides.each(function(slide) {
          slide.on('click', function() {
            this.fire('changeIndex', $slides.indexOf(slide));
          }, this);
        }, this)
      }

      // Check if keyboard is attached
      if( this.params.keyboard ) {

        var proceedCheck = function() {
          if (this.params.keyboardWhenInFrame) {
            return this.getContainer().inRegion(Y.one(this.params.keyboardWhenInFrame).get('region'));
          }

          return true;
        };

        if( this.params.keyboard.previous ) {

          this.events.push(
            Y.on('key', function() {
              if (!proceedCheck.call(this)) { return; }
              this.previousSlide();
            }, window, this.params.keyboard.previous, this)
          );
        }

        if( this.params.keyboard.next ) {
          this.events.push(
            Y.on('key', function() {
              if (!proceedCheck.call(this)) { return; }

              this.nextSlide();
            }, window, this.params.keyboard.next, this)
          );
        }
      }

      // listen for children
      if( this.params.linked ) {

        Y.Array.each(this.params.linked, function(link) {
          this.linkGallery( link );
        }, this);

      }

      // Trigger the setup
      this.setup();

      // Trigger the first index
      this.fire('changeIndex', this.params.startIndex);

      // Set that it was initialized
      this.isInitialized = true;

    },

    linkGallery: function( gallery ) {

      // Internal function that handles trigger
      function sync( source, toIndex ) {

        // If the source is set, that means it was called by a child.
      if( source ) {
        this._changeIndex( toIndex );
      }

      // Now we iterate through the children, and make sure we don't call the source again
      Y.Array.each( this.elems.linked, function(link) {
          if( source != link ) {
            link._changeIndex( toIndex );
          }
      });
      }

      // Setup this instance for linking galleries.
      if( !this.elems.linked ) {
        this.on('changeIndex', function(toIndex) {
          sync.call( this, false, toIndex );
        }, this);

        this.elems.linked = [];
      }

      // Add the new linked gallery
      this.elems.linked.push( gallery );
      gallery.on('changeIndex', function(toIndex) {
        sync.call( this, gallery, toIndex );
      }, this);

    },

    setup: function() {

      // Bind listeners
      this.on('changeIndex', this._changeIndex);

      // Now we load the slides
      this.loadSlides();

      // It just calls the setup on the design.
      this.design.setup( this.elems.container, this.elems.slides );

      // Autoplay
      if( this.params.autoplay ) {

        var gallery = this;

        setInterval(function() {
          if( gallery.params.autoplayOptions.randomize ) {

            var next = Math.ceil( Math.random()*gallery.data.totalSlides );
            while( next == gallery.data.currentIndex ) {
              next = Math.ceil( Math.random()*gallery.data.totalSlides );
            }

            gallery.fire('changeIndex', next);
          } else {
            gallery.nextSlide();
          }
        }, this.params.autoplayOptions.timeout);

      }

      // Debug
      if( DEBUG ) {
        console.log( 'Y.Squarespace.Gallery.setup', [this.params, this.data, this.elems] );
      }

      // Update Container Height
      if (!!this.params.updateContainerHeight) {
        this.on('changeIndex', this.updateContainerHeight);
        // this.updateContainerHeight();
      }

    },

    getSlideDimension: function(index, dimension) {

      var el = this.elems.slides.item(index);
      var imgEl = el;

      if (el.one('img,canvas')) {
        imgEl = el.one('img,canvas');
      }

      if (imgEl && el.getStyle('display') == 'inline') {
        el = imgEl;
      }

      var _offsetDim = (dimension == 'width' ? 'offsetWidth' : 'offsetHeight');

      if (imgEl.loader) {
        if (!imgEl.loader.get('loaded')) {
          return imgEl.loader.getDimensionForValue(dimension, el.get(dimension == 'width' ? 'offsetHeight' : 'offsetWidth'));
        } else {
          return imgEl.loader.get('node').get(_offsetDim);
        }
      } else {
        return el.get(_offsetDim);
      }

    },

    updateContainerHeight: function() {

      // default params
      var config = {
        container: this.elems.container
      };

      if (Y.Lang.isObject(this.params.updateContainerHeight)) {
        config = Y.merge(config, this.params.updateContainerHeight);
      }

      var height = this.getSlideDimension(this.data.currentIndex, 'height');

      if (config.maxHeight && height > config.maxHeight) {
        height = config.maxHeight;
      }

      var container = Y.all(config.container);

      if (config.anim && this._updateContainerHeightRanOnce) {
        container.each(function(el) {
          el.anim({}, Y.merge({
            to: {
              height: height
            },
            duration: 0.3,
            easing: Y.Easing.easeOutStrong
          }, config.anim)).run();
        });
      } else {
        container.setStyles({
          height: height
        });
      }

      // record that it ran once
      this._updateContainerHeightRanOnce = true;

    },

    //
    //Previous & Next handlers
    //
    previousSlide: function() {
      var toIndex = this.data.currentIndex - 1;

      if( toIndex < 0 && !this.params.loop ) { return; }
      this.fire( 'changeIndex', toIndex );
    },

    nextSlide: function() {
      var toIndex = this.data.currentIndex + 1;

      if( toIndex >= this.data.totalSlides && !this.params.loop ) { return; }
      this.fire( 'changeIndex', toIndex );
    },

    //
    //This updates the previous & after element's .disabled class
    //
    beforeChange: function( data ) {

      // If the loop is set to false, then worry about adding and removing disabled classes.
      if( !this.params.loop ) {

        if( this.params.next ) {
          if( data.toIndex >= this.data.totalSlides-1 ) {
            Y.all( this.params.next ).addClass('disabled');
          } else {
            Y.all( this.params.next ).removeClass('disabled');
          }
        }

        if( this.params.previous ) {
          if( data.toIndex <= 0 ) {
            Y.all( this.params.previous ).addClass('disabled');
          } else {
            Y.all( this.params.previous ).removeClass('disabled');
          }
        }

      }

      // Call the global event
      this.fire('before-change', data);

    },

    afterChange: function( data ) {

      // Also, change the indices
      if( this.params.currentIndex || this.params.totalSlides ) {

        Y.all( this.params.currentIndex ).each(function(element) {
          element.set( 'innerHTML', this.data.currentIndex+1 );
        }, this);

        Y.all( this.params.totalSlides ).each(function(element) {
          element.set( 'innerHTML', this.data.totalSlides );
        }, this);

      }

      // Change the hash
      if (this.params.historyHash) {
        this.history.replaceValue(this.params.historyHash, this.getCurrentSlideId());
      }

      // Call the global event
      this.fire('after-change', data);

    },

    // the public one
    changeIndex: function(i) {
      this.fire('changeIndex', i);
    },

    //
    //The main change function
    //
    _changeIndex: function( i ) {

      // Gallery Instances don't respond to it's own calls.
      if( Y.Lang.isObject(i) ) { return; }

      // Dummy proof -- just reset the value to the ends.
      if( !this.params.loop ) {
        if( i < 0 ) { i = 0; }
        if( i >= this.data.totalSlides ) { i = this.data.totalSlides-1; }
      }

      // Remember -- no such thing as a negative index
      if( i < 0 ) { i = this.data.totalSlides + i; }

      // Check if the currentIndex is the same
      if( this.isInitialized && this.data.currentIndex == i ) {
        return;
      }

      // Debug
      if( DEBUG ) {
        console.log( 'Y.Squarespace.Gallery.changeIndex', [i]);
      }

      // Save the "from" & "to" indices
      var fromIndex = this.data.currentIndex;
      var toIndex = i % this.data.totalSlides;

      // Save the slides element
      var $slides = this.elems.slides;

      // Figure out the direction -- there's gotta be a better way to do this.
      var last_to_first = ( fromIndex === this.data.totalSlides-1 && toIndex === 0 );
      var first_to_last = ( fromIndex === 0 && toIndex === this.data.totalSlides-1 );

      var direction;

      if( ( fromIndex < toIndex && !last_to_first && !first_to_last ) || ( fromIndex > toIndex && last_to_first && !first_to_last )  ) {
        direction = 'fwd';
      } else if( ( fromIndex > toIndex && !first_to_last ) || ( fromIndex < toIndex && first_to_last ) ) {
        direction = 'rev';
      }

      // Change Data
      var changeData = {
        fromIndex: fromIndex,
        toIndex: toIndex,
        direction: direction
      };

      // Trigger the before change
      this.beforeChange( changeData ); // internal

      // Add & remove the classes
      $slides.filter('.active').removeClass('active');
      $slides.item(toIndex).addClass('active');

      // Trigger the design change
      // this.design.change(toIndex, ( toIndex == fromIndex ? false : fromIndex ));
      this.fire('change', changeData);

      // Save the change
      this.data.currentIndex = toIndex;

      // Trigger the after change
      this.afterChange( changeData );

    },


    //
    //A bit more efficient loading
    //

    loadSlides: function( render ) {

      // Figure out what the elements
      var $images = this.elems.container.all('img[data-src][data-image-dimensions][data-image-focal-point]');


      // if (this.params.nextGeneration) {
      //   $images.plug(Y.Squarespace.Loader2, {

      //   });
      // } else {
      //   new Y.Squarespace.Loader({
      //     img: $images,
      //     renderWithCanvas: this.params.renderWithCanvas
      //   });
      // }

      $images.plug(Y.Squarespace.Loader2, this.params.loaderOptions);

    }

  });

  // Add all the great stuff from Y.EventTarget to Y.Squarespace.Gallery
  Y.augment( Y.Squarespace.Gallery, Y.EventTarget );

  //
  //This is the basic gallery design object.
  //
  Y.Squarespace.GalleryDesigns = {};

  // Base Design Object
  Y.Squarespace.GalleryDesigns.off = Class.create({
    gallery: false, // the reference to the gallery object
    options: {},

    beforeChange: function( fromIndex ) {},
    afterChange: function( toIndex ) {},
    change: function( fromIndex, toIndex ) {},
    setup: function() {},

    getGallery: function() { return this.gallery; },

    events: []
  });

}, '1.0', { requires: ["node", "event-key", "squarespace-image-loader", "squarespace-common", "squarespace-ui-base", "history"] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/escmanager.js
// ----------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Esc Key Manager
// ------------------------------------------------------------------------------------------------

YUI.add('squarespace-escmanager', function(Y) {

  /**
  An array of class selectors which represent ui control wrappers.
  @property STANDARD_CONTROL_CLASSES
  @namespace Squarespace
  @type [String]
  */
  Y.Squarespace.STANDARD_CONTROL_CLASSES = [
   '.standard-dialog-wrapper',
    '.yui3-panel-type-tooltip',
    '.sqsp-tooltip',
    '.tooltip',
    '.inline-field-title',
    '.workflow-flyout',
    '.page-map',
    '.map-widget',
    '.dialog-element',
    '.error-message-wrapper',
    '.squarespace-block',
    '.sqs-block',
    '.buttons a',
    '.sqs-shopping-cart',
    '.panel-menu-item',
    '.flyout-link-prompt',
    '.flyout-link-edit-content',
    '.flyout-variant-edit',
    'image-focal-point',
    'a.return-button',
    'a#deactivated-account-link',
    '.site-chooser-glyph',
    '.lightbox-inner',
    '.sqs-configuration-menu .site-title-text',
    '.sqs-configuration-menu .user-id',
    '.sqs-add-to-cart-button',
    '.additional-fields'
  ];

  /**
    A static class that takes care of closing open popups and flyouts.
    Add the object with a close() or cancel() as a target and Esc manager will
    close it after the escape key is pressed or there is a click on the body.
    It also does the login/logout on escape logic.
    @class EscManager
    @constructor
    @namespace Squarespace
  */
  Y.Squarespace.EscManager = {

    closeTargets: [ ],
    ignores: 0,

    attach: function(target) {
      if (this.attached) {
        return;
      }

      target = target || Y.one(window);

      // disable the EscManager if viewing through a facebook tab
      if (! Static.SQUARESPACE_CONTEXT.isFacebookTab) {
        // first global init
        Y.on("keyup", Y.Squarespace.EscManager.onKeyUp,   Y.one(target), Y.Squarespace.EscManager);
        Y.on("click",   Y.Squarespace.EscManager.onBodyClick, Y.one(target), Y.Squarespace.EscManager);
      }

      this.attached = true;
      this._disabled = false;
    },

    onShiftEsc: function() {
      Y.Squarespace.Utils.logout();
    },

    addIgnore: function() {
      this.ignores++;
    },

    /**
      A way to temporary disable the escManager

      @method disable
    */
    disable: function() {
      this._disabled = true;
    },

    /**
      A way to enable the escManager

      @method disable
    */
    enable: function() {
      this._disabled = false;
    },


    onEsc: function() {

      //how many should we ignore
      if (this.ignores) {
        this.ignores--;
        return;
      }

      if (Static.IN_BACKEND) {

        // we're in the backend, show the frontend
        window.CONFIG_PANEL.showSite();

      }
      else if (window.SQUARESPACE_LOGIN && window.SQUARESPACE_LOGIN.getAccount()) {

        // we're logged in -- show the manager
        if (Y.Squarespace.Management) {
          Y.Squarespace.Management.manageSite({ module: "content" });
        }

      } else {

        if (Static.SQUARESPACE_CONTEXT && Static.SQUARESPACE_CONTEXT.websiteSettings && !Static.SQUARESPACE_CONTEXT.websiteSettings.useEscapeKeyToLogin) {
          return;
        }

        if (window.SQUARESPACE_LOGIN) {
          window.SQUARESPACE_LOGIN.params.disableCreateAccount = true;
        }

        if (Y.Squarespace.Signup &&
          Y.Squarespace.Signup.signupDialog &&
          Y.Squarespace.Signup.signupDialog.isVisible()) {

          Y.Squarespace.Signup.signupDialog.cancel();

        } else {

          // redirect to config page to login
          var loc = Y.config.win.location;
          Y.config.win.location = "http://" + loc.host + "/config";
        }

      }
    },

    addTarget: function(o) {
      this.closeTargets.push(o);
    },

    removeTarget: function(o) {
      var targetIdx = this.closeTargets.indexOf(o);
      if (targetIdx !== -1) { this.closeTargets.splice(targetIdx, 1); }
    },

    onKeyUp: function(e) {
      if (e.keyCode === 27 && !this._disabled) {

        e.halt();

        if (this.closeTargets.length > 0) {

          var t = this.closeTargets.pop();

          this._closeTarget(t, e);

        } else if (e.shiftKey) {

          Y.later(10, this, this.onShiftEsc, e);

        } else {

          Y.later(10, this, this.onEsc, e);

        }

      }
    },

    _closeTarget: function (target, originalEvent) {
      if (Y.Lang.isFunction(target.close)) {
        target.close(originalEvent);
      }
      else if (Y.Lang.isFunction(target.cancel)) {
        target.cancel(originalEvent);
      }
      else if (Y.Lang.isFunction(target.hide)) {
        target.hide(originalEvent);
      }
      else {
        console.error("Escape target had no valid closing or hiding methods.", t);
      }
    },

    onBodyClick: function(e) {
      if (this.closeTargets.length > 0) {

        var t = this.closeTargets[this.closeTargets.length - 1];

        if (t.ignoreBodyClicks) {
          return;
        }

        var cx = e.clientX;
        var cy = e.clientY;
        var vw = e.target.get("winWidth");
        var vh = e.target.get("winHeight");

        if (cx < 0 || cx > vw || cy < 0 || cy > vh) {
          // click was offscreen, so ignore it
          // this fixes a bug in Firefox where dragging a dialog offscreen
          // would cause it to close
          return;
        }

        if (t.activeFlyout) {

          if (!e.target.ancestor(t.activeFlyout.constraintClasses, true)) {
            t.activeFlyout.field.closeFlyout();
            t.activeFlyout = null;
            Y.fire("target-closed", {
              target: t
            });
            return;
          }

        } else if (!e.target.ancestor(Y.Squarespace.STANDARD_CONTROL_CLASSES.join(", "), true)) { // if we DIDN'T click inside a valid control
          Y.fire("target-closed", {
            target: t
          });
          e.halt();

          this.closeTargets.pop();

          this._closeTarget(t, e);

        }

      }

    }
  };

  // ensure a global singleton

  if (typeof window !== 'undefined') {
    if (window.ESC_MANAGER) {

      Y.Squarespace.EscManager = window.ESC_MANAGER;

    } else {

      window.ESC_MANAGER = Y.Squarespace.EscManager;

    }
  }

}, '1.0', { requires: [
  'node',
  'event'
] });



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/escape/escape.js
// ----------------------------------------------------------------------------------------

YUI.add('escape', function (Y, NAME) {

/**
Provides utility methods for escaping strings.

@module escape
@class Escape
@static
@since 3.3.0
**/

var HTML_CHARS = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '/': '&#x2F;',
        '`': '&#x60;'
    },

Escape = {
    // -- Public Static Methods ------------------------------------------------

    /**
    Returns a copy of the specified string with special HTML characters
    escaped. The following characters will be converted to their
    corresponding character entities:

        & < > " ' / `

    This implementation is based on the [OWASP HTML escaping
    recommendations][1]. In addition to the characters in the OWASP
    recommendations, we also escape the <code>&#x60;</code> character, since IE
    interprets it as an attribute delimiter.

    If _string_ is not already a string, it will be coerced to a string.

    [1]: http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet

    @method html
    @param {String} string String to escape.
    @return {String} Escaped string.
    @static
    **/
    html: function (string) {
        return (string + '').replace(/[&<>"'\/`]/g, Escape._htmlReplacer);
    },

    /**
    Returns a copy of the specified string with special regular expression
    characters escaped, allowing the string to be used safely inside a regex.
    The following characters, and all whitespace characters, are escaped:

        - $ ^ * ( ) + [ ] { } | \ , . ?

    If _string_ is not already a string, it will be coerced to a string.

    @method regex
    @param {String} string String to escape.
    @return {String} Escaped string.
    @static
    **/
    regex: function (string) {
        // There's no need to escape !, =, and : since they only have meaning
        // when they follow a parenthesized ?, as in (?:...), and we already
        // escape parens and question marks.
        return (string + '').replace(/[\-$\^*()+\[\]{}|\\,.?\s]/g, '\\$&');
    },

    // -- Protected Static Methods ---------------------------------------------

    /**
     * Regex replacer for HTML escaping.
     *
     * @method _htmlReplacer
     * @param {String} match Matched character (must exist in HTML_CHARS).
     * @return {String} HTML entity.
     * @static
     * @protected
     */
    _htmlReplacer: function (match) {
        return HTML_CHARS[match];
    }
};

Escape.regexp = Escape.regex;

Y.Escape = Escape;


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/dom-style/dom-style.js
// ----------------------------------------------------------------------------------------

YUI.add('dom-style', function (Y, NAME) {

(function(Y) {
/**
 * Add style management functionality to DOM.
 * @module dom
 * @submodule dom-style
 * @for DOM
 */

var DOCUMENT_ELEMENT = 'documentElement',
    DEFAULT_VIEW = 'defaultView',
    OWNER_DOCUMENT = 'ownerDocument',
    STYLE = 'style',
    FLOAT = 'float',
    CSS_FLOAT = 'cssFloat',
    STYLE_FLOAT = 'styleFloat',
    TRANSPARENT = 'transparent',
    GET_COMPUTED_STYLE = 'getComputedStyle',
    GET_BOUNDING_CLIENT_RECT = 'getBoundingClientRect',

    WINDOW = Y.config.win,
    DOCUMENT = Y.config.doc,
    UNDEFINED = undefined,

    Y_DOM = Y.DOM,

    TRANSFORM = 'transform',
    TRANSFORMORIGIN = 'transformOrigin',
    VENDOR_TRANSFORM = [
        'WebkitTransform',
        'MozTransform',
        'OTransform',
        'msTransform'
    ],

    re_color = /color$/i,
    re_unit = /width|height|top|left|right|bottom|margin|padding/i;

Y.Array.each(VENDOR_TRANSFORM, function(val) {
    if (val in DOCUMENT[DOCUMENT_ELEMENT].style) {
        TRANSFORM = val;
        TRANSFORMORIGIN = val + "Origin";
    }
});

Y.mix(Y_DOM, {
    DEFAULT_UNIT: 'px',

    CUSTOM_STYLES: {
    },


    /**
     * Sets a style property for a given element.
     * @method setStyle
     * @param {HTMLElement} An HTMLElement to apply the style to.
     * @param {String} att The style property to set.
     * @param {String|Number} val The value.
     */
    setStyle: function(node, att, val, style) {
        style = style || node.style;
        var CUSTOM_STYLES = Y_DOM.CUSTOM_STYLES;

        if (style) {
            if (val === null || val === '') { // normalize unsetting
                val = '';
            } else if (!isNaN(new Number(val)) && re_unit.test(att)) { // number values may need a unit
                val += Y_DOM.DEFAULT_UNIT;
            }

            if (att in CUSTOM_STYLES) {
                if (CUSTOM_STYLES[att].set) {
                    CUSTOM_STYLES[att].set(node, val, style);
                    return; // NOTE: return
                } else if (typeof CUSTOM_STYLES[att] === 'string') {
                    att = CUSTOM_STYLES[att];
                }
            } else if (att === '') { // unset inline styles
                att = 'cssText';
                val = '';
            }
            style[att] = val;
        }
    },

    /**
     * Returns the current style value for the given property.
     * @method getStyle
     * @param {HTMLElement} An HTMLElement to get the style from.
     * @param {String} att The style property to get.
     */
    getStyle: function(node, att, style) {
        style = style || node.style;
        var CUSTOM_STYLES = Y_DOM.CUSTOM_STYLES,
            val = '';

        if (style) {
            if (att in CUSTOM_STYLES) {
                if (CUSTOM_STYLES[att].get) {
                    return CUSTOM_STYLES[att].get(node, att, style); // NOTE: return
                } else if (typeof CUSTOM_STYLES[att] === 'string') {
                    att = CUSTOM_STYLES[att];
                }
            }
            val = style[att];
            if (val === '') { // TODO: is empty string sufficient?
                val = Y_DOM[GET_COMPUTED_STYLE](node, att);
            }
        }

        return val;
    },

    /**
     * Sets multiple style properties.
     * @method setStyles
     * @param {HTMLElement} node An HTMLElement to apply the styles to.
     * @param {Object} hash An object literal of property:value pairs.
     */
    setStyles: function(node, hash) {
        var style = node.style;
        Y.each(hash, function(v, n) {
            Y_DOM.setStyle(node, n, v, style);
        }, Y_DOM);
    },

    /**
     * Returns the computed style for the given node.
     * @method getComputedStyle
     * @param {HTMLElement} An HTMLElement to get the style from.
     * @param {String} att The style property to get.
     * @return {String} The computed value of the style property.
     */
    getComputedStyle: function(node, att) {
        var val = '',
            doc = node[OWNER_DOCUMENT],
            computed;

        if (node[STYLE] && doc[DEFAULT_VIEW] && doc[DEFAULT_VIEW][GET_COMPUTED_STYLE]) {
            computed = doc[DEFAULT_VIEW][GET_COMPUTED_STYLE](node, null);
            if (computed) { // FF may be null in some cases (ticket #2530548)
                val = computed[att];
            }
        }
        return val;
    }
});

// normalize reserved word float alternatives ("cssFloat" or "styleFloat")
if (DOCUMENT[DOCUMENT_ELEMENT][STYLE][CSS_FLOAT] !== UNDEFINED) {
    Y_DOM.CUSTOM_STYLES[FLOAT] = CSS_FLOAT;
} else if (DOCUMENT[DOCUMENT_ELEMENT][STYLE][STYLE_FLOAT] !== UNDEFINED) {
    Y_DOM.CUSTOM_STYLES[FLOAT] = STYLE_FLOAT;
}

// fix opera computedStyle default color unit (convert to rgb)
if (Y.UA.opera) {
    Y_DOM[GET_COMPUTED_STYLE] = function(node, att) {
        var view = node[OWNER_DOCUMENT][DEFAULT_VIEW],
            val = view[GET_COMPUTED_STYLE](node, '')[att];

        if (re_color.test(att)) {
            val = Y.Color.toRGB(val);
        }

        return val;
    };

}

// safari converts transparent to rgba(), others use "transparent"
if (Y.UA.webkit) {
    Y_DOM[GET_COMPUTED_STYLE] = function(node, att) {
        var view = node[OWNER_DOCUMENT][DEFAULT_VIEW],
            val = view[GET_COMPUTED_STYLE](node, '')[att];

        if (val === 'rgba(0, 0, 0, 0)') {
            val = TRANSPARENT;
        }

        return val;
    };

}

Y.DOM._getAttrOffset = function(node, attr) {
    var val = Y.DOM[GET_COMPUTED_STYLE](node, attr),
        offsetParent = node.offsetParent,
        position,
        parentOffset,
        offset;

    if (val === 'auto') {
        position = Y.DOM.getStyle(node, 'position');
        if (position === 'static' || position === 'relative') {
            val = 0;
        } else if (offsetParent && offsetParent[GET_BOUNDING_CLIENT_RECT]) {
            parentOffset = offsetParent[GET_BOUNDING_CLIENT_RECT]()[attr];
            offset = node[GET_BOUNDING_CLIENT_RECT]()[attr];
            if (attr === 'left' || attr === 'top') {
                val = offset - parentOffset;
            } else {
                val = parentOffset - node[GET_BOUNDING_CLIENT_RECT]()[attr];
            }
        }
    }

    return val;
};

Y.DOM._getOffset = function(node) {
    var pos,
        xy = null;

    if (node) {
        pos = Y_DOM.getStyle(node, 'position');
        xy = [
            parseInt(Y_DOM[GET_COMPUTED_STYLE](node, 'left'), 10),
            parseInt(Y_DOM[GET_COMPUTED_STYLE](node, 'top'), 10)
        ];

        if ( isNaN(xy[0]) ) { // in case of 'auto'
            xy[0] = parseInt(Y_DOM.getStyle(node, 'left'), 10); // try inline
            if ( isNaN(xy[0]) ) { // default to offset value
                xy[0] = (pos === 'relative') ? 0 : node.offsetLeft || 0;
            }
        }

        if ( isNaN(xy[1]) ) { // in case of 'auto'
            xy[1] = parseInt(Y_DOM.getStyle(node, 'top'), 10); // try inline
            if ( isNaN(xy[1]) ) { // default to offset value
                xy[1] = (pos === 'relative') ? 0 : node.offsetTop || 0;
            }
        }
    }

    return xy;

};

Y_DOM.CUSTOM_STYLES.transform = {
    set: function(node, val, style) {
        style[TRANSFORM] = val;
    },

    get: function(node, style) {
        return Y_DOM[GET_COMPUTED_STYLE](node, TRANSFORM);
    }
};

Y_DOM.CUSTOM_STYLES.transformOrigin = {
    set: function(node, val, style) {
        style[TRANSFORMORIGIN] = val;
    },

    get: function(node, style) {
        return Y_DOM[GET_COMPUTED_STYLE](node, TRANSFORMORIGIN);
    }
};


})(Y);
(function(Y) {
var PARSE_INT = parseInt,
    RE = RegExp;

Y.Color = {
    KEYWORDS: {
        black: '000',
        silver: 'c0c0c0',
        gray: '808080',
        white: 'fff',
        maroon: '800000',
        red: 'f00',
        purple: '800080',
        fuchsia: 'f0f',
        green: '008000',
        lime: '0f0',
        olive: '808000',
        yellow: 'ff0',
        navy: '000080',
        blue: '00f',
        teal: '008080',
        aqua: '0ff'
    },

    re_RGB: /^rgb\(([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\)$/i,
    re_hex: /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i,
    re_hex3: /([0-9A-F])/gi,

    toRGB: function(val) {
        if (!Y.Color.re_RGB.test(val)) {
            val = Y.Color.toHex(val);
        }

        if(Y.Color.re_hex.exec(val)) {
            val = 'rgb(' + [
                PARSE_INT(RE.$1, 16),
                PARSE_INT(RE.$2, 16),
                PARSE_INT(RE.$3, 16)
            ].join(', ') + ')';
        }
        return val;
    },

    toHex: function(val) {
        val = Y.Color.KEYWORDS[val] || val;
        if (Y.Color.re_RGB.exec(val)) {
            val = [
                Number(RE.$1).toString(16),
                Number(RE.$2).toString(16),
                Number(RE.$3).toString(16)
            ];

            for (var i = 0; i < val.length; i++) {
                if (val[i].length < 2) {
                    val[i] = '0' + val[i];
                }
            }

            val = val.join('');
        }

        if (val.length < 6) {
            val = val.replace(Y.Color.re_hex3, '$1$1');
        }

        if (val !== 'transparent' && val.indexOf('#') < 0) {
            val = '#' + val;
        }

        return val.toUpperCase();
    }
};
})(Y);



}, '3.10.1', {"requires": ["dom-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/form-lightbox.js
// ----------------------------------------------------------------------------------------

/**
 * The lightbox used to pop up forms. Used by several components, including
 * product workflows and form blocks.
 */
YUI.add('squarespace-form-lightbox', function(Y) {

  Y.namespace('Squarespace.Widgets');

  var FormLightbox =
  Y.Squarespace.Widgets.FormLightbox = Y.Base.create('formLightbox', Y.Squarespace.Widgets.SSWidget,
    [],
    {
      initializer: function() {
        this._resizeEmitter = new Y.Squarespace.ResizeEmitter({ timeout: 100 });
      },

      destructor: function() {
        this._resizeEmitter.destroy();
      },

      renderUI: function() {
        FormLightbox.superclass.renderUI.call(this);

        this.get('boundingBox').hide();

        var innerEl =
        this._innerEl = Y.Node.create('<div class="lightbox-inner"></div>');

        innerEl.append('<div class="lightbox-content"></div>');

        this.get('contentBox').append('<div class="lightbox-background"></div>')
                              .append(innerEl);

        this._renderContent();

        if (this.get('openOnRender')) {
          this.open();
        }
      },

      bindUI: function() {
        FormLightbox.superclass.bindUI.call(this);

        this.after('contentChange', function() {
          this._renderContent();
          this.syncUI();
        }, this);

        this._resizeEmitter.on('resize', this.syncUI, this);

        this.get('contentBox').delegate('click', function() {
          this.close();
          Y.Squarespace.EscManager.removeTarget(this);
        }, '.lightbox-close', this);
      },

      syncUI: function() {
        FormLightbox.superclass.syncUI.call(this);
        this._setContentMarginTop();
      },

      open: function() {
        Y.one('html').addClass('sqs-form-lightbox-open');

        this.get('boundingBox').show();

        this.syncUI();

        Y.Squarespace.EscManager.addTarget(this);

        this.fire('open');
      },

      close: function() {
        Y.one('html').removeClass('sqs-form-lightbox-open');

        this.get('boundingBox').hide();

        this.fire('close');
      },

      _renderContent: function() {
        var contentEl = this._innerEl.one('.lightbox-content');
        var content = this.get('content');

        contentEl.empty();

        if (Y.instanceOf(content, Y.Widget)) {
          content.render(contentEl);
        } else {
          contentEl.setContent(content);
        }

        contentEl.append('<div class="lightbox-close">&times;</div>');
      },

      _setContentMarginTop: function() {
        var contentEl = this._innerEl.one('.lightbox-content');

        var winHeight = Y.one(Y.config.win).get('winHeight');
        var contentElHeight = contentEl.get('offsetHeight');
        var contentTallerThanWindow = contentElHeight > winHeight;
        var marginTop;

        if (contentTallerThanWindow) {
          marginTop = 50;
        } else {
          marginTop = winHeight/2 - contentElHeight/2;
        }

        contentEl.setStyle('marginTop', marginTop);
      }
    },
    {
      CSS_PREFIX: 'sqs-form-lightbox',
      ATTRS: {
        content: {
          value: null
        },

        animDuration: {
          value: 0.3
        },

        openOnRender: {
          value: false
        }
      }
    }
  );
}, '1.0', {
  requires: [
    'base',
    'node',
    'squarespace-util',
    'squarespace-ss-widget'
  ]
});


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/social-button.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-social-button', function(Y) {
  Y.namespace('Squarespace');
  var Services = Y.Squarespace.SocialServices,
      /*
       * How long to wait, in ms, after a render
       * script has been loaded to confirm it's actually
       * done its job.
       *
       * This is necessary because not all APIs provide
       * callbacks to confirm that the service has been
       * rendered. It may be better to poll the DOM
       * for their iFrame or other elements,
       * but then we're at the mercy of thir developers.
       *
       */
      RENDER_SAFETY_DELAY = 400,
      id = function(obj) {
        return obj;
      };

  /**
   * Renders a button that can expand to a dropdown list of
   * social services' share butons.
   *
   * @class SocialButton
   */
  var SocialButton = Y.Squarespace.SocialButton = Y.Base.create('socialButton', Y.Widget, [], {
    initializer: function(config) {

      /*
       * Map from service constant to Boolean indicating
       * whether the given service has been successfully
       * rendered.
       */
      this._servicesRendered = { };
      config.services.forEach(function(s) {
        this._servicesRendered[s] = false;
      }, this);

      /*
       * The list starts closed.
       */
      this._open = false;

      /*
       * Map of running animations.
       */
      this._anims = {};

      this._serviceRenderers = { };
      this._serviceRenderers[Services.REDDIT] = this._renderReddit;
      this._serviceRenderers[Services.FACEBOOK] = this._renderFacebook;
      this._serviceRenderers[Services.TWITTER] = this._renderTwitter;
      this._serviceRenderers[Services.GOOGLE] = this._renderGoogle;
      this._serviceRenderers[Services.LINKEDIN] = this._renderLinkedIn;
      this._serviceRenderers[Services.STUMBLE] = this._renderStumble;
      this._serviceRenderers[Services.PINTEREST] = this._renderPinterest;
      this._serviceRenderers[Services.TUMBLR] = this._renderTumblr;

      /**
       * Fired when an individual service is
       * rendered to the page. This includes
       * rendering stubs for batch renderers
       * to pick up.
       * @event serviceRendered
       */
      this.publish('serviceRendered', {
        defaultFn: this._defaultServiceRendered,
        context: this
      });

      /**
       * Fired when the user clicks on
       * the button.
       * @event buttonClicked
       */
      this.publish('buttonClicked', {
        defaultFn: this._defaultButtonClicked,
        preventable: true,
        context: this
      });

      /**
       * @event close
       */
      this.publish('close', {
        defaultFn: this.close,
        preventable: true,
        context: this
      });

      /**
       * Fired when all services on a button have been
       * rendered to the page. (Stubs included)
       * @event servicesRendered
       */
      this.publish('servicesRendered');

      this._serviceContainer = Y.Node.create('<div class="ss-social-button-container"></div>');
    },

    /**
     * Default even handler for the rendering
     * of a single service.
     *
     * @method _defaultServiceRendered
     * @protected
     */
    _defaultServiceRendered: function(e) {
      var service = e.details[0];
      this._servicesRendered[service] = true;
      if(this._allServicesRendered()) {
        this.set('loaded', true);
        this.fire('servicesRendered', this);
      }
    },

    open: function() {
      this._open = true;
      this._openList();
    },

    close: function() {
      this._open = false;
      this._closeList();
    },

    /**
     * DOM click handler to fire our internal click.
     *
     * @method _onClick
     * @protected
     */
    _onClick: function(e) {
      this.fire('buttonClicked', e);
    },

    /**
     * Default buttonClicked handler.
     *
     * @method _defaultButtonClicked
     * @protected
     */
    _defaultButtonClicked: function(e) {

      if(this.get('loaded')) {
        if(this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      } else if(!this.get('loading')){
        this.once('servicesRendered', function() {
          this.set('loading', false);
        }, this);

        this.set('loading', true);
        this._renderServices();
        this.open();
      }
    },

    /**
     * Is the button open?
     *
     * @return True if the button is open. False otherwise.
     * @method isOpen
     */
    isOpen: function() {
      return this._open;
    },

    /**
     * Destructor function.
     *
     * @method destructor
     */
    destructor: function() {
      this._stopAnimations();
    },

    /**
     * Stop all animations running on the button.
     *
     * This is used in the destructor in case some
     * component on the back end has destroyed the button
     * prematurely, which happens often...
     *
     * @method _stopAnimations
     * @private
     */
    _stopAnimations: function() {
      Y.Object.values(this._anims).forEach(function(anim) {
        anim.stop();
        anim = null;
      });
    },

    /**
     * Close the button list.
     *
     * @method _closeList
     * @protected
     */
    _closeList: function() {
      var contentEl = this.get('contentBox');

      /*
       * We check for this silly stuff because, in the event
       * that this social button is rendered inside a Settings Panel,
       * the code that handles switching panels simply
       * removes the nodes from the DOM without actually destroying
       * the YUI node references to them. (i.e. calling
       * set('innerHTML', '') instead of empty()
       *
       * Ryan is making it his personal mission to make the panel
       * code actually behave properly.
       */
      if(contentEl._node && contentEl.inDoc()) {
        var button = contentEl.one('.ss-social-button-wrapper'),
            listWrapper = contentEl.one('.ss-social-list-wrapper'),
            buttonWidth = button.get('offsetWidth'),
            buttonHeight = button.get('offsetHeight'),
            listWidth = listWrapper.get('offsetWidth'),
            dx = Math.abs(buttonWidth - listWidth),
            closeAnim;

      /*
       * We check for this silly stuff because, in the event
       * that this social button is rendered inside a Settings Panel,
       * the code that handles switching panels simply
       * removes the nodes from the DOM without actually destroying
       * the YUI node references to them. (i.e. calling
       * set('innerHTML', '') instead of empty()
       *
       * Ryan is making it his personal mission to make the panel
       * code actually behave properly.
       */
        if(listWrapper && listWrapper._node && listWrapper.inDoc()) {
          closeAnim = new Y.Anim({
            node: listWrapper,
            duration: 0.3,
            easing: Y.Easing.easeOutStrong,
            to: {
              height: 0,
              opacity: 0
            }
          });

          this._anims.close = closeAnim;

          closeAnim.on('end', function() {
            // Remove the overflow so that the button list wrapper can actually stay hidden
            // when it's closed and empty.
            listWrapper.setStyle('overflow', null);
            this.fire('listClose');
          }, this);
          closeAnim.run();
        }
      }
    },

    /**
     * Open the button list.
     *
     * @method _openList
     * @protected
     */
    _openList: function() {
      var contentEl = this.get('contentBox');

      /*
       * We check for this silly stuff because, in the event
       * that this social button is rendered inside a Settings Panel,
       * the code that handles switching panels simply
       * removes the nodes from the DOM without actually destroying
       * the YUI node references to them. (i.e. calling
       * set('innerHTML', '') instead of empty()
       *
       * Ryan is making it his personal mission to make the panel
       * code actually behave properly.
       */
      if(contentEl._node && contentEl.inDoc()) {
        var button = contentEl.one('.ss-social-button-wrapper'),
            listWrapper = contentEl.one('.ss-social-list-wrapper'),
            list = contentEl.one('.ss-social-button-list'),
            buttonWidth = button.get('offsetWidth'),
            buttonHeight = button.get('offsetHeight'),
            listWidth = listWrapper.get('offsetWidth'),
            dx = Math.abs(buttonWidth - listWidth),
            clickCapture,
            id = this.get('id'),
            openAnim;

        // Ensure that the list is centered below
        // the button on the X-Axis by aligning their midpoints
        // and flush with the bottom of the button..
        //
        // If the button is wider than the list,
        // push it to the right. If it's smaller
        // than or equal to the list, push it to the left.
        listWrapper.setStyles({
          'left': (buttonWidth <= listWidth ? -1 : 1) * dx/2,
          'top': buttonHeight
        });

        var listBottom = list.get('region').height + list.get('region').top,
            dy = listBottom - (Y.DOM.viewportRegion().height + Y.DOM.viewportRegion().top),
            bottomBuffer = 20;

        // Check if the list is going to render off the bottom of the screen and adjust its position
        // to {bottomBuffer} px above the bottom edge of the window.
        if(dy > 0) {
          listWrapper.setStyle('top', parseInt(listWrapper.getComputedStyle('top'), 10) - dy - bottomBuffer);
        }

       /*
        * We check for this silly stuff because, in the event
        * that this social button is rendered inside a Settings Panel,
        * the code that handles switching panels (panel manager) simply
        * removes the nodes from the DOM without actually destroying
        * the YUI node references to them. (i.e. calling
        * set('innerHTML', '') instead of empty()
        *
        * Ryan is making it his personal mission to make the panel
        * code actually behave properly.
        */
        if(listWrapper && listWrapper._node && listWrapper.inDoc()) {
          openAnim = new Y.Anim({
            node: listWrapper,
            duration: 0.3,
            easing: Y.Easing.easeOutStrong,
            to: {
              height: list.get('offsetHeight'),
              opacity: 1
            }
          });

          this._anims.open = openAnim;

          openAnim.on('end', function() {

            // Override the overflow here so that facebook like button comment boxes
            // and any other elements spawned by these widgets that are in the doc flow
            // that overflow the wrapper can be visible.
            listWrapper.setStyle('overflow', 'visible');

            // Add a temporary click handler to capture clicks
            // anywhere outside the button or on a social
            // button besides the one of origin.
            clickCapture = Y.one(document).on('click', function(e) {
              if(!e.target.ancestor('.ss-social-list-wrapper', true)) {
                this.fire('close');

                clickCapture.detach();
                clickCapture = null;
              }
            }, this);

            this.fire('listOpen');
          }, this);
          openAnim.run();
        }
      }
    },


    /**
     * Have all services (or their injection points) been rendered?
     *
     * @method _allServicesRendered
     * @return true if all services have been rendered, false otherwise
     */
    _allServicesRendered: function() {
      return Y.Object.values(this._servicesRendered).every(id);
    },

    /**
     * Bind event handlers to the DOM.
     *
     * Overriding Widget's bindUI.
     * @method bindUI
     */
    bindUI: function() {
      var contentEl = this.get('contentBox'),
          button = contentEl.one('.ss-social-button-wrapper');

      this.after('loadingChange', this._onLoadingChange, this);
      button.on('click', this._onClick, this);
    },

    /**
     * What happens when the 'loading' state changes?
     *
     * @method _onLoadingChange
     * @private
     */
    _onLoadingChange: function() {
      this.get('boundingBox').ancestor('.squarespace-social-buttons').toggleClass('loading', this.get('loading'));
    },

    /**
     * Render content to the DOM.
     *
     * Overriding Widget's renderUI.
     * @method renderUI
     */
    renderUI: function() {
      var contentEl = this.get('contentBox'),
          container;

      contentEl.append('<div class="ss-social-button-wrapper"><div class="ss-social-button"><span class="ss-social-button-icon"></span>Share</div></div>');
      contentEl.append('<div class="ss-social-list-wrapper"><div class="ss-social-button-list"></div></div>');
      container = contentEl.one('.ss-social-button-list');
    },

    /**
     * Renders all service buttons.
     *
     * @method _renderServices
     * @private
     */
    _renderServices: function() {
      var container = this.get('contentBox').one('.ss-social-button-list');
      this.get('services').forEach(function(s) {
        this._serviceRenderers[s].call(this, container);
      }, this);
    },


    /**
     * Given a service, generate the default script timeout callback function for it.
     *
     * @method _defaultFailureCb
     * @param service { Number } A social service id.
     * @private
     */
    _defaultTimeoutCb: function(service) {

      var serviceNames = Y.Squarespace.Utils.reverseMap(Y.Squarespace.SocialServices),
          errorFmt = '(Social Button) Loading render script for service: {name} too longer than ' +
                      (SocialButton.SCRIPT_TIMEOUT/1000) + ' seconds. Skipping.';

      return function() {
        console.warn(Y.substitute(errorFmt, {
          name: serviceNames[service]
        }));
        this.fire('serviceRendered', service);
      };
    },

    /**
     * Given a service, generate the default failure callback function for it.
     *
     * @method _defaultFailureCb
     * @param service { Number } A social service id.
     * @private
     */
    _defaultFailureCb: function(service) {

      var serviceNames = Y.Squarespace.Utils.reverseMap(Y.Squarespace.SocialServices),
          errorFmt = '(Social Button) Service {name} render script failed to load.';

      return function() {
        console.warn(Y.substitute(errorFmt, {
          name: serviceNames[service]
        }));
        this.fire('serviceRendered', service);
      };
    },

    /**
     * Render a Reddit to a container.
     *
     * @method _renderReddit
     * @param container { Node } Container to render to.
     */
    _renderReddit: function(container) {
      var redditContainer = this._serviceContainer.cloneNode(true),
          url = this.get('url'),
          contenEl = this.get('contentBox');

      redditContainer.addClass('reddit');
      redditContainer.append(Y.Node.create(SocialButton.REDDIT_LINK));

      redditContainer.on('click', function(e) {
        window.open('http://reddit.com/submit?url=' + encodeURIComponent(url), "Submit to Reddit");
        e.stopImmediatePropagation();
      });

      container.append(redditContainer);
      this.fire('serviceRendered', Services.REDDIT);
    },

    _renderTumblr: function(container) {
      var tumblrContainer = this._serviceContainer.cloneNode(true);
      var query = {
        url: this.get('url'),
        name: this.get('title')
      };
      var queryString = Y.QueryString.stringify(query);

      tumblrContainer.addClass('tumblr');
      tumblrContainer.append(Y.substitute(SocialButton.TUMBLR_TAG_TEMPLATE, {
        query: queryString
      }));

      container.append(tumblrContainer);

      Y.Get.script(SocialButton.TUMBLR_URL, {
        onSuccess: function() {
          Y.later(RENDER_SAFETY_DELAY, this, function() {
            this.fire('serviceRendered', Services.TUMBLR);
          });
        },
        onFailure: this._defaultFailureCb(Services.TUMBLR),
        onTimeout: this._defaultTimeoutCb(Services.TUMBLR),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });

    },

    /**
     * Render a Facebook button to a container.
     *
     * @method _renderFacebook
     * @param container { Node } Container to render to.
     */
    _renderFacebook: function(container) {
      var facebookContainer = this._serviceContainer.cloneNode(true),
          url = this.get('url'),
          contentEl = this.get('contentBox');

      facebookContainer.addClass('facebook');
      facebookContainer.append(Y.Node.create(
        Y.substitute(SocialButton.FACEBOOK_TAG_TEMPLATE,{ url: url })
      ));
      container.append(facebookContainer);

      Y.Get.script(SocialButton.FACEBOOK_URL, {
        onSuccess: function() {
          if(window.FB) {
            Y.one('html').setAttribute('xmlns:fb', 'http://ogp.me/ns/fb#');
            FB.XFBML.parse();
            Y.later(RENDER_SAFETY_DELAY, this, function() {
              this.fire('serviceRendered', Services.FACEBOOK);
            });
          }
        },
        onFailure: this._defaultFailureCb(Services.FACEBOOK),
        onTimeout: this._defaultTimeoutCb(Services.FACEBOOK),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });

    },

    /**
     * Render a Google Plus button to a container.
     *
     * @method _renderGoogle
     * @param container { Node } Container to render to.
     */
    _renderGoogle: function(container) {
      var googleContainer = this._serviceContainer.cloneNode(true),
          url = this.get('url');

      googleContainer.addClass('google');
      googleContainer.append(Y.Node.create(
        Y.substitute(SocialButton.GOOGLE_TAG_TEMPLATE, { url: url })
      ));
      container.append(googleContainer);

      Y.Get.script(SocialButton.GOOGLE_PLUS_URL, {
        onSuccess: function() {

          if(window.gapi) {
            gapi.plusone.go();
            Y.later(RENDER_SAFETY_DELAY, this, function() {

              this.fire('serviceRendered', Y.Squarespace.SocialServices.GOOGLE);

              this._googleRendered = true;
            });
          }
        },
        onFailure: this._defaultFailureCb(Services.GOOGLE),
        onTimeout: this._defaultTimeoutCb(Services.GOOGLE),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });

      this.fire('serviceRendered', Services.GOOGLE);
    },

    /**
     * Render a Twitter button to a container.
     *
     * @method _renderTwitter
     * @param container { Node } Container to render to.
     */
    _renderTwitter: function(container) {
      var twitterContainer = this._serviceContainer.cloneNode(true),
          title = this.get('title'),
          url = this.get('url');

      // Note: Twitter does funky things with the data-text attribute. If you
      // omit it, or provide an empty string, it takes the title of the page
      // on which the button is placed, instead...so to take the path
      // of least resistance, add a single space if the item/collection has
      // no title.
      twitterContainer.append(
        Y.Node.create(
          '<a href="https://twitter.com/share" data-text="' +
          Y.Escape.html(title || '') + '" data-url="' +  Y.Escape.html(url) +
          '"class="twitter-share-button">tweet</a>'
        )
      );
      twitterContainer.addClass('twitter');
      container.append(twitterContainer);

      Y.Get.script(SocialButton.TWITTER_URL, {
        onSuccess: function() {
          Y.later(RENDER_SAFETY_DELAY, this, function() {
            this.fire('serviceRendered', Services.TWITTER);
          });
        },
        onFailure: this._defaultFailureCb(Services.TWITTER),
        onTimeout: this._defaultTimeoutCb(Services.TWITTER),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });
    },

    /**
     * Render a linkedin button to a container.
     *
     * @method _renderLinkedIn
     * @param container { Node } Container to render to.
     */
    _renderLinkedIn: function(container) {
      var linkedInContainer = this._serviceContainer.cloneNode(true),
          title = this.get('title'),
          url = this.get('url');

      linkedInContainer.addClass('linkedin');
      linkedInContainer.append(
        Y.Node.create(
          Y.substitute(SocialButton.LINKEDIN_URL_TEMPLATE, { url: url })
        )
      );
      container.append(linkedInContainer);

      window.IN = undefined;
      Y.Get.script(SocialButton.LINKEDIN_URL , {
        onSuccess: function() {
          Y.later(RENDER_SAFETY_DELAY, this, function() {
            this.fire('serviceRendered', Services.LINKEDIN);
          });
        },
        onFailure: this._defaultFailureCb(Services.LINKEDIN),
        onTimeout: this._defaultTimeoutCb(Services.LINKEDIN),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });
    },

    /**
     * Render a StumbleUpon button to a container.
     *
     * @method _renderStumble
     * @param container { Node } Container to render to .
     */
    _renderStumble: function(container) {
      var stumbleContainer = this._serviceContainer.cloneNode(true),
          url = this.get('url'),
          id = this.get('id');

      stumbleContainer.addClass('stumble');


      stumbleContainer.append(Y.Node.create(
        Y.substitute(SocialButton.STUMBLE_TAG_TEMPLATE, { url : url , id: id})
      ));
      container.append(stumbleContainer);

      Y.Get.script(SocialButton.STUMBLE_URL, {
        onSuccess: function() {
          Y.later(RENDER_SAFETY_DELAY, this, function() {
            if(STMBLPN) {
              STMBLPN.processWidgets();
            }
            this.fire('serviceRendered', Y.Squarespace.SocialServices.STUMBLE);
          });
        },
        onFailure: this._defaultFailureCb(Services.STUMBLE),
        onTimeout: this._defaultTimeoutCb(Services.STUMBLE),
        timeout: SocialButton.SCRIPT_TIMEOUT,
        context: this
      });
    },

    /**
     * Render a Pinterest button to a container.
     *
     * @method _renderPinterest
     * @param container { Node } Container to render to .
     */
    _renderPinterest: function(container) {
      var pinterestContainer = this._serviceContainer.cloneNode(true),
          assetUrl = this.get('assetUrl'),
          url = this.get('url'),
          pageUrl = Static.SQUARESPACE_CONTEXT.website.authenticUrl +
                    container.ancestor('.squarespace-social-buttons').getAttribute('data-full-url'),
          id = this.get('id'),
          recordType = this.get('recordType');

      if(this.get('systemDataId')) {
        pinterestContainer.addClass('pinterest');
        pinterestContainer.append(Y.Node.create(
          Y.substitute(SocialButton.PINTEREST_TAG_TEMPLATE, {
            url: encodeURIComponent(assetUrl || url),
            pageUrl: encodeURIComponent(pageUrl)
          })
        ));
        container.append(pinterestContainer);

        Y.Get.script(SocialButton.PINTEREST_URL, {
          onSuccess: function() {
            Y.later(RENDER_SAFETY_DELAY, this, function() {
              this.fire('serviceRendered', Y.Squarespace.SocialServices.PINTEREST);
            }, this);
          },
          onFailure: this._defaultFailureCb(Services.PINTEREST),
          onTimeout: this._defaultTimeoutCb(Services.PINTEREST),
          timeout: SocialButton.SCRIPT_TIMEOUT,
          context: this
        });
      } else {
        this.fire('serviceRendered', Services.PINTEREST);
      }
    }
  }, {
    /**
     * URL of the Twitter render script.
     *
     * @property TWITTER_URL
     */
    TWITTER_URL: '//platform.twitter.com/widgets.js',

    /**
     * URL of the Tumblr render script.
     *
     * @property TUMBLR_URL
     */
    TUMBLR_URL: 'http://platform.tumblr.com/v1/share.js',

    /**
     * URL of the Facebook XFBML parser script.
     *
     * @property FACEBOOK_URL
     */
    FACEBOOK_URL: '//connect.facebook.net/en_US/all.js#xfbml=1',

    /**
     * URL for the LinkedIn render script.
     *
     * @property LINKEDIN_URL
     */
    LINKEDIN_URL: '//platform.linkedin.com/in.js',

    /**
     * URL of the google plus +1 script.
     *
     * @property GOOGLE_PLUS_URL
     */
    GOOGLE_PLUS_URL: '//apis.google.com/js/plusone.js',

    /**
     * URL of the StumbleUpon markup parser script.
     *
     * @property STUMBLE_URL
     */
    STUMBLE_URL: 'http://platform.stumbleupon.com/1/widgets.js',

    /**
     * URL of the Pinterest markup parser script.
     *
     * @property PINTEREST_URL
     */
    PINTEREST_URL: '//assets.pinterest.com/js/pinit.js',

    /**
     * URL (Template) for the LinkedIn render script.
     *
     * @property LINKEDIN_URL_TEMPLATE
     */
    LINKEDIN_URL_TEMPLATE: '<script type="IN/Share" data-url="{url}" data-counter="right"></script>',

    /**
     * G+ Tag (Template) for the Google Plus render script.
     *
     * @property GOOGLE_TAG_TEMPLATE
     */
    GOOGLE_TAG_TEMPLATE: '<g:plusone size="medium" annotation="bubble" href="{url}"></g:plusone>',

    /**
     * Facebook Tag (Template) for the Facebook render script.
     *
     * @property FACEBOOK_TAG_TEMPLATE
     */
    FACEBOOK_TAG_TEMPLATE:
      '<div id="fb-root"></div><fb:like href="{url}" send="false" layout="button_count" show_faces="true"></fb:like>',

    PINTEREST_TAG_TEMPLATE:
      '<a href="//pinterest.com/pin/create/button?url={pageUrl}&media={url}" class="pin-it-button" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a>',

    TUMBLR_TAG_TEMPLATE:
      '<a href="http://tumblr.com/share/link?{query}" title="Share on Tumblr" style="display:inline-block; text-indent:-9999px; overflow:hidden; width:81px; height:20px; background:url(\'http://platform.tumblr.com/v1/share_1T.png\') top left no-repeat transparent;">Share on Tumblr</a>',

    /**
     * How long, in milliseconds, we will wait for a script to return from Y.Get.script.
     *
     * @property SCRIPT_TIMEOUT
     */
    SCRIPT_TIMEOUT: 5000,

    /**
     * SumbleUpon Tag (Template) for the StumbleUpon render script
     *
     * @property STUMBLE_TAG_TEMPLATE
     */
    STUMBLE_TAG_TEMPLATE: '<su:badge layout="1" location="{url}"></su:badge>',

    /**
     * HTML for the "Post to Reddit" button.
     *
     * @property REDDIT_LINK
     */
    REDDIT_LINK:
      '<a href="#"><img src="http://www.reddit.com/static/spreddit7.gif" alt="submit to reddit" border="0" /></a>',

    ATTRS: {
      /**
       * URL of the page to share.
       *
       * @attribute url
       * @type String
       * @default (Current page location)
       */
      url: {
        value: window.location.href
      },

      /**
       * Title of the link to share.
       *
       * @attribute title
       * @type String
       * @default (Current page title)
       */
      title: {
        value: document.title || window.location.href
      },

      /**
       * Social services to render for this button.
       *
       * @attribute services
       * @type Array
       */
      services: {

      },

      /**
       * The Item type for which this social button is rendered.
       *
       * @attribute recordType
       * @type Number
       */
      recordType: {

      },

      /**
       * The assetUrl of the item for which this social button is rendered.
       *
       * @attribute assetUrl
       * @type String
       * @default ""
       */
      assetUrl: {
        value: ""
      },


      /**
       * The systemDataId of the item for which this social button is rendered.
       *
       * @attribute systemDataId
       * @type String
       * @default ""
       */
      systemDataId: {
        value: ""
      },

      /**
       * Whether the services have been loaded or not.
       *
       * @attribute loaded
       * @type Boolean
       * @default false
       */
      loaded: {
        value: false
      },

      /**
       * Whether the services are currently loading.
       *
       * @attribute loading
       * @type Boolean
       * @default false
       */
      loading: {
        value: false
      }

    }
  });
}, '1.0', {
  requires: [
    'squarespace-social-button-css',
    'widget',
    'querystring-stringify',
    'base',
    'squarespace-dombuilder',
    'substitute',
    'node',
    'anim',
    'escape',
    'squarespace-enum'
  ]
});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/events-calendar.js
// ----------------------------------------------------------------------------------------

YUI.add('squarespace-events-calendar', function(Y) {

  //'use strict';

  if (!Y.Squarespace.EventCollectionCalendar) {
    Y.Squarespace.EventCollectionCalendar = {};
  }

  Y.Squarespace.EventCollectionCalendar = Y.Base.create('EventCollectionCalendar', Y.Calendar, [], {

    initializer: function() {

      this.contentBox = this.get('contentBox');

      this.calendarQS = Y.QueryString.parse(location.search.substring(1));
      this.categoryParam = this.calendarQS.category ? '&category=' + this.calendarQS.category : '';
      this.tagParam = this.calendarQS.tag ? '&tag=' + this.calendarQS.tag : '';
      this.bindEvents();
    },

    calendarUrl: function(currentMonth) {
      return  window.location.pathname + '?view=calendar' +
              '&month=' + Y.DataType.Date.format(currentMonth, { format: "%B-%Y", locale: "en" }) +
              this.categoryParam +
              this.tagParam;
    },

    bindEvents: function() {

      this.before('render', this.createSpinner, this);
      this.on('render', this.getEventDataForMonth, this);
      this.after('render', this.saveHistoryStates, this);
      this.after('dateChange', this.getEventDataForMonth, this);

    },

    getEventDataForMonth: function() {
      var url = this.calendarUrl(this.get('date')) + '&format=json';
      // append cache busting parameter, this should not be necessary and is a temporary workaround
      // need to figure out how we want to deal with caching for these pages
      url += '&time=' + new Date().getTime();

      Y.Data.get({
        url: url,
        success: Y.bind(function(response) {

          this.ajaxSuccess(response);

        }, this)
      });

    },

    ajaxSuccess: function(response) {
      this.buildCalendar(response.items);
    },

    buildCalendar: function(events) {

      // YUI Calendar custom renderer
      // Loops through and renders each day individually
      var filter = function(date, node) {
        this.buildIndividualDay = new Y.Squarespace.BuildIndividualDay({
          date: date,
          node: node,
          events: events
        });

      };

      this.set('customRenderer', {
        rules : {"all" : "event-select"},
        filterFunction: filter
      });

      this.formatOverflowingEvents();
      this.fadeInCalendar();

      //Refire formatting on window resize
      Y.on('windowresize', function(){
        this.formatOverflowingEvents();
      }, window, this);

    },

    formatOverflowingEvents: function() {

      // Deal with days with a lot of events
      // Hide list items that don't fit in the cell, but don't leave any partially obscured
      this.contentBox.all('.eventcal-list-has-event').each(function(list){

        var cell = list.get('parentNode');
        var cellHeight = parseInt(cell.get('clientHeight'),10);
        var cellWidth = parseInt(cell.get('offsetWidth'),10);
        var cellMinWidth = 100;
        var expandIcon = cell.one('.eventcal-viewall');  // Icon that appears within node to indicate when events are overflowing
        var expandIconHeight = parseInt(expandIcon.get('offsetHeight'),10);
        var verticalPositionOfList = parseInt(list.getY(), 10);
        var hiddenCount = 0;

        list.all('.eventcal-item').each(function(item) {

          var heightOfOtherItems = parseInt(item.getY(), 10) - verticalPositionOfList; // this <li> y-pos minus <ul> y-pos
          var heightOfThisItem = parseInt(item.get('offsetHeight'),10);

          if
          (
            heightOfOtherItems + heightOfThisItem >= cellHeight - (expandIconHeight/2)
            || Y.one('body').hasClass('.event-calendar-compact-view')
          )
            {

              item.addClass('eventcal-item-hidden'); // Hide the overflowing <li>s
              item.get('parentNode').addClass('eventcal-list-overflow'); // Mark the <ul> as an overflowing list
              if(cellWidth < cellMinWidth || Y.one('body').hasClass('.event-calendar-compact-view')) { list.addClass('eventcal-list-overflow-fixedwidth'); } // If the <td> gets too skinny apply a fixed width styling to the event list <ul>
              expandIcon.addClass('eventcal-viewall-show'); // Show the viewall icon

              // Indicate total number of events out of view
              hiddenCount++;
              cell.one('.eventcal-hiddencount-num').setHTML(hiddenCount);

            } else {

              item.removeClass('eventcal-item-hidden');
              item.get('parentNode').removeClass('eventcal-list-overflow');
              list.removeClass('eventcal-list-overflow-fixedwidth');
              expandIcon.removeClass('eventcal-viewall-show');

            }

        }, this);

      }, this);


      // Expand overflowing event list upon hover
      Y.delegate(['mouseover', 'mouseout'], Y.bind(function(e){
        if('touchstart' === e.type) {
          this.showOverflowTouch(e.currentTarget.one('.eventcal-list'), e);
          this.showOverflow(e.currentTarget.one('.eventcal-list'));
        } else if('mouseover' === e.type) {
          this.showOverflow(e.currentTarget.one('.eventcal-list'));
        } else if ('mouseout' === e.type) {
          this.hideOverflow(e.currentTarget.one('.eventcal-list'));
        }
      }, this), this.contentBox, '.eventcal-node-has-event');

    },

    showOverflow: function(list) {

      // Expand the list
      if(list.hasClass('eventcal-list-overflow')) {
        list.addClass('eventcal-list-overflow-show');
      }

      // If fixed-width
      if(list.hasClass('eventcal-list-overflow-fixedwidth')) {

        // Center it
        var negLeftPositioning = ((120 - parseInt(list.get('parentNode').get('offsetWidth'),10))/2)*(-1);
        list.setStyle('left', negLeftPositioning);

        // Keep it within bounds
        if (list.getX() < this.contentBox.getX()) {
          list.addClass('eventcal-edge-left');
        } else if(list.getX() + list.get('offsetWidth') > this.contentBox.getX() + this.contentBox.get('offsetWidth')) {
          list.addClass('eventcal-edge-right');
        }

      }

    },

    showOverflowTouch: function(list, e) {

      // If touch device, don't click thru the links on first click
      if(!list.hasClass('eventcal-list-overflow-show') && list.hasClass('eventcal-list-overflow')) {
        list.setData('clickedOnce', false);
        if (!list.getData('clickedOnce')) {
          e.preventDefault();
          list.setData('clickedOnce', true);
        } else {
          return true;
        }
      }

      // Simulate "Mouseout"
      this.contentBox.all('.eventcal-list-overflow-show').each(function(allLists){
        this.hideOverflow(allLists);
        list.setData('clickedOnce', false);
      }, this);

    },

    hideOverflow: function(list) {

      list.removeClass('eventcal-list-overflow-show');
      list.setStyle('left', '');  // Clear styling, if applicable.

    },

    createSpinner: function() {

      this.spinner = new Y.Squarespace.Spinner({
        color: 'dark',
        size: 'extra-large',
        render: document.getElementById(this.contentBox.getAttribute('id'))
      });

    },

    fadeInCalendar: function() {

      if (this.spinner) {

        // Format [<][>] buttons
        this.contentBox.one('.yui3-calendar-header').append(this.contentBox.one('.yui3-calendarnav-prevmonth'));  // Append [<] back onto nav to switch the display order.
        this.contentBox.all('.yui3-calendarnav-prevmonth, .yui3-calendarnav-nextmonth').set('text','');  // Use icon fonts for the nav instead

        this.spinner.destroy();
        this.contentBox.removeClass('eventcal-preheight');
        this.contentBox.one('.yui3-calendar-grid').addClass('eventcal-show');
        this.contentBox.all('.yui3-calendarnav-prevmonth, .yui3-calendarnav-nextmonth').addClass('eventcal-show');

      }
    },

    saveHistoryStates: function() {

      this.yHistory = new Y.History();

      // TODO: IE9? :/

      // Save initial value and push current month to the URL
      // if(!Y.UA.ie || Y.UA.ie > 9) {
      this.yHistory.replaceValue('month', this.get('date'), { url: this.calendarUrl(this.get('date')) });
      // } else {
      //   this.yHistory.replaceValue('month', Y.Squarespace.Utils.dateFormat(this.get('date'), { format: "%B-%Y", locale: "en" }), { url: this.calendarUrl(this.get('date')) });
      // }

      // Save state when navigating between months
      Y.all('.yui3-calendarnav-prevmonth, .yui3-calendarnav-nextmonth').on('click', function(){

        // if(!Y.UA.ie || Y.UA.ie > 9) {
          this.yHistory.addValue('month', this.get('date'), { url: this.calendarUrl(this.get('date')) });
        // } else {
        //   this.yHistory.addValue('month', Y.Squarespace.Utils.dateFormat(this.get('date'), { format: "%B-%Y", locale: "en" }), { url: this.calendarUrl(this.get('date')) });
        // }

      }, this);

      // Load the saved state when navigating between months with the browser back/fwd buttons
      Y.on('history:change', function(e) {
        if (e.src == Y.HistoryHTML5.SRC_POPSTATE) {
          if(e.newVal.month) {
            this.set('date', e.newVal.month);
          }
        }
      }, this);

    }

  },
  {
    ATTRS: {
      contentBox: {
        getter: function(value) {
          return Y.one(value);
        }
      },
      date: {
        valueFn: function() {

          // If month is specified in URL, render the calendar in that month, otherwise, use the current month (local to the website setting's timezone â€” matters if we're just ending/starting a month)

          var monthParam = Y.QueryString.parse(location.search.substring(1)).month;
          var monthObj = monthParam ? Y.Date.parse(monthParam.split('-')[0] + ' 1, ' + monthParam.split('-')[1]) : null; // e.g. 'Jan 1, 2003'

          var today = new Date();
          var todayInWebsiteTimezone = new Date(today.setMinutes(today.getMinutes() + Y.Squarespace.Utils.getTimeOffsetToWebsiteTimezone(today)));

          var monthToRender =  monthObj ? monthObj : todayInWebsiteTimezone;

          return monthToRender;
        }
      },
      showPrevMonth: false,
      showNextMonth: false
    }
  }
  );


  Y.Squarespace.BuildIndividualDay = Y.Base.create('BuildIndividualDay', Y.Base, [], {

    initializer: function(){
      var events = this.getTodaysEvents(this.get('events'));
      events = this.sortEvents(events);
      this.set('events', events);
      this.buildDay();
    },

    /**
     * This looks a bit more complicated that you think is needed, but the cause of this
     * is the websites timezone settings. This is the timezone everything should be displayed
     * in. This levereage the central logic in utils.js
     */
    getTodaysEvents: function(events) {
      var currentDay = this.get('date');
      var today = Y.DataType.Date.format(currentDay, {format: "%Y-%m-%d"});
      if (Y.Lang.isArray(events) && events.length > 0) {
        return Y.Array.filter(events, function(eventItem) {
          var start = Y.Squarespace.Utils.dateFormat(eventItem.startDate, { format: "%Y-%m-%d" });
          var end = Y.Squarespace.Utils.dateFormat(eventItem.endDate, { format: "%Y-%m-%d" });
          if (today == start || today == end) {
            return true;
          }
          if ( new Date(today) > new Date(start) && new Date(today) < new Date(end)) {
            return true;
          }
          return false;
        });
      }
      return [];
    },

    buildDay: function() {
      var date = this.get('date');
      var node = this.get('node');

      // Clone the base markup for our calendar day into the day node
      node.setHTML(
        Y.one('.eventcal-clone').cloneNode(true).getHTML()
      );

      // Format date marker (e.g. Tue 12)
      node.all('.eventcal-dayname').append(
        Y.DataType.Date.format(date, { format: "%a" })
      );
      node.all('.eventcal-daynumber').append(
        Y.DataType.Date.format(date, { format: "%e" })
      );

      // Highlight if today (according to website setting's timezone)
      var today = new Date();
      var todayInWebsiteTimezone = new Date(today.setMinutes(today.getMinutes() + Y.Squarespace.Utils.getTimeOffsetToWebsiteTimezone(today)));
      if (date.setHours(0,0,0,0) === todayInWebsiteTimezone.setHours(0,0,0,0)) {
        node.addClass('eventcal-today');
      }

      // Populate each day with event data
      this.populateDay();

    },

    populateDay: function() {
      var node = this.get('node');
      var nodeEventList = node.one('.eventcal-list');
      var events = this.get('events');
      var currentDayStart = Y.DataType.Date.format(this.get('date'));

      if (events.length > 0) {

        // Loop through the events
        Y.Array.each(events, function(eventItem) {

          // Event Time Formatting, keeping it short as possible
          var startDate = new Date(eventItem.startDate);
          var ampm = Y.Squarespace.Utils.dateFormat(startDate, { format: "%p" });
          var abbrvAMPM = (ampm == 'PM') ? 'p' : 'a';
          var eventTime12hr = startDate.getMinutes() === 0 ? // if top of the hour, don't show 00
            Y.Squarespace.Utils.dateFormat(startDate, { format: "%l" }) + abbrvAMPM :
            Y.Squarespace.Utils.dateFormat(startDate, { format: "%l:%M" }) + abbrvAMPM;
          var eventTime24hr = Y.Squarespace.Utils.dateFormat(startDate, { format: "%H:%M" });

          // Multiday Events
          //var hasEndDateAfterToday = eventItem.end.setHours(0,0,0,0) > eventItem.individualDay.setHours(0,0,0,0);
          var hasStartDateBeforeToday = (currentDayStart > Y.Squarespace.Utils.dateFormat(startDate)); // Subsequent day of multiday event
          var isMultidayEvent = this._isMultidayEvent(eventItem);

          var insertEventData = function(el) {

            var eventcalLink = el.one('.eventcal-link');
            eventcalLink.setAttribute('href',eventItem.fullUrl + '?view=calendar');
            el.one('.eventcal-time-12hr').setHTML(eventTime12hr);
            el.one('.eventcal-time-24hr').setHTML(eventTime24hr);
            el.one('.eventcal-title').setHTML(eventItem.title);
            node.one('.eventcal-eventcount').setHTML(events.length);

            // Multiday Event Styling
            // Needs improvement. It applies all of the multiday event styling to all the event items as soon as it encounters the first multiday event and then removes the classes for the non-applicable ones as the loop moves through the rest of the events in the list.
            if(isMultidayEvent) {
              eventcalLink.addClass('eventcal-multiday');
              if (hasStartDateBeforeToday) {
                eventcalLink.addClass('eventcal-multiday-subsequent');
              } else {
                eventcalLink.removeClass('eventcal-multiday-subsequent');
              }
            } else {
              eventcalLink.removeClass('eventcal-multiday').removeClass('eventcal-multiday-subsequent');
            }

          };

          // For this date's first event, insert the event data into the existing empty <li>
          if(!nodeEventList.hasClass('eventcal-list-has-event')) {

            insertEventData.call(this, nodeEventList);

          // Otherwise, clone the existing first <li> and insert the content into the new one.
          } else {

            var newEventListItem = nodeEventList.one('.eventcal-item').cloneNode(true);
            nodeEventList.append(newEventListItem);
            insertEventData.call(this, newEventListItem);

          }

          nodeEventList.addClass('eventcal-list-has-event');
          node.addClass('eventcal-node-has-event');

        }, this);

      }

    },

    _isMultidayEvent: function(eventItem) {
      var startDate = Y.Squarespace.Utils.dateFormat(eventItem.startDate, { format: "%d%m%Y" });
      var endDate = Y.Squarespace.Utils.dateFormat(eventItem.endDate, { format: "%d%m%Y" });
      return startDate != endDate;
    },

    /**
     * Sort by startDate and put multiday last
     */
    sortEvents: function(events) {
      events.sort(function(a, b) {
        return b.startDate <= a.startDate ? 1 : -1;
      });

      var singleDay = [];
      var multiday = [];
      Y.Array.each(events, function(eventItem) {
        if (this._isMultidayEvent(eventItem)) {
          multiday.push(eventItem);
        } else {
          singleDay.push(eventItem);
        }
      }, this);

      return singleDay.concat(multiday);
    }

  },
  {
    ATTRS: {
      date: {
        value: null
      },
      node: {
        value: null
      },
      events: {
        value: null
      }
    }
  }
  );

}, '1.0', {
  requires: [
    "base",
    "calendar",
    "history",
    "squarespace-spinner"
  ]
});


// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/datatype-date-math/datatype-date-math.js
// ----------------------------------------------------------------------------------------

YUI.add('datatype-date-math', function (Y, NAME) {

/**
 * Date Math submodule.
 *
 * @module datatype-date
 * @submodule datatype-date-math
 * @for Date
 */
var LANG = Y.Lang;

Y.mix(Y.namespace("Date"), {

    /**
     * Checks whether a native JavaScript Date contains a valid value.
     * @for Date
     * @method isValidDate
     * @param oDate {Date} Date in the month for which the number of days is desired.
     * @return {Boolean} True if the date argument contains a valid value.
     */
     isValidDate : function (oDate) {
        if(LANG.isDate(oDate) && (isFinite(oDate)) && (oDate != "Invalid Date") && !isNaN(oDate) && (oDate != null)) {
            return true;
        }
        else {
            return false;
        }
    },

    /**
     * Checks whether two dates correspond to the same date and time.
     * @for Date
     * @method areEqual
     * @param aDate {Date} The first date to compare.
     * @param bDate {Date} The second date to compare.
     * @return {Boolean} True if the two dates correspond to the same
     * date and time.
     */
    areEqual : function (aDate, bDate) {
        return (this.isValidDate(aDate) && this.isValidDate(bDate) && (aDate.getTime() == bDate.getTime()));
    },

    /**
     * Checks whether the first date comes later than the second.
     * @for Date
     * @method isGreater
     * @param aDate {Date} The first date to compare.
     * @param bDate {Date} The second date to compare.
     * @return {Boolean} True if the first date is later than the second.
     */
    isGreater : function (aDate, bDate) {
        return (this.isValidDate(aDate) && this.isValidDate(bDate) && (aDate.getTime() > bDate.getTime()));
    },

    /**
     * Checks whether the first date comes later than or is the same as
     * the second.
     * @for Date
     * @method isGreaterOrEqual
     * @param aDate {Date} The first date to compare.
     * @param bDate {Date} The second date to compare.
     * @return {Boolean} True if the first date is later than or
     * the same as the second.
     */
    isGreaterOrEqual : function (aDate, bDate) {
        return (this.isValidDate(aDate) && this.isValidDate(bDate) && (aDate.getTime() >= bDate.getTime()));
    },


    /**
     * Checks whether the date is between two other given dates.
     * @for Date
     * @method isInRange
     * @param aDate {Date} The date to check
     * @param bDate {Date} Lower bound of the range.
     * @param cDate {Date} Higher bound of the range.
     * @return {Boolean} True if the date is between the two other given dates.
     */
    isInRange : function (aDate, bDate, cDate) {
        return (this.isGreaterOrEqual(aDate, bDate) && this.isGreaterOrEqual(cDate, aDate));
    },

    /**
     * Adds a specified number of days to the given date.
     * @for Date
     * @method addDays
     * @param oDate {Date} The date to add days to.
     * @param numDays {Number} The number of days to add (can be negative)
     * @return {Date} A new Date with the specified number of days
     * added to the original date.
     */
    addDays : function (oDate, numDays) {
        return new Date(oDate.getTime() + 86400000*numDays);
    },


    /**
     * Adds a specified number of months to the given date.
     * @for Date
     * @method addMonths
     * @param oDate {Date} The date to add months to.
     * @param numMonths {Number} The number of months to add (can be negative)
     * @return {Date} A new Date with the specified number of months
     * added to the original date.
     */
    addMonths : function (oDate, numMonths) {
        var newYear = oDate.getFullYear();
        var newMonth = oDate.getMonth() + numMonths;

        newYear  = Math.floor(newYear + newMonth / 12);
        newMonth = (newMonth % 12 + 12) % 12;

        var newDate = new Date (oDate.getTime());
        newDate.setFullYear(newYear);
        newDate.setMonth(newMonth);

        return newDate;
    },

    /**
     * Adds a specified number of years to the given date.
     * @for Date
     * @method addYears
     * @param oDate {Date} The date to add years to.
     * @param numYears {Number} The number of years to add (can be negative)
     * @return {Date} A new Date with the specified number of years
     * added to the original date.
     */
    addYears : function (oDate, numYears) {
        var newYear = oDate.getFullYear() + numYears;
        var newDate = new Date(oDate.getTime());

        newDate.setFullYear(newYear);
        return newDate;
    },

    /**
     * Lists all dates in a given month.
     * @for Date
     * @method listOfDatesInMonth
     * @param oDate {Date} The date corresponding to the month for
     * which a list of dates is required.
     * @return {Array} An `Array` of `Date`s from a given month.
     */
    listOfDatesInMonth : function (oDate) {
       if (!this.isValidDate(oDate)) {
         return [];
       }

       var daysInMonth = this.daysInMonth(oDate),
           year        = oDate.getFullYear(),
           month       = oDate.getMonth(),
           output      = [];

       for (var day = 1; day <= daysInMonth; day++) {
           output.push(new Date(year, month, day, 12, 0, 0));
       }

       return output;
    },

    /**
     * Takes a native JavaScript Date and returns the number of days
     * in the month that the given date belongs to.
     * @for Date
     * @method daysInMonth
     * @param oDate {Date} Date in the month for which the number
     * of days is desired.
     * @return {Number} A number (either 28, 29, 30 or 31) of days
     * in the given month.
     */
     daysInMonth : function (oDate) {
        if (!this.isValidDate(oDate)) {
            return 0;
        }

        var mon = oDate.getMonth();
        var lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        if (mon != 1) {
            return lengths[mon];
        }
        else {

            var year = oDate.getFullYear();
            if (year%400 === 0) {
                   return 29;
            }
            else if (year%100 === 0) {
                   return 28;
            }
            else if (year%4 === 0) {
                   return 29;
            }
            else {
                   return 28;
            }
       }
    }

});

Y.namespace("DataType");
Y.DataType.Date = Y.Date;


}, '3.10.1', {"requires": ["yui-base"]});



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/scripts-v6/dombuilder.js
// ----------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// DOM Builder
// ------------------------------------------------------------------------------------------------

/*jshint scripturl:true */
YUI.add('squarespace-dombuilder', function(Y) {

  /*
   *  Helper for constructing dom nodes in an ad-hoc fashion
   *  example usage:
   *    var yuiNode = Y.DB.DIV("class-string");
   *    var bigNode = Y.DB.DIV("class1 class2",
   *      Y.DB.INPUT("field-input map-address-line1",   { type: "text", spellcheck: "false" }),
   *      Y.DB.INPUT("field-input map-address-title",   { type: "text", spellcheck: "false", style: "font-weight: bold;" }),
   *    );
   */

  Y.DB = {

    unpackData: function(n, className) {

      if (n._node) n = n._node;

      if (className) {
        while (n) {
          if (n.data && n.className.indexOf(className) != -1) {
            return n.data;
          }
          n = n.parentNode;
        }
      } else {
        while (n) {
          if (n.data) { return n.data; }
          n = n.parentNode;
        }
      }

      return(null);

    },

    DIV: function() { return (Y.DB._gen("DIV", Array.prototype.slice.call(arguments))); },
    PARAGRAPH: function() { return (Y.DB._gen("P", Array.prototype.slice.call(arguments))); },
    LI: function() { return (Y.DB._gen("LI", Array.prototype.slice.call(arguments))); },
    SPAN: function() { return (Y.DB._gen("SPAN", Array.prototype.slice.call(arguments))); },
    A: function() { return (Y.DB._gen("A", Array.prototype.slice.call(arguments))); },
    UL: function() { return (Y.DB._gen("UL", Array.prototype.slice.call(arguments))); },
    LABEL: function() { return (Y.DB._gen("LABEL", Array.prototype.slice.call(arguments))); },
    INPUT: function() { return (Y.DB._gen("INPUT", Array.prototype.slice.call(arguments))); },
    TEXTAREA: function() { return (Y.DB._gen("TEXTAREA", Array.prototype.slice.call(arguments))); },
    SELECT: function() { return (Y.DB._gen("SELECT", Array.prototype.slice.call(arguments))); },
    OPTION: function() { return (Y.DB._gen("OPTION", Array.prototype.slice.call(arguments))); },
    IMG: function() { return (Y.DB._gen("IMG", Array.prototype.slice.call(arguments))); },
    TABLE: function() { return (Y.DB._gen("TABLE", Array.prototype.slice.call(arguments))); },
    TBODY: function() { return (Y.DB._gen("TBODY", Array.prototype.slice.call(arguments))); },
    THEAD: function() { return (Y.DB._gen("THEAD", Array.prototype.slice.call(arguments))); },
    TH: function() { return (Y.DB._gen("TH", Array.prototype.slice.call(arguments))); },
    TR: function() { return (Y.DB._gen("TR", Array.prototype.slice.call(arguments))); },
    TD: function() { return (Y.DB._gen("TD", Array.prototype.slice.call(arguments))); },
    VIDEO: function() { return (Y.DB._gen("VIDEO", Array.prototype.slice.call(arguments))); },
    PARAM: function() { return (Y.DB._gen("PARAM", Array.prototype.slice.call(arguments))); },
    OBJECT: function() { return (Y.DB._gen("OBJECT", Array.prototype.slice.call(arguments))); },
    SOURCE: function() { return (Y.DB._gen("SOURCE", Array.prototype.slice.call(arguments))); },
    SUP: function() { return (Y.DB._gen("SUP", Array.prototype.slice.call(arguments))); },
    BUTTON: function() { return (Y.DB._gen("BUTTON", Array.prototype.slice.call(arguments))); },

    _gen: function(tag, args) {

      var n = document.createElement(tag);
      var examineIdx = 0;

      // locate classnames

      if (args.length > examineIdx && typeof(args[examineIdx]) == "string") {
        n.className = args[examineIdx];
        ++examineIdx;
      }

      // locate extended properties
      // there are more arguments, that look like objects, that are NOT arrays, that are NOT YUI.Node objects

      if (args.length > examineIdx && args[examineIdx] != null && typeof(args[examineIdx]) == "object" && !(args[examineIdx] instanceof Array) && (args[examineIdx].getAttribute == null) && (args[examineIdx]._node == null)) {

        var props = args[examineIdx];
        ++examineIdx;

        // construct a deeper object

        for (var k in props) {
          if (k == "html") {
            n.innerHTML = props[k];
          } else if (k == "data") {
            n.data = props[k];
          } else if( k == "style" && typeof(props[k]) == 'object' ) {
            for ( var cssProp in props[k] ) {
              n.style[ cssProp ] = props[k][cssProp];
            }
          } else {
            n.setAttribute(k, props[k]);
          }
        }

        // defaults for certain objects

        if (tag == "A") {
          if (!props.href) { n.href = "javascript:noop();"; }
        }

      }

      // append the rest as children

      n = Y.one(n);

      // set the data correctly
      if (n.data && n.data()) {
        n._data = n.data();
      }

      for (var i = examineIdx; i < args.length; ++i) {
        if (args[i] instanceof Array) {
          for (var j = 0; j < args[i].length; ++j) {
            var child = args[i][j];
            n.append(child);
          }
        } else {
          var child = args[i];
          n.append(child);
        }
      }

      return n;

    }

  };


}, '1.0', { requires: ['node'] });



/* BUILDER TEST!

console.log(

  DB.DIV("grid-container-controls",
    DB.DIV("ok",
      DB.SPAN("hmm", { html: "LABEL!"}),
      DB.SPAN("hmm", { html: "LABEL!"})
      ),
    DB.DIV("control-block", { html: "test" }),
    DB.DIV("control-block", { html: "test" })
  ).innerHTML

  );*/



// ----------------------------------------------------------------------------------------
// Include: src/main/webapp/universal/yui3/3.10.1/handlebars-base/handlebars-base.js
// ----------------------------------------------------------------------------------------

YUI.add('handlebars-base', function (Y, NAME) {

/*!
Handlebars.js - Copyright (C) 2011 Yehuda Katz
https://raw.github.com/wycats/handlebars.js/master/LICENSE
*/
// This file contains YUI-specific wrapper code and overrides for the
// handlebars-base module.

/**
Handlebars is a simple template language inspired by Mustache.

This is a YUI port of the original Handlebars project, which can be found at
<https://github.com/wycats/handlebars.js>.

@module handlebars
@main handlebars
@since 3.5.0
*/

/**
Provides basic Handlebars template rendering functionality. Use this module when
you only need to render pre-compiled templates.

@module handlebars
@submodule handlebars-base
*/

/**
Handlebars is a simple template language inspired by Mustache.

This is a YUI port of the original Handlebars project, which can be found at
<https://github.com/wycats/handlebars.js>.

@class Handlebars
@since 3.5.0
*/
var Handlebars = Y.namespace('Handlebars');
/* THIS FILE IS GENERATED BY A BUILD SCRIPT - DO NOT EDIT! */

/*

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/

// lib/handlebars/browser-prefix.js
(function(undefined) {

// lib/handlebars/base.js

Handlebars.VERSION = "1.0.0";
Handlebars.COMPILER_REVISION = 4;

Handlebars.REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '>= 1.0.0'
};

Handlebars.helpers  = {};
Handlebars.partials = {};

var toString = Object.prototype.toString,
    functionType = '[object Function]',
    objectType = '[object Object]';

Handlebars.registerHelper = function(name, fn, inverse) {
  if (toString.call(name) === objectType) {
    if (inverse || fn) { throw new Handlebars.Exception('Arg not supported with multiple helpers'); }
    Handlebars.Utils.extend(this.helpers, name);
  } else {
    if (inverse) { fn.not = inverse; }
    this.helpers[name] = fn;
  }
};

Handlebars.registerPartial = function(name, str) {
  if (toString.call(name) === objectType) {
    Handlebars.Utils.extend(this.partials,  name);
  } else {
    this.partials[name] = str;
  }
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Missing helper: '" + arg + "'");
  }
});

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;

  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},

  // can be overridden in the host environment
  log: function(level, obj) {
    if (Handlebars.logger.level <= level) {
      var method = Handlebars.logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, obj);
      }
    }
  }
};

Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var i = 0, ret = "", data;

  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && typeof context === 'object') {
    if(context instanceof Array){
      for(var j = context.length; i<j; i++) {
        if (data) { data.index = i; }
        ret = ret + fn(context[i], { data: data });
      }
    } else {
      for(var key in context) {
        if(context.hasOwnProperty(key)) {
          if(data) { data.key = key; }
          ret = ret + fn(context[key], {data: data});
          i++;
        }
      }
    }
  }

  if(i === 0){
    ret = inverse(this);
  }

  return ret;
});

Handlebars.registerHelper('if', function(conditional, options) {
  var type = toString.call(conditional);
  if(type === functionType) { conditional = conditional.call(this); }

  if(!conditional || Handlebars.Utils.isEmpty(conditional)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(conditional, options) {
  return Handlebars.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn});
});

Handlebars.registerHelper('with', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if (!Handlebars.Utils.isEmpty(context)) return options.fn(context);
});

Handlebars.registerHelper('log', function(context, options) {
  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
  Handlebars.log(level, context);
});
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"params":27,"hash":28,"dataName":29,"param":30,"STRING":31,"INTEGER":32,"BOOLEAN":33,"hashSegments":34,"hashSegment":35,"ID":36,"EQUALS":37,"DATA":38,"pathSegments":39,"SEP":40,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",31:"STRING",32:"INTEGER",33:"BOOLEAN",36:"ID",37:"EQUALS",38:"DATA",40:"SEP"},
productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[27,2],[27,1],[30,1],[30,1],[30,1],[30,1],[30,1],[28,1],[34,2],[34,1],[35,3],[35,3],[35,3],[35,3],[35,3],[26,1],[26,1],[26,1],[29,2],[21,1],[39,3],[39,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1];
break;
case 2: this.$ = new yy.ProgramNode([], $$[$0]);
break;
case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]);
break;
case 4: this.$ = new yy.ProgramNode($$[$0-1], []);
break;
case 5: this.$ = new yy.ProgramNode($$[$0]);
break;
case 6: this.$ = new yy.ProgramNode([], []);
break;
case 7: this.$ = new yy.ProgramNode([]);
break;
case 8: this.$ = [$$[$0]];
break;
case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]);
break;
case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]);
break;
case 12: this.$ = $$[$0];
break;
case 13: this.$ = $$[$0];
break;
case 14: this.$ = new yy.ContentNode($$[$0]);
break;
case 15: this.$ = new yy.CommentNode($$[$0]);
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]);
break;
case 18: this.$ = $$[$0-1];
break;
case 19:
    // Parsing out the '&' escape token at this level saves ~500 bytes after min due to the removal of one parser node.
    this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], $$[$0-2][2] === '&');

break;
case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true);
break;
case 21: this.$ = new yy.PartialNode($$[$0-1]);
break;
case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]);
break;
case 23:
break;
case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]];
break;
case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null];
break;
case 26: this.$ = [[$$[$0-1]], $$[$0]];
break;
case 27: this.$ = [[$$[$0]], null];
break;
case 28: this.$ = [[$$[$0]], null];
break;
case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 30: this.$ = [$$[$0]];
break;
case 31: this.$ = $$[$0];
break;
case 32: this.$ = new yy.StringNode($$[$0]);
break;
case 33: this.$ = new yy.IntegerNode($$[$0]);
break;
case 34: this.$ = new yy.BooleanNode($$[$0]);
break;
case 35: this.$ = $$[$0];
break;
case 36: this.$ = new yy.HashNode($$[$0]);
break;
case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 38: this.$ = [$$[$0]];
break;
case 39: this.$ = [$$[$0-2], $$[$0]];
break;
case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])];
break;
case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])];
break;
case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])];
break;
case 43: this.$ = [$$[$0-2], $$[$0]];
break;
case 44: this.$ = new yy.PartialNameNode($$[$0]);
break;
case 45: this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0]));
break;
case 46: this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0]));
break;
case 47: this.$ = new yy.DataNode($$[$0]);
break;
case 48: this.$ = new yy.IdNode($$[$0]);
break;
case 49: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2];
break;
case 50: this.$ = [{part: $$[$0]}];
break;
}
},
table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],25:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],25:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],25:[1,16]},{17:23,18:[1,22],21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],25:[2,8]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{4:30,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{17:31,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:32,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:33,21:24,29:25,36:[1,28],38:[1,27],39:26},{21:35,26:34,31:[1,36],32:[1,37],36:[1,28],39:26},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],25:[1,16]},{17:23,21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,4],7:38,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],25:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{18:[1,39]},{18:[2,27],21:44,24:[2,27],27:40,28:41,29:48,30:42,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,28],24:[2,28]},{18:[2,48],24:[2,48],31:[2,48],32:[2,48],33:[2,48],36:[2,48],38:[2,48],40:[1,51]},{21:52,36:[1,28],39:26},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],38:[2,50],40:[2,50]},{10:53,20:[1,54]},{10:55,20:[1,54]},{18:[1,56]},{18:[1,57]},{24:[1,58]},{18:[1,59],21:60,36:[1,28],39:26},{18:[2,44],36:[2,44]},{18:[2,45],36:[2,45]},{18:[2,46],36:[2,46]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],25:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{18:[2,25],21:44,24:[2,25],28:61,29:48,30:62,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,26],24:[2,26]},{18:[2,30],24:[2,30],31:[2,30],32:[2,30],33:[2,30],36:[2,30],38:[2,30]},{18:[2,36],24:[2,36],35:63,36:[1,64]},{18:[2,31],24:[2,31],31:[2,31],32:[2,31],33:[2,31],36:[2,31],38:[2,31]},{18:[2,32],24:[2,32],31:[2,32],32:[2,32],33:[2,32],36:[2,32],38:[2,32]},{18:[2,33],24:[2,33],31:[2,33],32:[2,33],33:[2,33],36:[2,33],38:[2,33]},{18:[2,34],24:[2,34],31:[2,34],32:[2,34],33:[2,34],36:[2,34],38:[2,34]},{18:[2,35],24:[2,35],31:[2,35],32:[2,35],33:[2,35],36:[2,35],38:[2,35]},{18:[2,38],24:[2,38],36:[2,38]},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],37:[1,65],38:[2,50],40:[2,50]},{36:[1,66]},{18:[2,47],24:[2,47],31:[2,47],32:[2,47],33:[2,47],36:[2,47],38:[2,47]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{21:67,36:[1,28],39:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,68]},{18:[2,24],24:[2,24]},{18:[2,29],24:[2,29],31:[2,29],32:[2,29],33:[2,29],36:[2,29],38:[2,29]},{18:[2,37],24:[2,37],36:[2,37]},{37:[1,65]},{21:69,29:73,31:[1,70],32:[1,71],33:[1,72],36:[1,28],38:[1,27],39:26},{18:[2,49],24:[2,49],31:[2,49],32:[2,49],33:[2,49],36:[2,49],38:[2,49],40:[2,49]},{18:[1,74]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{18:[2,39],24:[2,39],36:[2,39]},{18:[2,40],24:[2,40],36:[2,40]},{18:[2,41],24:[2,41],36:[2,41]},{18:[2,42],24:[2,42],36:[2,42]},{18:[2,43],24:[2,43],36:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]}],
defaultActions: {17:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: yy_.yytext = "\\"; return 14;
break;
case 1:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;

break;
case 2: return 14;
break;
case 3:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;

break;
case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15;
break;
case 5: return 25;
break;
case 6: return 16;
break;
case 7: return 20;
break;
case 8: return 19;
break;
case 9: return 19;
break;
case 10: return 23;
break;
case 11: return 22;
break;
case 12: this.popState(); this.begin('com');
break;
case 13: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15;
break;
case 14: return 22;
break;
case 15: return 37;
break;
case 16: return 36;
break;
case 17: return 36;
break;
case 18: return 40;
break;
case 19: /*ignore whitespace*/
break;
case 20: this.popState(); return 24;
break;
case 21: this.popState(); return 18;
break;
case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 31;
break;
case 23: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 31;
break;
case 24: return 38;
break;
case 25: return 33;
break;
case 26: return 33;
break;
case 27: return 32;
break;
case 28: return 36;
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36;
break;
case 30: return 'INVALID';
break;
case 31: return 5;
break;
}
};
lexer.rules = [/^(?:\\\\(?=(\{\{)))/,/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[}\/ ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:-?[0-9]+(?=[}\s]))/,/^(?:[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":false},"emu":{"rules":[3],"inclusive":false},"com":{"rules":[4],"inclusive":false},"INITIAL":{"rules":[0,1,2,31],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();;
// lib/handlebars/compiler/base.js

Handlebars.Parser = handlebars;

Handlebars.parse = function(input) {

  // Just return if an already-compile AST was passed in.
  if(input.constructor === Handlebars.AST.ProgramNode) { return input; }

  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(input);
};
;
// lib/handlebars/compiler/ast.js
Handlebars.AST = {};

Handlebars.AST.ProgramNode = function(statements, inverse) {
  this.type = "program";
  this.statements = statements;
  if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
};

Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
  this.type = "mustache";
  this.escaped = !unescaped;
  this.hash = hash;

  var id = this.id = rawParams[0];
  var params = this.params = rawParams.slice(1);

  // a mustache is an eligible helper if:
  // * its id is simple (a single part, not `this` or `..`)
  var eligibleHelper = this.eligibleHelper = id.isSimple;

  // a mustache is definitely a helper if:
  // * it is an eligible helper, and
  // * it has at least one parameter or hash segment
  this.isHelper = eligibleHelper && (params.length || hash);

  // if a mustache is an eligible helper but not a definite
  // helper, it is ambiguous, and will be resolved in a later
  // pass or at runtime.
};

Handlebars.AST.PartialNode = function(partialName, context) {
  this.type         = "partial";
  this.partialName  = partialName;
  this.context      = context;
};

Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
  if(mustache.id.original !== close.original) {
    throw new Handlebars.Exception(mustache.id.original + " doesn't match " + close.original);
  }

  this.type = "block";
  this.mustache = mustache;
  this.program  = program;
  this.inverse  = inverse;

  if (this.inverse && !this.program) {
    this.isInverse = true;
  }
};

Handlebars.AST.ContentNode = function(string) {
  this.type = "content";
  this.string = string;
};

Handlebars.AST.HashNode = function(pairs) {
  this.type = "hash";
  this.pairs = pairs;
};

Handlebars.AST.IdNode = function(parts) {
  this.type = "ID";

  var original = "",
      dig = [],
      depth = 0;

  for(var i=0,l=parts.length; i<l; i++) {
    var part = parts[i].part;
    original += (parts[i].separator || '') + part;

    if (part === ".." || part === "." || part === "this") {
      if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + original); }
      else if (part === "..") { depth++; }
      else { this.isScoped = true; }
    }
    else { dig.push(part); }
  }

  this.original = original;
  this.parts    = dig;
  this.string   = dig.join('.');
  this.depth    = depth;

  // an ID is simple if it only has one part, and that part is not
  // `..` or `this`.
  this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

  this.stringModeValue = this.string;
};

Handlebars.AST.PartialNameNode = function(name) {
  this.type = "PARTIAL_NAME";
  this.name = name.original;
};

Handlebars.AST.DataNode = function(id) {
  this.type = "DATA";
  this.id = id;
};

Handlebars.AST.StringNode = function(string) {
  this.type = "STRING";
  this.original =
    this.string =
    this.stringModeValue = string;
};

Handlebars.AST.IntegerNode = function(integer) {
  this.type = "INTEGER";
  this.original =
    this.integer = integer;
  this.stringModeValue = Number(integer);
};

Handlebars.AST.BooleanNode = function(bool) {
  this.type = "BOOLEAN";
  this.bool = bool;
  this.stringModeValue = bool === "true";
};

Handlebars.AST.CommentNode = function(comment) {
  this.type = "comment";
  this.comment = comment;
};
;
// lib/handlebars/utils.js

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

var escapeChar = function(chr) {
  return escape[chr] || "&amp;";
};

Handlebars.Utils = {
  extend: function(obj, value) {
    for(var key in value) {
      if(value.hasOwnProperty(key)) {
        obj[key] = value[key];
      }
    }
  },

  escapeExpression: function(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof Handlebars.SafeString) {
      return string.toString();
    } else if (string == null || string === false) {
      return "";
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = string.toString();

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  },

  isEmpty: function(value) {
    if (!value && value !== 0) {
      return true;
    } else if(toString.call(value) === "[object Array]" && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }
};
;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
var Compiler = Handlebars.Compiler = function() {};

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  disassemble: function() {
    var opcodes = this.opcodes, opcode, out = [], params, param;

    for (var i=0, l=opcodes.length; i<l; i++) {
      opcode = opcodes[i];

      if (opcode.opcode === 'DECLARE') {
        out.push("DECLARE " + opcode.name + "=" + opcode.value);
      } else {
        params = [];
        for (var j=0; j<opcode.args.length; j++) {
          param = opcode.args[j];
          if (typeof param === "string") {
            param = "\"" + param.replace("\n", "\\n") + "\"";
          }
          params.push(param);
        }
        out.push(opcode.opcode + " " + params.join(" "));
      }
    }

    return out.join("\n");
  },
  equals: function(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
        return false;
      }
      for (var j = 0; j < opcode.args.length; j++) {
        if (opcode.args[j] !== otherOpcode.args[j]) {
          return false;
        }
      }
    }

    len = this.children.length;
    if (other.children.length !== len) {
      return false;
    }
    for (i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function(program, options) {
    this.children = [];
    this.depths = {list: []};
    this.options = options;

    // These changes will propagate to the other compiler components
    var knownHelpers = this.options.knownHelpers;
    this.options.knownHelpers = {
      'helperMissing': true,
      'blockHelperMissing': true,
      'each': true,
      'if': true,
      'unless': true,
      'with': true,
      'log': true
    };
    if (knownHelpers) {
      for (var name in knownHelpers) {
        this.options.knownHelpers[name] = knownHelpers[name];
      }
    }

    return this.program(program);
  },

  accept: function(node) {
    return this[node.type](node);
  },

  program: function(program) {
    var statements = program.statements, statement;
    this.opcodes = [];

    for(var i=0, l=statements.length; i<l; i++) {
      statement = statements[i];
      this[statement.type](statement);
    }
    this.isSimple = l === 1;

    this.depths.list = this.depths.list.sort(function(a, b) {
      return a - b;
    });

    return this;
  },

  compileProgram: function(program) {
    var result = new this.compiler().compile(program, this.options);
    var guid = this.guid++, depth;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;

    for(var i=0, l=result.depths.list.length; i<l; i++) {
      depth = result.depths.list[i];

      if(depth < 2) { continue; }
      else { this.addDepth(depth - 1); }
    }

    return guid;
  },

  block: function(block) {
    var mustache = block.mustache,
        program = block.program,
        inverse = block.inverse;

    if (program) {
      program = this.compileProgram(program);
    }

    if (inverse) {
      inverse = this.compileProgram(inverse);
    }

    var type = this.classifyMustache(mustache);

    if (type === "helper") {
      this.helperMustache(mustache, program, inverse);
    } else if (type === "simple") {
      this.simpleMustache(mustache);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue');
    } else {
      this.ambiguousMustache(mustache, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  hash: function(hash) {
    var pairs = hash.pairs, pair, val;

    this.opcode('pushHash');

    for(var i=0, l=pairs.length; i<l; i++) {
      pair = pairs[i];
      val  = pair[1];

      if (this.options.stringParams) {
        if(val.depth) {
          this.addDepth(val.depth);
        }
        this.opcode('getContext', val.depth || 0);
        this.opcode('pushStringParam', val.stringModeValue, val.type);
      } else {
        this.accept(val);
      }

      this.opcode('assignToHash', pair[0]);
    }
    this.opcode('popHash');
  },

  partial: function(partial) {
    var partialName = partial.partialName;
    this.usePartial = true;

    if(partial.context) {
      this.ID(partial.context);
    } else {
      this.opcode('push', 'depth0');
    }

    this.opcode('invokePartial', partialName.name);
    this.opcode('append');
  },

  content: function(content) {
    this.opcode('appendContent', content.string);
  },

  mustache: function(mustache) {
    var options = this.options;
    var type = this.classifyMustache(mustache);

    if (type === "simple") {
      this.simpleMustache(mustache);
    } else if (type === "helper") {
      this.helperMustache(mustache);
    } else {
      this.ambiguousMustache(mustache);
    }

    if(mustache.escaped && !options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },

  ambiguousMustache: function(mustache, program, inverse) {
    var id = mustache.id,
        name = id.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', id.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleMustache: function(mustache) {
    var id = mustache.id;

    if (id.type === 'DATA') {
      this.DATA(id);
    } else if (id.parts.length) {
      this.ID(id);
    } else {
      // Simplified ID for `this`
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);
      this.opcode('pushContext');
    }

    this.opcode('resolvePossibleLambda');
  },

  helperMustache: function(mustache, program, inverse) {
    var params = this.setupFullMustacheParams(mustache, program, inverse),
        name = mustache.id.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
    } else {
      this.opcode('invokeHelper', params.length, name);
    }
  },

  ID: function(id) {
    this.addDepth(id.depth);
    this.opcode('getContext', id.depth);

    var name = id.parts[0];
    if (!name) {
      this.opcode('pushContext');
    } else {
      this.opcode('lookupOnContext', id.parts[0]);
    }

    for(var i=1, l=id.parts.length; i<l; i++) {
      this.opcode('lookup', id.parts[i]);
    }
  },

  DATA: function(data) {
    this.options.data = true;
    if (data.id.isScoped || data.id.depth) {
      throw new Handlebars.Exception('Scoped data references are not supported: ' + data.original);
    }

    this.opcode('lookupData');
    var parts = data.id.parts;
    for(var i=0, l=parts.length; i<l; i++) {
      this.opcode('lookup', parts[i]);
    }
  },

  STRING: function(string) {
    this.opcode('pushString', string.string);
  },

  INTEGER: function(integer) {
    this.opcode('pushLiteral', integer.integer);
  },

  BOOLEAN: function(bool) {
    this.opcode('pushLiteral', bool.bool);
  },

  comment: function() {},

  // HELPERS
  opcode: function(name) {
    this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
  },

  declare: function(name, value) {
    this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
  },

  addDepth: function(depth) {
    if(isNaN(depth)) { throw new Error("EWOT"); }
    if(depth === 0) { return; }

    if(!this.depths[depth]) {
      this.depths[depth] = true;
      this.depths.list.push(depth);
    }
  },

  classifyMustache: function(mustache) {
    var isHelper   = mustache.isHelper;
    var isEligible = mustache.eligibleHelper;
    var options    = this.options;

    // if ambiguous, we can possibly resolve the ambiguity now
    if (isEligible && !isHelper) {
      var name = mustache.id.parts[0];

      if (options.knownHelpers[name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) { return "helper"; }
    else if (isEligible) { return "ambiguous"; }
    else { return "simple"; }
  },

  pushParams: function(params) {
    var i = params.length, param;

    while(i--) {
      param = params[i];

      if(this.options.stringParams) {
        if(param.depth) {
          this.addDepth(param.depth);
        }

        this.opcode('getContext', param.depth || 0);
        this.opcode('pushStringParam', param.stringModeValue, param.type);
      } else {
        this[param.type](param);
      }
    }
  },

  setupMustacheParams: function(mustache) {
    var params = mustache.params;
    this.pushParams(params);

    if(mustache.hash) {
      this.hash(mustache.hash);
    } else {
      this.opcode('emptyHash');
    }

    return params;
  },

  // this will replace setupMustacheParams when we're done
  setupFullMustacheParams: function(mustache, program, inverse) {
    var params = mustache.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if(mustache.hash) {
      this.hash(mustache.hash);
    } else {
      this.opcode('emptyHash');
    }

    return params;
  }
};

Handlebars.precompile = function(input, options) {
  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var ast = Handlebars.parse(input);
  var environment = new Compiler().compile(ast, options);
  return new Handlebars.JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(input, options) {
  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var compiled;
  function compile() {
    var ast = Handlebars.parse(input);
    var environment = new Compiler().compile(ast, options);
    var templateSpec = new Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};

;
// lib/handlebars/compiler/javascript-compiler.js
/*jshint eqnull:true*/

var Literal = function(value) {
  this.value = value;
};


var JavaScriptCompiler = Handlebars.JavaScriptCompiler = function() {};

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function(parent, name /* , type*/) {
    if (/^[0-9]+$/.test(name)) {
      return parent + "[" + name + "]";
    } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      return parent + "." + name;
    }
    else {
      return parent + "['" + name + "']";
    }
  },

  appendToBuffer: function(string) {
    if (this.environment.isSimple) {
      return "return " + string + ";";
    } else {
      return {
        appendToBuffer: true,
        content: string,
        toString: function() { return "buffer += " + string + ";"; }
      };
    }
  },

  initializeBuffer: function() {
    return this.quotedString("");
  },

  namespace: "Handlebars",
  // END PUBLIC API

  compile: function(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options || {};

    Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      programs: [],
      environments: [],
      aliases: { }
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.registers = { list: [] };
    this.compileStack = [];
    this.inlineStack = [];

    this.compileChildren(environment, options);

    var opcodes = environment.opcodes, opcode;

    this.i = 0;

    for(var l=opcodes.length; this.i<l; this.i++) {
      opcode = opcodes[this.i];

      if(opcode.opcode === 'DECLARE') {
        this[opcode.name] = opcode.value;
      } else {
        this[opcode.opcode].apply(this, opcode.args);
      }
    }

    return this.createFunctionContext(asObject);
  },

  nextOpcode: function() {
    var opcodes = this.environment.opcodes;
    return opcodes[this.i + 1];
  },

  eat: function() {
    this.i = this.i + 1;
  },

  preamble: function() {
    var out = [];

    if (!this.isChild) {
      var namespace = this.namespace;

      var copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
      if (this.environment.usePartial) { copies = copies + " partials = this.merge(partials, " + namespace + ".partials);"; }
      if (this.options.data) { copies = copies + " data = data || {};"; }
      out.push(copies);
    } else {
      out.push('');
    }

    if (!this.environment.isSimple) {
      out.push(", buffer = " + this.initializeBuffer());
    } else {
      out.push("");
    }

    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = out;
  },

  createFunctionContext: function(asObject) {
    var locals = this.stackVars.concat(this.registers.list);

    if(locals.length > 0) {
      this.source[1] = this.source[1] + ", " + locals.join(", ");
    }

    // Generate minimizer alias mappings
    if (!this.isChild) {
      for (var alias in this.context.aliases) {
        if (this.context.aliases.hasOwnProperty(alias)) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }
    }

    if (this.source[1]) {
      this.source[1] = "var " + this.source[1].substring(2) + ";";
    }

    // Merge children
    if (!this.isChild) {
      this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
    }

    if (!this.environment.isSimple) {
      this.source.push("return buffer;");
    }

    var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

    for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
      params.push("depth" + this.environment.depths.list[i]);
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource();

    if (!this.isChild) {
      var revision = Handlebars.COMPILER_REVISION,
          versions = Handlebars.REVISION_CHANGES[revision];
      source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
    }

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
      Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
      return functionSource;
    }
  },
  mergeSource: function() {
    // WARN: We are not handling the case where buffer is still populated as the source should
    // not have buffer append operations as their final action.
    var source = '',
        buffer;
    for (var i = 0, len = this.source.length; i < len; i++) {
      var line = this.source[i];
      if (line.appendToBuffer) {
        if (buffer) {
          buffer = buffer + '\n    + ' + line.content;
        } else {
          buffer = line.content;
        }
      } else {
        if (buffer) {
          source += 'buffer += ' + buffer + ';\n  ';
          buffer = undefined;
        }
        source += line + '\n  ';
      }
    }
    return source;
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    this.replaceStack(function(current) {
      params.splice(1, 0, current);
      return "blockHelperMissing.call(" + params.join(", ") + ")";
    });
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    var current = this.topStack();
    params.splice(1, 0, current);

    // Use the options value generated from the invocation
    params[params.length-1] = 'options';

    this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function(content) {
    this.source.push(this.appendToBuffer(this.quotedString(content)));
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function() {
    // Force anything that is inlined onto the stack so we don't have duplication
    // when we examine local
    this.flushInline();
    var local = this.popStack();
    this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
    if (this.environment.isSimple) {
      this.source.push("else { " + this.appendToBuffer("''") + " }");
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function() {
    this.context.aliases.escapeExpression = 'this.escapeExpression';

    this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function(depth) {
    if(this.lastContext !== depth) {
      this.lastContext = depth;
    }
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function(name) {
    this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function() {
    this.pushStackLiteral('depth' + this.lastContext);
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function() {
    this.context.aliases.functionType = '"function"';

    this.replaceStack(function(current) {
      return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
    });
  },

  // [lookup]
  //
  // On stack, before: value, ...
  // On stack, after: value[name], ...
  //
  // Replace the value on the stack with the result of looking
  // up `name` on `value`
  lookup: function(name) {
    this.replaceStack(function(current) {
      return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
    });
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data[id], ...
  //
  // Push the result of looking up `id` on the current data
  lookupData: function(id) {
    this.push('data');
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function(string, type) {
    this.pushStackLiteral('depth' + this.lastContext);

    this.pushString(type);

    if (typeof string === 'string') {
      this.pushString(string);
    } else {
      this.pushStackLiteral(string);
    }
  },

  emptyHash: function() {
    this.pushStackLiteral('{}');

    if (this.options.stringParams) {
      this.register('hashTypes', '{}');
      this.register('hashContexts', '{}');
    }
  },
  pushHash: function() {
    this.hash = {values: [], types: [], contexts: []};
  },
  popHash: function() {
    var hash = this.hash;
    this.hash = undefined;

    if (this.options.stringParams) {
      this.register('hashContexts', '{' + hash.contexts.join(',') + '}');
      this.register('hashTypes', '{' + hash.types.join(',') + '}');
    }
    this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [push]
  //
  // On stack, before: ...
  // On stack, after: expr, ...
  //
  // Push an expression onto the stack
  push: function(expr) {
    this.inlineStack.push(expr);
    return expr;
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function(paramSize, name) {
    this.context.aliases.helperMissing = 'helpers.helperMissing';

    var helper = this.lastHelper = this.setupHelper(paramSize, name, true);
    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');

    this.push(helper.name + ' || ' + nonHelper);
    this.replaceStack(function(name) {
      return name + ' ? ' + name + '.call(' +
          helper.callParams + ") " + ": helperMissing.call(" +
          helper.helperMissingParams + ")";
    });
  },

  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(helper.name + ".call(" + helper.callParams + ")");
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function(name, helperCall) {
    this.context.aliases.functionType = '"function"';

    this.pushStackLiteral('{}');    // Hash value
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
    var nextStack = this.nextStack();

    this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
    this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function(name) {
    var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

    if (this.options.data) {
      params.push("data");
    }

    this.context.aliases.self = "this";
    this.push("self.invokePartial(" + params.join(", ") + ")");
  },

  // [assignToHash]
  //
  // On stack, before: value, hash, ...
  // On stack, after: hash, ...
  //
  // Pops a value and hash off the stack, assigns `hash[key] = value`
  // and pushes the hash back onto the stack.
  assignToHash: function(key) {
    var value = this.popStack(),
        context,
        type;

    if (this.options.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts.push("'" + key + "': " + context);
    }
    if (type) {
      hash.types.push("'" + key + "': " + type);
    }
    hash.values.push("'" + key + "': (" + value + ")");
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function(environment, options) {
    var children = environment.children, child, compiler;

    for(var i=0, l=children.length; i<l; i++) {
      child = children[i];
      compiler = new this.compiler();

      var index = this.matchExistingProgram(child);

      if (index == null) {
        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
        index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context);
        this.context.environments[index] = child;
      } else {
        child.index = index;
        child.name = 'program' + index;
      }
    }
  },
  matchExistingProgram: function(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return i;
      }
    }
  },

  programExpression: function(guid) {
    this.context.aliases.self = "this";

    if(guid == null) {
      return "self.noop";
    }

    var child = this.environment.children[guid],
        depths = child.depths.list, depth;

    var programParams = [child.index, child.name, "data"];

    for(var i=0, l = depths.length; i<l; i++) {
      depth = depths[i];

      if(depth === 1) { programParams.push("depth0"); }
      else { programParams.push("depth" + (depth - 1)); }
    }

    return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
  },

  register: function(name, val) {
    this.useRegister(name);
    this.source.push(name + " = " + val + ";");
  },

  useRegister: function(name) {
    if(!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  pushStackLiteral: function(item) {
    return this.push(new Literal(item));
  },

  pushStack: function(item) {
    this.flushInline();

    var stack = this.incrStack();
    if (item) {
      this.source.push(stack + " = " + item + ";");
    }
    this.compileStack.push(stack);
    return stack;
  },

  replaceStack: function(callback) {
    var prefix = '',
        inline = this.isInline(),
        stack;

    // If we are currently inline then we want to merge the inline statement into the
    // replacement statement via ','
    if (inline) {
      var top = this.popStack(true);

      if (top instanceof Literal) {
        // Literals do not need to be inlined
        stack = top.value;
      } else {
        // Get or create the current stack name for use by the inline
        var name = this.stackSlot ? this.topStackName() : this.incrStack();

        prefix = '(' + this.push(name) + ' = ' + top + '),';
        stack = this.topStack();
      }
    } else {
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (inline) {
      if (this.inlineStack.length || this.compileStack.length) {
        this.popStack();
      }
      this.push('(' + prefix + item + ')');
    } else {
      // Prevent modification of the context depth variable. Through replaceStack
      if (!/^stack/.test(stack)) {
        stack = this.nextStack();
      }

      this.source.push(stack + " = (" + prefix + item + ");");
    }
    return stack;
  },

  nextStack: function() {
    return this.pushStack();
  },

  incrStack: function() {
    this.stackSlot++;
    if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
    return this.topStackName();
  },
  topStackName: function() {
    return "stack" + this.stackSlot;
  },
  flushInline: function() {
    var inlineStack = this.inlineStack;
    if (inlineStack.length) {
      this.inlineStack = [];
      for (var i = 0, len = inlineStack.length; i < len; i++) {
        var entry = inlineStack[i];
        if (entry instanceof Literal) {
          this.compileStack.push(entry);
        } else {
          this.pushStack(entry);
        }
      }
    }
  },
  isInline: function() {
    return this.inlineStack.length;
  },

  popStack: function(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      if (!inline) {
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function(wrapped) {
    var stack = (this.isInline() ? this.inlineStack : this.compileStack),
        item = stack[stack.length - 1];

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      return item;
    }
  },

  quotedString: function(str) {
    return '"' + str
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
      .replace(/\u2029/g, '\\u2029') + '"';
  },

  setupHelper: function(paramSize, name, missingParams) {
    var params = [];
    this.setupParams(paramSize, params, missingParams);
    var foundHelper = this.nameLookup('helpers', name, 'helper');

    return {
      params: params,
      name: foundHelper,
      callParams: ["depth0"].concat(params).join(", "),
      helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
    };
  },

  // the params and contexts arguments are passed in arrays
  // to fill in
  setupParams: function(paramSize, params, useRegister) {
    var options = [], contexts = [], types = [], param, inverse, program;

    options.push("hash:" + this.popStack());

    inverse = this.popStack();
    program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      if (!program) {
        this.context.aliases.self = "this";
        program = "self.noop";
      }

      if (!inverse) {
       this.context.aliases.self = "this";
        inverse = "self.noop";
      }

      options.push("inverse:" + inverse);
      options.push("fn:" + program);
    }

    for(var i=0; i<paramSize; i++) {
      param = this.popStack();
      params.push(param);

      if(this.options.stringParams) {
        types.push(this.popStack());
        contexts.push(this.popStack());
      }
    }

    if (this.options.stringParams) {
      options.push("contexts:[" + contexts.join(",") + "]");
      options.push("types:[" + types.join(",") + "]");
      options.push("hashContexts:hashContexts");
      options.push("hashTypes:hashTypes");
    }

    if(this.options.data) {
      options.push("data:data");
    }

    options = "{" + options.join(",") + "}";
    if (useRegister) {
      this.register('options', options);
      params.push('options');
    } else {
      params.push(options);
    }
    return params.join(", ");
  }
};

var reservedWords = (
  "break else new var" +
  " case finally return void" +
  " catch for switch while" +
  " continue function this with" +
  " default if throw" +
  " delete in try" +
  " do instanceof typeof" +
  " abstract enum int short" +
  " boolean export interface static" +
  " byte extends long super" +
  " char final native synchronized" +
  " class float package throws" +
  " const goto private transient" +
  " debugger implements protected volatile" +
  " double import public let yield"
).split(" ");

var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

for(var i=0, l=reservedWords.length; i<l; i++) {
  compilerWords[reservedWords[i]] = true;
}

JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
  if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
    return true;
  }
  return false;
};
;
// lib/handlebars/runtime.js

Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          programWrapper = Handlebars.VM.program(i, fn, data);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = Handlebars.VM.program(i, fn);
        }
        return programWrapper;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common) {
          ret = {};
          Handlebars.Utils.extend(ret, common);
          Handlebars.Utils.extend(ret, param);
        }
        return ret;
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop,
      compilerInfo: null
    };

    return function(context, options) {
      options = options || {};
      var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);

      var compilerInfo = container.compilerInfo || [],
          compilerRevision = compilerInfo[0] || 1,
          currentRevision = Handlebars.COMPILER_REVISION;

      if (compilerRevision !== currentRevision) {
        if (compilerRevision < currentRevision) {
          var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
              compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
          throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
                "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
        } else {
          // Use the embedded version info since the runtime doesn't know about this revision yet
          throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
                "Please update your runtime to a newer version ("+compilerInfo[1]+").";
        }
      }

      return result;
    };
  },

  programWithDepth: function(i, fn, data /*, $depth */) {
    var args = Array.prototype.slice.call(arguments, 3);

    var program = function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
    program.program = i;
    program.depth = args.length;
    return program;
  },
  program: function(i, fn, data) {
    var program = function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
    program.program = i;
    program.depth = 0;
    return program;
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;
// lib/handlebars/browser-suffix.js
  if (typeof module === 'object' && module.exports) {
    // CommonJS
    module.exports = Handlebars;

  } else if (typeof define === "function" && define.amd) {
    // AMD modules
    define(function() { return Handlebars; });

  } else {
    // other, i.e. browser
    this.Handlebars = Handlebars;
  }
}).call(this);
;

// This file contains YUI-specific wrapper code and overrides for the
// handlebars-base module.

Handlebars.VERSION += '-yui';

/**
Registers a helper function that will be made available to all templates.

Helper functions receive the current template context as the `this` object, and
can also receive arguments passed by the template.

@example

    Y.Handlebars.registerHelper('linkify', function () {
        return '<a href="' + Y.Escape.html(this.url) + '">' +
            Y.Escape.html(this.text) + '</a>';
    });

    var source = '<ul>{{#links}}<li>{{{linkify}}}</li>{{/links}}</ul>';

    Y.Handlebars.render(source, {
        links: [
            {url: '/foo', text: 'Foo'},
            {url: '/bar', text: 'Bar'},
            {url: '/baz', text: 'Baz'}
        ]
    });

@method registerHelper
@param {String} name Name of this helper.
@param {Function} fn Helper function.
@param {Boolean} [inverse=false] If `true`, this helper will be considered an
    "inverse" helper, like "unless". This means it will only be called if the
    expression given in the template evaluates to a false or empty value.
*/

/**
Registers a partial that will be made available to all templates.

A partial is another template that can be used to render part of a larger
template. For example, a website with a common header and footer across all its
pages might use a template for each page, which would call shared partials to
render the headers and footers.

Partials may be specified as uncompiled template strings or as compiled template
functions.

@example

    Y.Handlebars.registerPartial('header', '<h1>{{title}}</h1>');
    Y.Handlebars.registerPartial('footer', 'Copyright (c) 2011 by Me.');

    var source = '{{> header}} <p>Mustaches are awesome!</p> {{> footer}}';

    Y.Handlebars.render(source, {title: 'My Page About Mustaches'});

@method registerPartial
@param {String} name Name of this partial.
@param {Function|String} partial Template string or compiled template function.
*/

/**
Converts a precompiled template into a renderable template function.

@example

    <script src="precompiled-template.js"></script>
    <script>
    YUI().use('handlebars-base', function (Y) {
        // Convert the precompiled template function into a renderable template
        // function.
        var template = Y.Handlebars.template(precompiledTemplate);

        // Render it.
        template({pie: 'Pumpkin'});
    });
    </script>

@method template
@param {Function} template Precompiled Handlebars template function.
@return {Function} Compiled template function.
*/

// Alias for Y.Handlebars.template(), used by Y.Template.
Handlebars.revive = Handlebars.template;

// Make Y.Template.Handlebars an alias for Y.Handlebars.
Y.namespace('Template').Handlebars = Handlebars;


}, '3.10.1', {"requires": []});



// ----------------------------------------------------------------------------------------
// Registration
// ----------------------------------------------------------------------------------------

SQUARESPACE_ROLLUPS.push('squarespace-common');
